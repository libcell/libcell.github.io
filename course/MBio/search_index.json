[["index.html", "rstudio4edu A Handbook for Teaching and Learning with R and RStudio Preface Why rstudio4edu? Philosophy Who are you? What is in this handbook? What did we leave out? Who are we? Contributing", " rstudio4edu A Handbook for Teaching and Learning with R and RStudio Desirée De Leon1 Alison Hill2 2022-08-26 Preface Welcome! If you do educational work and use tools in the data science ecosystem, you may have seen a great tutorial made with R Markdown, or attended a streamlined workshop where learning the content was front-and-center and all the headaches around installation and setup were absent. Or maybe you have stumbled upon a polished workshop, book, or course website and thought: “I want to make that too!” So that is what we have set out to do: make a handbook that will fill in those gaps for educators to create educational materials that engage learners, inspire other educators, and most importantly save you time and make it more fun for you to teach. This handbook was inspired by the Handbook for Teaching and Learning with Jupyter- a book written by and for educators who teach data science. It is a thoughtful and inspiring resource for all educators, with a focus on the Python ecosystem. We aimed to create a similar resource for educators working with the R and RStudio ecosystem. If you find our materials useful, give us a shout-out on Twitter using #rstudio4edu. We hope you do! If you have ideas for ways to improve them, please consider contributing to the project. Why rstudio4edu? Educators from a range of fields use R and RStudio in the “classroom.” But the definition of the “classroom” is changing. The classroom can be an actual one that includes real-time interaction with learners, as in school and university settings. Or the classroom can be a virtual one, where learners interact asynchronously with educational materials. For example, learners on their own time can peruse an online tutorial, or they can attend a remote webinar-style workshop where real-time interactions simply aren’t part of the education experience. Finally, there are temporary classrooms- those that pop up like food truck pods. Learners pick a truck to decide what they want to learn, they get served up some educational materials and enjoy it in real-time with an instructor and other learners. The hope is that they pack up some knowledge “to go boxes” that they will put into practice when the instructor is long gone. We know that [this is the case for] people in fields like ecology, sociology, digital history, psychology, biology, genetics, neuroscience, pharmacology, and bioinformatics for education- not just those who teach data science or statistics. Other answers to “why”: Better aesthetics, better engagement (draw attention vs distract) Build up modern educator toolbox with relevant materials (in general, be a bad-ass educator :) Empowering to own your content, and therefore own your learners’ experience Philosophy Paraphrasing from Jenny Bryan and Jim Hester’s “What They Forgot to Teach You About R”: “We focus on building holistic and project-oriented workflows that address the most common sources of friction in creating educational materials, outside of doing the teaching itself.” Just in time learning: we aimed to show educators how to use tools that you need, as you need them. We encourage you to take an “à la carte” approach to this handbook- skim the table of contents, take what you need when you need it, and skip what you don’t need (until you decide that you do!). Eat cake first: we try to show you the quickest, simplest way to do something you need to do right off the bat. Some of the time, there is a better but more complex workflow that you could adopt later, so we have tried to point you in that direction too. But in general, we aim for starting with “good enough” practices instead of “perfect.” Get your hands dirty: we want you to be able to make everything we show you. So we’ve built a lot of different ways for you to get your hands dirty right away, like demo repositories you can clone and deploy “out of the box”, templates you can customize, and lots of example content. We hope these will inspire you to experiment, play, and create. Who are you? Who did we make this handbook for? We envision that this handbook is for all end-user teachers: teaching may or may not be part of your formal job description, you may not have formal training in how to teach, and you may teach in a formal classroom setting, but you may also teach virtually (via webinars or online tutorials), or perhaps you teach in short but intense bursts like in-person workshops and small-group trainings. In short, if you are a person who needs or wants to create educational materials using R / RStudio, then we hope you’ll find this handbook useful- it is definitely for you. Lucy: Lucy is a professor of neuropsychology who also teaches stats to first year graduate students. She is comfortable using R in her research but experiences imposter syndrome when in conversation with colleagues who have had formal training in computer science. She’d like to learn how to use R in her course in a way that won’t overcomplicate things for students and will maximize instruction time (and minimize set up time). Lucy is juggling half a dozen responsibilities at work, and doesn’t have a lot of time to learn or test out many new systems for delivering her teaching content. Willis: Willis Workshopper is a senior data scientist and is responsible for training his (remote) company’s team and occasionally leads in-person workshops. Willis considers himself an experienced programmer. He uses R all the time for analysis, but needs a platform that will allow him to create and organize one-time training materials– he’d like all materials to be easily implemented by users in both remote (work team) and in-person (workshop) contexts. He can be particular about his material’s aesthetics and layout and wants the ability to customize everything. Ona: Ona heads a team that assists researchers and organizations design and track their project progress. She needs to train up her team of employess who have different R skill levels (sometimes none). Ona knows R but would not call herself a programmer, and she essentially knows nothing about web development. She has been emailing R files back-and-forth with team members as a means of sharing results and analysis, but she knows there has to be a better way to do this. When she tries to dive into resources to learn once and for all how to create a better system, she feels overwhelmed and lost. Additionally, her team is limited in budget and time and does not have have the energy to absorb longform manuals. What is in this handbook? Some high-level organizational highlights, like: The first section “For all educators” includes blah. The next section on “Creating educational content” goes deeper into the R Markdown package, including complementary packages, tools, and worflows, for making new educational content using R and RStudio. In “Creating educational projects”, we provide a roadmap for navigating some of the R Markdown extension packages that are designed for projects with collections of R Markdown documents (as opposed to a single document). We offer some perspectives specific to educators to help you decide which projects work when. Note: we provide step-by-step guidance for how to actually use these packages in the “Cookbooks” sections later in the book. … The last sections of the book are our cookbooks for educators. Although learning materials for many of these recipes already exist in various palaces, they are often difficult to discover and not designed with educators in mind. We aimed to highlight the most useful features, using input from R and RStudio educators with years of teaching experience. Finally, we want to point out a few pragmatic features (could include a diagram here to help aid usability?): For every chapter you can download the .Rmd source file that created it by clicking on the download button in the upper toolbar. The button to the left allows you to edit (say more about how this works). Clicking on the GitHub icon on the far right takes you to the source repository for this book. How to search within this book: https://github.com/rstudio/bookdown/issues/216. You can click on the see the instructions. What did we leave out? on purpose Shiny Pedagogy- we think this is very well covered in other resources. In particular, we recommend Teaching Tech Together by Greg Wilson, as well as his “What to Read Instead” book recommendations. Software Carpentry also has a very popular and effective two-day instructor training workshop that we highly recommend. https://openlearning.mit.edu/mit-faculty/research-based-learning-findings Who are we? This Contributing I love this resource: https://edav.info/contribute.html Through the book, we highlight specific ways that RStudio can expedite your package development workflow, in specially formatted sections like this. RStudio exposes load_all() in the Build menu, in the Build pane via More &gt; Load All, and in keyboard shortcuts Ctrl + Shift + L (Windows &amp; Linux) or Cmd + Shift + L (macOS). Watch out for “gotchas” along the way. We try our best to point out the tricky bits of a workflow. In tip boxes like this one, we’ll point out design tips, to help you keep your page looking looking ✨fresh ✨. These tips highlight advice and tricks from community members. RStudio, https://desiree.rbind.io/↩︎ RStudio, https://alison.rbind.io/↩︎ "],["edu-stack.html", "Chapter 1 Infrastructure 1.1 R 1.2 RStudio 1.3 GitHub 1.4 Communication platform", " Chapter 1 Infrastructure 1.1 R Recommended: don’t install R via Homebrew. If you insist on using Homebrew, do not use 1.2 RStudio 1.2.1 The RStudio IDE You can use only R, but using RStudio can save you a lot of headache and a lot of time! Best analogy ever: https://moderndive.com/2-getting-started.html#r-rstudio https://happygitwithr.com/install-r-rstudio.html 1.2.2 RStudio Projects 1.2.3 RStudio.cloud 1.2.4 Pro Products https://www.rstudio.com/pricing/academic-pricing/ 1.3 GitHub 1.3.1 GitHub for you Why educators should use version control, high-level thoughts 1.3.2 GitHub for them Whether or not you need your students to learn GitHub is a very personal decision. While we strongly believe that educators should use GitHub behind the scenes, whether you should also put GitHub center stage for your learners requires some additional considerations, like: Do your learners need to learn and use GitHub? Are they going to be served well if you choose to include it? Do you have the time and resources to teach GitHub? Sometimes this decision can come down to how long your learners will be with you. Resources for integrating GitHub for learners; not our primary focus here, outsource to: Make sure to mention Mine’s ghclass package Happy Git with R for yourself and your students GitHub Classroom is also a good option to consider https://happygitwithr.com/classroom-overview.html https://r4ds.had.co.nz/workflow-projects.html https://docs.google.com/document/d/132hdA_2U8-thkF3yd_xUUsBFviQGOL-_zpaEZRSwjro/edit?usp=sharing 1.4 Communication platform Options: Slack (recommended for longer term teaching, like courses), gitter (recommended for workshops) "],["data.html", "Chapter 2 Data 2.1 Data from R packages 2.2 Data stored on GitHub 2.3 Data from other sources", " Chapter 2 Data 2.1 Data from R packages good clean data packages, ideal for teaching beginner to intermediate fivethirtyeight gapminder babynames https://github.com/mine-cetinkaya-rundel/ukbabynames https://docs.ropensci.org/ozbabynames/ not a package but https://github.com/rfordatascience/tidytuesday for tidying: https://github.com/jennybc/lotr Most raw data from gapminder: https://www.gapminder.org/data/ https://www.jvcasillas.com/untidydata/ https://simplystatistics.org/2018/01/22/the-dslabs-package-provides-datasets-for-teaching-data-science/ https://github.com/rstudio-education/dsbox https://kieranhealy.org/blog/archives/2018/12/12/teaching-and-learning-materials-for-data-visualization/ ISLR data resample data 2.2 Data stored on GitHub Tip: make a short link to the “raw” version of the data you uploaded to GitHub 2.3 Data from other sources tips/tricks for logistics (use_course, etc) see data package for your own "],["lessons.html", "Chapter 3 Lessons 3.1 A very brief history 3.2 A very brief pep-talk 3.3 Literate lesson-making 3.4 Make it work 3.5 Literate lesson-delivery 3.6 Literate lesson-sharing 3.7 Sample Rmds 3.8 Sharing 3.9 Lesson delivery &amp; sharing", " Chapter 3 Lessons Lessons lay at the heart of your teaching. But between where you start and where your learners end up, there is a lot of work. Foremost in your head at the start may be the delivery method, like whether you are preparing a workshop, a self-paced online tutorial, or an academic course. We want to offer you a different mindset, and that is to mentally separate your content from your delivery, i.e., what content is delivered is distinct from how it will be delivered. But first, a very brief history of “literate programming” (and why you are a literate programmer). 3.1 A very brief history The concept of “literate programming” was originally introduced by Donald Knuth in 1984. In a nutshell, Knuth envisioned a new programming paradigm where computer scientists focus on weaving code together with text as documentation, with the aim of creating software programs as “works of literature.” Knuth coined this new paradigm the WEB system, which you have probably never heard of! But lucky for all of us, Knuth took the important steps to write down and publish his vision for the WEB. By doing that, he inspired software developers to not only change their own mindset, but to change their toolsets too: they created tools to enable others to write literate programs. Then, some developers created tools to enable others to write better literate programs; they realized that it would make sense for users to write their narratives in a markup language made for authoring (such as Markdown or \\(LaTeX\\)). This advance made it easier and ultimately natural to use real words in full sentences, instead of just adding comments to code. Now, take those mindset-changing tools, make them actually accessible to people other than software developers, and that is where we sit today. You are reading a book that was created by non-software-developers who wrote text in Markdown combined with R code and: bound together as a collection using the bookdown package, “knitted” in the comfort of our respective RStudio IDEs, shared on GitHub, built by Travis-CI, and published on GitHub Pages. The toolchain may sound complicated at first, but this wasn’t our first rodeo. We worked up to using and integrating all these tools, building up from the basics of literate programming using tools we already knew. Most importantly, each link in our toolchain has improved our collective quality of life as collaborators: We can share our ideas better with each other because we can see each others’ ideas easier. We can share our ideas better with each other because we can share our code easier. We can share our ideas better with everyone else because we can share our website easier. Even if you only have one collaborator and that person is yourself, we think these payoffs will apply in your life as an educator. Certainly, the idea of applying literate programming principles to teaching programming is not new. Lots of well-respected educators have written But, we think that opening up literate programming toolkits for educators with specific use cases may be new- in our experience, the actual application of using literate programming tools. The most fully-featured tool for literate programming in the R ecosystem is R Markdown. But, this is not a chapter about R Markdown (see the cookbooks later for those). This is a chapter to get you thinking about lesson development workflows, and how to design your own. Our goal is to arm you with information and intellectual fuel to want to apply literate programming principles to lesson-making, from lesson design to delivery. “There is no telling what will happen if lots of other people catch WEB fever and start foisting their creations on each other.” — Donald E. Knuth, Literate Programming, 1984 (edited by the authors) 3.2 A very brief pep-talk You may not need to hear this, because you may be reading this and already using R, RStudio, GitHub, and other advanced tooling for education. If so, kudos to you! You have grit and it shows 🎉. But, if you are not this kind of educator (yet!), please read on… but we encourage educators to step back for a moment, and think about the things that are hard about your current teaching workflow, and to reasonably weigh the pros and cons of adopting new tools and workflows. Let’s start with a few “truths”: Figure 3.1: Still life of a sad course Figure 3.2: Still life of a happier course Educators create a lot of files: outlines, slides, assignments, activities, scripts, data, plots, images, screenshots, your 2015 taxes (kidding, sort of). The natural consequence of not having a workflow for organizing these files is “course chaos”, otherwise known as content that is hard to update, share, and deliver (see Figure 3.1). Contrast this with a happier setup (Figure 3.2), where you can find, edit, and remix/reuse/recycle your own code and words easily. The file structure pictured is from an R Markdown website, which leaves a lot to be desired in terms of file organization, but is often “good enough” to get the job done (and to improve the educator’s quality of life dramatically). You are more than your teaching materials. You may feel like “I can’t simply put all my materials online! Will my students still come to class? Will my employer take them and leave me behind in the dust? Will other people steal my ideas?” Baby steps You don’t need to use all the tools. But, be open to when opportunities arise that challenge your current skillset and provide an “excuse” to level up your skills. 3.3 Literate lesson-making “Programming Teaching is a very personal activity, so I can’t be certain that what has worked for me will work for everybody.” — Donald E. Knuth, Literate Programming, 1984 (edited by the authors) Permission to educators who teach R or teach with R to consider themselves literate programmers. You are programming a lesson, however you end up delivering it. You could deliver a lesson any number of ways, but you are a literate programmer. For any given lesson, here are some “inputs” that you need to design around: Audience: who are your learners? Time: how long do you have with the learners? If you won’t meet them in person (i.e., you are designing a ), this is trickier- you need to think about how long you can reasonably have their attention for. Scope: what are your learning objectives? Sequencing: in what order can you cover the things you need to meet your learners’ goals? Medium: how will you deliver your lesson? If you would like pedagogical advice for how to plug in these inputs, and get a lesson out, there are many ways to get there but we recommend following Greg Wilson’s advice for A Lesson Design Process, from his book Teaching Tech Together. 3.4 Make it work 3.4.1 Make it work for you You know the rule for putting your own oxygen mask on first, before helping others? Same goes for lesson development. Whatever tool you choose to use, it should be one that works for you, first and foremost. If you hate working with X tool every time you open it, you’ll hate working on your content period. And that is not a good place to be. 3.4.2 Make it work for them 3.5 Literate lesson-delivery involves letting your learners easily access, manipulate, and otherwise “play with” your learning content. You should think about when and how much play you want to encourage… 3.6 Literate lesson-sharing put it all on github, yes reasons: for you- easier to work on for you- lets you see holes for them- lets them see your vision for them- can reduce reliance on actual vision for us- lets the community learn from you, even if they weren’t the ones you designed the content for for future you- lets you build a network, prof development 3.7 Sample Rmds MoMA lab NHANES workshop 3.8 Sharing 3.8.1 Share source code first, know the knitr code chunk options, and remember about code folding. GitHub to view source (but not very readable, see next section) code download 3.8.2 Share readable output .R -&gt; GitHub #&#39; --- #&#39; output: github_document #&#39; --- https://github.com/apreshill/teachthat/blob/master/gather/make-data-to-gather.R What if you just want to keep things really simple? Try github_document as the output of a regular R script. This will create an .md version of whatever code and output you have, and it will be rendered in a nice, readable way without you having to mess with GitHub pages or HTML directly, etc. See an example of what I mean below: Start with .R script… and …end with a GitHub document Rmd -&gt; GitHub https://rmarkdown.rstudio.com/docs/reference/github_document.html https://github.com/jennybc/lotr-tidy GitHub + ghpages Can also export to pdf as attachments 3.9 Lesson delivery &amp; sharing When it comes to presenting your lesson, here are some things to consider and tool recommendations for different lesson delivery methods. 3.9.1 Live coding Start with R Markdown Disable all custom RStudio color themes and fonts Keycastr In case of catastrophe, test out Loom 3.9.2 Screencast getkap, Quicktime Start with R Markdown Keycastr web hosting 3.9.3 Online tutorials web hosting html widgets like plotly, highchartr, etc. learnr tutorials 3.9.4 Remote workshops &amp; webinars Zoom with break-out chat rooms Google docs "],["organization.html", "Chapter 4 Organization Introduction 4.1 For Courses 4.2 For Workshops 4.3 For Online Tutorials 4.4 Types of R Markdown collections 4.5 Choose your collections wisely 4.6 Meta 4.7 Showtime", " Chapter 4 Organization Introduction Can just deploy single Rmds to website via GitHub pages- easiest Can use same strategy for rendering multiple files. But you probably want a way to bundle up your collection… You need a project to house your collections of multiple Rmd documents 4.1 For Courses Strongly Recommend Syllabus: A place to provide the overview of your course, its goals, its policies (e.g. grading), and general logistics. Schedule: What is being taught when. You can also link relevant materials to this schedule (e.g. slides or readings for the day). Licensing info: Your materials can be discovered by anyone. Have a statement or badge somewhere on your site that lets people know how they can cite, use, or remix your work. Learn more about this in our Licensing section of this book. Nice to have Assignments, Materials, Labs, Readings : Create a page (or pages) dedicated to housing more detailed descriptions of specific course content. The number of individual pages you’ll want to create for this will likely depend a lot of which tool you use for your course site. Chat: Consider linking to a slack channel or a gitter account that can serve as a forum. Grades dashboard: See an example of what this looks like here. Links to resources: The class text, Rstudio cloud, etc. Link to GitHub repo: Make it easy for your learners to find course source materials. README.md: Not sure what to put in your README? See this. Code of Conduct: Here are some good example of course sites that you might pull some inspiration from: Carl Boettiger’s course sites Andrew Heiss’s course sites Mine Çetinkaya-Rundel’s STA-199 course site 4.2 For Workshops For a workshop, it’s better to keep the site organization simpler than a course’s. Your learners probably won’t be interacting with a workshop site long term, so no need to have complex menu or tab structures (with a short period of time, this can potentially make certain content feel “hidden” and users will be less likely to make use of it). Strongly Recommend General Information: “Where”, “When”, requirements (i.e. “bring a laptop, install this software”), and accesibility info. Abstract: Summarize your workshop content. Learning Objectives: Specifically, what should learners be able to do once they’ve completed your workshop? Schedule: Topics and timetables. When are the breaks? Link to GitHub repo: Make it easy for your learners to find workshop source materials. README.md: Not sure what to put in your README? See this. Licensing info: Your materials can be discovered by anyone. Have a statement or badge somewhere on your site that lets people know how they can cite, use, or remix your work. Learn more about this in our Licensing section of this book. Nice to have * Registration Info: How can people sign up? * Access to Lesson Materials: via link, download, or package. * Pre-Work/ Setup info: what packages to install. * Chat: Using something like gitter. * Code of Conduct: Set the ground rules for everyone and also think about what your plan is should things go South. * Having the schedule times determined by a script: ::my eyes fill with hearts:: Here are some examples of workshop sites to give you a bit of inspiration: Software Carpentry Template anglea-li/sotmus-r: Simple, clean layout for workshop info. It’s only a README.md! https://mine-cetinkaya-rundel.github.io/teach-data-science/ https://github.com/carpentries/workshop-template https://jennybc.github.io/wtf-2019-rsc/ https://github.com/rstudio-education/deep-teaching/blob/master/course-planning/outline.Rmd 4.3 For Online Tutorials Online tutorials come in many shapes and sizes, so there’s no one core element that we think every online tutorial should have. But since all online tutorials will lack the opportunity for face-to-face interaction with your learners, there are a couple things that you can include to make your site feel more personable and engaging: Content About page: make sure your site has a place where you can clearly introduce yourself, your tutorial goals, and build credibility. Licensing info: Your materials can be discovered by anyone. Have a statement or badge somewhere on your site that lets people know how they can cite, use, or remix your work. Learn more about this in our Licensing section of this book. Interaction Plotly: Teaching concepts that involve plotting? Try using plotly to make your ggplots interactive. iframe tags: &lt;iframe&gt; tags allow you to create an embedded window of a website inside of your own website. 4.4 Types of R Markdown collections (why, how, pros and cons of each) Distill: Pros: looks clean and classy by default. Cons: Certain features that would otherwise be in an RMarkdown site that are useful for teaching are not available (e.g. code_download, code_folding). But built-in ways to presenting technical content (equations, references, and cross-referencing less effortful). R Markdown sites: If you’re new to the R Markdown world (and you want more than a single page or README), then starting with an R Markdown site is the most straightforward. For beginners, R Markdown sites have a simple organization that will be the least overwhelming to navigate: there are not that many pieces you need to put together to create a basic site. There’s some customization options built-in, which is nice–and if that’s not enough, then you can most likely still make your vision a reality by adding some HTML and CSS. There are also a ton online resources for R Markdown sites in case you get stuck. bookdown: Pros: A super long table of contents won’t look unwieldy here. Cons: A bookdown book will always kind of look like a bookdown book. blogdown: Pros: Using a theme can make your site look very structurally different from the other R Markdown collection sites. Many different themes (but we recommend sticking to the Academic theme) 4.5 Choose your collections wisely pros/cons of each of above, specifically from educational standpoint. Distill: Pros: You could use Distill to build your own site as an educator, but perhaps the biggest pro to familiarizing yourself with Distill sites (or site templates) is so that you can have your students create Distill documents of their own for turning in assignments, reports, etc. with technical content. For example, students will be able to produce reports with compiled references and annotations using all built-in options (no CSS or HTML needed!). Also, project directory structure can get pretty messy– Distill has the same problem as R Markdown sites (see R Markdown). R Markdown: This is probably best for Workshops, but not courses. With a workshop, you won’t need too many tabs or pages, so your directory structure won’t be unruly, and you’ll be able to get a Workshop site up and running without having to do much setup. But once you’re interested in making a course site, you’re probably going to want to make a lot more .Rmd pages (e.g. maybe you want every project or assignment to have its own page–all these pages will add up!). There’s no good way to organize many pages in subdirectories and have them be knit to the docs folder with GitHub pages. It gets messy fast to have all these loose .Rmd docs floating in your project folder, so that is the biggest con. Bookdown: Blogdown: 4.6 Meta Consider sharing advice re: meta content needed (like links to all the things, schedule) 4.7 Showtime Publish/deploy (general advice) "],["how-to-use-the-cookbooks.html", "How to use the cookbooks", " How to use the cookbooks Make a data package Make an R Markdown template Make an R Studio project template Make an interactive tutorial Make an R Markdown site Make a Distill site Make a book Make a Blogdown site The flowchart below is just a sketch/concept of something similar that might be useful here (or perhaps much earlier on) in order to help folks decide what cookbook they should use. "],["intro-doc.html", "Introduction What are we making?", " Introduction R Markdown is a powerful tool that seems relatively simple when you first start using R: you focus mainly on your words (written in Markdown) and your code (written in R), which seem basic enough! But…then you start trying to use R Markdown to create educational content that will be consumed by learners. It is easy to become overwhelmed by the number of knobs you can turn. You may even feel like you are stumbling upon hidden knobs and secret passages that you wish you had known about earlier (or at least, we did). Our aim in this section is to give you some of the tools and vocabulary for using R Markdown as an educator. There are a number of tips and tricks that can improve “quality of life” when working with R Markdown, both for yourself and for your learners. And we will share some of our favorite “bells and whistles” that can improve the accessibility of the lessons you make. In the following chapters, we distinguish content from presentation, i.e., what is delivered is distinct from how it will be delivered. We called this more general section “R Markdown Lessons”, but our advice will focus on helping you use R Markdown to create different types of effective lessons, like: how-tos (a step-by-step recipe for a specific problem; light on narrative and teaching “why”) floating TOC (numbered?) code download download the data tutorials (a narrative that helps learners build a mental model + exercises to strengthen that mental model) add to this, code folding? bootstrap q/a boxes explanations (a tutorial, but without exercises) worked examples (like a case study; exercises may be implicit or non-existent) worksheets (a fill-in-the-blank template with a specific structure + prompts for the learner to fill in; none to minimal narrative) You could deliver any of these, or a combination of these, via any of the following delivery methods: workshops in-class labs books talks/lectures blog posts handouts vignettes We will leave the lesson design and the determination of the delivery method up to you as the educator. As Greg Wilson writes in “Teaching Tech Together”: “You may give your learners both written lessons and some combination of recorded video and self-paced exercises, but if you are going to teach in person you must offer something different from (and hopefully better than) either of them.” –Greg Wilson You can read more of Greg’s advice for teaching in person and teaching online. Using R Markdown document templates, you can put together a streamlined static or interactive lesson for learners to engage with. You can follow along with this cookbook, or you can download the demo repositories modify as much as you’d like. 4.7.0.1 Make a document You will build a bare-bones R Markdown document from a template and publish it. We make only the most minimal changes to content and style necessary to get you a shareable link. 4.7.0.2 Make it yours You’ll personalize your document’s content here by adding your words, R code, and R output like plots to your lesson. 4.7.0.3 Caring for your document You’ll develop a workflow for editing your document, adding bells and whistles, and improving your R Markdown quality of life. 4.7.0.4 Dress it up Here, you’ll find instructions for no-fuss document customizations that leverage built-in features that do not rely on knowing, learning, or using CSS. 4.7.0.5 Make it fancier In the final chapter, you’ll learn about document customizations that require some CSS and HTML. What are we making? R Markdown is … Figure 4.1: Artwork by Allison Horst We’re about to take a single R Markdown file, knit an .html version, and publish that file online to a shareable website. The R Markdown package has a number of built-in “output formats”, which means that a single .Rmd document can be “knit” into a bunch of different output file types like HTML, PDF, and even Word documents. For educators, we strongly encourage using the default HTML output format for four reasons: Shareability- HTML output can be easily shared with links, especially if you are using GitHub. Flexibility- .Rmd files output to HTML can be organized easily into larger educational projects using R Markdown extension packages like bookdown and blogdown (see later chapters). Styleability- Each R Markdown output format has its own output styling options. The options for the HTML output format are by far the most fully featured and easily accessible, relying on no additional software installation. Customizability- All HTML output can be further customized using CSS. The bad news is that you will need to learn a bit about CSS to get there (see our crash course), but the good news is that if you are the kind of educator that needs to, for example, use a specific branded style guide that specifies colors, fonts, etc., you can make your HTML output look “on brand” with a custom CSS. We’ll deploy the single document to GitHub Pages. The rest of our cookbooks focus on websites built from collections of R Markdown documents, but for this cookbook, we’ll create one R Markdown document and publish it. But first, a little inspiration. All of the below documents were made with R Markdown, knitted to the HTML output format and published by these lovely authors so you can enjoy the lovely rendered versions with your eyeballs in your favorite internet browser: Harvard’s R graphics with ggplot2 workshop.Rmd BBC Visual and Data Journalism cookbook for R graphics.Rmd OpenCaseStudies - Health Expenditure.Rmd How to explore and manipulate a dataset from the fivethirtyeight package in R.Rmd Bioconductor for Everyone: Exploring, Analyzing, and Visualizing Large Data Sets with R.Rmd Trafford Data Lab Open Data Companion.Rmd Claus Wilke’s class worksheet on k-means clustering.Rmd Introduction to multilevel modeling using rstanarm: A tutorial for education researchers.Rmd doc_inspo &lt;- tibble::tribble( ~html_url, ~html_label, ~rmd_url, ~site_url, # rstan tutorial &quot;https://mc-stan.org/users/documentation/case-studies/tutorial_rstanarm.html&quot;, &quot;Introduction to multilevel modeling using **rstanarm**: A tutorial for education researcher&quot;, &quot;https://github.com/stan-dev/example-models/blob/master/education/tutorial_rstanarm/tutorial_rstanarm.Rmd&quot;, &quot;https://mc-stan.org/users/documentation/case-studies.html&quot; ) ## ## Attaching package: &#39;kableExtra&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## group_rows see_doc show_doc all_doc Introduction to multilevel modeling using rstanarm: A tutorial for education researcher 💻 🏠 "],["make-doc.html", "Chapter 5 Make a document 5.1 Getting set up 5.2 Make a document 5.3 A mini-orientation 5.4 Push to GitHub 5.5 Knit to HTML 5.6 Push to GitHub (again) 5.7 Make a living, breathing document! 5.8 Uplevel your workflow", " Chapter 5 Make a document The simplest way to start with R Markdown is to use the boilerplate template that ships with RStudio. But first, we need to talk about hygiene briefly. Make sure you set up a folder for this new document you are making. For now, let’s just consider that this folder will house a single R Markdown document. 5.1 Getting set up 5.1.1 Update packages The only package you need for this cookbook is rmarkdown but if you are using RStudio, you are all set! The rmarkdown package does not need to be explicitly installed or loaded here, as RStudio automatically does both when needed. However, if you haven’t updated your package recently (or ever), you can re-install it to make sure you are using the most up-to-date version from CRAN: # check package version installed packageVersion(&quot;rmarkdown&quot;) # install if update is needed install.packages(&quot;rmarkdown&quot;) At the time of publishing, we are running rmarkdown version 2.16. 5.1.2 Make a project We encourage you to start a new R project every time you start a “new” educational project. Read up on creating projects in RStudio in the R for Data Science book. For your first R Markdown document, we recommend starting by created a GitHub repository online first, then making a project in RStudio. h/t to Matt Crump: “If you’re not in a project, get in one, you’ll be happy you did later.” We recommend following the tips on Happy Git with R and starting in GitHub before switching to RStudio: Create a new repository on GitHub for your work. Do not initialize the repo with a .gitignore or a README file (we’ll add these later!). Copy the repository URL to your clipboard. Do this by clicking the green Clone or Download button. Copy the HTTPS clone URL (looks like: https://github.com/{yourname}/{yourrepo}.git). Or copy the SSH URL if you chose to set up SSH keys (looks like: git@github.com:{yourname}/{yourrepo}.git). Create a new RStudio Project via git clone. Open RStudio. Do this by clicking File &gt; New Project &gt; Version Control&gt; Git. Paste the copied URL. Be intentional about where you tell RStudio to create this new Project. Click Create Project. Follow these instructions from Happy Git with R to start with a new repo on GitLab or Bitbucket, instead of GitHub. If you have zero interest in publishing a single R Markdown document, you can skip the GitHub step and jump to the next. If you would like to make a project from an existing folder, you have two options. Go to File &gt; New Project &gt; Existing Directory in RStudio, or from your R console run: install.package(usethis) # once per work station usethis::create_project() # once per project 5.1.3 Get to know Markdown If this will be your first foray into R Markdown territory, we strongly encourage you to take 10 minutes to do an interactive Markdown tutorial. Doing this will save you so many headaches in the future! It will answer all kinds of burning questions, like how to insert pretty images like Figure 5.1. Figure 5.1: Artwork by Allison Horst 5.2 Make a document In your RStudio IDE from in your new project, do this: File &gt; New File &gt; R Markdown Figure 5.2: Using the R Markdown template in RStudio In the window that pops up (see Figure 5.3), do the following: Go ahead and give your document an informative title. This will not be the filename of your new .Rmd though- go ahead and use spaces, colons, any punctuation you want. You can enter your name as the author, but you can also enter it later too, and leave it blank for now. Keep the default output format as HTML. Click OK. Figure 5.3: File &gt; New File &gt; R Markdown   You should now be looking at a freshly-baked R Markdown document template like Figure 5.4. But before you can enjoy it, you need to save it. And to save it, you need to name it because it is currently named Untitled1.Rmd. Go ahead and name the file, leaving out any spaces, special characters, and punctuation (I named mine workshop-outline.Rmd), then save. Figure 5.4: R Markdown, straight out of the project oven Naming things is hard! Here is a whole slide deck about it from Jenny Bryan. 5.3 A mini-orientation If this is your first R Markdown file, we strongly suggest that you read the R Markdown chapter in the R for Data Science book. 5.4 Push to GitHub Let’s get this document pushed up to our remote repository on GitHub. Do the following from RStudio: Click Git in the same RStudio pane that also contains the Environment tab. Check the box(es) under the “Staged” column and click Commit. Add a commit message like “initial commit” and then click Push. 5.5 Knit to HTML We are ready to knit for the first time now. Get excited. Click on the 🧶 Knit button in RStudio. You should see a preview of your HTML document in the right pane. Figure 5.5: Knit to HTML In your RStudio viewer pane, find the “Show in New Window” button and click on it to open your previewed document in a real browser window. The RStudio viewer can sometimes be misleading, as well as being TEENY. 5.6 Push to GitHub (again) Let’s get this new document (and its knitted sibling) pushed up to our remote repository on GitHub. If you want your page to have the most recent updates you’ve made, then you always will need to knit before pushing to GitHub. Go ahead and stage all your changed files, commit, and push to GitHub. Now let’s publish the page. 5.7 Make a living, breathing document! The last step is to go online to the GitHub website and tell it where to find our website-ready doc (i.e., the knitted .html file): Back on GitHub, click the Settings tab of your project repository. Scroll down until you get to “GitHub Pages” and select “master branch/docs folder”. (This is why we had to set up output_dir: docs in our site.yml file previously. If your file doesn’t end up in the docs/ folder, GitHub pages won’t find it.) Congratulations! A url is generated–this is your website address. You can share it, tweet it, send it to your mom–it’s now live! Add this url to the repo description so that it’s easy to find. If you’ll only have this one document as the main page, consider renaming it index.Rmd- then your url will be shorter and easier to remember (or at least, as easy as your repo name is to remember!). 5.8 Uplevel your workflow We followed a “GitHub first” workflow above, but if you’ll be using GitHub regularly, we recommend evolving this workflow. First, install the usethis package: install.packages(&quot;usethis&quot;) Then load it to use it: library(usethis) Now, follow the instructions from Happy Git with R for setting up a GitHub personal access token or PAT. Be sure to restart your R session after setting up the PAT, and pay close attention that your .Renviron file has at least one empty line at the bottom. Once you have a GitHub PAT set up in your .Renviron file, you can stay in the comfort of your project in the RStudio IDE to do all the GitHub things we were doing before online in your browser. Now, here is your advanced workflow for creating a new R Markdown document inside a project: Click File &gt; New Project &gt; New Directory &gt; New Project (yes, you read that right: we said New Project twice, this is not a typo) Create a new R Markdown document from template, save and 🧶 knit. Then use your R console to run this code: use_git() use_github() # you have to have a PAT setup "],["doc-yours.html", "Chapter 6 Make it yours 6.1 Add code 6.2 Embrace Markdown 6.3 Add structure with headers 6.4 Add narrative 6.5 Add space", " Chapter 6 Make it yours Now it is time to personalize your R Markdown document to make it a lesson that works for you and your learners. 6.1 Add code ```{r} # a code comment sample(c(&quot;fun&quot;, &quot;fancy&quot;), 1) ``` You can insert new code chunks into your document in the RStudio IDE by putting your cursor in your doc where you want to plant your new chunk, then clicking on the button. This adds the chunk delimiters ```{r} and ``` for you, and you place your code inside. Use # to add comments to your code. 6.2 Embrace Markdown One of the not-very-secret weapons of the most skilled R Markdown users is knowing Markdown inside and out. If you haven’t done so already, take 10 minutes to do an interactive Markdown tutorial. From within the RStudio IDE, you can also access a “Markdown Quick Reference” from the Help menu. This renders a cheatsheet-style document in your Help viewer pane, so you can try to jog your memory without leaving your project. 6.3 Add structure with headers Headers are useful for organizing your document into sections, and with Markdown formatting you can have up to 6 types/sizes of headers. Use a # symbol before the label to create a new header. # HEADER 1 ## HEADER 2 ### HEADER 3 #### HEADER 4 ##### HEADER 5 ###### HEADER 6 Header 1 Header 2 Header 3 Header 4 Header 5 Header 6 The RStudio IDE has several built-in features made to improve quality of life for R Markdown users. Figure 6.1: RStudio code navigator One feature is the drop-down code navigator in the bottom-left of your file editor as shown in Figure 6.1 (from the R for Data Science book). As you can see, this uses your Markdown headers to allow you to navigate around your .Rmd file. You can also use the RStudio outline pane, as shown in Figure 6.2 (from the RStudio blog). Figure 6.2: RStudio outline pane 6.4 Add narrative Start writing! You can add words anywhere in your document below the YAML, just be sure you aren’t adding non-R-code inside any code chunks. Let’s take a lightly-edited snippet from a Wikipedia about “The Great British Bake Off”. On the left, you can see the raw Markdown and on the right, the rendered version. # The Great British Bake Off The Great British Bake Off (also called *Bake Off* or *GBBO*) is a British television baking competition. In the first series, the location of the cast and crew moves from town to town each week, with a different baking **theme** each week: 1. Cakes 1. Biscuits 1. Bread 1. Puddings 1. Pastry 1. Tea Party In each episode, the amateur bakers are given three challenges based on that week&#39;s theme: - A signature bake, - a technical challenge, - and a show-stopper. [Photo:](https://en.wikipedia.org/wiki/Macaron) Vanilla Macaron, Michelle Naherny ![](http://bit.ly/vanilla-macaron) The Great British Bake Off The Great British Bake Off (also called Bake Off or GBBO) is a British television baking competition. In the first series, the location of the cast and crew moves from town to town each week, with a different baking theme each week: Cakes Biscuits Bread Puddings Pastry Tea Party (Final) In each episode, the amateur bakers are given three challenges based on that week’s theme: A signature bake, a technical challenge, and a show-stopper. Photo: Vanilla Macaron, Michelle Naherny 6.5 Add space Let your words and code chunks breathe! This is unfortunately a bit manual. But–if you don’t plan on doing any CSS, then we highly recommend doing the below: Add white space in the body of your .Rmd file by including either a &lt;br&gt; or a \\ on its own line with a blank line above and below it. At a minimum, we recommend doing before top-level section headers. “Code needs a lot of whitespace. That’s how it breathes.” — Roger Peng "],["doc-care.html", "Chapter 7 Caring for your document 7.1 Live editing 7.2 Care for your code 7.3 Care for your self", " Chapter 7 Caring for your document Once you have your published doc in place, it’s likely that you will want to change it sooner or later. The key to updating is that you must 🧶 Knit each time before you push to GitHub–otherwise your changes won’t be published. This sounds easy enough, but trust us, it is also easy enough to forget! Here’s what the change-my-doc workflow looks like for me: Open the existing RStudio project 🧶 Knit right away to see where things left off, or turn on xaringan::inf_mr() to see a live preview of your changes. Make edits, preview changes, rinse and repeat… Commit and push all changes to GitHub. 7.1 Live editing Whenever you are editing a single R Markdown file, and outputting to HTML format, you can turn on “live reload” while you work. This means that, after turning it on, every time you Save your updated output re-renders in your RStudio viewer pane, and also in a browser window if you open it up. Figure 7.1: Demo of R Markdown live reload from Yihui Xie To turn on “live reload”, you’ll first need to install the xaringan package3: install.packages(&quot;xaringan&quot;) Then close RStudio. When you reopen RStudio, in your “Addins” dropdown, scroll down to the bottom where the xaringan addins are. You should see “Infinite Moon Reader”. The same thing can be accomplished from your R console by running this code: xaringan::inf_mr() Now, make a small change to your document, save, and watch the preview reload! You’ll need to save this file first, before using the “Infinite Moon Reader”. 7.2 Care for your code 7.2.1 Use keyboard shortcuts To insert R code chunks, you can use the button, or you could use keyboard shortcuts the keyboard shortcut Ctrl + Alt + I (OS X: Cmd + Option + I) 7.2.2 Add a setup code chunk Get into the habit of always having your first knitr code chunk be a setup chunk using knitr::opts_chunk$set(). A good one looks like this: ```{r setup, include = FALSE} knitr::opts_chunk$set( comment = &quot;#&gt;&quot;, fig.path = &quot;figs&quot; # use only for single Rmd files collapse = TRUE, ) ``` Inside the parentheses, list the chunk option on the left = a new default value on the right. Each chunk option is separated by a comma. The chunk option for the setup chunk itself is typically include=FALSE so that no one sees it but you. A few notes on what the above chunk options do: comment = \"#&gt;\" sets the character on the far left of all printed output such that a reader could copy/paste a block of code into their console and run it (they won’t be bombarded by errors produced if they accidentally include your printed output in their code) fig.path = \"something-here-in-quotes\" ensures that all figures that you create with R code all get stored in the folder you name here; this helps if you need to pull up a figure file quickly without needing to explicitly export each individual figure. Read more here. collapse = TRUE fuses your code and output together for all code chunks throughout your document. Below is a side-by-side changing this chunk option for an individual chunk. Default chunk style library(tidyverse) starwars %&gt;% count(homeworld, sort = TRUE) ## # A tibble: 49 × 2 ## homeworld n ## &lt;chr&gt; &lt;int&gt; ## 1 Naboo 11 ## 2 Tatooine 10 ## 3 &lt;NA&gt; 10 ## 4 Alderaan 3 ## 5 Coruscant 3 ## 6 Kamino 3 ## 7 Corellia 2 ## 8 Kashyyyk 2 ## 9 Mirial 2 ## 10 Ryloth 2 ## # … with 39 more rows Custom chunk style library(tidyverse) starwars %&gt;% count(homeworld, sort = TRUE) #&gt; # A tibble: 49 × 2 #&gt; homeworld n #&gt; &lt;chr&gt; &lt;int&gt; #&gt; 1 Naboo 11 #&gt; 2 Tatooine 10 #&gt; 3 &lt;NA&gt; 10 #&gt; 4 Alderaan 3 #&gt; 5 Coruscant 3 #&gt; 6 Kamino 3 #&gt; 7 Corellia 2 #&gt; 8 Kashyyyk 2 #&gt; 9 Mirial 2 #&gt; 10 Ryloth 2 #&gt; # … with 39 more rows Our setup code chunk above affects all code chunks. It is called a global chunk option for that reason. You can (and should) use individual chunk options too, but setting up some nice ones that apply to all code chunks can save you time and can lessen your cognitive load as you create your content. 7.2.3 Name your code chunks Remember how we advised you set your fig.path? One of the best things you can do for yourself is to name your code chunks. h/t to Maëlle Salmon Maëlle wrote a fun blog post that (hopefully) will convince you that your chunks are pets rather than livestock (so they deserve a name!). In short, here are a few very good reasons to name your pets: Easier to find them (use the chunk outline thingie in IDE) Easier to debug when you 🧶 Knit your figures get named!! We recommend using dashes (-) in chunk labels instead of spaces or underscores (or really, any punctuation)… ✔️ Good ```{r my-dog-skip} ``` ❌ Bad ```{r my_dog_skip} ``` 7.2.4 Print pretty packages If you load packages, we recommend setting that code chunk to be message = FALSE, warning = FALSE ```{r, message = FALSE, warning = FALSE} library(tidyverse) library(janitor) ``` 7.3 Care for your self 7.3.1 Use portable file paths When you are in an .Rproj, you’ll probably want to create some directories like data/, images/, figures/, etc. We strongly encourage you to use the here package to build up safe file paths. Read more from Jenny Bryan’s What They Forgot to Teach You About R workshop. If you are still skeptical, read Malcolm Barret’s blog post Why should I use the here package when I’m already using projects? Figure 7.2: Artwork by Allison Horst “The chance of the setwd() command having the desired effect – making the file paths work – for anyone besides its author is 0%.” — Jenny Bryan 7.3.2 Name your files nicely https://twitter.com/DGuarch/status/663049353007931392?s=20 7.3.3 Add notes to self also include how to leave invisible notes to yourself &lt;!--- your comment ---&gt; xaringan is an R package for making presentation slides with R Markdown↩︎ "],["design-a-how-to.html", "Chapter 8 Design a how-to 8.1 Share the source code 8.2 Show the data 8.3 Share the data 8.4 Code Folding 8.5 Show code, hide results 8.6 Show code, hide plots 8.7 Show results, hide code 8.8 Interactively hide/show code 8.9 Hide everything 8.10 Reuse your code 8.11 Two plots side-by-side 8.12 Include verbatim code chunks", " Chapter 8 Design a how-to We define a “how-to” as a step-by-step recipe for a specific problem; light on narrative and teaching “why”. R Markdown is a great tool for this kind of lesson, and we recommend (surprise!) HTML output with the following options. 8.1 Share the source code You can also make it easy for others to download the raw R Markdown file that produced the page on the your site that they’re viewing. Add code_download: true underneath html_document:. This particular YAML option is one that you might consider only applying to .Rmd files where it’s relevant (in which case, you would include in the .Rmd’s YAML and not the _site.yml.) --- name: YUM-101 output: html_document: toc: true toc_float: true code_download: true --- 8.2 Show the data DT library(DT) datatable(iris) 8.3 Share the data For a how-to that involves some local data file that you need to share, it is nice to create an easy way for learners to download that data to a place on their computer. xfun::embed_file() link DT buttons link library(DT) datatable(iris, extensions = &#39;Buttons&#39;, options = list( dom = &#39;Bfrtip&#39;, buttons = list(&#39;copy&#39;, &#39;print&#39;, list( extend = &#39;collection&#39;, buttons = c(&#39;csv&#39;, &#39;excel&#39;, &#39;pdf&#39;), text = &#39;Download&#39; )) ) ) 8.4 Code Folding If you have a lot of code chunks, and you want to option for them to expand or fold with a click then: Add code_folding: as an option underneath html_document:. The options are either show or hide, depending on whether or not you want code chunks to be expanded by default. output_dir: &quot;docs&quot; output: html_document: code_folding: show 8.5 Show code, hide results The default global chunk option is echo=TRUE, which means that by default all code in code chunks is printed in the output. But sometimes you may want to suppress the output for pedagogical reasons on individual code chunks. You could set eval = FALSE as a global chunk option, but this would mean that all the code chunks will not get evaluated at all. Thus, you could have errors in your code that learners could stumble upon. Instead, we suggest setting results='hide' as a global chunk option to ensure that when you knit, you’ll run into the same errors your learners will before they do. ```{r, results=&#39;hide&#39;} library(tidyverse) glimpse(starwars) ``` 8.6 Show code, hide plots If your code produces plots, though, results='hide' will not suppress the plot. To suppress printing a plot, you’ll need to use fig.show='hide'. ```{r, results=&#39;hide&#39;, fig.show=&#39;hide&#39;} library(tidyverse) glimpse(starwars) ggplot(starwars, aes(x = height)) + geom_histogram(colour = &quot;white&quot;, fill = &quot;#3fb5bd&quot;) + theme_minimal() ``` 8.7 Show results, hide code Sometimes you may want to shield your learners from all the code and just focus their attention on the output, whether it is printed or it produced a plot. This requires a single switch to echo=FALSE to “mute” the code from being output. ```{r, echo=FALSE} library(tidyverse) glimpse(starwars) ``` This is all the learner sees: ## Rows: 87 ## Columns: 14 ## $ name &lt;chr&gt; &quot;Luke Skywalker&quot;, &quot;C-3PO&quot;, &quot;R2-D2&quot;, &quot;Darth Vader&quot;, &quot;Leia Or… ## $ height &lt;int&gt; 172, 167, 96, 202, 150, 178, 165, 97, 183, 182, 188, 180, 2… ## $ mass &lt;dbl&gt; 77.0, 75.0, 32.0, 136.0, 49.0, 120.0, 75.0, 32.0, 84.0, 77.… ## $ hair_color &lt;chr&gt; &quot;blond&quot;, NA, NA, &quot;none&quot;, &quot;brown&quot;, &quot;brown, grey&quot;, &quot;brown&quot;, N… ## $ skin_color &lt;chr&gt; &quot;fair&quot;, &quot;gold&quot;, &quot;white, blue&quot;, &quot;white&quot;, &quot;light&quot;, &quot;light&quot;, &quot;… ## $ eye_color &lt;chr&gt; &quot;blue&quot;, &quot;yellow&quot;, &quot;red&quot;, &quot;yellow&quot;, &quot;brown&quot;, &quot;blue&quot;, &quot;blue&quot;,… ## $ birth_year &lt;dbl&gt; 19.0, 112.0, 33.0, 41.9, 19.0, 52.0, 47.0, NA, 24.0, 57.0, … ## $ sex &lt;chr&gt; &quot;male&quot;, &quot;none&quot;, &quot;none&quot;, &quot;male&quot;, &quot;female&quot;, &quot;male&quot;, &quot;female&quot;,… ## $ gender &lt;chr&gt; &quot;masculine&quot;, &quot;masculine&quot;, &quot;masculine&quot;, &quot;masculine&quot;, &quot;femini… ## $ homeworld &lt;chr&gt; &quot;Tatooine&quot;, &quot;Tatooine&quot;, &quot;Naboo&quot;, &quot;Tatooine&quot;, &quot;Alderaan&quot;, &quot;T… ## $ species &lt;chr&gt; &quot;Human&quot;, &quot;Droid&quot;, &quot;Droid&quot;, &quot;Human&quot;, &quot;Human&quot;, &quot;Human&quot;, &quot;Huma… ## $ films &lt;list&gt; &lt;&quot;The Empire Strikes Back&quot;, &quot;Revenge of the Sith&quot;, &quot;Return… ## $ vehicles &lt;list&gt; &lt;&quot;Snowspeeder&quot;, &quot;Imperial Speeder Bike&quot;&gt;, &lt;&gt;, &lt;&gt;, &lt;&gt;, &quot;Imp… ## $ starships &lt;list&gt; &lt;&quot;X-wing&quot;, &quot;Imperial shuttle&quot;&gt;, &lt;&gt;, &lt;&gt;, &quot;TIE Advanced x1&quot;,… 8.8 Interactively hide/show code whole document 8.9 Hide everything Useful for you as you develop a lesson sometimes to save your code but hide the code and all output from learners. You can achieve the same thing with the combination of echo=FALSE, results='hide', fig.show='hide'. But the easier way is to use the include chunk option, which is by default set to TRUE. ```{r, include=FALSE} library(tidyverse) glimpse(starwars) ``` 8.10 Reuse your code Once you embrace code chunk options, you may often find yourself copying and pasting code chunks so that you can use different options on the same code chunk. Like maybe you want the code to appear once, but you Special use case: plot first, code second Chunk 1: {r plot-first, echo = FALSE} Chunk 2: {r ref.label = &#39;plot-first&#39;, eval = FALSE} 8.11 Two plots side-by-side ggplot(mtcars, aes(factor(cyl), fill = factor(vs))) + geom_bar(position = position_dodge(preserve = &quot;total&quot;)) ggplot(mtcars, aes(factor(cyl), fill = factor(vs))) + geom_bar(position = position_dodge2(preserve = &quot;total&quot;)) 8.12 Include verbatim code chunks You may have noticed that the code chunk output, even when echo=TRUE, does not show the actual code chunk options that you see in your .Rmd file. In order to print the full code chunk, you’ll need to verbatim code chunks knitr ref.label to reuse code chunks the fig.path thing: https://yihui.name/knitr/options/#plots (see also: name your code chunks!) making sure that your package warnings/messages don’t print! how to control numbers of digits that print control significance stars options( show.signif.stars = FALSE, digits = 2 ) "],["doc-dress.html", "Chapter 9 Dress it up! 9.1 Use a bootswatch theme 9.2 Add a floating table of contents 9.3 Customize code highlighter 9.4 Add images 9.5 9.6 Upgrade your output format", " Chapter 9 Dress it up! Once you have the website in place, it’s likely that you will want to update it periodically or add new pages. The key to updating is that you must build your site or use rmarkdown::render_site() each time before you push to GitHub–otherwise your changes wouldn’t make it into your docs/ folder. And if it’s not in the docs/ then GitHub pages will not be able to find it. 9.1 Use a bootswatch theme For a single R Markdown document, knitted to the HTML output format, adding a theme is so dead simple that you have no good excuses for not using one. You have 15 theme options: default, bootstrap, cerulean, cosmo, darkly, flatly, journal, lumen, paper, readable, sandstone, simplex, spacelab, united, and yeti (use null for no theme) You can preview them all here. --- name: YUM-101 output: html_document: theme: flatly --- 9.2 Add a floating table of contents In the _site.yml file, you can add a table of contents either as a static list of links at the top of the page, or a floating sidebar. We recommend adding a floating TOC, which means adding two lines to your document’s YAML. --- name: YUM-101 output: html_document: toc: true toc_float: true --- By default, the following “nice things” happen when you use a floating TOC. First, the TOC “explodes” the subsections when you click on the top-level (H2) headers (i.e., ## My big header). The TOC also animates, so that when you click on a top-level header, your document appears to “scroll” to the right section. All #, ##, and ### headers will be included because the default toc_depth: 3. We encourage you to leave these default settings, but know that you can change them. You can also number your sections, but we find it easier to stick to good top-level headers as the TOC organizing principle. 9.3 Customize code highlighter --- output: html_document: highlight: tango --- 9.4 Add images 9.4.1 Markdown images 9.4.2 Use knitr::include_graphics() include_graphics gives you figure captions can also play with out.width labeling chunks fig.link too 9.5 That would be great re: narrative/code. I realized they are two diff lenses, because your exposition is for the educator who is sitting down and assessing their learners, their time, their task etc- so their question is, what should I make? Then, next in the process is where I am sitting! I want to write up something for educators who have decided what to make and help them navigate the dizzying array of YAML/knitr options. But for that I want a clear typology of who needs what and when from the educators’ standpoint (not from the learners’ necessarily). Does that make sense? 9.6 Upgrade your output format So we know we told you to use HTML document as our preferred output format. That hasn’t changed- but there are ways to significantly upgrade your HTML output from R Markdown with additional packages, and you can keep all your content as is. The only changes are to install these packages and change the output format in your YAML. We’ll show you four options. 9.6.1 bookdown::html_document2 What you get: cross references to other documents numbered figures (plus cross-references) 9.6.2 distill::distill_article 9.6.3 tufte::tufte_html 9.6.4 learnr::tutorial ::gotcha Warning! This output format means more surgery is needed to your content. But if you want to make your code interactive and hands-on, it may be worth it to you (and your learners!) ::: "],["doc-fancy.html", "Chapter 10 Make it fancier 10.1 Extra packages 10.2 Use bootswatch CSS 10.3 include or not? 10.4 Before you begin 10.5 Include a css file 10.6 Branding and aesthetics 10.7 Table of contents (TOC) 10.8 Questions counter", " Chapter 10 Make it fancier 10.1 Extra packages demoR countdown klippy 10.2 Use bootswatch CSS divs breadcrumbs 10.3 include or not? tabsets - think about good use cases dropdown in tabsets code folding Now it’s time to customize our single lesson even further. We can do a little bit of HTML and CSS work to add-on some fancy features. 10.4 Before you begin If you’re starting here, I assume that by this point you have already: Updated your single lesson with your own content in the Make it yours section. (For my demo that follows, I’ll keep going with the boilerplate content since at this point everyone will have different content anyhow). At a minimum, added a few elements from the Dress it up section, specifically: A theme (I’ve chosen flatly) A floating table of contents Code highlighting (I chose tango) So that you know where I’m starting, here’s what my YAML frontmatter looks like right now: --- title: A demo single lesson author: Desirée De Leon date: &#39;`r format(Sys.Date())`&#39; output: html_document: theme: flatly highlight: tango toc: true toc_float: true --- If this is your first time having a go at CSS, then you might want to check out the CSS crash course so that you have a sense for how/why we’re doing what we’re doing—otherwise, buckle in for the ride! 10.5 Include a css file If you want to add any custom styling to your doc, the first thing you’ll need to do is to create a CSS file in your project directory and then tell R Markdown that it exists. Go to File &gt; New File &gt; Text File Save this file as style.css in your project directory. May as well keep this file open because we’re about to add a bunch of stuff to it! Open the .Rmd file you’re working on. In the YAML, reference the new CSS file by adding the css: option followed by its filepath. output: html_document: css: style.css Save your changes. Now you’re all set to start CSS-ing! 10.6 Branding and aesthetics We’ll start by making changes related to the look and feel of your doc. Add a Google font Change link color Add a logo Add a white space 10.6.1 Google Fonts To change the appearance of your text with a new font, you need to: Pick a Google font Add it to your CSS file Style specific text using CSS selectors Make sure your CSS file is linked in your YAML (and if you’ve been following along with us, it already is). 10.6.1.1 Select and import your Google font’s script Go to https://fonts.google.com/ and pick a font for your lesson’s main body text. We’ll choose Muli, but Lato and Source Sans Pro are other nice options. We recommend going with sans-serif fonts (i.e. no little feet on the letters) for the main text because they’re easier to read at smaller sizes on screens compared to serif fonts. Don’t pick anything too narrow, too wide, or ornate.) Select the font you want by clicking on the upper red + sign, and navigate to the small pop up window. Figure 10.1: Selecting a Google font Click on the CUSTOMIZE tab, and select the extra font weights and styles you want. Don’t check any that you don’t think you’ll use (because it slows down your lesson’s loading time ever-so-slightly when you add more). In addition to regular, we’re choosing one italic and one bold. Figure 10.2: Choosing additional font weights and styles Now click on EMBED and look under the @IMPORT tab. Copy the code within the &lt;style&gt; tags (you don’t need the style tags themselves). We will also need the second code chunk in a couple steps that says Specify in CSS, so keep this page open to come back to that. Figure 10.3: Getting the script to import your Google Font 10.6.1.2 Import the font to your lesson Back in the RStudio IDE, open up your style.css file. On the very first line, paste in the Google Font import code for the Muli font. This makes the font available–but doesn’t actually use it yet. @import url(&#39;https://fonts.googleapis.com/css?family=Muli:400,400i,700&amp;display=swap&#39;); You might see others import Google fonts by embedding the script (with &lt;script&gt; tags) in an HTML file instead. This is perfectly legitimate. But if you’re just starting out, it’s easier to keep all the font stuff together in a CSS file, which is why we’re doing it this way. 10.6.1.3 Apply the font to your text We have our font imported, but now we have to be explicit with R Markdown about where to apply it. Let’s create our first CSS style rule below. We will apply the Muli font to our body’s text by using the font-family: property. Copy and paste the following style rule to style.css beneath the other line of CSS we’ve already added. Let’s also specify the font size to be 19px by adding the font-size: property. /*------------- Whole Document---------------- */ body { font-family: &#39;Muli&#39;; font-size: 19px; } Make sure that each line within {} ends with a ;. Keep tidy! Organize your CSS using comments like /* --insert-comment-- */ to create make-shift section dividers for your CSS, as we’ve done above. We’ll be adding many style rules, and we’ll want some way to keep track of everything as our CSS file grows. Time to admire your handiwork and decide whether or not you like it. You can repeat the steps above to apply different fonts to different parts of your lesson. For example, you could create another style rule using .title instead of body to apply a different font to the Title of your lesson. Remember that in order for any of your CSS to take effect, your style.css file has to first be referenced in your YAML. 10.6.2 Links Next we’ll change the color and hover behavior of our links. Open your style.css file. Use the a selector to select all links in your lesson. Use the color: property, followed by a color code, called a hexcode. You can use a color picker to find a hexcode color that you like. /*----------------- links ---------------------*/ a { color: #4e89bf; } This has changed the color of a regular link, but if we want to change the color of the link when we hover over it, we use a:hover as our new selector. Specify what happens when a link is hovered by adding the style rule below. We make our hovered links a darker color: a:hover { color: #396892; /* darker color when hovering */ } 10.6.3 Add a logo We’ll add a logo above our table of contents. The main way we’re going to do this is by inserting a blank box above our TOC, and then giving the blank container a background image (our logo). We can control how big our logo will be by controlling the size of the box. Here’s what it will look like (if you’re bothered by the outline around it all, don’t worry–we’ll get rid of that in the TOC section): Add your logo image to your project directory. Paste the CSS style rule below. We’ll break it down in a second. /*----------LOGO above TOC---------*/ #TOC::before { content: &quot;&quot;; display: block; height: 200px; margin: 20px 20px 40px 20px; background-image: url(&quot;logo-black.png&quot;); background-size: contain; background-position: center center; background-repeat: no-repeat; } This uses the selector #TOC to identify our table of contents. We use the CSS trick of tacking on a ::before to say, “hey, we want you to insert whatever is in this style rule right before our #TOC.” This trick is called using a “pseudo-element” in CSS. In this case, our pseudo-element is a blank box–that’s why it says content: \"\";. There’s nothing in there. But–we do give our blank box some dimension with the height: property. The blank box is no longer blank when we use our logo as its background image. Change the image url to use your own image. Knit and check out the results. If you need to adjust the size of your logo, you can fiddle with the height: property in the CSS above. 10.6.3.1 A second logo option If you chose not to use a floating table of contents, then adding a logo the way we have above won’t work since there won’t be a #TOC that a logo can go ahead of. So, you can instead place your logo in upper righthand corner, in line with the Title and Author. Add your logo image to your project directory. Open style.css. Paste this CSS rule into your CSS file: #header.fluid-row::before { content: &quot;&quot;; height: 150px; width: 150px; float: right; background-image: url(&quot;logo-black.png&quot;); background-size: contain; background-position: center center; background-repeat: no-repeat; } Edit the image url to be your own image file path. Save your changes and knit your .Rmd lesson to see your logo. You can fiddle with the height: property to adjust the logo size. 10.6.3.2 A third logo option But wait–there’s more! Here is a third option for adding a logo if you want it in the upper righthand corner, above the Title and Author fields. We personally like this one the least (asethetically, but also because it’s more involved to implement), but sometimes you might need to do this if your Title and content keep running into the logo with option 2. To do this, you will need three things: A different CSS style rule An HTML file with one line of code To edit your YAML so you can reference the HTML file 10.6.3.2.1 Create an HTML container We need something that we can put our logo into– like an empty container. This is where the HTML file comes in. This file creates an empty tag inside of it, but we’ll give the empty tag a name, “upper-right-logo”, so that we can fill it up with our logo later using CSS. Let’s make the HTML file: From the IDE, you’ll create a new HTML file by going to File &gt; New File &gt; Text File. Paste the line of code below into the HTML file. &lt;div class=&quot;upper-right-logo&quot;&gt; &lt;/div&gt; Save this file as logo-option.html. You can choose a different name if you want. 10.6.3.2.2 Link the HTML file to your YAML Now we have a containter (via our HTML file), but R Markdown needs to know where to put it with respect to our page. That’s where the YAML comes in. We can tell our YAML that we want whatever it finds in this HTML file to be included as the first thing on of our page. We do this by using the includes: before_body option: Open your .Rmd file. Add the includes: and before_body: lines. --- title: A demo single lesson author: Desirée De Leon date: &#39;`r format(Sys.Date())`&#39; output: html_document: includes: before_body: logo-option.html theme: flatly highlight: tango toc: true toc_float: false --- Edit the filename to be your HTML file if you chose a different file name. Save your changes. 10.6.3.2.3 Fill the container with your logo Finally, the CSS is where we’ll say “take the empty container we created in the HTML file, and make sure it’s yay tall and that it has this logo image as its background, etc.” Here’s how that goes down: Add your logo image to your project directory. Open style.css. Paste this CSS rule into your CSS file: .upper-right-logo { margin-top: 20px; background-image: url(&quot;logo-black.png&quot;); height: 150px; background-size: contain; background-position: right; background-repeat: no-repeat; } Edit the image url to be your own image file path. Save your changes and knit your .Rmd lesson to see your logo. You can fiddle with the height: property to adjust the logo size. I won’t use this logo option in the demo lesson as we move on to the next steps, but now you know how to do it if you need it. 10.6.4 White Space If you added white space manually in the 6.5 section, you can remove that now, and we’ll add some in programatically with our CSS. First up is adding space above and below the title with the the margin-top: and margin-bottom: properties. The unit em here is equal to whatever you have your font-size set to. This is nice because it means your white space will scale even if you change your font size. /*----------------ADDING WHITE SPACE-------------*/ .title { margin-top: 2.75em !important; margin-bottom: 0.75em; } But this leaves our logo squished up at the top of our page–so let’s adjust our earlier style rule that we used for our logo, by increase the logo’s top margin to 2.75em also. When a margin has four numbers, the first value applies to the top. /*----------LOGO above TOC---------*/ #TOC::before { content: &quot;&quot;; display: block; height: 200px; margin: 2.75em 20px 40px 20px; background-image: url(&quot;logo-black.png&quot;); background-size: contain; background-position: center center; background-repeat: no-repeat; } Let’s add white space in between our other headers. We want there to be a little more white space above our highest level headers (h1) than above our headers lower in the hierarchy (so that sections are more clearly delineated), so we’ll style the h1 headers separately from the other headers. .section h1 { margin-top: 2.5em !important; margin-bottom: 0.75em; } .section h2, .section h3, .section h4, .section h5 { padding-top: 1.5em !important; margin-bottom: 0.75em; } The selector .section h1, .section h2, etc. selects only headers within a section (in other words, this excludes the title and subtitle, which are also technically h1 and h2 headers–but which don’t exist inside the “section” content of the page.) We added white space in between our headers, but we can also add space in between the TOC and the body content, which right now is so squished together. Let’s increase the space–but only when the screen is wide enough to allow it. For this, we’ll have to use our first media-query. A media query is like an additional outer rule that says, “hey, only apply the CSS rule inside if [insert condition about screen width here] is met”. Media queries are useful for styling something different on a big screen than you would on mobile, etc. In the case below, we only increase the space between the TOC and the body content if your user’s browser screen is at least 992px wide: /* Space Between TOC and Righthand side content on large screens */ @media (min-width: 992px) { .col-md-9 { width: 75%; padding-left: 5em !important; } } Lastly, you may have noticed that there’s a lot of excess empty white space at the end of the lesson, which can lead to a lot of unnecessary scrolling. Let’s get rid of ost of that space with this addition to our CSS: /* Remove excessive white space at the end of page */ .tocify-extend-page { height: 100px !important; } 10.7 Table of contents (TOC) Now it’s time to style the table of contents. Right now my demo .Rmd only has two section headers, so I’ll add two more headers so that it’s easier to demonstrate the changes I’m making to the TOC. Here’s where I’m starting: First we will get rid of the TOC border and make the font size a little smaller: /*------------Table of Contents (TOC)----------- */ .tocify { border: none; /*Removes border */ border-radius: 0px; /* Gets rid of rounded corners on TOC */ font-size: 16px; } Next, we increase the space between each of the TOC items with the line-height: property, for some gratuitous breathing room. We also add a solid grey line as a border, as a subtle divider between the TOC and the rest of the page. .tocify ul, .tocify li { /* Increases spacing between TOC headers*/ line-height: 25px !important; } .tocify ul { border-right: solid 1px #eee; /* Thin right border on TOC list */ } Now we remove the dark-blue background for the TOC links that you see when a link is active or when you hover over it. We do this using the background-color: property and setting it to white with #ffffff. We also change the color of the active and hovered links to be a little lighter (#787878) than the base color. /* Active TOC links*/ .list-group-item.active, .list-group-item.active:hover{ color: #787878; background-color: #ffffff; border-color: #ccc; } /* Hovered TOC links*/ .list-group-item:hover { color: #787878; background-color: #ffffff; border: none; } 10.8 Questions counter Finally, if you plan on using questions for learners in your doc (for example, for homework problems), you might want to make it easier to see these questions by styling them. Like this: Before After This idea and CSS was inspired by Maria Tackett’s STA210 course: https://github.com/STA210-Sp19/website The CSS you need is this–it’s a lot, but for most use-cases the only style rule you really need to worry about editing is the second-to-last one, with the content: and color: properties: /* -----------Question counter ---------*/ body { counter-reset: li; } .question ol { /* Remove the default left padding */ padding-left: 0; } .question ol&gt;li { /* Create a positioning context */ position: relative; /* Disable the normal item numbering */ list-style: none; width: 90%; padding-top: 10px; padding-bottom: 10px; padding-right: 0; padding-left: 120px; } .question ol&gt;li:before, .question ol&gt;p&gt;li:before{ /* Use the counter as content */ content: &quot;Question &quot; counter(li) &quot;: &quot;; /* Increment the counter by 1 */ counter-increment: li; position: absolute; color: #5ebccf; left: -0.5px; font-weight: bold; } .question ol ol { counter-reset: subitem; } If you want to change the styling to say something other than “Question”, then you modify content: \"Question \". You can change the color of the called out question, too, with the color: #5ebccf; How to use the question counter: In your .Rmd, you have to enclose your numbered list items that you want to be styled questions with special div tags: &lt;div class=&quot;question&quot;&gt;` 1. My first question 1. My second question &lt;/div&gt;` "],["doc-trouble.html", "Chapter 11 Trouble-shooting", " Chapter 11 Trouble-shooting Analogy: trying to pin the tail on the donkey, or hit a pinata blindfolded Mine’s troubleshooting tips: Make sure RStudio and the rmarkdown package (and its dependencies) are up-to-date. Set a global option for error = TRUE (or for a given chunk) so that your document renders even when there are errors. Don’t try to change working directory within an R Markdown document. (If you do still decide to use setwd in a code chunk, beware that the new working directory will only apply to that specific code chunk, and any following code chunks will revert back to use the original working directory.) Also see: https://rmd4sci.njtierney.com/common-problems-with-rmarkdown-and-some-solutions.html https://happygitwithr.com/rmd-test-drive.html#rmd-troubleshooting switch latex engines (do a screenshot here) consider printing out your sessionInfo() [for pro-level, use DT] DT::datatable(devtools::session_info()$packages) "],["intro-dry.html", "Introduction", " Introduction Overview- this is a section about how not to repeat yourself as an educator. define the DRY principle from software standpoint, then talk about ways to reduce repeating yourself as an educator. Namely, we see templates and data packages as a nice way to do this. Why make a package? As an educator you can use a package to easily deliver the contents of your lesson, teaching material, or data to an audience. Your package doesn’t have to be on CRAN, and it doesn’t have to contain functions (but it can if you want!). Packages can be used creatively so that you can give your students custom data sets to work with, R Markdown “worksheets” that they can fill in or use as templates for completing exercises. You can also have students run LearnR tutorials with a package. These are interactive R Markdown docs that use Shiny. "],["data-pkg.html", "Chapter 12 Create a data package 12.1 Is this tutorial for you? 12.2 Mental Framework 12.3 Part 1: Getting set up 12.4 Part 2: Add some clean data 12.5 Part 3: Check! 12.6 Part 4: Document the datasets 12.7 Part 5: Document the package 12.8 Part 6: Build and Install! 12.9 Part 7: Deliver 12.10 Caring for your package 12.11 tldr;", " Chapter 12 Create a data package This tutorial is intended for educators who would like to learn to make a data package. Why do this? What if you’d like your students to work with a specific data set? Should you email them an excel or .csv file or upload it onto an oustide learning platform? No! You can include data sets in your package, ready to be summoned with the call of an object name. This saves precious instruction time that might otherwise be wasted and also helps students get to the fun stuff (analysis!) faster. 12.1 Is this tutorial for you? Pre-requisites: You have a GitHub account You are comfortable with the basics of using R and RStudio You understand how R projects work You understand the difference between a regular R script and an R Markdown document What you’ll learn: How to make a package that your students can download and install from GitHub How to tidy up an existing dataset and put it in a package How to include a raw data set in your package 12.2 Mental Framework What are we going to make here? To create a package with data that is ready for our learners, we’re going to make four new folders that will contain (1) our raw data files, (2) any scripts for cleaning up our data, (3) commented documentation of our data, and (4) cleaned up documentation of our data. Finally, we’ll pull it all together when we (5) build all of these things into our package. We can think of this process of putting data in a package as kind of like getting a fish ready to be used in a sushi roll at a nice restaurant. 🎣 data_raw/: this is your fish 🍣 data/: this is your sushi roll (re: some additional data prep here like wrangling, and final object gets “rolled up” into a nice clean .rda file) 📝 R/: write up your menu- what is inside of your roll? 🍱 man/: this is the chef giving you the tableside context for what you’ve ordered and what it pairs well with Let’s go through this process! 12.3 Part 1: Getting set up 12.3.1 Packages Make sure you’ve installed and loaded the following packages: #install.packages(c(&quot;usethis&quot;, &quot;devtools&quot;, &quot;roxygen2&quot;)) library(devtools) library(roxygen2) library(devtools) You may also want to consider installing and loading here::here(): # install.packages(&quot;here&quot;) # here::here() 12.3.2 Two getting-started workflows Our final goal is to create a package that is “downloadable” by your students, which means this package needs to have a GitHub repository so that it can be easily shared. See our tips below for what to name your project repository. What’s in a name? Name your GitHub repository whatever you want to name your data package. It will make things less confusing. As such, the name you choose must: Include only letters, numbers, or . Start with a letter Not end with a . Optionally, consider the naming tips here Where to put this project directory? Make sure your project directory that we will use to make this package is not nested within any other projects, folders, or repos. It should be its own thing. We recommend following the tips on Happy Git with R and starting in GitHub before switching to RStudio: Create a new repository on GitHub for your work. Do not initialize the repo with a .gitignore or a README file (we’ll add these later!). Copy the repository URL to your clipboard. Do this by clicking the green Clone or Download button. Copy the HTTPS clone URL (looks like: https://github.com/{yourname}/{yourrepo}.git). Or copy the SSH URL if you chose to set up SSH keys (looks like: git@github.com:{yourname}/{yourrepo}.git). Create a new RStudio Project via git clone. Open RStudio. Do this by clicking File &gt; New Project &gt; Version Control&gt; Git. Paste the copied URL. Be intentional about where you tell RStudio to create this new Project. Click Create Project. Follow these instructions from Happy Git with R to start with a new repo on GitLab or Bitbucket, instead of GitHub. create_package(getwd()) The console output will ask if you’d like to overwrite the pre-existing R project. Select No. A second session of RStudio will open – this ession has a Build tab in the pane which also has the tabs Environment, History, etc. This tab is specific for building packages, and we will use it later. You can close the other RStudio instance. It is a good idea to commit to GitHub at this point. Though we don’t recommend starting this way, it is possible to first make a data package project in RStudio and then connect it to GitHub afterwards. Click File &gt; New Project &gt; New Directory Scroll down and select R Package Select a package name (see tip above) and click Create Project Then, optionally: usethis::use_git() usethis::use_github() # you have to have a PAT setup Regardless of which workflow you choose, your project directory should end up looking like this: We have a few package-specific files set up now– in our sushi analogy, this is like us purchasing an empty restaurant– some infrastructure is there, but there’s nothing in the kitchen yet! 12.4 Part 2: Add some clean data 12.4.1 With built-in data Let’s say we want our learners to be able use a built-in dataset like anscombe, but we’d like to modify it first. Any clean up .R scripts or miscellaneous files that we use for pre-processing will need a place to live within our package. Where do these files go? In a folder called data-raw/. Let’s create the data-raw/ folder: usethis::use_data_raw() [commit] The data-raw/ folder is like the pantry (?) of our sushi restaurant– we can put anything we want in here, and it won’t directly impact our final package. Go to File &gt; New File &gt; R Script and read-in any data set you’d like along with any clean up steps. (Alternatively, you could add your clean-up script to the DATASET.R that gets auto-generated inside of the data-raw/ folder–but we recommend naming your .R script to be something that corresponds with the name of your dataset.) anscombe_set1 &lt;- anscombe[c(1, 5)] This is you bringing in the raw fish (raw data set – anscombe) to the kitchen and getting them ready for consumption! At the end of this script, include the following line, replacing anscombe_set1 with your own cleaned dataset. use_data(anscombe_set1, overwrite = TRUE) Run this script and save this .R script inside data-raw/. The outcome should be a cleaned up .rda data file in a new folder called data/. [commit] [SCREENSHOT] This .rda file is your (data) sushi roll! It’s cleaned and ready to be accessed via your package! 5. To confirm this, load your package locally by going to the Build pane &gt; Click More &gt; Load All. This is the same as running devtools::load_all() in the console. If everything worked, you should be able to call your cleaned data set successfully! &gt; anscombe_set1 x1 y1 1 10 8.04 2 8 6.95 3 13 7.58 4 9 8.81 5 11 8.33 6 14 9.96 7 6 7.24 8 4 4.26 9 12 10.84 10 7 4.82 11 5 5.68 🎉 Nice! With these steps, you’ve managed to go from raw fish to the packaged-up sushi roll! Wait..but what if you want to catch your OWN fish?? 🎣 We hear you– using your own data is important as an educator so you can tailor the data to your lesson content –can you put your own data files in a package? YES! Let’s go fishing! 12.4.2 Start with your OWN Data Let’s show you how to save your own .csv to the data-raw/ folder. As an example, we’ll be using a shrimp.csv containing data on seafood prices. 1. Save your raw .csv file to your data-raw/ folder. (Remember, this folder is our pantry.) 🐟 2. Make a new .R script (again, manually saving to the data-raw/ folder) and name the .R script something like &lt;your-data&gt;_load.R. 3. In this script, read in your raw .csv file and do any data tidying and cleaning [analogy: fish chopping block?] if you need to. # shrimp_load.R library(tidyverse) shrimp_raw &lt;- readr::read_csv(&quot;data-raw/shrimp.csv&quot;) # Add any tidying steps to this script if necessary shrimp &lt;- shrimp_raw[-c(1:2),] colnames(shrimp) &lt;- c(&quot;Year&quot;, &quot;Month&quot;, shrimp_raw[1,3:10]) shrimp &lt;- readr::type_convert(shrimp) Forget about specifying paths– use here::here(). For example: shrimp &lt;- readr::read_csv(here::here(&quot;data-raw&quot;, &quot;shrimp.csv&quot;)) The data-raw/ folder gets ignored when we Build our package, so you can use whatever packages you’d like to clean and tidy up your data (e.g. tidyverse, as I’ve used above) – it doesn’t affect any of the dependencies for your package because scripts in this folder only get run by you manually. Note: It’s always a good idea to start with the most unprocessed, messy version of the data .csv in the data-raw/ folder along with scripts to clean it up so that your workflow is reproducible. Once you’ve got your dataset the way you want it within &lt;your-data&gt;_load.R, run usethis::use_data() as the last line in the script to export the data as an .rda file to the data/ folder 🍣. # shrimp_load.R usethis::use_data(shrimp, overwrite = TRUE) FYI: The reason .rda (also called .RData) .RDataare use in packaged data sets is because this type of data file format is much faster to read in than .csv files. 5. Trust but verify that your data set made it in your package by loading the package (Build pane &gt; Click More &gt; Load All or in the console using devtools::load_all()). And then call your dataset! &gt; shrimp # A tibble: 243 x 10 Year Month `0-15` `15-20` `20-25` `25-30` `30-40` `40-50` `50-67` Pieces &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1990 1 5.76 4.53 3.86 3.51 3.19 2.84 2.54 1.91 2 1990 2 5.96 4.60 3.90 3.66 3.36 2.93 2.66 1.99 3 1990 3 6.34 4.75 4.17 3.87 3.56 3.41 3.18 2.46 4 1990 4 6.06 4.90 4.27 3.97 3.70 3.20 2.91 1.78 5 1990 5 5.83 4.83 4.46 4.04 3.64 2.96 2.17 1.19 6 1990 6 5.82 4.79 4.38 3.88 3.27 2.71 2.24 1.45 7 1990 7 5.92 4.99 4.36 3.54 2.88 2.51 2.17 1.65 8 1990 8 5.56 4.85 4.27 3.50 2.93 2.45 2.14 1.60 9 1990 9 5.91 5.00 4.42 3.76 3.14 2.66 2.34 1.75 10 1990 10 6.31 5.30 4.67 4.18 3.45 2.97 2.66 1.96 # … with 233 more rows 🎉 It works! 12.5 Part 3: Check! Now we can check and see whether there are any issues with our package. 6. In the RStudio Build pane &gt; click Check (or in the console, run devtools::check(document=FALSE)) ── R CMD check results ────────────────────────────────────── testpackage 0.0.0.9000 ──── Duration: 7.2s ❯ checking DESCRIPTION meta-information ... WARNING Non-standard license specification: What license it uses Standardizable: FALSE ❯ checking for missing documentation entries ... WARNING Undocumented code objects: ‘anscombe_set1’ ‘shrimp’ Undocumented data sets: ‘anscombe_set1’ ‘shrimp’ All user-level objects in a package should have documentation entries. See chapter ‘Writing R documentation files’ in the ‘Writing R Extensions’ manual. ❯ checking data for ASCII and uncompressed saves ... WARNING Warning: package needs dependence on R (&gt;= 2.10) 0 errors ✔ | 3 warnings ✖ | 0 notes ✔ This spits back a lot of output, including some warnings! But don’t feel overwhelmed. This is okay and is only happening because we have not documented anything in our package yet (our sushi 🍣 is made, but the menu 📝 is not!) –and in fact, if we wanted to, we could still use this package despite the warnings and commit/push to GitHub as is. You should document your data sets anyway because it will save you time and help your learners if they’re able to use ?dataset to see all get information about what’s inside. 12.6 Part 4: Document the datasets We’ll go through an example of documenting our shrimp dataset, but you can (and should) do this for any data set in your package. 7. In the console, run usethis::use_r() with your data set name in quotes, which will generate a new .R script that lives in an R/ folder. usethis::use_r(&quot;shrimp&quot;) 8. In this new .R script, type the name of your dataset in quotes. Immediately above this, manually (yes, manually) copy and paste-in specially-formatted comments called Roxygen comments (use our example below). These strange-looking comments will eventually become our documentation. #&#39; Data of nominal brown shrimp prices by size #&#39; #&#39; Shrimp are classified by size, 0-15 shrimp per pound, 15-20 shrimp per pound, etc. A smaller number per pound indicates larger shrimp. Nominal prices are total monthly value of brown shrimp andings within size class divided by total monthly landings within the size class. #&#39; #&#39; @format A tibble with 243 rows and 10 variables: #&#39; \\describe{ #&#39; \\item{Year}{dbl Year price was recorded} #&#39; \\item{Month}{dbl Month price was recorded. Ranges from 1-12 for January - December} #&#39; \\item{`0-15`}{dbl denoting monthly price for the 0-15/lb. size class} #&#39; \\item{`15-20`}{dbl denoting monthly price for the 15-20/lb. size class} #&#39; \\item{`20-25`}{dbl denoting monthly price for the 20-25/lb. size class} #&#39; \\item{`25-30`}{dbl denoting monthly price for the 25-30/lb. size class} #&#39; \\item{`30-40`}{dbl denoting monthly price for the 30-40/lb. size class} #&#39; \\item{`40-50`}{dbl denoting monthly price for the 40-50/lb. size class} #&#39; \\item{`50-67`}{dbl denoting monthly price for the 50-67/lb. size class} #&#39; \\item{Pieces}{dbl denoting monthly price of pieces of shrimp totalling a pound} #&#39; } #&#39; @source \\url{https://www.pnas.org/content/114/7/1512/tab-figures-data} &quot;shrimp&quot; [commit] Modify the descriptions to match your dataset. This is you drafting the 📝 menu for your sushi. @format describes the dataset basics, including a description of what each of the variables are. @source should describe where you got this data. Most of the time this is a url, but not nessarily.o Note: To read more about Roxygen comments, check out 6.3 Roxygen Comments, R Packages. 9. Our 📝 menu is drafted but not yet accessible by the package. In the console, run devtools::document() to make the Roxygen comments “concrete”. devtools::document() This generates a .Rd file, that makes our documentation accessible to the package. Our official documentation lives inside a newly-generated man/ folder. (Think Chef providing a tableside reading of the menu.) 10. Try using pulling up your documentation. Call ?shrimp, substituting the name of your data set. ?shrimp If everything looks good, then you’re done documenting this dataset! 🎉 If not, keep editing the Roxygen-style comments in the .R script and document() again until you’re satisfied. Now repeat the steps in this section for any other dataset in your package! 12.7 Part 5: Document the package Now, we’ll open up and edit the DESCRIPTION file to fill in the author (your) info and other descriptive info about the package. Package: testpackage Title: Data Package With Shrimp Price Data Version: 0.0.0.9000 Authors@R: person(given = &quot;Desirée&quot;, family = &quot;De Leon&quot;, role = c(&quot;aut&quot;, &quot;cre&quot;), email = &quot;desiree@rstudio.com&quot;, comment = c(ORCID = &quot;https://orcid.org/0000-1111-2222-3333&quot;)) Description: What the package does (one paragraph). License: MIT + file LICENSE Encoding: UTF-8 LazyData: true RoxygenNote: 6.1.1 You can add your ORCID ID, to the DESCRIPTION, which serves as your authorship fingerprint for creating onlinls. If you don’t have one, you can quickly sign up for a free one here. In the License field, we recommend using the MIT license for a package, which you can do by literally typing “MIT + file LICENSE” followed by creating a new text file called “LICENSE” (it has to be named this exactly) in your root project directory with two lines of code for the year and your name. Like so: # LICENSE YEAR: 2019 COPYRIGHT HOLDER: Desirée De Leon FYI: To learn more about licensing and why it’s important, check out this resource. 12. Now that all datasets and the DESCRIPTION file have been documented. We can check again for any package warnings. Click Build &gt; Check (or in the console, devtools::check(document=FALSE)). This time things should be all-clear! I happened to get one warning that looked like this: &gt; checking data for ASCII and uncompressed saves ... WARNING Warning: package needs dependence on R (&gt;= 2.10) This means I needed to specify a minimum version of R, which I can do in my DESCRIPTION file, which I edited once more to look like this: Package: testpackage Title: Data Package With Shrimp Price Data Version: 0.0.0.9000 Authors@R: person(given = &quot;Desirée&quot;, family = &quot;De Leon&quot;, role = c(&quot;aut&quot;, &quot;cre&quot;), email = &quot;desiree@rstudio.com&quot;, comment = c(ORCID = &quot;https://orcid.org/0000-1111-2222-3333&quot;)) Description: What the package does (one paragraph). License: MIT + file LICENSE Encoding: UTF-8 Depends: R (&gt;= 2.10) LazyData: true RoxygenNote: 6.1.1 * Run Build &gt; Check one last time – NOW it’s all clear*! If you’re still getting Warnings, check here for some troubleshooting tips. For example, you might get a warning related to your package needing dependence on other packages. You can fix this by running the line below to automatically install any missing or outdated dependencies. devtools::install_deps(dependencies = TRUE) 13. ALMOST THERE! We should also create documentation for the package overall, which is the documentation that we get when we use ?&lt;package-name&gt;. We add package-level documentation : usethis::use_package_doc() This creates one last (hang in there) .R script, carrying the same name as your package. It lives inside the R/ folder, nextdoor to the Roxygen-commented scripts for each of your datasets. Open this newest .R script, and while this script is open, run the following usethis code in the console. usethis::use_tibble() This will make it so that datasets in your package will print out as clean tibbles, instead of dataframes. Your script should look something like this: #&#39; @keywords internal &quot;_PACKAGE&quot; # The following block is used by usethis to automatically manage # roxygen namespace tags. Modify with care! ## usethis namespace: start #&#39; @importFrom tibble tibble ## usethis namespace: end NULL Run document() to make this “concrete”, followed by one last Build &gt; Check. devtools::document() Now you can call ?testpackage, replacing with your own package name. [SCREENSHOT] 12.8 Part 6: Build and Install! Finally (FINALLY!!) all the pieces of our package are now in place, and it’s time to install it. 14. Go to Build &gt; Install and Restart to make the package “official”. Or in the console run: devtools::install() To celebrate 🎉, let’s print out our nice tibble 🦐 shrimp: &gt; testpackage::shrimp # A tibble: 243 x 10 Year Month `0-15` `15-20` `20-25` `25-30` `30-40` `40-50` `50-67` Pieces &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; 1 1990 1 5.759555465 4.527945872 3.858928071 3.514200832 3.192596609 2.841849966 2.54415628 1.910168236 2 1990 2 5.962003847 4.601218856 3.90400544 3.660123275 3.359026722 2.925337664 2.661750431 1.992272943 3 1990 3 6.341150505 4.753105387 4.170154143 3.870107021 3.556246121 3.414308628 3.179252479 2.457202073 4 1990 4 6.058025577 4.904859873 4.26679422 3.969849673 3.703260885 3.204955068 2.913211903 1.776717746 5 1990 5 5.827911652 4.830152374 4.464854478 4.041919716 3.637094201 2.961828687 2.17059349 1.188236536 6 1990 6 5.818761292 4.788106337 4.382883567 3.879214266 3.270806964 2.712393632 2.239497802 1.450032245 7 1990 7 5.923164993 4.987179487 4.356993267 3.540394871 2.882228712 2.512950583 2.17032006 1.648464142 8 1990 8 5.563856926 4.854975559 4.266385694 3.4965833 2.934561646 2.452177137 2.136210905 1.598242815 9 1990 9 5.912565621 4.998191859 4.416478291 3.758592484 3.140213747 2.660816111 2.337113624 1.745624186 10 1990 10 6.311225952 5.296802562 4.672483114 4.183780113 3.446375802 2.966602596 2.662274751 1.958313571 # … with 233 more rows &gt; 🦐🎉 15. Push everything to GitHub!! 12.9 Part 7: Deliver Anyone can now install your package with the following code, substituting the field in quotes with your own GitHub username and package name: # install.packages(&quot;remotes&quot;) remotes::install_github(&quot;rstudio4edu/testpackage&quot;) 12.10 Caring for your package 12.10.1 A review Here’s a review of all the data package steps we covered: [^ADD SUSHI TO THE ABOVE IMAGE] If you wanted to later to and edit one of your datasets, here’s what that workflow would look like: Go into data-raw/ and edit your .csv and the corresponding dataset_load.R script for in the data-raw/ folder. After you’ve made your changes, make sure you re-run usethis::use_data(&lt;your-dataset&gt;, overwrite = TRUE). If your changes affect the variables you’ve used, then don’t forget to update the corresponding Roxygen-commented .R script that lives inside the R/ folder. Run document() to put those changes into effect. Run a Check for good measure with devtools::check(document=FALSE) and finally… Go to Build &gt; Install and Restart. When your learners re-install the package from GitHub, they’ll have all your updates! 12.10.2 Package accessories We don’t cover it here, but you should know that you can also add a README, and also R functions to your package. You can read more about those things in the R Packages book. 12.11 tldr; Here’s how you put custom data in a package: In a GitHub-connected RStudio project, run create_package(getwd()) usethis::use_data_raw() makes data-raw/. In here, put your .csv and a manually-created dataset_load.R script. In dataset_load.R, read in the .csv and do data-clean up. Also in dataset_load.R, run usethis::use_data(&lt;your-dataset&gt;, overwrite = TRUE) to export an .rda to data/. Run usethis::use_r(\"&lt;your-dataset&gt;\"). Manually insert Roxygen comments. Edit DESCRIPTION. Include a LICENSE file. Run usethis::use_package_doc() to document the whole package. Keep the package-level .R script open and run usethis::use_tibble() for data as tibbles. Run devtools::document() to make all documentation concrete. Check your package with devtools::check(document=FALSE). Go to Build &gt; Install and Restart ! Push to GitHub and have folks install with remotes::install_github(\"&lt;your-repo&gt;/&lt;your package&gt;\"). Congratulations, you’ve made a package with documented data! If you’d like to create a worksheet-like templates to also put in your package, continue with the next section. "],["rmd-templates.html", "Chapter 13 Create R Markdown templates 13.1 Why do this? 13.2 Step 1: Create files and folders 13.3 Step 2: Create your template 13.4 Step 3: Confirm that your template is accessible", " Chapter 13 Create R Markdown templates Including “worksheets” or report templates with R Markdown 13.1 Why do this? An .Rmd template is essentially the replacement for a worksheet. It is a partially-filled out R Markdown file that you can create. You can create a template for every homework assignment or exercise that you want your students to work through. And they can access all of these templates easily when they go to File &gt; New File &gt; R Markdown. And then select From Template from the dialogue box menu. Your custom R Markdown template will appear there. You can make a couple templates for general use cases (e.g. “Homework”, “Reports”, “Final Project”) or you can make as many very specific templates populated with questions or tailored excercies (e.g. “Lesson 1 Excerices”, “Problem Set 2”). As a rough outline, to make your first template you will: Use a usethis function use_rmarkdown_template() to create the necessary directory and file structure within your package. Modify the template. Save, Build, Install, and Restart. If you’re unfamiliar with the basics of RMarkdown and need to learn the syntax, then first you will want to check-out the resources and tutorials we’ve compiled here. 13.2 Step 1: Create files and folders I assume you have already created the basic package infrastructure from Part 1. Run use_rmarkdown_template(template_name = \"&lt;your-template-name\") use_rmarkdown_template(template_name = &quot;Worksheet1&quot;) ✔ Setting active project to &#39;/Users/desiree/Documents/New R Projects/testpackage&#39; ✔ Creating &#39;inst/rmarkdown/templates/worksheet1/skeleton/&#39; ✔ Writing &#39;inst/rmarkdown/templates/worksheet1/template.yaml&#39; ✔ Writing &#39;inst/rmarkdown/templates/worksheet1/skeleton/skeleton.Rmd&#39; &gt; This creates a new folder in the root package directory inst/ with several subdirectories. 13.3 Step 2: Create your template Edit skeleton.Rmd inside inst/rmarkdown/templates/&lt;your-template-name&gt;/skeleton/. This is what you’re users will see. consider what you’d like the output format to be. To see some examples of how here. You can also include a description of your template in the template.yaml file in the parent directory skeleton/. But this is not critical to getting the template into the package. Save, Build &gt; Install and Restart You can get ideas for how minimal .Rmd templates can be customized by checkout out a few example templates here. 13.4 Step 3: Confirm that your template is accessible Once your R session has been restarted, navigate to File &gt; New File &gt; R Markdown. Select From Template from the dialogue box menu. Your custom R Markdown template will appear there. Voilà! Tip: You can continue to add new .Rmd templates to your package throughout your course. When you do, ask students to update the package, and they will access to the new templates. [INSERT DAVID MEZA QUOTE] We next show you how you can introduce a special type of .Rmd document in your package: a LearnR tutorial. "],["proj-templates.html", "Chapter 14 Create RStudio project templates 14.1 Why do this?", " Chapter 14 Create RStudio project templates Including “worksheets” or report templates with R Markdown 14.1 Why do this? https://rstudio.github.io/rstudio-extensions/rstudio_project_templates.html "],["learnr.html", "Chapter 15 Add interactive tutorials 15.1 PART 1: Including a LearnR tutorial 15.2 PART 5: FINAL STEPS 15.3 Troubleshooting 15.4 Miscellaneous / Nice to Know 15.5 Other community resources on package-making:", " Chapter 15 Add interactive tutorials 15.1 PART 1: Including a LearnR tutorial 15.1.1 Why do this? LearnR tutorials are interactive R Markdown documents that allow you to incorporate code exercises as well as elements like videos and quizzes. There are many possibilities, and we point you to other resources to see various examples of these tutorials in action. The nice thing about this tool is that students can play around with code and preview various concepts outside of the RStudio IDE. One possible use case would be when you would like to introduce broader concepts in an interactive way before students begin focusing on the programming and coding aspects of the concepts within a regular .Rmd document. 15.1.2 Step 1: Create files and directories As before, I assume you have at a minimum created the basic package structure from Part 1. Install the learnr package Run use_tutorial(\"&lt;name-of-tutorial-file&gt;\", \"&lt;title-you'd-like-the-user-to-see&gt;\", open = interactive()) remotes::install_github(&quot;rstudio/learnr&quot;) use_tutorial(&quot;Lesson1&quot;, &quot;My Title&quot;, open = interactive()) This adds a tutorial folder to the inst directory. 15.1.3 Step 2: Customize your tutorial The .Rmd file inside the tutorial folder is automatically opened. Edit it to customize your tutorial content. Click Run Document next to the little green arrow in the toolbar of the .Rmd file. This will generate a .html file in the same directory as the tutorial .Rmd file and also run your tutorial locally. 15.1.4 Step 3: Add additional subdirectory At the time of writing, there is one additional folder that needs to be added, which use_tutorial did not create for us. Within the subdirectory tutorials/, add a new folder with the same name as your .Rmd tutorial file. Move your tutorial .Rmd file and the .html for your tutorial into this new folder. Build &gt; Install and Restart 15.1.5 Step 4: Run your tutorial Run your tutorial with run_tutorial(\"&lt;tutorial-name&gt;\", \"&lt;package-name&gt;\"). learnr::run_tutorial(&quot;Lesson1&quot;, &quot;testpackage&quot;) The above line of code is also how your users will be able to run your tutorial once they have installed your package. If you get errors, double check that your structure for the tutorial folders and files matches that of those in the testpackage repository. Make sure you Build, Install, and Restart before trying again. 15.2 PART 5: FINAL STEPS 15.2.1 (Optionally) Document the package as a whole We created documentation for the data set, but not for the package overall. To do so: Run usethis::use_package_doc() Edit the associated .R script that is generated in R/ with roxygen-style comments See section 6.6 here and here for examples of what to include. Don’t forget to run document() to update the documentation #install.packages(c(&quot;devtools&quot;, &quot;roxygen2&quot;)) library(roxygen2) library(devtools) document() Re-Build and install your package Check that package documentation works by typing ? &lt;package-name&gt; substituting your own package name. 15.2.2 Create a README.Rmd file You can include additional information in a README.Rmd file for your package. At a minimum, you should include a line about how to install, using the guidelines from Part 1: Deliver. Run use_readme_rmd() &gt; use_readme_rmd() ✔ Writing &#39;README.Rmd&#39; ✔ Adding &#39;^README\\\\.Rmd$&#39; to &#39;.Rbuildignore&#39; ● Modify &#39;README.Rmd&#39; ✔ Writing &#39;.git/hooks/pre-commit&#39; Edit to meet your needs. Click Knit, so that it updates the corresponding README.md file Commit and push. 15.3 Troubleshooting If you run into rough patches, here are some common pitfalls that might be resulting in errors: Do you have most up-to-date version of your packages? Try installing the development version of the package from github. Here’s an example of what that looks like for the usethis package. # install.packages(&quot;devtools&quot;) devtools::install_github(&quot;r-lib/usethis&quot;) Are you running the most current version of R and/or RStudio? Did you install R via homebrew? –&gt; Uninstall and install from CRAN! 15.4 Miscellaneous / Nice to Know If you didn’t start with a repo, then you should use usethis::use_github() Licensing educational materials [ASK GREG] 15.5 Other community resources on package-making: You can find a diversity of additional helpful resources and tutorials on making R packages. We list a few below: Hilary Parker on basic package functions: bare-bones function making Writing an R package from scratch : Follows up on Hilary’s but incorporates usethis() Taking your data to Go: Straightforward, concise tutorial on data packages R Package Primer "],["intro-rmd.html", "Introduction What are we making? Pros and cons of using Rmd sites Is this cookbook for you? Other learning resources", " Introduction This is a cookbook intended for folks who would like to put together a site to help them organize and deliver their teaching materials to learners. An R Markdown site is the most straightforward way to compile a collection of R Markdown documents. Using R Markdown project templates, you can put together a bare-bones site in no time at all. Here, we will show you an example of how to do this by making a demo site. You can follow along with this cookbook, or you can download the demo repositories modify as much as you’d like. 15.5.0.1 Make a site You will build a bare-bones R Markdown website from a site skeleton and publish it. We make only the most minimal changes to content and style necessary to get you a shareable website. 15.5.0.2 Make it yours You’ll personalize your content here by adding new pages to your site and growing your navigation bar. 15.5.0.3 Caring for your site You’ll develop a workflow for editing your site, adding new content, and hiding pages that are works-in-progress. 15.5.0.4 Dress it up Here, you’ll find instructions for no-fuss website customizations that leverage built-in features that do not rely on knowing, learning, or using CSS. 15.5.0.5 Make it fancier In the final chapter, you’ll learn about website customizations that require some CSS and HTML. What are we making? We’re about to take a collection of (one or more) R Markdown files, create .html versions of each, and “knit” them together into a single, navigable website. This is not so different from what happens when you work with individual .Rmds. But, there are a few key pieces of magic that separate a directory filled with R Markdown files from a living, breathing website: A _site.yml text file that will stitch your .Rmd documents together and place an official-looking navigation bar at the top of them. An R Markdown file with the name index.Rmd file, which will become your site’s homepage. Additionally, we’ll demo how to publish your R Markdown site for free using GitHub Pages, so you’ll also need: A docs/ folder, which will be the folder that we will use as the “boarding area” for your rendered site files to deploy on GitHub Pages. To turn on GitHub Pages for your repository. There are certainly other options for publishing (aka deploying) an R Markdown website. For an overview of other options, you may reference: https://rstudio.github.io/distill/publish_website.html. Pros and cons of using Rmd sites Pros: Minimal additions (really, just 2 files) are needed to go from a collection of regular R Markdown documents to a site. Minimal software dependencies (really, only rmarkdown) is needed to build your site- no additional software is required. A simple structure allows you to grow your content and add pages quickly, without having to invest time in learning complicated folder structures to figure out where to put new files. Ideal for small sites that do not need complex organization or many pages (i.e. for workshops, a series of online tutorials, or a basic course website). Easy to customize without any knowledge of web design or CSS if you’re okay sticking to the templates. Cons: Many files lead to chaos because all .Rmd files that go into the site must sit inside the project root directory. That is, you cannot organize them within subdirectories. This means that, as the number of pages increases, your project directory becomes increasingly crowded and difficult to navigate. CSS and HTML necessary for moving beyond the limited built-in customization options. Depending on what you enjoy about coding–this might not actually be a con. Is this cookbook for you? Pre-requisites: You have a GitHub account You are comfortable with the basics of using R and RStudio You understand how R projects work You understand the difference between a regular R script and an R Markdown document What you’ll learn: How to compile multiple R Markdown pages into an R Markdown site How to add basic customization through themes using built-in options Optionally, how to customize your site even further with CSS How to publish your R Markdown pages for free via GitHub Pages Let’s get started! Other learning resources Lisa Debruine’s Create a simple webpage using R Markdown: Includes some overview of adding images, changing global style settings, etc. Emily Zabor’s Creating Website in R: Includes description of how to add a personal domain name. Julia Lowndes’ Making free websites with RStudio’s R Markdown: A how to that also includes descriptions of the RStudio GUI layout and an overview of Markdown syntax. Nick Strayer &amp; Lucy D’Agostino McGowan’s How to make an RMarkdown Website R Markdown: The Definitive Guide: The official and very thorough, but often technical, resource for R Markdown. Treat this as a reference text. GitHub and Rstudio: Step-by-step guide on publishing .Rmd docs and websites to GitHub, includes working with local branches and using the terminal tab within R. "],["make-rmd.html", "Chapter 16 Make a site 16.1 tl;dr 16.2 Getting set up 16.3 A mini-orientation 16.4 Push to GitHub 16.5 Change output directory 16.6 Turn off Jekyll 16.7 Build your site 16.8 Push to GitHub (again) 16.9 Make a living, breathing site! 16.10 Uplevel your workflow", " Chapter 16 Make a site 16.1 tl;dr This tl;dr is for readers who are already experienced with GitHub and want to see our “cheatsheet” version of the rest of this chapter. If you are looking for screenshots plus some hand-holding, we think you’ll benefit from reading the rest of this chapter. Here’s how you make an R Markdown site from scratch, using a built-in site skeleton as a template: Start with an empty RStudio project linked to a remote GitHub repository that you can push/pull to from your local copy in RStudio. In your project, create a simple shell for an R Markdown website shell by running the following code in your R console: rmarkdown:::site_skeleton(getwd()) Prep for publishing to GitHub Pages by changing the output directory of your website (in your _site.yml file) to a folder named \"docs\". name: my-website output_dir: docs Tell GitHub Pages to bypass using Jekyll to build your site by adding a single empty file named .nojekyll to your project root directory. file.create(&quot;.nojekyll&quot;) Build your site using the RStudio “Build” pane. Push and commit to send your site online to GitHub- do you see your .html files in the \"docs\" folder? Turn on GitHub Pages by going to your repository online. Click on the repository’s settings and under GitHub Pages, change the Source to be the master branch /docs folder. Edit your site, build it, then push and commit to GitHub to publish your changes online. Rinse and repeat! Every push to your master branch triggers the online version of your site to update. 16.2 Getting set up 16.2.1 Update packages The only package you need for this cookbook is rmarkdown, but if you are using RStudio, you are all set! The rmarkdown package does not need to be explicitly installed or loaded here, as RStudio automatically does both when needed. However, if you haven’t updated your package recently (or ever), you can re-install it to make sure you are using the most up-to-date version from CRAN: # check package version installed packageVersion(&quot;rmarkdown&quot;) # install if update is needed install.packages(&quot;rmarkdown&quot;) At the time of publishing, we are running rmarkdown version 2.16. 16.2.2 Make a project For your first R Markdown site, we recommend starting by creating a GitHub repository online first, then making a project in RStudio. If this is not your first rodeo, then you could check out the more advanced GitHub last workflow). We recommend following the tips on Happy Git with R and starting in GitHub before switching to RStudio: Create a new repository on GitHub for your work. Do not initialize the repo with a .gitignore or a README file (we’ll add these later!). Copy the repository URL to your clipboard. Do this by clicking the green Clone or Download button. Copy the HTTPS clone URL (looks like: https://github.com/{yourname}/{yourrepo}.git). Or copy the SSH URL if you chose to set up SSH keys (looks like: git@github.com:{yourname}/{yourrepo}.git). Create a new RStudio Project via git clone. Open RStudio. Do this by clicking File &gt; New Project &gt; Version Control&gt; Git. Paste the copied URL. Be intentional about where you tell RStudio to create this new Project. Click Create Project. Follow these instructions from Happy Git with R to start with a new repo on GitLab or Bitbucket, instead of GitHub. 16.2.3 Make a site skeleton We’ll start by creating the shell for a basic R Markdown website and publishing this site to GitHub Pages straight away. In your R console, type and run the following code: rmarkdown:::site_skeleton(getwd()) Don’t miss it! Note that we use ::: here (with three colons) to generate important infrastructure files we need. You will end up with the following files in your working directory, as shown in Figure 16.1. The most critical files are the index.Rmd and the _site.yml, and we mention a little about them below. Figure 16.1: Site skeleton Close RStudio and re-open your site by clicking on the project file (.Rproj). When you re-open the project, you may notice the .Rproj file shows up in your Git pane, which means that the file has changed since your last commit. What happened? RStudio has detected that you have built a website, so a single line has been added to your .Rproj file: BuildType: Website 16.3 A mini-orientation Our skeleton created two out-of-the-box content files for our site: index.Rmd Any content in this file will be your site’s homepage. This file must be named “index.Rmd”. about.Rmd This will be a second, distinct page of your site. This file can have any name, but we will stick to “about” for now. When we build our site, R Markdown will knit each of these, and create .html (i.e. website-ready) versions of them that we can preview locally. The third file in our skeleton, _site.yml, is not a file that gets turned into a site page, but is necessary for site setup. Nothing to do here, but good to know these things! We’ll circle back to editing these files later. 16.4 Push to GitHub Let’s get these website files pushed up to our remote repository on GitHub. Do the following from RStudio: Click Git in the same RStudio pane that also contains the Environment tab. Check the box(es) under the “Staged” column and click Commit. Add a commit message like “initial commit” and then click Push. 16.5 Change output directory Now let’s make a small change. In order to publish to GitHub Pages, we’ll want to send all the rendered site files (i.e., all those ending in .html) to our “boarding area”, which is the docs/ folder. We need to edit the _site.yml to change this setting. Open _site.yml and add the following on its own line at the end: name: my-website output_dir: docs This step is a one-time step. It says: “Please take all of my .html files that get made when I build, and place them in the docs/ folder. And if there’s not a docs/ folder, then make one.” Having our HTML files live in docs/ is necessary for using GitHub pages to make our pages go live, which we’ll do soon. You do not need this step if you will not be publishing to GitHub Pages. 16.6 Turn off Jekyll This bit is only necessary if you plan to use GitHub Pages for publishing your website. We need to tell GitHub Pages to bypass using Jekyll to build your site. We do this by adding a single empty file named .nojekyll to your project root directory. file.create(&quot;.nojekyll&quot;) 16.7 Build your site In the lifecycle of your site, you’ll be doing lots of building. What does building the site do? This processes your .Rmds and creates the docs/ folder (if it doesn’t already exist) that houses .html versions of each of your .Rmd files. AND each of these pages now has a common navigation bar at the top that links your site together (this is thanks to our _site.yml file–but more on that later). In RStudio, you can render your site locally (knit + preview all .Rmd files in one fell swoop) from the either the IDE or the R console. From the R console, you can run: rmarkdown::render_site() OR from the IDE, find the Build tab and select Build Website: Figure 16.2: The build pane in RStudio If the rendered site does not open up automatically in a new window, you can go to the docs/ folder in your project, click on the index.html file, and View it in Web Browser. 16.8 Push to GitHub (again) Let’s get these new website files pushed up to our remote repository on GitHub. If you want your site to have the most recent updates you’ve made, then every single .Rmd file with a change must be built right before pushing to GitHub. Using either the build pane or rmarkdown::render_site(), you don’t need to knit each .Rmd file one at a time, but you do need to build your site locally first every time. Watch out! Each time you run rmarkdown::render_site(), the docs/ folder will be overwritten with updated HTML versions of your .Rmds. This means DON’T EVER EDIT FILES IN THE docs/ FOLDER! Nothing catastrophic will happen if you do, but you will overwrite and lose all your changes the next time you knit or render_site(). Go ahead and stage all your changed files, commit, and push to GitHub. If at this point you somehow ended up with a folder called _site/ in your project directory, go ahead and delete it. You don’t need it. This is just the default version of the docs/ folder, and if you have it, it just means you must have knit or rendered your site before we specified output_dir: \"docs\" in _site.yml. Now we’ll get to the good stuff! Let’s put this on the internet! 16.9 Make a living, breathing site! We have built some out-of-the-box content and pushed to GitHub. Now we’ll go back to the GitHub website and tell it where to find our website-ready files: Back on GitHub, click the Settings tab of your project repository. Scroll down until you get to “GitHub Pages” and select “master branch/docs folder”. (This is why we had to set up output_dir: docs in our site.yml file previously. If your file doesn’t end up in the docs/ folder, GitHub pages won’t find it.) Congratulations! A url is generated–this is your website address. You can share it, tweet it, send it to your mom–it’s now live! Add this url to the repo description so that it’s easy to find. Now that the bare bones of the site are up, you can go back and add more content to your R Markdown documents anytime. Your changes will go live as soon as you build or render_site(), followed by a push to GitHub. 16.10 Uplevel your workflow We followed a “GitHub first” workflow above, but if you’ll be using GitHub regularly, we recommend evolving this workflow. First, install the usethis package: install.packages(&quot;usethis&quot;) Then load it to use it: library(usethis) Now, follow the instructions from Happy Git with R for setting up a GitHub personal access token or PAT. Be sure to restart your R session after setting up the PAT, and pay close attention that your .Renviron file has at least one empty line at the bottom. Once you have a GitHub PAT set up in your .Renviron file, you can stay in the comfort of your project in the RStudio IDE to do all the GitHub things we were doing before online in your browser. Now, here is your advanced workflow for creating a new R Markdown site inside a project: Click File &gt; New Project &gt; New Directory Scroll down and select Simple R Markdown Website Then use your R console to run this code: use_git() use_github() # you have to have a PAT setup Then follow all of our instructions above starting at changing the site output directory. "],["rmd-yours.html", "Chapter 17 Make it yours 17.1 Adding new pages 17.2 Grow your navbar 17.3 Add a dropdown menu 17.4 Add your content 17.5 Recap", " Chapter 17 Make it yours 17.1 Adding new pages Adding new pages to your site means adding new .Rmd files to your site’s project root directory. You can do this in RStudio using File &gt; New File &gt; R Markdown. Delete the default YAML except for the title and all text/code in the document, then edit away. 17.2 Grow your navbar To make a new page actually findable from your site, you’ll need to also make a change to navbar, which means opening up the _site.yml file and fiddling with it. To add another R Markdown link to your navbar, you need to know two things about the new page you want to add: The name you want to see on the navbar for this page; this is the page’s text. The name of the .html file that corresponds to the .Rmd file you’re adding; this is the page’s href Let’s say we create a new file called readings.Rmd. We want to add the link to the rendered page readingss.html to our upper navbar next to “Home” and “About”, so we would add the following to our YAML: navbar: left: - text: Home href: index.html - text: About href: about.html - text: Readings href: readings.html Save the changes to _site.yml, build, and preview to see the new page appear in the upper navbar. name: My Website output_dir: docs navbar: left: - text: Home href: index.html - text: About href: about.html - text: Readings href: readings.html You may have noticed that in the YAML options we’ve looked at so far, left: has been one of the first things to go under navbar:. You can add all (or just some) of your links aligned to the right side of the navbar instead by using right:. navbar: left: [] right: [] If we added the page for rmd.Rmd to the right of our navbar instead: name: My Website output_dir: docs navbar: left: - text: Home href: index.html - text: Lectures href: lectures.html right: - text: Readings href: readings.html ![](images/screenshots/rmd-grow-nav-right.png) 17.3 Add a dropdown menu At some point, you may realize that you need room to grow with your navbar and the content you have planned to create and share. When you do, you may want to use dropdown menus. You can create a dropdown menu to add many more pages to the site without taking up space in your navbar. Let’s say we had a course with several modules, and we decided to create a separate R Markdown document for each module of readings in this course. We could create a dropdown menu called “Readings” and link to each of the readings pages underneath that. See how we do this in the YAML below: We’ll start by getting rid of the single readings.Rmd that we linked in our navbar. Add a new - text: field followed by the heading that you want to use for your dropdown. I’m going to call mine “Readings”. Add a menu: field. Nothing else goes on this line. Now add the pages that will go under this menu with their own - text: and href: fields. Repeat the previous step until you’ve added all the pages for this dropdown. We’re adding 4 new pages under our menu. navbar: title: My Website left: - text: Home href: index.html - text: About href: about.html - text: Readings menu: - text: Module 1 href: readings-module1.html - text: Module 2 href: readings-module2.html - text: Module 3 href: readings-module3.html - text: Module 4 href: readings-module4.html 17.4 Add your content Now that you know how to add and link new pages to your site, you’re ready to make your site your own with your own content. Creating this for a workshop? A course? Need ideas of what to include? Check out our Organization page. 17.5 Recap In this section you: Added new pages Grew your navbar Added a dropdown menu Added your own content to your site "],["rmd-care.html", "Chapter 18 Caring for your site 18.1 Hiding pages 18.2 Staying organized 18.3 Troubleshooting", " Chapter 18 Caring for your site Once you have the website in place, it’s likely that you will want to update it periodically or add new pages. The key to updating is that you must build your site or use rmarkdown::render_site() each time before you push to GitHub–otherwise your changes wouldn’t make it into your docs/ folder. And if it’s not in the docs/ then GitHub pages will not be able to find it. Here’s what the add-new-pages workflow looks like for me: Open the existing site RStudio project Run “Build Site” or rmarkdown::render_site() right away to see where things left off. Create a new .Rmd document in RStudio using File &gt; New File &gt; R Markdown, and delete its default YAML except for the title, then edit away. Update your _site.yml by adding the new page’s .html file to the navbar section. Note: It’s very easy to forget this step!! Run rmarkdown::render_site() to stitch everything together. Rinse and repeat if needed! Commit and push all changes to GitHub. 18.1 Hiding pages Have an R Markdown file that you’d like to keep under wraps? If you leave it off of your navbar and don’t link to it elsewhere, then it’s unlikely anyone will ever see it, but it will still be rendered when you build your site. If you don’t want the .Rmd to be rendered at all, then save it with a filename that begins with an underscore _. All files with underscores get passed over when it’s time to render the site (but they’ll still be in your repository). 18.2 Staying organized Say something about all the files You could group your Rmds into folders– a folder for labs, a folder for readings, etc. But the downside is that you’d have to knit each file in the directory individually in order for it to end up in the docs/ folder. But then the following scenario can happen: &lt;running to class, pages not updated, takes a long time, blerghh&gt; 18.3 Troubleshooting -did you forget to knit a page– click build site. -inspect your docs folder -can always delete your docs/ folder and have a fresh start. rebuild site. -triple check your YAML "],["rmd-dress.html", "Chapter 19 Dress it up! 19.1 Before you begin 19.2 One YAML to rule them all 19.3 Applying what you can from a single lesson 19.4 Add a site theme 19.5 Customize code highlighting 19.6 Change the navbar color 19.7 Add navbar icons 19.8 Tidy up the dropdown menu 19.9 Recap", " Chapter 19 Dress it up! The focus of this section is to show you “built in” ways for you to change the way your site looks and feels without needing any custom style. What does this mean? This means you don’t need to know or use CSS, otherwise known as Cascading Style Sheets to make any of the changes we demo below. 19.1 Before you begin Let’s return to our site, right where we left off. You should have already added your own content, but for simplicity, I’m going to continue with the boilerplate demo that we’ve been showing. Your content does not have to be the same as mine from this point forward. The sections below go through a list of built-in ways you can give your site a face lift by editing the YAML. There are a lot but don’t feel overwhelmed. Most of these options are à la carte – so go ahead and scroll on down and see if there are any you like! Let’s try out some different options. Build your site or use rmarkdown::render_site() after trying each one out to see how the change affects your site. If these customizations leave you wanting more, then be sure to check out the “Make it fancier” chapter. 19.2 One YAML to rule them all We start off with a closer look at _site.yml. This file is like the orchestra conductor of our site. The _site.yml file directs the R Markdown site generator how to build our whole site from the different sections . The file is written in YAML (which in the programming world is just a language that is easy-ish to read and usually deals with configuation settings). _site.yml is not only what creates the navigation bar (a.k.a “navbar”) for us, but it’s also mission-control for layout and aesthetics options, as we’ll see soon. Normally a single R Markdown document will have its own YAML. When we make an R Markdown site, we have a new tool, the _site.yml, which is a global YAML file. This YAML acts as a default YAML setting for all the .Rmds that will go into our website. This is useful if, for example, we want the table of contents to appear on every site page, but don’t want to have to write it at the top every individual .Rmd. Just throw it in once to _site.yml and have all your YAML options apply globally. What happens if one of your R Markdown documents in your site still has its own YAML at the top? Then the YAML options at the top of that R Markdown document will apply to that document only. An individual .Rmd file’s YAML will override the global _site.yml. This can actually be useful when some options are only applicable to a single page on your site. For example, the code_download option, which we demo in the next section, might not be relevant for all your site pages, so you can reserve this for individual page YAMLs only. If an individual page’s YAML and the _site.yml conflict, then the more specific option will always win (i.e. the individual YAML). 19.3 Applying what you can from a single lesson We won’t cover it again here, but you should also add the following things that we already covered in the single Rmd lesson Floating TOC White Space 19.4 Add a site theme Open your _site.yml file, and let’s begin our site makeover. We’ll start with setting up our _site.yml to apply a theme to our site. Themes are blanket ways of dressing up your site’s aesthetics quickly. We highly recommend picking a theme for your site! You have 15 theme options: default, bootstrap, cerulean, cosmo, darkly, flatly, journal, lumen, paper, readable, sandstone, simplex, spacelab, united, and yeti (use null for no theme) You can preview them all here. Here is how you give your website a theme: Open _site.yml. Add these 3 lines to the bottom of your _site.yml file; let’s give every page the same theme = \"yeti\" (Remember! Indentation and new lines matter very much here): output: html_document: theme: yeti Save your _site.yml file then re-build your site. Your YAML should like this, and your site should now be themed. name: my-website output_dir: docs navbar: title: My Website left: - text: Home href: index.html - text: About href: about.html - text: Readings menu: - text: Module 1 href: readings-module1.html - text: Module 2 href: readings-module2.html - text: Module 3 href: readings-module3.html - text: Module 4 href: readings-module4.html output: html_document: theme: yeti Figure 19.1: Add a site theme Within any YAML, pay careful attention to the indentations and spaces. YAMLs are fussy about this, and this is often the source of many errors! 19.5 Customize code highlighting Now that we have a theme, we may also want to change how our code looks. Again, we have a few built-in options: default, tango, pygments, kate, monochrome, espresso, zenburn, haddock, and breezedark Check out what these look like here. Add a highlight style by creating one new line with the key highlight, nested underneath the html_document: line: name: my-website output_dir: docs navbar: title: My Website left: - text: Home href: index.html - text: About href: about.html - text: Readings menu: - text: Module 1 href: readings-module1.html - text: Module 2 href: readings-module2.html - text: Module 3 href: readings-module3.html - text: Module 4 href: readings-module4.html output: html_document: theme: yeti highlight: tango 19.6 Change the navbar color Each site “theme” has a built-in color for the navigation bar, but there is also an alternate navigation bar color we can activate by swapping out the theme type from default to inverse. This means that each site theme can really generate two distinct “looks”. name: my-website output_dir: docs navbar: title: My Website type: inverse See Figure 19.1 for a reminder of what the default navbar color looked like. For the next few examples, we’ll stick to using the default. 19.7 Add navbar icons In Caring for your site, we saw how to add new pages and grow your navbar. When you add text and href fields to your navbar, you can also add sprinkle in an icon: &lt;icon-prefix-and-name&gt; either in addition to or in place of text. Using icons in place of text is often used to provide links to outside sources (e.g., Slack, GitHub, etc.) or to other pages within your own site. You can use any* icons from Font Awesome, by entering the prefix fa- followed by the icon’s name. Well, you can’t really use any font awesome icon. It has to be a font awesome icon from a version that R Markdown has loaded. At the time of writing this means only using icons that are from version…. Here is a basic navbar: navbar: left: - text: Home href: index.html - text: About href: about.html And here is the same with icons added: navbar: left: - text: Home href: index.html icon: fa-home - text: About href: about.html icon: fa-book-open right: - href: https://github.com/rstudio4edu icon: fa-github - href: https://twitter.com/rstudio icon: fa-twitter Here is the output: Left navbar Right navbar 19.8 Tidy up the dropdown menu There’s a little more accessorizing we can do with the dropdown menu. Add divider lines to create sections in the dropdown with - text: \"---\". Add internal headers with a - text: line without an href line immediately underneath it. name: my-website output_dir: docs navbar: title: My Website type: default left: - text: Home href: index.html - text: About href: about.html - text: Readings menu: - text: Semester 1 - text: Module 1 href: readings-module1.html - text: Module 2 href: readings-module2.html - text: &#39;---------&#39; - text: Semester 2 - text: Module 3 href: readings-module3.html - text: Module 4 href: readings-module4.html 19.9 Recap Theme Highlighting Inverse color navbar Icons Dropdown divider "],["rmd-fancy.html", "Chapter 20 Make it fancier 20.1 Before you begin 20.2 Anatomy of a fancy R Markdown page 20.3 Adding custom CSS to your site 20.4 Aesthetics and branding 20.5 Table of contents 20.6 Navigation bar styling 20.7 Questions counter 20.8 Add multiple CSS files 20.9 Recap", " Chapter 20 Make it fancier Once you’ve built the basic structure for your R Markdown site, if you’d like to customize it even further, here are a handful of things you can add. The steps below involve a little bit of HTML and CSS work, but you don’t have to have much experience in these methods to be able to build something cool. In this section, I’ll walk you through the non-YAML “add ons” to your R Markdown site. You’ll get the most out of this chapter if you read through the CSS crash course before diving in. You’ll want to be familiar with using the Developer Tools of your web browser and selectors. 20.1 Before you begin I’m making a few assumptions that by this point you have already updated your R Markdown site with your own content in the Make it yours section and added whatever built-in options you wanted. For the demo that follows, I’ll keep using the RMD site skeleton with a few additions. I’ve added a few things to the site skeleton, aside from what we’ve walked through in the previous chapters, so that the following examples make more sense. It is okay that your content does not match up exactly with mine. A dropdown menu to the navbar Additional level 1 headers to the home page Turned on a floating table of contents Added github and twitter icons to the navbar We chosen yeti as our theme A note about choosing a theme. To start out, choose a theme whose navbar most closely matches what you’re final vision is. For example, if you want your navbar (and dropdown menus) to be dark with a light colored text, then sticking with Yeti is cool. But if you want a light colored navbar with dark text, sticking with Yeti as the base theme would mean you have a lot more CSS that will need adjusting, and you’re better off using a theme like default as your baseline. 20.2 Anatomy of a fancy R Markdown page 20.3 Adding custom CSS to your site Make a CSS file, by going to File &gt; New File &gt; Text File. Save this file in your project directory as style.css. Add this css: field to your _site.yml. output: html_document: css: style.css [commit] 20.4 Aesthetics and branding Everything that makes your site, look like your site. Google fonts Link color and hover behavior Add a logo Favicon Hero image 20.4.1 Google fonts To change the appearance of your text with a new font, you need to: Pick a Google font Add it to your CSS file Style specific text using CSS selectors Make sure your CSS file is linked in your _site.yml (and if you’ve been following along, it already is). 20.4.1.1 Select and import your Google font’s script Go to https://fonts.google.com/ and pick a font for your lesson’s main body text. I’m choosing Muli, but Lato and Source Sans Pro are other nice options. I recommend going with sans-serif fonts (i.e. no little feet on the letters) for the main text because they’re easier to read at smaller sizes on screens compared to serif fonts. Don’t pick anything too narrow, too wide, or ornate.) Select the font you want by clicking on the upper red + sign, and navigate to the small pop up window. Figure 20.1: Selecting a Google font Click on the CUSTOMIZE tab, and select the extra font weights and styles you want. Don’t check any that you don’t think you’ll use (because it slows down your lesson’s loading time ever-so-slightly when you add more). In addition to regular, I’m choosing one italic and one bold. Figure 20.2: Choosing additional font weights and styles Now click on EMBED and look under the @IMPORT tab. Copy the code within the &lt;style&gt; tags (you don’t need the style tags themselves). We will also need the second code chunk in a couple steps that says Specify in CSS, so keep this page open to come back to that. Figure 20.3: Getting the script to import your Google Font 20.4.1.2 Import the font to your site Back in the RStudio IDE, open up your style.css file. On the very first line, paste in the Google Font import code for the Muli font. This makes the font available within your site but doesn’t use the font yet. @import url(&#39;https://fonts.googleapis.com/css?family=Muli:400,400i,700&amp;display=swap&#39;); You might see others import Google fonts by embedding the script (with &lt;script&gt; tags) in an HTML file instead. This is perfectly legitimate. But if you’re just starting out, it’s easier to keep all the font stuff together in a CSS file, which is why we’re doing it this way. 20.4.1.3 Apply the font to your text We have our font imported, but now we have to be explicit with R Markdown about where to apply it. Let’s create our first CSS style rule below. We will apply the Muli font to our body’s text by using the font-family: property. Copy and paste the following style rule to style.css beneath the other line of CSS we’ve already added. Let’s also specify the font size to be 19px by adding the font-size: property. /*------------- Whole Document---------------- */ body { font-family: &#39;Muli&#39;; font-size: 19px; } Make sure that each line within {} ends with a ;. Keep tidy! Organize your CSS using comments like /* --insert-comment-- */ to create make-shift section dividers for your CSS, as we’ve done above. We’ll be adding many style rules, and we’ll want some way to keep track of everything as our CSS file grows. Time to admire your handiwork and decide whether or not you like it. You can repeat the steps above to apply different fonts to different parts of your lesson. For example, you could create another style rule using .title instead of body to apply a different font to the Title of your lesson. Remember that in order for any of your CSS to take effect, your style.css file has to first be referenced in your YAML. [commit] 20.4.2 Customize your links Their color, but also what color they turn when you hover over them. /* links */ a { color: #5ebccf; } a:hover { color: #50a0b0; /* darker color when hovering */ } [commit] 20.4.3 White space If you added white space manually before in an earlier section with either or \\, you can remove them because we’re about to add white space in a less manual way. We’ll take advantage of the fact that we know major sections will be divided by section headers, so we’ll tack on some padding on top of each section header. We’re adding what seems like a lot of padding–but that’s because our theme by default is going to undo some of this padding with a negative value for the margin-top: property. I know this seems absurd–we won’t get into the details here, but the negative margin is needed so that our headers don’t get hidden behind the navbar when your share links to particular sections of your site. We’re going to style the title a little differently than the rest of the headers, so we’ll pull it out on its own. It doesn’t need as much space as the other headers do. /*----------------ADDING WHITE SPACE-------------*/ .title { margin-top: 2em !important; margin-bottom: 0.75em; } .section h1, .section h2, .section h3, .section h4, .section h5 { padding-top: 3em !important; /*adding so much padding because theme adds a margin-top: -65px by default */ margin-bottom: 0.75em; } [commit] We’ll also add more white space in between the TOC and the rest of the body content, but we do this only when we have the space to— in other words, when our user’s screen is large enough. For this, we’ll have to use our first media-query. A media query is like an additional outer rule that says, “hey, only apply the CSS rule inside if [insert condition about screen width here] is met”. Media queries are useful for styling something different on a big screen than you would on mobile, etc. In the case below, we only increase the space between the TOC and the body content if your user’s browser screen is at least 992px wide: /* Space Between TOC and Righthand side content on large screens */ @media (min-width: 992px) { .col-md-9 { width: 75%; padding-left: 5em !important; } } [commit] 20.4.4 Logo 20.4.5 Add a logo We’ll add a logo above our table of contents. The main way we’re going to do this is by inserting a blank box above our TOC, and then giving the blank container a background image (our logo). We can control how big our logo will be by controlling the size of the box. Here’s what it will look like (if you’re bothered by the outline around it all, don’t worry–we’ll get rid of that in the TOC section): Add your logo image to your project directory. Paste the CSS style rule below. We’ll break it down in a second. /*----------LOGO above TOC---------*/ #TOC::before { content: &quot;&quot;; display: block; height: 200px; margin: 2em 20px 40px 20px; background-image: url(&quot;logo-black.png&quot;); background-size: contain; background-position: center center; background-repeat: no-repeat; } This uses the selector #TOC to identify our table of contents. I use the CSS trick of tacking on a ::before to say, “hey, I want you to insert whatever is in this style rule right before our #TOC.” This trick is called using a “pseudo-element” in CSS. In this case, my pseudo-element is a blank box–that’s why it says content: \"\";. There’s nothing in there. But–I still give my blank box some dimension with the height: property. The blank box is no longer blank once I use the logo as its background image. Change the image url to use your own image. Build your site and check out the results. If you need to adjust the size of your logo, you can fiddle with the height: property in the CSS above. 20.4.5.1 A second logo option If you chose not to use a floating table of contents, then adding a logo the way we have above won’t work since there won’t be a #TOC that a logo can go ahead of. So, you can instead place your logo in upper righthand corner, in line with the Title and Author. Add your logo image to your project directory. Open style.css. Paste this CSS rule into your CSS file: #header.fluid-row::before { content: &quot;&quot;; height: 150px; width: 150px; float: right; background-image: url(&quot;logo-black.png&quot;); background-size: contain; background-position: center center; background-repeat: no-repeat; } Edit the image url to be your own image file path. Save your changes and knit your .Rmd lesson to see your logo. You can fiddle with the height: property to adjust the logo size. 20.4.5.2 A third logo option But wait–there’s more! Here is a third option for adding a logo if you want it in the upper righthand corner, above the Title and Author fields. I personally like this one the least (asethetically, but also because it’s more involved to implement), but sometimes you might need to do this if you find that your title and content keep running into the logo with option 2. To do this, you will need three things: A different CSS style rule An HTML file with one line of code To edit _site.yml so you can reference the HTML file 20.4.5.2.1 Create an HTML container We need something that we can put our logo into– like an empty container. This is where the HTML file comes in. This file will hold an empty tag inside of it, but we’ll still give the empty tag a name, “upper-right-logo”, so that we can fill it up with our logo later using CSS. Let’s make the HTML file: From the IDE, you’ll create a new HTML file by going to File &gt; New File &gt; Text File. Paste the line of code below into the HTML file. &lt;div class=&quot;upper-right-logo&quot;&gt; &lt;/div&gt; Save this file as logo-option.html. You can choose a different name if you want. 20.4.5.2.2 Link the HTML file to your YAML Now we have a containter (via our HTML file), but R Markdown needs to know where to put it with respect to our page. That’s where _site.yml comes in. We will add two fields to our _site.yml: includes: and before_body: logo-option.html. This is how we have R Markdown place the empty container in the right spot— as the first item in the body tag of our page (the name “before” body is kind of a misnomer). Open your .Rmd file. Add the includes: and before_body: lines. --- output: html_document: includes: before_body: logo-option.html theme: yeti highlight: tango toc: true toc_float: false --- Edit the filename to be your HTML file if you chose a different file name. Save your changes. 20.4.5.2.3 Fill the container with your logo Finally, the CSS is where we’ll say “take the empty container we created in the HTML file, and make sure it’s yay tall and that it has this logo image as its background, etc.” Here’s how that goes down: Add your logo image to your project directory. Open style.css. Paste this CSS rule into your CSS file: .upper-right-logo { margin-top: 20px; background-image: url(&quot;logo-black.png&quot;); height: 150px; background-size: contain; background-position: right; background-repeat: no-repeat; } Edit the image url to be your own image file path. Save your changes and knit your .Rmd lesson to see your logo. You can fiddle with the height: property to adjust the logo size. I won’t use this logo option in the demo lesson as we move on to the next steps, but now you know how to do it if you need it. 20.4.6 Add a favicon You know the little tiny icon that gets placed in the corner of your browser tabs or gets placed in the bookmark’s bar? That’s a favicon! To add a favicon you need: An HTML file with one line of code An image to use as your favicon To edit _site.yml so you can reference the HTML file. 20.4.6.1 Choose your favicon image Choose an image–don’t have one? You can make one with a favicon generator. I chose the emoji graduation cap. Save the image you’d like to use as (use a PNG or ICO file) and place it in your project directory (for the best results, use a square or circular image). 20.4.6.2 Embed the favicon in an HTML file Make a new HTML file by clicking File &gt; New File &gt; Text File. Insert the following, replacing favicon.ico with your image filename. &lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; href=&quot;favicon.ico&quot;/&gt; Save this file as header.html. You can choose a different name. 20.4.6.3 Reference the HTML file in _site.yml We want this HTML file to go in the &lt;head&gt; tag of our site. The head tag is like the Font Desk/ admin of our site–and its the place where the favicon will be taken care of. Open _site.yml. Under the html_document: section, insert the includes: and in_header options like so: output: html_document: includes: in_header: header.html If you already have a file that you’ve included with the in_header field, then you can open up that file, and add the favicon line of code at the top of your existing file, OR you can list both header files separately, by listing them within brackets like this: [header.html, &lt;other-file.html&gt;,]. The order you list them in is the order that the browser will use them (which is only really important to know so that if you need to troubleshoot, you can try swapping the order). [commit] 20.4.7 Add a hero image To add the big image at the top of page (a.k.a hero image), we need to make an HTML file containing our image and text. Let’s add one to only our homepage. We’ll need: An HTML file To edit the YAML of our index.Rmd A image to use as our hero image CSS To adjust the table of contents positioning Aspirational step: to tweak for mobile How to do it: 20.4.7.1 Make an HTML file Go to File &gt; New File &gt; Text File. Copy and paste the HTML code below into this file (see Figure 20.4 to decode this!) &lt;div class=&quot;hero-image&quot;&gt; &lt;div class=&quot;image-text&quot;&gt; &lt;div class=&quot;top-text&quot;&gt;DATA 101&lt;/div&gt; &lt;div class=&quot;bottom-text&quot;&gt;Intro to Data Science&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Replace “DATA 101” with the text that you’d like to see on the top line. Replace “DATA SCIENCE” with whatever text you’d like to see on the bottom line. Close and Save this file in your project directory as hero-image.html. The name of the file does not have to be hero-image. Here’s what each of the lines in hero-image.html is doing: Figure 20.4: Decoding the hero-image.html file 20.4.7.2 Have R Markdown apply the HTML file Open index.Rmd. Reference the HTML file in index.Rmd’s YAML with the includes: and in_header: lines. title: My Website output: html_document: includes: in_header: hero-image.html This will add the image to ONLY the index.Rmd page of your site, which is appropriate since the index will serve as the homepage. We could have instead added in_header: to our _site.yml to apply the image to EVERY site page (but consider whether this might be visually overwhelming for your site!). When you add an in_header: option to a single page’s YAML, it will override the more “global” in_header: option set in _site.yml. So if you still want the global in_header: to apply (e.g. the header.html file that we used for our favicon), then you’ll need to list both files in the single page’s YAML. Like this, for example our index.Rmd YAML now looks like this: --- title: My Website output: html_document: includes: in_header: - header.html - hero-image.html --- :::tip Including an image like this in the header of the page is kind of a hack (the tag is supposed to be reserved for admin/ meta stuff of the website only, not really content or images)– so in order for this to work properly if you have two HTML files listed, make sure the hero-image.html is listed last. ::: Ooh la la: Try out a completely blank index.Rmd with nothing but the YAML with a header image for a visually-striking homepage. 20.4.7.3 Choose your hero image Find the hero image that you’d like to use. It should be something that will still look good even on a variety of different screen sizes. So, patterns usually work. Or landscapes. If you need some ideas, check here. In the rstudio4edu template, I also drop in a couple hero image files you can use–including one with a transparent background (a .png, not .jpeg file) so that (in a bit) you can manipulate the background color of it in the CSS. Save this image in your project directory. 20.4.7.4 Styling the hero image You could style this endlessly, but here’s the CSS we’re using. Each selector corresponds to the class names we used in hero-image.html: Open style.css Paste the three style rules below into your css file. In the hero image selector, find the background-image: property. Replace file within the url parentheses url() with the path of the image that you’d like to use. Find the part of the background-image: property that uses a linear gradient. This is a trick that will add a translucent dark overlay on your image so that your text on top will be easier to read (0 is completely transparent, 1 is completely opaque). If the hero image you chose is already dark enough, then you may not need the overlay, and you can either delete linear-gradient( rgba(0,0,0,.2), rgba(0,0,0,.2) ) or change the last numbers to 0. /* -----------HERO IMAGE AT TOP OF PAGE -----------*/ /* LARGE HERO IMAGE AT TOP OF PAGE*/ .hero-image { position: relative; margin-bottom: 2em; /* liner gradient tints the image darker for readability*/ background-image: linear-gradient( rgba(0,0,0,.2), rgba(0,0,0,.2) ), url(hero-navy.jpg); height: 400px; background-size: cover; background-color: #141c25f2; background-position: center center; display: flex; /* Change to `display: none` for no hero image */ justify-content: center; align-items: center; } .top-text { position: relative; font-size: 34px; padding-bottom: 0.5em text-transform: uppercase; text-align: center; display: block; /* Change to `display: none` for no top text */ color: #ffffff72; } .bottom-text { position: relative; letter-spacing: 0.065em; line-height: 1em; font-size: 68px; text-transform: uppercase; text-align: center; display: block; /* Change to `display: none` for no bottom text */ color: #ffffff; margin-bottom: 2.5rem; font-weight: bold; } Why use a background color? Yes, we did specify a background color and a background image for our .hero-image selector on purpose. Two reasons: (1) If your site ever has trouble loading your image, the background color is a nice stand-in. (2) If you use one of our template hero-images that was created as a pattern on a transparent background (hero-transparent.png – or any hero image that has a transparent background), then the background color you specify in your CSS will be the background color you see. Makes it easy to customize! Build your site and make sure that you like how your hero image looks. Notice that you can choose NOT to show a hero image, or either of the text lines by specifying display: none in the CSS. [commit] If you don’t like how your hero image is positioned in the container, you can mess around with the background-position property. Right now we use the keyword “center” to specify its x and y position–but other keywords you can use include: top, bottom, right, and left. You can also set the background position to be a length or a percentage of the container width. We haven’t changed the font for the text that overlays the hero image in this example, but you could always apply a Google Font that you’ve already imported by adding the CSS property font-family: to the CSS style rules for the .top-text and .bottom-text selectors. 20.4.7.5 Adjust TOC positioning Adding a hero image in this way makes our floating table of contents do strange things. We’ll need to fix this with the following CSS: /*-----------------TOC----------------*/ /* Makes TOC sticky (needed if you used a hero image) */ .row-fluid{ display: flex; /* Necessary for sticky TOC*/ } .tocify { position: -webkit-sticky; position: sticky; top: 120px; /*Controls where TOC stops when sticky */ width: 100% !important; } [commit] 20.4.7.6 Tweak for mobile But on mobile and other small screens, we don’t want the floating TOC to be there. And we’d probably like to make the overlaid text to either not be displayed (display: none) or just make the text smaller (which is what I’ll demo with the CSS below). Let’s try it. We’ll need to use a media query again: The style rules below will only apply for screens that are 767px or smaller: /* NO TOC on mobile */ @media screen and (max-width: 767px){ .col-xs-12.col-sm-4.col-md-3 { display: none; } .top-text { font-size: 25px; } .bottom-text { font-size: 40px; } } 20.5 Table of contents We’ve already started changing TOC styles after having added a hero image. Now we focus on the TOC aesthetics. First we will get rid of the TOC border Find the .tocify selector that we added earlier when we were working on the hero image. Add border: none; as a new line in this style rule. .tocify { position: -webkit-sticky; position: sticky; top: 120px; /*Controls where TOC stops when sticky */ width: 100% !important; border: none; } &lt;img src=&quot;images/screenshots/doc-toc-no-border.png&quot; width=&quot;50%&quot; style=&quot;display: block; margin: auto;&quot; /&gt; Next we’ll style the links that make up the TOC. Let’s change the color of the links slightly and also increase the font size /* TOC links */ .list-group-item { color: #7b8a8b; font-size: 16px; } Change the color and background color of active links, the link that show which section you are actively viewing: .list-group-item.active { color: #2c3e50; background-color: white; border: none; } Finally, change what happens when you hover over the regular and active links: .list-group-item:hover, .list-group-item.active:hover { color: #131b23; background-color: white; } &lt;img src=&quot;images/screenshots/doc-toc-links.png&quot; width=&quot;50%&quot; style=&quot;display: block; margin: auto;&quot; /&gt; [commit] 20.6 Navigation bar styling Finally– we get to tweak the navbar. The navbar, like the TOC, is important because we’ll see it on every page. It’s a little annoying to have style the navbar because we have to change the color of the navbar itself, and also the dropdown menu, and also the link buttons for both of these when you hover over them. We’ll change the colors to be a dark blue and grey variety with this CSS, including a bit of transparency on the navbar itself (#141c25f2 – is a hexcode color with two additional characters that add the transparency). /*----------------NAVBAR ---------------*/ .navbar-default { background-color: #141c25f2; } .navbar-default .navbar-nav&gt;.open&gt;a, .navbar-default .navbar-nav&gt;.active&gt;a, a.dropdown-toggle:hover { background-color: #141c25 !important; } /* Dropdown menu color */ .navbar-default .dropdown-menu { background-color: #141c25; } /* Dropdown menu hover color */ .navbar-default .dropdown-menu&gt;li&gt;a:hover { background-color: #202831f2; } /* Navbar Links when hovered*/ .navbar-default .dropdown-menu&gt;.active&gt;a .navbar-default .navbar-nav&gt;.active&gt;a:hover, .navbar-default .navbar-nav:hover, .navbar-default .navbar-nav&gt;li&gt;a:hover, a.navbar-brand:hover { color: #ffffffab !important; background-color: #141c25; } [commit] 20.7 Questions counter Finally, if you plan on using questions for learners in your site (for example, for labs or homework sets), you might want to make it easier to call out these questions by styling them. Like this: Before After This idea and CSS was inspired by Maria Tackett’s STA210 course: https://github.com/STA210-Sp19/website The CSS you need is this–it’s a lot, but for most use-cases the only style rule you really need to worry about editing is the second-to-last one, with the content: and color: properties: /* -----------Question counter ---------*/ body { counter-reset: li; } .question ol { /* Remove the default left padding */ padding-left: 0; } .question ol&gt;li { /* Create a positioning context */ position: relative; /* Disable the normal item numbering */ list-style: none; width: 90%; padding-top: 10px; padding-bottom: 10px; padding-right: 0; padding-left: 120px; } .question ol&gt;li:before, .question ol&gt;p&gt;li:before{ /* Use the counter as content */ content: &quot;Question &quot; counter(li) &quot;: &quot;; /* Increment the counter by 1 */ counter-increment: li; position: absolute; color: #3d85bb; left: -0.5px; font-weight: bold; } .question ol ol { counter-reset: subitem; } If you want to change the styling to say something other than “Question”, then you modify content: \"Question \". You can change the color of the called out question, too, with the color: #5ebccf; How to use the question counter: In your .Rmd, you have to enclose your numbered list items that you want to be styled questions with special div tags: &lt;div class=&quot;question&quot;&gt;` 1. My first question 1. My second question &lt;/div&gt;` ##Footer Let’s also add a footer. You need to: Make a new HTML file and insert your footer content 1.5) If you’re going to include images in your footer content (like logos or icons), then add those to your project directory. Add it to your _site.yml with the includes: after_body: Style the footer elements using CSS Here’s how we do this: Create your HTML file. Save it in your project directory. Name it footer.html. You can choose a different name. Paste something like this in the file: &lt;div class=&quot;footer&quot;&gt; &lt;hr&gt; &lt;p&gt; &lt;!--your custom footer text can go here--&gt; &lt;/p&gt; &lt;p class=&quot;rstudio4edu-footer&quot;&gt;This site was created with an &lt;a class=&quot;rstudio4edu-link&quot; href=&quot;https://rstudio4edu.github.io/rstudio4edu-book/&quot;&gt; &lt;img class=&quot;rstudio4edu-footer-logo&quot; src=&quot;logo-mark-rstudio4edu.png&quot;&gt;&amp;nbsp;rstudio4edu&lt;/a&gt; template.&lt;/p&gt; &lt;/div&gt; I suggest you use the footer to include mention of licensing [say more about this]. It’s a good place to add another tag with this content, for example: &lt;div class=&quot;footer&quot;&gt; &lt;hr&gt; &lt;p&gt; This content is licensed under the CC-BY license. &lt;/p&gt; &lt;p class=&quot;rstudio4edu-footer&quot;&gt;This site was created with an &lt;a class=&quot;rstudio4edu-link&quot; href=&quot;https://rstudio4edu.github.io/rstudio4edu-book/&quot;&gt; &lt;img class=&quot;rstudio4edu-footer-logo&quot; src=&quot;logo-mark-rstudio4edu.png&quot;&gt;&amp;nbsp;rstudio4edu&lt;/a&gt; template.&lt;/p&gt; &lt;/div&gt; What does this do? The is going to be a little section divider line. the div tag with class “footer” is going to be the container that we’ll use to style most of our footer contents later in the CSS. Within the div tag, you can put your chunks of footer text inside tags (for “paragraph”). In the example above, we’ve added the rstudio4edu icon and made it linked, so that’s what the tags and tags are for. Here’s the CSS we’ll use to style each of the part of our footer: /*------------FOOTER----------*/ /* Divider line above footer */ .footer hr{ width: 100%; } .footer { font-size: 16px; color: #808080; text-align: center; width: 90%; margin: 3rem auto; font-weight: 300; } .footer.logo { width: 25px; margin: 0px !important; } .rstudio4edu-footer { font-size: 12px; text-transform: uppercase; } .tocify-extend-page { height: 0px !important; /* Gets rid of extra space after footer*/ } 20.8 Add multiple CSS files Note that you can have several CSS files, if for example you have one for your organization and another custom file. I’m not going to do that, but just want to let you know that this is an option. output: html_document: css: - org.css - custom.css 20.9 Recap So here are all the ways that we made our site fancy: Added Google Fonts Customized our links Added white space around headers and site sections Added a logo Added a favicon Added a hero image with overlaying text Styled the Table of Contents links Customized the navbar Created specially-styled questions Created a footer "],["intro-distill.html", "Introduction What are we making? Distill vs R Markdown site Is this tutorial for you? Other learning resources", " Introduction Distill is R Markdown’s sibling with technical and scientific interests. It is essentially a slightly souped-up R Markdown document that has some built-in features that would otherwise need to be included rather manually in a regular .Rmd. The original intended use-case for Distill was to create a platform where authoring scientific, collaborative content would be made easier. Why Distill? You’re creating content that will use citations, appendicies, and footnotes. You want a site that can acknowledge multiple authors and affiliations. You want built-in options for things like a logo. You’re fine sticking to the default Distill theme (or you don’t mind getting your hands messy with CSS to change your site’s aesthetic) and you don’t need code_folding, code_download, or numbered sections. You may also want to learn how to use Distill so that you can then create Distill templates that your learners can then use to generate reports, etc. 20.9.0.1 Make a Distill site You will build a bare-bones Distill website from a site skeleton and publish it. We make only the most minimal changes to content and style necessary to get you a shareable website. 20.9.0.2 Make it yours You’ll personalize your content here by adding new pages or blog posts to your site. 20.9.0.3 Caring for your Distill site You’ll develop a workflow for editing your site, adding new content, and hiding pages that are works-in-progress. 20.9.0.4 Dress it up Here, you’ll find instructions for no-fuss website customizations that leverage built-in features that do not rely on knowing, learning, or using CSS. 20.9.0.5 Make it fancier In the final chapter, you’ll learn about website customizations that require some CSS and HTML. What are we making? Same idea as an R Markdown site. We need a _site.yml that will stitch our pages together, an index.Rmd that will be our homepage, + (optional) .Rmds of the Distill variety. Distill vs R Markdown site Since the R Markdown .Rmd file is essentially the fundamental unit of most of these sites, it makes sense to compare the other rstudio4edu tools to it. Similarities Distill and R Markdown can both exist as single pages Collections can be combined into a set to create a website rmarkdown::render_site() or Build Website within RStudio will build your site Same core website features and configurations for YAML apply Messy-ish directories (compared to blogdown where you can bundle things) styles.css can be added to both in the YAML under output: Unique to Distill create_website(dir = \"&lt;your-directory-name&gt;\", title = \"&lt;your-site-name&gt;\") ** Is library(distill) necessary prior to running? Allows blog posts to be put into a posts sub-directory, in contrast to an R Markdown site Built-in options for a logo within the YAML Add a footer to all pages with the inclusion of a _footer.html to your main project folder (and the footer goes all the way across) Built-in option to include Google Analytics Built-in options for creating a little appendix (with optional Licensing and “Corrections” links) ** https://rstudio.github.io/distill/website.html#site_metadata Built-in way to specify a custom favicon (the little icon for your site that shows up in your browser tab) Built-in option for sharing twitter output: distill::distill_article Is this tutorial for you? Pre-requisites: You have a GitHub account You are comfortable with the basics of using R and RStudio You understand how R projects work You understand the difference between a regular R script and an R Markdown document What you’ll learn: How to compile multiple R Markdown pages into a Distill site How to add basic customization to a Distill page that are not easily added to an R Markdown site Other learning resources 20.9.1 Existing Distill sites You can check out the links below as other examples of Distill websites in the wild: Distill for R Markdown R-Music https://m-clark.github.io/ "],["make-distill.html", "Chapter 21 Make a Distill site 21.1 tl;dr 21.2 Getting set up 21.3 A mini-orientation 21.4 Push to GitHub 21.5 Build your site 21.6 Push to GitHub (again) 21.7 Make a living, breathing site! 21.8 Uplevel your workflow", " Chapter 21 Make a Distill site 21.1 tl;dr This tl;dr is for readers who are already experienced with GitHub and want to see our “cheatsheet” version of the rest of this chapter. If you are looking for screenshots plus some hand-holding, we think you’ll benefit from reading the rest of this chapter. Here’s how you make an Distill site from scratch, using a built-in site skeleton as a template: Start with an empty RStudio project linked to a remote GitHub repository that you can push/pull from your local copy in RStudio. Make sure the Distill package is installed: remotes::install_github(&quot;rstudio/distill&quot;) In your project, create a simple shell for a Distill website by running the following code in your R console and entering a same for your site when prompted: distill::create_website(dir = getwd(), gh_pages = TRUE) Build your site using the RStudio “Build” pane. Push and commit to send your site online to GitHub- do you see your .html files in the \"docs\" folder? Turn on GitHub Pages by going to your repository online. Click on the repository’s settings and under GitHub Pages, change the Source to be the master branch /docs folder. Note your new site’s URL! Edit your site, build it, then push and commit to GitHub to publish your changes online. Rinse and repeat! Every push to your master branch triggers the online version of your site to update. 21.2 Getting set up 21.2.1 Packages The distill package needs to be installed from CRAN. You only need to do this once per computer. install.packages(&quot;distill&quot;) 21.2.2 Make a project For your first Distill site, we recommend starting by creating a GitHub repository online first, then making a project in RStudio (if this is not your first rodeo, then you could checkout out the more advanced GitHub last workflow). We recommend following the tips on Happy Git with R and starting in GitHub before switching to RStudio: Create a new repository on GitHub for your work. Do not initialize the repo with a .gitignore or a README file (we’ll add these later!). Copy the repository URL to your clipboard. Do this by clicking the green Clone or Download button. Copy the HTTPS clone URL (looks like: https://github.com/{yourname}/{yourrepo}.git). Or copy the SSH URL if you chose to set up SSH keys (looks like: git@github.com:{yourname}/{yourrepo}.git). Create a new RStudio Project via git clone. Open RStudio. Do this by clicking File &gt; New Project &gt; Version Control&gt; Git. Paste the copied URL. Be intentional about where you tell RStudio to create this new Project. Click Create Project. Follow these instructions from Happy Git with R to start with a new repo on GitLab or Bitbucket, instead of GitHub. 21.2.3 Make a Distill site skeleton We’ll start by creating the shell for a basic Distill website and publishing this site to GitHub Pages straight away. In your R console, type and run the following code, entering a same for your site when prompted: distill::create_website(dir = getwd(), gh_pages = TRUE) You will end up with these files in your project. The most critical files are the index.Rmd and the _site.yml, and we mention a little about them below. . ├── .Rproj.user ├── .nojekyll ├── _site.yml ├── about.Rmd ├── docs ├── index.Rmd └── mydistillsite.Rproj Close RStudio and re-open your site by clicking on the project file (.Rproj). When you re-open the project, you may notice the .Rproj file shows up in your Git pane, which means that the file has changed since your last commit. What happened? RStudio has detected that you have built a website, so a single line has been added to your .Rproj file: BuildType: Website 21.3 A mini-orientation Our project directory now has four new important items. Open and take a peek at each file as we touch on the them below: index.Rmd: This will be our site’s homepage. This file must be named index.Rmd, and it must at minimum have title:, description:, and site: distill::distill_website fields. about.Rmd: This will be an additional page on our site, and you can change the name of this file to be whatever you want. Additional pages, like this one, at a minimum need to have a non-empty title:, but they don’t require a description: or site: line. _site.yml is not a file that gets turned into a site page, but it is necessary for site setup. In general, the _site.yml file lets us set options that will affect all pages in our site, and it has the same function here as it does in a typical R Markdown site. A few things you’ll notice about this YAML, if you’re comparing it to an R Markdown site’s: name: &quot;basic-course-distill&quot; title: &quot;Demo Website&quot; description: | Demo Website output_dir: &quot;docs&quot; navbar: right: - text: &quot;Home&quot; href: index.html - text: &quot;About&quot; href: about.html output: distill::distill_article The output here has to be distill::distill_article. It’s okay for this to be on the same line as output: or indented on the line beneath it. Weirdly, the description: field in _site.yml is non-functional (as far as we can tell). But we will use it to create a subtitle of sorts in other YAMLS of our other Distill pages. docs/ folder: This is the output folder, where knitted versions of our .Rmds live once they’ve been processed to become .html files. Nothing else to do here, just good info to know. We’ll be circling back to these files later. 21.4 Push to GitHub Let’s get these website files pushed up to our remote repository on GitHub. Do the following from RStudio: Click Git in the same RStudio pane that also contains the Environment tab. Check the box(es) under the “Staged” column and click Commit. Add a commit message like “initial commit” and then click Push. 21.5 Build your site In the lifecycle of your Distill site, you’ll be doing lots of building. What does building the site do? This processes your .Rmds and creates the docs/ folder (if it doesn’t already exist), which houses .html versions of each of your .Rmd files. AND each of these pages now has a common navigation bar at the top that links your site together (this is thanks to our _site.yml file–but more on that later). In RStudio, you can render your site locally (knit + preview all .Rmd files in one fell swoop) from the either the IDE or the R console. From the R console, you can run: rmarkdown::render_site() OR from the IDE, find the Build tab and select Build Website: Figure 21.1: The build pane in RStudio If the rendered site does not open up automatically in a new window, you can go to the docs/ folder in your project, click on the index.html file, and View it in Web Browser. 21.6 Push to GitHub (again) Let’s get these new Distill website files pushed up to our remote repository on GitHub. If you want your site to have the most recent updates you’ve made, then every single .Rmd file with a change must be built right before pushing to GitHub. Using either the build pane or rmarkdown::render_site(), you don’t need to knit each .Rmd file one at a time, but you do need to build your site locally first every time. Watch out! Each time you run rmarkdown::render_site(), the docs/ folder will be overwritten with updated HTML versions of your .Rmds. This means DON’T EVER EDIT FILES IN THE docs/ FOLDER! Nothing catastrophic will happen if you do, but you will overwrite and lose all your changes the next time you knit or render_site(). Go ahead and stage all your changed files, commit, and push to GitHub. Now we’ll get to the good stuff! Let’s put this on the internet! 21.7 Make a living, breathing site! We have built some out-of-the-box content and pushed to GitHub. Now we’ll go back to the GitHub website and tell it where to find our website-ready files: Back on GitHub, click the Settings tab of your project repository. Scroll down until you get to “GitHub Pages” and select “master branch/docs folder”. (This is why we had to set up output_dir: docs in our site.yml file previously. If your file doesn’t end up in the docs/ folder, GitHub pages won’t find it.) Congratulations! A url is generated–this is your website address. You can share it, tweet it, send it to your mom–it’s now live! Add this url to the repo description so that it’s easy to find. Now that the bare bones of the site are up, you can go back and add more content to your Distill documents anytime. Your changes will go live as soon as you build or render_site(), followed by a push to GitHub. 21.8 Uplevel your workflow We followed a “GitHub first” workflow above, but if you’ll be using GitHub regularly, we recommend evolving this workflow. First, install the usethis package: install.packages(&quot;usethis&quot;) Then load it to use it: library(usethis) Now, follow the instructions from Happy Git with R for setting up a GitHub personal access token or PAT. Be sure to restart your R session after setting up the PAT, and pay close attention that your .Renviron file has at least one empty line at the bottom. Once you have a GitHub PAT set up in your .Renviron file, you can stay in the comfort of your project in the RStudio IDE to do all the GitHub things we were doing before online in your browser. Now, here is your advanced workflow for creating a new Distill site inside a project: Click File &gt; New Project &gt; New Directory Scroll down and select Distill Website, and check the box to “Configure for GitHub Pages” Then use your R console to run this code: use_git() use_github() # you have to have a PAT setup "],["distill-yours.html", "Chapter 22 Make it yours 22.1 Adding new Distill articles 22.2 Grow your navbar", " Chapter 22 Make it yours 22.1 Adding new Distill articles A Distill page is called an article. To add new ones we need to add new .Rmd files (with a Distill-flavored YAML) to our site’s project root directory. You can do this in RStudio using File &gt; New File &gt; R Markdown. When the dialogue box opens, go to From Template and choose “Distill Article”. Now you can edit away. To add this article to your navbar and site, see the next section. 22.2 Grow your navbar To make a new Distill article discoverable and connected to the Distill site, you’ll need to also make a change to navbar, which means opening up the _site.yml file and fiddling with it. To add another page link to your navbar, you need to know two things about the new page you want to add: The name you want to see on the navbar for this page; this is the page’s text. The name of the .html file that corresponds to the .Rmd file you’re adding; this is the page’s href. Let’s say we create a new file called labs.Rmd. We want to add the link to the rendered page labs.html to our upper navbar next to “Home” and “Lectures”, so we would add the following to our YAML: navbar: left: - text: Home href: index.html - text: Lectures href: lectures.html - text: Labs href: labs.html Save the changes to _site.yml, build, and preview to see the new page appear in the upper navbar. name: Basic Course Site output_dir: docs title: Demo Distill description: &#39; | Demo Distill&#39; navbar: right: - text: Home href: index.html - text: Lectures href: lectures.html - text: Labs href: labs.html You may have noticed that in the YAML options we’ve looked at so far, right: has been one of the first things to go under navbar:. You can add all (or just some) of your links aligned to the left side of the navbar instead by using left:. navbar: left: [] right: [] If we added the page for labs.Rmd to the left of our navbar instead: name: Basic Course Site output_dir: docs title: Demo Distill description: &#39; | Demo Distill&#39; navbar: left: - text: Labs href: labs.html right: - text: Home href: index.html - text: Lectures href: lectures.html "],["distill-care.html", "Chapter 23 Caring for your Distill site 23.1 Hiding pages 23.2 Alternatives and drawbacks 23.3 Using your Distill site 23.4 Distill features", " Chapter 23 Caring for your Distill site Caring for a Distill site is the same as caring for a typical R Markdown site. Once you have a site in place, the time comes to update it or add new pages. The key to updating is that you must build your site or use rmarkdown::render_site() each time before you push to GitHub–otherwise your changes wouldn’t make it into your docs/ folder. If it’s not in the docs/ then GitHub pages will not be able to find it. In summary, here’s what the add-new-pages workflow looks like for us: Open the existing site RStudio project Run “Build Site” or rmarkdown::render_site() right away to see where things left off. Create a new .Rmd document in RStudio using File &gt; New File &gt; R Markdown. When the dialogue box opens, go to From Template and choose “Distill Article”. Update your _site.yml by adding the new Distill page’s .html file to the navbar section (see Grow your navbar for how). Note: It’s very easy to forget this step!! Run rmarkdown::render_site() to stitch everything together. Rinse and repeat if needed! Commit and push all changes to GitHub. 23.1 Hiding pages Have a Distill article that you’d like to keep under wraps? If you leave it off of your navbar and don’t link to it elsewhere, then it’s unlikely anyone will ever see it, but it will still be rendered when you build your site. If you don’t want the .Rmd to be rendered at all, then save it with a filename that begins with an underscore _. All files with underscores get passed over when it’s time to render the site (but they’ll still be in your repository). 23.1.1 Switching from an existing R Markdown site to a Distill site 23.2 Alternatives and drawbacks One drawback to Distill is that it’s not very straightforward to include a README file in your GitHub repository. It can be done if you move the entire site’s contents into the docs/ folder and change the output directory to output_dir: \".\". But I really want a README.md: Assuming that you currently have your output directory set to docs/ for GitHub pages and you don’t yet have a README: Move all of your site-specific content to the docs/ folder. This includes your Rmds, image folders, etc.– but not the .gitignore or .Rproj files.) Change the output directory in site.yml to output_dir: \".\" Now render all of your pages. The fool proof way to do this is to run the line below in the console (make sure you’ve installed the xfun package (pak::pkg_install(\"xfun\")). xfun::in_dir(&#39;docs/&#39;, rmarkdown::render_site()) Now you can create a README.md in your original project directory. Commit and push to GitHub 23.3 Using your Distill site 23.4 Distill features As you start to add content to your Distill page, don’t forget about the bells and whistles you can use in Distill (that aren’t easily made available in an R Markdown site), like the ones below. For more guidance on how to use these, check out the Distill documentation: Authors and affliations Citations Hoverable footnotes Asides Figure width Figure captions and cross-references 23.4.1 Authors and affiliations Ah, so easy to write up collaborative reports and projects in groups when Distill’s YAML gives you the space to include multiple authors and (optionally) their affiliations. Below is an example of what this looks like when it’s added to the index page. While you’re here you can optionally add in a date: field (which must always be in the order of month, day, then year). Use \"r Sys.Date()“` to show the current date each time you knit the page. All of this info will be placed in a “Title” section at the top of the page. --- title: &quot;Demo Website&quot; description: | Welcome to my Distill course page. Here you can find all course logistics and content. author: - name: Desirée De Leon url: https://desiree.rbind.io affiliation: RStudio affiliation_url: https://rstudio.com - name: Alison Hill url: https://alison.rbind.io affiliation: RStudio affiliation_url: https://rstudio.com date: &quot;`r Sys.Date()`&quot; site: distill::distill_website --- 23.4.2 Citations Including citations is built in to both Distill and Bookdown sites. In Distill, your citations will appear as numbers, and when hovering over them, you see the full citation info. To include citations of your own, you’ll need two things: A file with a list of your references (aka a BibTex file) A link to this file in the YAML of your .Rmd page Here’s a walkthrough of what this looks like: Create the file of listed citations. This has to be a BibTeX file with citation entries like the ones below, for example. If you use a citation manager (like Endnote or Mendeley), then the easiest way to get a BibTex file is to export a BibTeX file from there (there are many online tutorials that show you how, e.g.Endnote, Mendeley). However, you can also make a BibTeX file manually if want to, by creating a regular new text file (File &gt; New File &gt; Text File) and saving it with a .bib file extension (we named our refs.bib, but you can choose a different name). Save your BibTeX file in your project directory. @book{r4ds, author = {Wickham, Hadley and Grolemund, Garrett}, title = {R for Data Science: Import, Tidy, Transform, Visualize, and Model Data}, year = {2017}, isbn = {1491910399, 9781491910399}, edition = {1st}, publisher = {O&#39;Reilly Media, Inc.}, url = {https://r4ds.had.co.nz/}, } @misc{loremipsum, title = {Lorem Ipsum}, author = {Wasai}, year = {2015-2019}, url = {https://loremipsum.io/}, } Add a bibliography: field to the YAML of your individual .Rmd whose content will contain the citations, then specify the name of your BibTex file. Now you can create inline citations of any reference that exists in this file. Cite your sources in the body of the text. The citation should be in brackets and start with an @ followed by the source’s unique ID from the BibTex file (e.g.[@loremipsem]). The unique ID is whatever is on the first line of its BibTeX entry, immediately following the {. When you cite a source, an appendix will be created at the end of the page (if it doesn’t already exist) with a list of all your cited references. --- title: &quot;Demo Website&quot; description: | Welcome to my Distill course page. Here you can find all course logistics and content. author: - name: Desirée De Leon url: https://desiree.rbind.io affiliation: RStudio affiliation_url: https://rstudio.com - name: Alison Hill url: https://alison.rbind.io affiliation: RStudio affiliation_url: https://rstudio.com bibliography: refs.bib date: &quot;`r Sys.Date()`&quot; site: distill::distill_website --- The citation feature within Distill was really built for citing academic sources, so the display of the citation data in the hovered box and in the appendix looks best when fields like “publisher” and “year” are filled out, but having blank entries for these won’t prevent you from creating a citation. You can read more of the nitty-gritty details about citations, as well as about making your Distill page itself easily citable to others here. 23.4.3 Hoverable footnotes Hoverable footnotes are little magical nuggets of Distill. No other .Rmd-based sites that we describe in our cookbooks have these built-in. In addition to the satisfaction that your user will get when they discover they don’t have to be jolted away to the bottom of the page to see your footnote, the hoverable footnotes are just as satisfyingly easy to include. Insert a ^[footnote here] whereever you’d like the footnote to go, and they’ll be automatically numbered, added to the appendix, and expanded when you hover over the number. # Credits This course is assigned 3 credit hours^[A footnote goes here!]. 23.4.4 Asides You can also include small notes, images, or plots in the margins of the page by enclosing content within &lt;aside&gt; tags, like this (note that the second tag needs a /): A note &lt;aside&gt; Here is a small side note. &lt;/aside&gt; An image &lt;aside&gt; ![R4DS](http://alturl.com/bmfvq) &lt;/aside&gt; A plot &lt;aside&gt; &lt;img src=&quot;cookbook-distill_care_files/figure-html/unnamed-chunk-6-1.png&quot; width=&quot;672&quot; style=&quot;display: block; margin: auto;&quot; /&gt; &lt;/aside&gt; 23.4.5 Figure width Distill allows you to change the width of figures that you produce within code chunks. This can be a plot or a regular image file. We think the coolest application of this is being able to produce a big image that extends across your entire page. This would work well with figures that have a lot of visual interest – likes maps or photographs. To try this out, you can apply layout = \"l-screen\" to the specific code chunk that contains your image or plot. Don’t have an image? Try one of these. Download and move the file into your project directory (or to an images/ folder in your project directory folder to keep your files more organized). ```{r layout = &quot;l-screen&quot;} knitr::include_graphics(&quot;images/curves.png&quot;) ``` Produces this output: You can use the l-screen option creatively to make your image a page banner or a section divider. Distll also gives you the option to make your figures just a bit wider than the main body content– (e.g. using l-body-outset) but we’re not a huge fan of this option aesthetically because it kind of looks like the figure just doesn’t quite fit into its clothes. We take a “go big or go home” approach and recommend either going the full page width, or staying with the regular options, unless you truly feel there’s no other way to effectively display your output. Nonetheless, here are all the width options available: l-body: (Default) As wide as the body of text. l-body-outset: Overflows the text-width a bit (Not recommended). l-page: About 3/4 of the screen width. l-screen-inset: Stretches across the entire page, except for 15px padding around the sides. l-screen: Fully-committed, full screen. Works best for wide, short figures. You can check out the specifics of Distill figure widths here. 23.4.6 Figure captions and cross-references You can also include captions for your figures by including fig.cap = in the code chunk options. ```{r gdpplot, eval = TRUE, echo = FALSE, fig.cap = &quot;Reference for Assignment 1&quot;} library(tidyverse) library(gapminder) p &lt;- gapminder %&gt;% filter(year==1977) %&gt;% ggplot( aes(x = gdpPercap, y = lifeExp, size = pop, color=continent)) + geom_point() + scale_x_log10() + theme_bw() p ``` If you give the code chunk a name, you can use that name later to reference the plot in the body of the text, like so: Figure \\@ref(fig:gdpplot). You would replace gdpplot with the name of your code chunk. If you’ve used images or figures from an outside source, then use a figure caption and an an out.extra=\"class=external\" in the code chunk options. This not only gives credit but also adds bit of formatting that makes it clear that outside images you’re using may not necessarily fall under the same license as the rest of your content, should someone else want to use your materials. 23.4.7 If you like Distill… …then you may also like the tools below. These are not unique to Distill (you could use them in any R Markdown doc), but they’re useful and cool for communicating technical content. For Visualizations You can see some examples of the two tools below in action here r2d3 html widgets library(leaflet) leaflet() %&gt;% addTiles() %&gt;% # Add default OpenStreetMap map tiles addMarkers(lng=174.768, lat=-36.852, popup=&quot;The birthplace of R&quot;) For Tables There are different ways to include tables in your site. None are unique to Distill, but they’re useful to know about. You can see examples here. "],["distill-dress.html", "Chapter 24 Dress it up! 24.1 Site sections 24.2 Sharing", " Chapter 24 Dress it up! Many of the customizations you can add to a regular .Rmd site, you can also use in a Distill site in the same way–by specifying them in the _site.yml file (unless otherwise noted) as an option underneath output: We don’t cover these options again here, but you can see which ones apply in the list below and learn more about them by clicking on the links. Layout features common to Rmd sites and Distill A (non-floating) Table of contents (TOC) Dropdown menus Navbar icons White space* * While you can of course always add more white space between sections in Distill, we think its default spacing is actually pretty good already. You can’t always get what you want: Note that Distill does not give you the option to use a floating TOC, change color themes, use code_download nor code_folding as you can in a regular .Rmd site. Another weird thing worth pointing out is that the only way to get a TOC on the index.Rmd page is to specify one globally within the _site.yml. It cannot be added individually to the index page alone (but it can be to other Distill pages). But–it gets better! Distill never leaves the house without looking classy, and the features below make that easy. 24.1 Site sections 24.1.1 Site footer A footer is added to your all your pages when you make a file named _footer.html that has the content you want. It’s automatically applied to all pages when you drop this file into your main project directory. In the RStudio IDE, create a new text file by going to File &gt; New File &gt; Text file. Save this as _footer.html in your main project directory. Its contents will be used as a footer for each of your Distill pages. Enter some footer content and save. For example, contents could be something like this: Your Name, youremail@example.com Your Collaborator&#39;s Name, anotheremail@example.com This content was created using the Distill for R Markdown template in RStudio. Unfortunately, you’ll be stuck with the default teal color for the footer unless you change the CSS file, which we demo in the Make it fancy chapter. But the nice thing about the Distill footer is that it will carry all across the page, which is not an easy feat to accomplish in some regular R Markdown sites (even if you’re not afraid to mess with CSS). 24.1.2 Appendix Turn any content in your .Rmd into an appendix by creating a new level 1 or 2 header followed by {.appendix} Distill page. Any content that follows will be automatically added to the end of your page, alongside the footnotes and the reference list. # Acknowledgments {.appendix} We&#39;d like to thank the following funding sources for making this work possible: Source 1, Source 2, and Source 3. 24.2 Sharing 24.2.1 Reuse and licencing Licensing! It sounds dry and lawyer-y, but don’t pass this up. Picking and posting your license is an important part of sharing content you create with others. By having a linked statement that explains what license and permissions you give to others, you can (hopefully) prevent the stomach-sinking feeling of seeing your hardwork being used across the internet without credit or attribution to you. Disill makes this easy-peasy by building in a creative_commons: line in your YAML, and it will automatically add a statement to the appendix of your site that lets others know how they can use your materials. In the example below, we add this to the _site.yml file. Not sure what your options are for licensing? Check out the resource here. name: &quot;basic-course-distill&quot; title: &quot;Demo Website&quot; description: | A site for a course output_dir: &quot;docs&quot; creative_commons: CC BY navbar: right: - text: &quot;Home&quot; href: index.html - text: &quot;Lectures&quot; href: about.html output: distill::distill_article 24.2.2 Preview images Preview images are what you see when you share links of your site. You can choose the image that’s used for this a few different ways that are described in detail here. 24.2.3 Logo We can also add a logo to our site, which will appear on the left side of the navbar. Save the logo you want to use in your project directory. You don’t have to, but we recommend keeping a subfolder called images/ where you can place all image files for your site. Open your _site.yml file. Add a logo: field underneath the navbar options in the _site.yml file. Enter the file path to the logo on the image: line. If you want your logo to link to a website, enter the link address on the href: line. Here’s an example in the _site.yml file: navbar: logo: image: images/logo.png href: https://www.rstudio.com 24.2.4 Favicon You know the little tiny icon on the left side of most of your your browser tabs? That’s a favicon, and here’s how you include one: Save the image you want to use in your project directory (or in an images/ folder). For best results this image should be square. Don’t have an image? Make a favicon with text or an emoji, and then download and move the .ico file into your project directory. Open your _site.yml file. Add favicon: &lt;insert-path-to-favicon.ico&gt;. name: &quot;basic-course-distill&quot; title: &quot;Demo Website&quot; description: | A site for a course output_dir: &quot;docs&quot; creative_commons: CC BY favicon: images/favicon.ico Note: In the example above, we can use a ICO image file (with the .ico extension), but other image file types are fine. ICO files do a better job of rendering efficiently across most browsers, so default to this if you can. 24.2.5 Google analytics You can also add an option to your YAML for including a google analytics tracking ID to your site, and the instructions are detailed in the Distill documentation. 24.2.6 Getting edits If you want to solicit edits and feedback from others, then you can add You can also add the fields base_url:, twitter:, name: &quot;distill&quot; title: &quot;Distill for R Markdown&quot; favicon: images/favicon.ico base_url: https://rstudio.github.io/distill twitter: site: &quot;@rstudio&quot; "],["distill-fancy.html", "Chapter 25 Make it fancier 25.1 Before you begin 25.2 Anatomy of a fancy Distill page 25.3 Adding custom CSS to your site 25.4 Aesthetics and branding 25.5 Navbar 25.6 Appendix 25.7 Footer", " Chapter 25 Make it fancier Distill looks pretty sleek on its own using the default settings, but fancy knows no limits! Let’s put on our finest pearls, and customizate Distill even further with CSS. 25.1 Before you begin I’m making a few assumptions that by this point you have already updated your Distill site with your own content in the Make it yours section and added whatever built-in options you wanted. For the demo that follows, I’ll keep using the Distill site skeleton with a few additions. I’ve added a few things to the site skeleton, aside from what we’ve walked through in the previous chapters, so that the following examples make more sense. It is okay that your content does not match up exactly with mine. Added thing Added thing Added thing A logo Footnotes Acknowledgments Reuse statement 25.2 Anatomy of a fancy Distill page 25.3 Adding custom CSS to your site For any of these changes, we first have to create a CSS file and then link it to our site via the _site.yml page. Make a CSS file by going to File &gt; New File &gt; Text File. Save this file in your root directory as styles.css. You can choose a different name if you’d like, but the extension must be .css. Open _site.yml and add css: styles.css like we do below. You’ll need to make sure that distill::distill_article is now on its own line and ends with a :, too. name: &quot;basic-course-distill&quot; title: &quot;Demo Website&quot; favicon: images/favicon.ico description: | A site for a course output_dir: &quot;docs&quot; creative_commons: CC BY navbar: logo: image: images/logo.png href: https://www.rstudio.com right: - text: &quot;Home&quot; href: index.html - text: &quot;Lectures&quot; href: about.html output: distill::distill_article css: styles.css Now we can start styling! 25.4 Aesthetics and branding Google fonts Link color and hover behavior 25.4.1 Google Fonts First, We can choose new body and header fonts from Google Fonts. The first thing we need to do is add the following line to the top of our CSS file. This will import all of the Google Fonts that are listed within |. We chose these specifically from the Google Fonts website. @import url(&#39;https://fonts.googleapis.com/css?family=Playfair+Display|Asap:400,400i,700,700i|Roboto:400,400i,700,700i&amp;display=swap&#39;); 25.4.1.1 Header fonts Let’s change all the header fonts to a serif font, like “Playfair Display”. h1, h2, h3, h4, h5, h6 { font-family: &quot;Playfair Display&quot;; } I like this font, but the letters are a bit too squished for my taste. Let’s fix this by adding someletter-spacing:. We will also increase the line-height: so that if our headers wrap onto a second line, the text won’t overlap with the line above it. h1, h2, h3, h4, h5, h6 { font-family: &quot;Playfair Display&quot;; letter-spacing: 2px; line-height: 2rem; /* increases, so wrapping headers don&#39;t overlap */ } 25.4.1.2 Body font body { font-family: &quot;Asap&quot;; color: #1f1f1f; } While we’re here, let’s also change the body’s text color to be more of an off-black. Choosing colors that are not at the complete extreme of the color spectrum (e.g. avoiding pure black), leaves you some room to be able to go darker when you want to emphasize something later. If you start out by making your body’s text black–then you’ve already maxed out this option. 25.4.2 Larger logo .distill-site-header .logo img{ max-height: 40px; /* Makes logo bigger, default was 20px */ } 25.5 Navbar We’ll do some intense styling on the navbar for Distill. The main things include: Giving the navbar more space Changing navbar font and text style Changing its color/ giving it some faded transparency Style normal navbar links Animate navbar links when hovered 25.5.1 More space for the navbar Start with this in your style rule: /* --------------Navbar-------------------- */ .distill-site-header{ padding: 40px 0px; } 25.5.2 Navbar font and text style Then we add a few more lines to the same style rule. Change the text for navbar links to the same thing we used for headers. Make the spacing between letters a tad greater, since it will make this smallish text easier to read. Add text-transform to make text the navbar all caps. /* --------------Navbar-------------------- */ .distill-site-header{ padding: 40px 0px; background-image: linear-gradient(to bottom, rgba(255, 255, 255, 1), rgba(255,255,255,0.5)); background-color: transparent; font-size: 15px; font-family: &quot;Playfair Display&quot;; letter-spacing: 2px; text-transform: uppercase; } 25.5.3 Transparent, faded navbar Adding again to the same style rule, two more lines and a comment: /* --------------Navbar-------------------- */ .distill-site-header{ padding: 40px 0px; font-size: 15px; font-family: &quot;Playfair Display&quot;; letter-spacing: 2px; text-transform: uppercase; /* background-image for fade-to-white color of navbar */ background-image: linear-gradient(to bottom, rgba(255, 255, 255, 1), rgba(255,255,255,0.5)); background-color: transparent; } 25.5.4 Animated hovering 25.5.5 Tweak for mobile Since we gave the navbar a new color for normal screens, we have to go in an manually change the color for the dropdown version of the navbar on mobile. /* dropdown navbar color on mobile */ @media screen and (max-width: 768px){ .distill-site-header.responsive { background: rgba(255,255,255,0.99); } } The tweaking we had to do to get the animated, hoverable links to work on the full-screen navbar create some new problems on mobile. The style rules below undo the problems that the hoverable links created. /* No navbar links on mobile except for the title and the nav-toggle */ @media screen and (max-width: 768px) { .distill-site-header a, .distill-site-header .nav-dropdown { display: none; } .distill-site-header a.title, .distill-site-header a.nav-toggle { display: inline-block; padding: 10px 0px; margin: 10px 14px; } } 25.6 Appendix d-appendix { background-color: #f7f7f7; border-top: none !important; } 25.7 Footer /* -------------Footer------------------*/ .distill-site-footer { color: #f7f7f7b0; background-color: #1f1f1f; margin-top: 0px; padding: 50px 20px; font-size: 13px; letter-spacing: 1px; text-transform: uppercase; line-height: 12px; } 25.7.1 Links "],["intro-bookdown.html", "Introduction What are we making? Pros and cons of using bookdown sites Is this cookbook for you? Learning resources", " Introduction This is a cookbook for educators who would like to use bookdown to organize and deliver educational content for their audience. Despite the name, using bookdown doesn’t mean that what you make has to be a book–but a bookdown site does come with some built-in features (e.g. its hallmark heavy-duty table of contents) that make it well-suited for long-form content (or many R Markdown files that can be organized in a chronological way). This, and the lack of a navbar make a bookdown site feel somewhat less like a typical website and a bit more like a textbook, but how you use it is up to you. You can place an entire course-worth’s of materials in a bookdown book, or you could pare down your TOC headers and create a site for a short workshop. This rstudio4edu resource is itself a bookdown! In short, bookdown’s main features include: A very prominent table of contents Cross-references Numbered figures, equations, and tables Distribution of your book as a PDF, an HTML website, etc. A built-in search feature (that’s a bit unintuitive to use) 25.7.1.1 Make a book Here, we’ll guide you through creating an out-of-the-box bookdown book. We make only the most minimal changes to content and style necessary to get you a shareable bookdown site. 25.7.1.2 Make it yours You’ll personalize your book’s content here by adding chapters. 25.7.1.3 Caring for your book You’ll develop a workflow for editing your book, adding new content, and hiding pages that are works-in-progress. 25.7.1.4 Dress it up Here, you’ll find instructions for no-fuss website customizations that leverage built-in features that do not rely on knowing, learning, or using CSS. 25.7.1.5 Make it fancier If you want to take your customization further, we show you how to make your book look like the crème de la crème with some CSS, HTML, and (a teensy bit of) JavaScript. What are we making? If you have experience making basic R Markdown sites, then you can think of a bookdown as an R Markdown site with additional YAML files (there are three, which take care of configuration and stitching the site together) and some more rigid rules about what can start each document. [INSERT ANALOGY HERE FOR THE FILE TYPES] As we build our first book, we’ll want to keep in mind these elements: Level 1 headers, become new site pages/ book chapters Three YAMLS, one of which is index.Rmdand works as it does for RMD sites .Rmd file order, can be set manually in one of the YAMLs Additionally, just like we did for R Markdown sites, we’ll demo how to publish your bookdown site for free using GitHub Pages, so we’ll also need: A docs/ folder which will be the folder that we will use as the “boarding area” for your rendered site files to deploy on GitHub Pages. To turn on GitHub Pages for your repository. There are certainly other options for publishing (aka deploying) a bookdown website. For an overview of other options, you may reference: https://rstudio.github.io/distill/publish_website.html. Pros and cons of using bookdown sites Pros: Feels like working with a regular RMD site, once you get the hang of the YAMLS and the Level 1 headers. Cons: Three YAMLs. Can’t use tabsets. Your directory will be likely be filled with many .Rmds, and there’s no good way to organize them into subdirectories. Is this cookbook for you? Pre-requisites: You have a GitHub account You are comfortable with the basics of using R and RStudio You understand how R projects work You understand the difference between a regular R script and an R Markdown document You have some familiarity working with R Markdown documents It is helpful, but not necessary if you have some familiarity with making regular RMD sites What you’ll learn: How to compile multiple R Markdown files into a Bookdown site How to publish your Bookdown for free via GitHub Pages How to add basic customization using built in options How to take the customization even further by using HTML, CSS, and a little bit of JavaScript Learning resources Bookdown examples from competition "],["make-book.html", "Chapter 26 Make a book 26.1 tl;dr 26.2 Getting set up 26.3 A mini-orientation 26.4 Push to GitHub 26.5 Change output directory 26.6 Turn off Jekyll 26.7 Build your book 26.8 Push to GitHub (again) 26.9 Make a living, breathing site! 26.10 Uplevel your workflow", " Chapter 26 Make a book 26.1 tl;dr This tl;dr is for readers who are already experienced with GitHub and want to see our “cheatsheet” version of the rest of this chapter. If you are looking for screenshots plus some hand-holding, we think you’ll benefit from reading the rest of this chapter. Here’s how you make an bookdown site from scratch, using a built-in site skeleton as a template: Start with an empty RStudio project linked to a remote GitHub repository that you can push/pull to from your local copy in RStudio. In your project, create a simple shell for a bookdown website shell by running the following code in your R console: bookdown:::bookdown_skeleton(getwd()) In your _bookdown.yml file, prep for publishing to GitHub Pages by changing the output directory of your book to a folder named \"docs\". Tell GitHub Pages to bypass using Jekyll to build your book by adding a single empty file named .nojekyll to your project root directory. file.create(&quot;.nojekyll&quot;) Build your book using the RStudio “Build” pane or by going to Addins &gt; Preview Book Push and commit to send your book online to GitHub- do you see your .html files in the \"docs\" folder? Turn on GitHub Pages by going to your repository online. Click on the repository’s settings and under GitHub Pages, change the Source to be the master branch /docs folder. Edit your book, build it, then push and commit to GitHub to publish your changes online. Rinse and repeat! Every push to your master branch triggers the online version of your site to update. 26.2 Getting set up 26.2.1 Packages needed We’ll use the following packages: #install.packages(&quot;bookdown&quot;) library(bookdown) 26.2.2 Make a project For your first bookdown site, we recommend starting by creating a GitHub repository online first, then making a project in RStudio. We recommend following the tips on Happy Git with R and starting in GitHub before switching to RStudio: Create a new repository on GitHub for your work. Do not initialize the repo with a .gitignore or a README file (we’ll add these later!). Copy the repository URL to your clipboard. Do this by clicking the green Clone or Download button. Copy the HTTPS clone URL (looks like: https://github.com/{yourname}/{yourrepo}.git). Or copy the SSH URL if you chose to set up SSH keys (looks like: git@github.com:{yourname}/{yourrepo}.git). Create a new RStudio Project via git clone. Open RStudio. Do this by clicking File &gt; New Project &gt; Version Control&gt; Git. Paste the copied URL. Be intentional about where you tell RStudio to create this new Project. Click Create Project. Follow these instructions from Happy Git with R to start with a new repo on GitLab or Bitbucket, instead of GitHub. 26.2.3 Make a book skeleton We’ll start by creating the shell for a minimal bookdown website, and we’ll publish this to GitHub Pages straight away. In your R console, type and run the following code: bookdown:::bookdown_skeleton(getwd()) Note that we use ::: here (with three colons!) to generate these files. You will end up with the files in your working directory shown in Figure 26.1. Close RStudio and re-open your book by clicking on the project file (.Rproj). When you re-open the project, you may notice the .Rproj file shows up in your Git pane, which means that the file has changed. What happened? RStudio has detected that you have built a book, so a single line has been added to your .Rproj file: BuildType: Website 26.3 A mini-orientation Our skeleton created several out-of-the-box content files for our site, three of which contain YAML content: Figure 26.1: Book skeleton index.Rmd. Any content in this file will be your bookdown site’s homepage. It will also be the initial chapter in your book, usually a preface or introductory chapter. This is also the only .Rmd file in the book that will begin with YAML (aka configuration) info. This file must be named “index.Rmd”. .Rmd files starting with \"01-\", \"02-\", etc. These make up the other book content. By default, our book skeleton prefaces their filenames with numbers, which is what bookdown will use to order our content after index.Rmd. We’ll eventually change these filenames (and the way we order files), but for now let’s leave them as is. The other 2 YAMLs: _bookdown.yml and _output.yml contain other configuration info that we’ll detail later. Highlights include that _bookdown.yml will be the place where we specify custom ordering of our bookdown .Rmds, and _output.yml is where we’ll link to supporting files like custom HTML and CSS. When we build our book, all of the .Rmd files will eventually be rendered as HTML files (i.e., website-ready pages). Nothing to do here, but good to know these things! We’ll circle back to editing these files later. 26.4 Push to GitHub Let’s get these website files pushed up to our remote repository on GitHub. Do the following from RStudio: Click Git in the same RStudio pane that also contains the Environment tab. Check the box(es) under the “Staged” column and click Commit. Add a commit message like “Creates book skeleton” and then click Push. 26.5 Change output directory Now let’s make a small change. In order to publish to GitHub pages, we’ll want to send all of our rendered site files (i.e., the HTML files we’ll soon have) to a folder named docs/. We do this by editing one of bookdown’s YAML files. Open _bookdown.yml and add output_dir: docs on its own line: book_filename: fake-book delete_merged_file: true output_dir: docs language: ui: chapter_name: &#39;Chapter &#39; You might think that changing for the output directory to the /docs folder would be something that would be handled by the _output.yml, given its name, but confusingly, this is added to the _bookdown.yml instead. This step is a one-time step. It says: “Please take all of my .html files that will get made when I build, and place them in the docs/ folder. And if there’s not a docs/ folder, then make one.” Having our HTML files live in docs/ is necessary for using GitHub pages to make our pages go live, which we’ll do soon. You do not need this step if you will not be publishing to GitHub Pages. While we have _bookdown.yml open, let’s add an additional line that will have each .Rmd in our book be processed independently. This is preferable, but if you think you have a use-case where this wouldn’t be what you want, read up more about the alternative here. In _bookdown.yml, add new_session: yes. book_filename: fake-book delete_merged_file: true output_dir: docs language: ui: chapter_name: &#39;Chapter &#39; new_session: true 26.6 Turn off Jekyll This bit is only necessary if you plan to use GitHub Pages for publishing your website. We need to tell GitHub Pages to bypass using Jekyll to build your site. Jekyll works behind the scenes in GitHub Pages as a static site generator, but is not needed for R Markdown-related sites. Turning it off ensures that later down the line we won’t run into problems with including formulas, equations, and folders that start with an _ underscore, should we decide to do that. We complete this step by adding a single empty file named .nojekyll to your project root directory by running the following in the console: file.create(&quot;.nojekyll&quot;) This is a hidden file, so don’t worry if you don’t see it in your Files pane after it’s been created. 26.7 Build your book The files we have so far are enough to build our skeletal book. We “build”, or render, our book each time we want to preview what our book likes like locally, and this is something you’ll likely do many times over the course of making your book. This step will render the HTML files we need and place them in a docs/ folder. You can render your book a few different ways from either the RStudio IDE or the R console. Choose one of these for now, but we discuss other options later in @(render-book). Option 1: From the R console, you can run: bookdown::serve_book() Option 2: In the RStudio toolbar menu, click on Addins &gt; Preview Book Figure 21.1: The Addins menu in RStudio Do not click on Knit to render your book! [WHY?] If you’ve already knit, then just clear out the _book folder. After running this, you should now see: A docs/ folder in your project directory that has HTML files, among a few other files A local preview of your book, either automatically opened in a new window or in the Viewer tab in one of the RStudio panes. If at this point you somehow ended up with a folder called _book/ in your project directory, go ahead and delete it. You don’t need it. This is just bookdown’s default version of the docs/ folder, and if you have it, it just means you must have built your book before we specified output_dir: \"docs\" in _bookdown.yml. 26.8 Push to GitHub (again) Let’s get these new website files pushed up to our remote repository on GitHub. You did render everything, right? If you want your site to have the most recent updates you’ve made, then every single .Rmd file with a change must be rendered right before pushing to GitHub. We just did this in the last step, but just in case you felt inspired to make edits after seeing your book’s local preview, then make sure each file with edits is rendered again. These can be done in one fell swoop, using either Preview Book or bookdown::serve_book(). Watch out! Each time you build your book, the docs/ folder will be overwritten with updated HTML versions of your .Rmds. This means you shou NEVER EDIT FILES IN THE docs/ FOLDER! Nothing catastrophic will happen if you do, but you will overwrite and lose all your changes the next time you build your book. Go ahead and stage all your changed files, commit, and push to GitHub. Everything should now be in your GitHub repo, but it’s not yet a working bookdown site. In the next step we make the bookdown site live! 26.9 Make a living, breathing site! It’s now time to tell GitHub where to find our website-ready files: Back on GitHub, click the Settings tab of your project repository. Scroll down until you get to “GitHub Pages” and select “master branch/docs folder”. (This is why we had to set up output_dir: docs in our site.yml file previously. If your file doesn’t end up in the docs/ folder, GitHub pages won’t find it.) Congratulations! A url is generated–this is your website address. You can share it, tweet it, send it to your mom–it’s now live! Add this url to the repo description so that it’s easy to find. Now that the bare bones of the site are up, you can go back and add more .Rmd content to your book anytime. Your changes will go live as soon as you build your book, followed by a push to GitHub. 26.10 Uplevel your workflow We followed a “GitHub first” workflow above, but if you’ll be using GitHub regularly, we recommend evolving this workflow. First, install the usethis package: install.packages(&quot;usethis&quot;) Then load it to use it: library(usethis) Now, follow the instructions from Happy Git with R setting up a GitHub personal access token or PAT. Once you have a GitHub PAT set up in your .Renviron file, you can stay in RStudio and use the RStudio project wizard to create a new bookdown site: Click File &gt; New Project &gt; New Directory Scroll down and select: Book Project using bookdown Then use your R console to run this code: use_git() use_github() # you have to have a PAT setup Then follow all of our instructions above starting at changing the site output directory. "],["book-yours.html", "Chapter 27 Make it yours 27.1 Creating new chapters 27.2 Putting your chapters in order", " Chapter 27 Make it yours 27.1 Creating new chapters When it’s time to edit the .Rmds in your book, there are a couple of rules to bear in mind: The index.Rmd is the only .Rmd file that can have its own YAML at the top. All chapter .Rmd files MUST begin with a # Level 1 Header no matter what. Any content before that in your .Rmd will not appear. Why, you ask? In broad strokes, a bookdown site is created when several .Rmd files get merged together into a single (sometimes massive) .Rmd file. This monolith of an .Rmd then gets rendered into website-ready, HTML files. The index.Rmd is the first .Rmd in line, so it’s the only one that gets its own YAML. What is sometimes unintuitive (especially for those coming from R Markdown sites) is that new pages are determined by the # Level 1 headers in your content (i.e., any heading beginning with a single #), not necessarily by distinct .Rmd documents in your project. Anytime you use a level 1 header, this becomes a new book chapter with a top level entry in your TOC and also manifests as its own “page” in your book. And voilà, this is how your book chapters are made. 27.2 Putting your chapters in order For our book content to get pasted together in the monolithic .Rmd in the correct order automatically, you would need to create .Rmd file names that continue with a numbering scheme \"01-\", \"02-\", etc. This seems fine and dandy, until you realize how annoying it would be if you later decided to switch around the order of your chapters –you would have to rename multiple files (ugh!). We’re in the business of trying to make life easier for your future self, so we recommend setting the chapter order within _bookdown.yml with this approach instead: As an example, let’s make a change so that the 04-application.Rmd chapter from our skeletal book comes right after 01-intro.Rmd. In RStudio, open _bookdown.yml. Add the rmd-files option followed by a list of all the .Rmd files in the order you want (index.Rmd must still come first): book_filename: fake-book delete_merged_file: true rmd_files: - index.Rmd - 01-intro.Rmd - 04-application.Rmd - 02-literature.Rmd - 03-method.Rmd - 05-summary.Rmd - 06-references.Rmd output_dir: docs language: ui: chapter_name: &#39;Chapter &#39; new_session: &#39;yes&#39; As this example demonstrates, the specific filenames no longer bear any significance on chapter order. Swap your .Rmds around as much as you’d like in this single document and be done. "],["book-care.html", "Chapter 28 Caring for your book 28.1 Workflow for maintenance 28.2 Rendering 28.3 Using your book 28.4 Hiding Chapters 28.5 Staying organized", " Chapter 28 Caring for your book In this chapter, we’ll cover things you should keep in mind as you create content and start to use your book. 28.1 Workflow for maintenance Now you know how to order your .Rmds, so what does the workflow look like to add more .Rmds as you update your book? Here’s what it’s like for us: Open my existing site RStudio project Go to Addins &gt; Preview Book to render the book Create a new .Rmd document in RStudio using File &gt; New File &gt; R Markdown, and delete its default YAML entirely. Begin with a fresh # Level 1 header and then go about creating new content. Update _bookdown.yml to include the new page. Go to Addins &gt; Preview Book to render the book again Rinse and repeat if needed! Commit and push all changes to GitHub. 28.2 Rendering In 26.7, we mentioned that there were several options for rendering your book locally. Here are the others, and some notes about when/ why you would choose one over the other: Addins &gt; Preview Book: renders only the gitbook version of the book. The line below does the exact same thing as Preview Book: bookdown::render_book(&#39;index.Rmd&#39;) Or you can use: bookdown::serve_book() Using the Build Book tab in the IDE: this renders all specified book formats, unless you specifically choose something different from the Build Book dropdown menu. preview_chapter(\"my-chapter.Rmd\"): Is rendering the entire book taking way too long? Run preview_chapter() instead to render just a single chapter. One caveat is that any cross-references to other chapters won’t work, since only the chapter being previewed is updated. Remember, never Knit! When rendering your book with a previous preview window open, you might experience a never-ending loop of book-rendering. This is a common problem! Exit out of this by going to Session &gt; Terminate R…. 28.3 Using your book 28.3.1 Components As you build content for your book, don’t forget about the bells and whistles you can use in bookdown, like the ones below. For guidance on how to use these, check out the bookdown documentation: Internal cross-references Numbering and referencing equations Figures captions Tables Citations Footnotes 28.3.2 Search The built in search feature in your book can be useful for both you and your learners–but the way it works is a little tricky! You can see the instructions for it by clicking on the in the toolbar. As you enter your search term into the box, the TOC is filtered to show only the sections were your search term appears. Don’t move that cursor– keeping it hovered over the box, you can use your arrow UP and DOWN keys to navigate from the term’s first occurence to the next through the book. 28.4 Hiding Chapters Books can take a while to write– and that’s okay. Don’t be afraid to put your book on GitHub pages or another platform before you think it’s completely finished. Sharing your bookdown site publicly, even as the content and chapters evolve, can be an important part of the making-process (and is also really great for soliciting community feedback). It’s not possible to keep your files completely concealed once you’ve pushed them to a public repo on GitHub, but there are some ways you can make works-in-progress difficult enough to discover that it’s unlikely anyone will stumble across them. If you do want to keep all or some of your book under wraps, then you have a couple of options: Easy: Upload your source to GitHub, but don’t share the GitHub pages link in the GitHub repo description. Savvy GitHubbers can still guess your URL if you have turned on GitHub pages, or they’d be able to clone the repo and build it locally, but it would take some grit!). Medium: Hide individual chapters by not adding their .Rmd file to the _bookdown.yml. OR, if you’ve been following our configuration settings and have used new_session: yes, then placing your .Rmd in a sub-folder within your project will also keep it hidden. Advanced: A more advanced workflow would involve creating a GitHub branch for works in progress and waiting to merge those into the master branch until they’re ready for showtime. 28.5 Staying organized You may find that as your book content grows, your project directory (and possibly your mind) will start swimming in .Rmds and other files. Unfortunately, there’s no good way to keep your .Rmds organized with subdirectories if you’re following our suggestion to use new_session: yes. But, you can do a little bit of clean up by creating folder for your images (images/) and another one like assets/ to place HTML and CSS files. But if the Marie Kondo within you is still not satisfied, then you might consider creating a Blogdown site. "],["book-dress.html", "Chapter 29 Dress it up! 29.1 Before you begin 29.2 Organizing 29.3 Aesthetics 29.4 Edits and source code 29.5 Polishing and sharing", " Chapter 29 Dress it up! In this section, we cover optional ways to make your bookdown site look ✨faaaabulous ✨. The features we cover below do not require knowing CSS nor HTML, and they’re all built-in things you can add to your bookdown now. There are a lot of different options here, and you certainly don’t have to implement all of them. Take an à la carte approach and pick the stuff you like! We’ll need to use the three different bookdown YAML files to turn on these features. And sometimes, we don’t even need a YAML file and any old .Rmd doc will do. Here’s a cheatsheet of what file is in charge of what (including features we may have already covered earlier that we link to): _output.yml Add an edit link Make the page downloadable as an .Rmd Link to your GitHub in the toolbar, Part 1 (also need index.Rmd) Add other sharing links Header and footer of your TOC Collapse the TOC by (sub)section Code highlighting _bookdown.yml Change the chapter name Change chapter order Set new_session: yes Set output_dir: docs index.Rmd Link to your GitHub in the toolbar, Part 2 (also need _output.yml) Add a favicon Book cover and description Within any .Rmd Group chapters into Parts Add an appendix Section (un)numbering 29.1 Before you begin Open up all three YAMLS and keep them open as tabs in RStudio. We’ll be bouncing in between these files: _output.yml _bookdown.yml index.Rmd Remove output types we don’t need: from _output.yml. All of our cookbook content will only deal with the gitbook output from here on out. This means you can get rid of this part of the YAML in _output.yml: bookdown::pdf_book: includes: in_header: preamble.tex latex_engine: xelatex citation_package: natbib keep_tex: yes bookdown::epub_book: default We’ll fill out our YAML options one line at a time and show you what the growing YAMLs look like as we go. 29.2 Organizing Collapse TOC by (sub)sections Change the chapter name Section (un)numbering Group chapters into parts Add an appendix 29.2.1 Collapse TOC by (sub)sections We can control whether our TOC will show all sections or subsections by default. If you have very deep heading and section hierarchies, then you might want to play around with this option. You can read more about it in the bookdown documentation. Open _output.yml Add collapse: section as a toc: option. bookdown::gitbook: css: style.css config: toc: collapse: section before: | &lt;li&gt;&lt;a href=&quot;./&quot;&gt;A Minimal Book Example&lt;/a&gt;&lt;/li&gt; after: | &lt;li&gt;&lt;a href=&quot;https://github.com/rstudio/bookdown&quot; target=&quot;blank&quot;&gt;Published with bookdown&lt;/a&gt;&lt;/li&gt; download: [&quot;pdf&quot;, &quot;epub&quot;] 29.2.2 Change the chapter name The chapter_name: option is what determines whether your level one headers will say “Chapter 1” or “Section 1” or “Module 1”—whatever prefix you’d like. In our example demo book, we’ll leave this as \"Chapter \", but if you wanted to change it, you would do this: Open _bookdown.yml. Replace \"Chapter \" with your prefix of choice. Don’t forget the space after the name within the quotes. book_filename: fake-book delete_merged_file: true rmd_files: html: - index.Rmd - 01-intro.Rmd - 04-application.Rmd - 02-literature.Rmd - 03-method.Rmd - 05-summary.Rmd - 06-references.Rmd output_dir: docs language: ui: chapter_name: &#39;Chapter &#39; new_session: &#39;yes&#39; 29.2.3 Section (un)numbering By default bookdown numbers all of your headings. If you don’t like this, then you have to un-number them manually. Within any .Rmd you can do this if you: Add an {-} after each heading you want unnumbered. If your section has an ID within brackets already, just add the - in front, for example: ## My Section {-#section-id} We recommend keeping the numbering on for all of your chapters, except for the headings in your index.Rmd, which you should use as your preface or introduction. Let’s remove numbering for the initial chapter of our minimal book, to make it clear it’s a preface: Open index.Rmd. Change the level one header to be # Prerequisites {-} Save and build your book. Notice that once you do, the numbering of all the following sections is automatically adjusted. 29.2.4 Group chapters into parts If you have a bunch of chapters, it can be helpful to group some of them together (e.g., by semester, quarter, or content themes). You can create a book part within any .Rmd file by adding the following at the top of any .Rmd: # (PART) My Part Title {-} If you don’t want your part to be numbered with a Roman numeral, then you must instead write: # (PART\\*) My Part Title {-} Let’s create two unnumbered parts for our demo book: Open the 01-intro.Rmd file. Add # (PART\\*) First Semester {-} as the first line. Open 04-methods.Rmd file. Add # (PART\\*) Second Semester {-} as the first line. 29.2.5 Appendix Similar to “Parts”, you can create an appendix for your book with a header like: # (APPENDIX) Appendix {-} Any level one headers that come after this will be appendix chapters and will be “numbered” with letters. See more here. Let’s create an appendix for our demo book by making a new .Rmd. In the IDE, create a fresh .Rmd by going to File &gt; New File &gt; R Markdown. Delete everything in this file. Add your appendix header at the top of the .Rmd: # (APPENDIX) Appendix {-} Optionally, some appendix chapters and content, like so: # (APPENDIX) Appendix {-} # Appendix A Here is the first appendix chapter. # Appendix B Here is the second appendix chapter. Save this file in your project directory as appendix.Rmd. You can choose a different name. Open _bookdown.yml and add this new appendix .Rmd to the end of your list of .Rmds files. book_filename: fake-book delete_merged_file: true rmd_files: html: - index.Rmd - 01-intro.Rmd - 04-application.Rmd - 02-literature.Rmd - 03-method.Rmd - 05-summary.Rmd - 06-references.Rmd - appendix.Rmd output_dir: docs language: ui: chapter_name: &#39;Chapter &#39; new_session: &#39;yes&#39; 29.3 Aesthetics Header and footer of the TOC Code highlighting 29.3.1 Header and footer of the TOC Let’s personalize the TOC a little bit by changing the text that we see at the top (or at the bottom) of it. Usually this means only changing the text. Sometimes it can mean adding a logo (but for this you’ll have to stop by the Make it Fancy). Let’s make the following changes to our TOC header: Open _output.yml. We can change the before: and after: options. There’s a little bit of HTML on these lines, but don’t let that scare you. Create a new TOC header with the before: option by replacing the \"A Minimal Book Example\" with \"Demo Book\" instead. FYI, the after: field is for the TOC footer. We’ll leave this as-is for now. bookdown::gitbook: css: style.css config: toc: collapse: section before: | &lt;li&gt;&lt;a href=&quot;./&quot;&gt;Demo Book&lt;/a&gt;&lt;/li&gt; after: | &lt;li&gt;&lt;a href=&quot;https://github.com/rstudio/bookdown&quot; target=&quot;blank&quot;&gt;Published with bookdown&lt;/a&gt;&lt;/li&gt; download: [&quot;pdf&quot;, &quot;epub&quot;] Code highlighting Let’s style the colors that we’ll be used in our code chunks. Highlight styles work the same as they would in an RMD site. The options here are default, tango, pygments, kate, monochrome, espresso, zenburn, and haddock. Let’s try it: Open _output.yml. Add the highlight: field and choose tango. bookdown::gitbook: highlight: tango css: style.css config: toc: collapse: section before: | &lt;li&gt;&lt;a href=&quot;./&quot;&gt;Demo Book&lt;/a&gt;&lt;/li&gt; after: | &lt;li&gt;&lt;a href=&quot;https://github.com/rstudio/bookdown&quot; target=&quot;blank&quot;&gt;Published with bookdown&lt;/a&gt;&lt;/li&gt; download: [&quot;pdf&quot;, &quot;epub&quot;] 29.4 Edits and source code Solicit edits via GitHub See the .Rmd source code Let’s add an edit icon the toolbar so that it’s easier for collaborators to give feedback and suggestions. When they click it, it will invite them to make changes on GitHub to the current book page. Open _output.yml. Create edit:, link:, and text: fields like you see below: bookdown::gitbook: highlight: tango css: style.css config: edit: link: https://github.com/username/repository/edit/master/%s text: &quot;Suggest an edit&quot; toc: collapse: section before: | &lt;li&gt;&lt;a href=&quot;./&quot;&gt;Demo Book&lt;/a&gt;&lt;/li&gt; after: | &lt;li&gt;&lt;a href=&quot;https://github.com/rstudio/bookdown&quot; target=&quot;blank&quot;&gt;Published with bookdown&lt;/a&gt;&lt;/li&gt; download: [&quot;pdf&quot;, &quot;epub&quot;] Replace the parts of the URL that say “username” and “respository” with your own. Make sure the URL ends with /edit/master/%s. Add a message to the text: field. Something like \"suggest an edit\". This is what your user will see when they hover over the Edit link in the toolbar. Save, build, and see that your edit icon works! 29.4.1 Share the source code While we’re in _output.yml, we can add another field that will let your user see the source .Rmd code for the page. When your user clicks on the “download” icon, a new tab will open that shows them the .Rmd code used to generate the page they’re viewing (you have to have an edit: field for this to work). This isn’t technically a download, but still useful. Without specifying anything for this option, bookdown will look for other versions of your book (like PDFs or EPUB) to provide as a download. If you don’t want this, then you need to set download: no. Open _output.yml. After the download: option, replace \"pdf\", \"epub\" with \"rmd\". Since we removed the pdf_book and epub_book output, the “download” PDF and EPUB options wouldn’t have worked anyway. bookdown::gitbook: highlight: tango css: style.css config: edit: link: https://github.com/username/repository/edit/master/%s text: &quot;Suggest an edit&quot; toc: collapse: section before: | &lt;li&gt;&lt;a href=&quot;./&quot;&gt;Demo Book&lt;/a&gt;&lt;/li&gt; after: | &lt;li&gt;&lt;a href=&quot;https://github.com/rstudio/bookdown&quot; target=&quot;blank&quot;&gt;Published with bookdown&lt;/a&gt;&lt;/li&gt; download: [&quot;rmd&quot;] 29.5 Polishing and sharing Sharing to Twitter, etc. Directing to GitHub Favicon Book cover and description 29.5.1 Twitter and GitHub When you turn sharing on, it’s easier for people to give your book a shoutout on twitter or find their way to your repo. This is good! We suggest using only these sharing icons and disabling the rest with all: no. Setting github: yes here is just one of the steps you need for the GitHub link to work. You also have to add your GitHub account and repo name to the index.Rmd YAML as we described above. Open _output.yml. Add a sharing: field. Set github: yes, facebook: no, twitter: yes, all: no. Mind your indentation (remember, YAMLS are fussy!) bookdown::gitbook: highlight: tango css: style.css config: toc: collapse: section before: | &lt;li&gt;&lt;a href=&quot;./&quot;&gt;Demo Book&lt;/a&gt;&lt;/li&gt; after: | &lt;li&gt;&lt;a href=&quot;https://github.com/rstudio/bookdown&quot; target=&quot;blank&quot;&gt;Published with bookdown&lt;/a&gt;&lt;/li&gt; download: [&quot;rmd&quot;] edit: link: https://github.com/username/repository/edit/master/%s text: &quot;Suggest an edit&quot; sharing: github: yes facebook: no twitter: yes all: no The Twitter icon is now set–but we’re only halfway there to get the GitHub icon to work. Open index.Rmd. Add the field github-repo: followed by your \"username/repo\". --- title: A Minimal Book Example author: Yihui Xie date: &#39;`r Sys.Date()`&#39; site: bookdown::bookdown_site documentclass: book bibliography: - book.bib - packages.bib link-citations: true biblio-style: apalike description: This is a minimal example of using the bookdown package to write a book. The output format for this example is bookdown::gitbook. github-repo: your-github/your-repo --- Now, the GitHub icon will go to your book’s repo. Next, we’ll move on to other polishing bits involved in sharing your book. 29.5.2 Add a favicon You know the little tiny icon that gets placed in the corner of your browser tab? That’s a favicon! It’s also the icon that shows up when you’ve bookmarked a page. Let’s add one: Create a folder called images in your project directory. You don’t technically have to create this folder, but you will thank us later as you add more images to your book. Save the image you’d like to use (for best results it should be square) in images/. Don’t have an image? Make one in less than a minute with text or an emoji: Go to free favicon generator and create a favicon Download and move the .ico file into your images/. Open index.Rmd. Add favicon: &lt;\"images/favicon.ico\"&gt; in the YAML, replacing the filepath in quotes with your own. --- title: A Minimal Book Example author: Yihui Xie date: &#39;`r Sys.Date()`&#39; site: bookdown::bookdown_site documentclass: book bibliography: - book.bib - packages.bib link-citations: true biblio-style: apalike description: This is a minimal example of using the bookdown package to write a book. The output format for this example is bookdown::gitbook. favicon: images/favicon.ico cover-image: images/logo-black.png github-repo: your-github/your-repo url: https://github.com/dcossyleon/fake_book --- Note: In the example above, we can use ICO files (with the .ico extension) which are preferred because of better rendering across most browsers, but other images types like PNGs work too. 29.5.3 Book cover and description Finally, we’ll change what happens what happens when we share preview links of our book. cover-image: This lets you set an image that will act as your book’s cover. This will show up when we share a link of our book. description: This is the short blurb that will also be part of the preview when your share the link of your book. Let’s update our index.Rmd with the following: Update the description of our demo book to say “A work in progress.” Add a cover image by adding a path to our logo (or a url to any image–you can always try one of these if you need a placeholder). Now is also a good time to update your Title and Author fields if you haven’t already. --- title: Demo Book author: - Desiree De Leon - Alison Hill date: &#39;`r Sys.Date()`&#39; site: bookdown::bookdown_site documentclass: book bibliography: - book.bib - packages.bib link-citations: true biblio-style: apalike description: This is a minimal example of using the bookdown package to write a book. The output format for this example is bookdown::gitbook. favicon: images/favicon.ico cover-image: images/logo-black.png github-repo: your-github/your-repo url: https://dcossyleon.github.io/fake_book/ --- The formatting for url is really important, and weird: You must use a forward slash \\ before the colon to “escape” it. The url must end with a back slash / in order for the cover-image to render. Alright, we’ve done all we can here with bookdown’s built-in options. Time to checkout the options in Make it fancy if you’re still wanting more! "],["book-fancy.html", "Chapter 30 Make it fancier 30.1 Before you begin 30.2 Anatomy of a fancy book 30.3 Aesthetics and branding 30.4 Usability 30.5 Table of Contents", " Chapter 30 Make it fancier Now it’s time to customize our book even further. We can do a little bit of HTML and CSS work to add-on some fancy features. 30.1 Before you begin If this is your first time dipping your toe into styling with CSS, you might want to check out our CSS crash course. To stay organized, we recommend creating a folder called assets/ in your project directory and moving the CSS file called style.css that came with your skeletal book into that folder. If you just followed the previous suggestion, then you’ll also want to update your _output.yml file to show this change: bookdown::gitbook: css: assets/style.css Also, if you don’t already have one, create an image/ folder in your project directory. 30.2 Anatomy of a fancy book Here’s where we’re starting: And here’s where we’re going: 30.3 Aesthetics and branding As the old adage goes, you shouldn’t just a book by its CSS—but we all know it’s a little hard not to. Bring your learners in and have them stay a while with an interface that’s welcoming, easy to ready, easy to use, and easy on the eyes. Align the toolbar line Add a Google font Add a logo Customize link colors Add a hero image 30.3.1 Align the toolbar line This first aesthetic adjustment goes out to everyone who notices the little things. You may have noticed that the horizontal line from the toolbar and the TOC do not match up perfectly. This CSS will fix that: Open style.css. Paste in the following, after any code that was already in here. /* The next two rules make the horizontal line go straight across in top navbar */ .summary &gt; li:first-child { height: 50px; padding-top: 10px; border-bottom: 1px solid rgba(0,0,0,.07); } .book .book-summary ul.summary li.divider { height: 0px; } Make sure each line within each of the curly braces {} ends with a semicolon ;. Save and Build your book to see how it looks. Ahh, fixed. Now doesn’t that feel better? Organize your CSS using comments like /* --insert-comment-- */ to create make-shift section dividers for your CSS, as we’ve done above. 30.3.2 Symmetrical code chunks Another small thing you may have noticed is that the code chunks in bookdown don’t have equal spacing above and below the code. Let’s change that with the CSS below: /*____Code Chunks____*/ .sourceCode pre { margin: 0 !important; /* makes space above and below symmetrical*/ } .sourceCode { margin-bottom: 0.85em; /* adds same amount of margin as a &lt;p&gt; would */ } 30.3.3 Google fonts To change the appearance of your text with a new font, you need to: Pick a Google font Add it to your CSS file Style specific text using CSS selectors Make sure your CSS file is linked to _output.yml (and if you’ve been following along and using the book skeleton, it already will be). 30.3.3.1 Select and import your Google font’s script Go to https://fonts.google.com/ and pick a font for your book’s main body text. We’ll choose Muli, but Lato and Source Sans Pro are other nice options. Select the font you want by clicking on the upper red + sign, and navigate to the small pop up window. Figure 30.1: Selecting a Google font Click on the CUSTOMIZE tab, and select the extra font weights and styles you want. Don’t check any that you don’t think you’ll use (because it slows down your site’s loading time ever-so-slightly when you add more). In addition to regular, we’re choosing one italic and one bold. Figure 30.2: Choosing additional font weights and styles Now click on EMBED and look under the @IMPORT tab. Copy the code within the &lt;style&gt; tags (you don’t need the style tags themselves). We will also need the second code chunk in a couple steps that says Specify in CSS, so keep this page open to come back to that. Figure 30.3: Getting the script to import your Google Font We recommend going with sans-serif fonts (i.e. no little feet on the letters) for the main text because they’re easier to read at smaller sizes on screens compared to serif fonts. Don’t pick anything too narrow, too wide, or ornate.) 30.3.3.2 Import the font to your site Back in the RStudio IDE, open up your style.css file. On the very first line, paste in the Google Font import code for the Muli font. This makes the font available within your bookdown site. @import url(&#39;https://fonts.googleapis.com/css?family=Muli:400,400i,700&amp;display=swap&#39;); You might see others import Google fonts by embedding the script (with &lt;script&gt; tags) in an HTML file instead. This is perfectly legitimate. But if you’re just starting out, it’s easier to keep all the font stuff together in a CSS file, which is why we’re doing it this way. 30.3.3.3 Style specific text using CSS selectors We have our fonts imported, but now we have to let site know which text gets what font. We want to apply the Muli font to our body’s text by using the font-family: property. Add the following style rules to style.css beneath the other CSS we’ve already added. /*------------- Body and header text---------------- */ .book.font-family-1 { font-family: &#39;Muli&#39;, sans-serif; } The .book.font-family-1 selects the book’s main text. The CSS within the curly brackets {} comes the second code chunk that we got from Google Fonts (see Fig 30.3). The sans-serif part is a backup–it tells the browser to use any old sans-serif font in case there’s a problem rendering Muli. The perfect selector: By the way, a little insight in the the trial-and-error process of getting the right selectors: I first tried using body as the selector here, but it didn’t work. I would have never figured out that this selector would work by by using the tips we suggested in the CSS crash course to use the inspector and start hovering elements. So, .book.font-family-1 happens to be what identifies the main text of the book. No magic to this, folks. Just a little grit! 30.3.3.4 Confirm style.css is linked in _output.yml If you’ve been following along using the book skeleton, then there’s nothing more you need to do to apply this font. But just for completeness, we’ll point out that if we were building our book from scratch without the skeleton, then in order for your hardwork in CSS to be work, we would need to tell bookdown that our CSS file exists by referencing style.css in _output.yml: ```yaml bookdown::gitbook: css: assets/style.css ``` 30.3.3.5 Build, assess, and style more Build and preview your book. Do you like the font that you chose? Now you can go back and pick fonts for other elements of your book. Choose another Google Font for your book headers and title and repeat the steps above to add your header fonts to your CSS, using the selectors below to fonts to your headers, title, and subtitle (if you have one). We chose Prata as our header font, and we added its import line of code right beneath where we imported Muli earlier: @import url(&#39;https://fonts.googleapis.com/css?family=Muli:400,400i,700&amp;display=swap&#39;); @import url(&#39;https://fonts.googleapis.com/css?family=Prata&amp;display=swap&#39;); Optionally, we also change the color: and font-size: for the title and headers. /*------------- Body and header text---------------- */ .book.font-family-1 { font-family: &#39;Muli&#39;, sans-serif; } h1, h2, h3, h4 { font-family: &#39;Prata&#39;, serif; color: #2f5275; } .title { font-family: &#39;Prata&#39;, serif; font-size: 3em !important; color: #5699cc; } .subtitle { font-family: &#39;Prata&#39;, serif; color: #2c6793; } The selector h1, h2, h3, h4 separated by commas means that the styles will be applied to an element on our site that has any of the these classes–in this case, all level 1 through level 4 headers. Header fonts: Header fonts can have some more pizazz ✨, but stay away from the intense fonts like handwritings or very artsy looking things, unless you’re only applying it to the book title for dramatic effect. Picking colors: You can add interest to text on your page without being distracting by choosing very dark flavors of your accent color as an alternative to choosing black. For example, when using a color picker, slide down to the darkest, almost-pure-black-but-not-quite version of your color of choice. Consider using this for your body text’s or headers’ color. 30.3.4 Add a logo We’ll add a logo above our table of contents, taking advantage of some of the infrastructure that the book skeleton gave us in _output.yml. You need: A logo file. It’s better if it’s a PNG with a transparent background. To edit _output.yml To set the logo’s size with CSS Let’s do it! Place your logo image in the image/ folder. Open _output.yml and add two things: class=\"toc-logo\" inside the opening &lt;li&gt; tag. Replace the “header text” that used to be within the two &lt;a&gt;tags and replace it with: &lt;img src=\"images/logo-black.png\"&gt;. bookdown::gitbook: highlight: tango css: assets/style.css config: toc: before: | &lt;li class=&quot;toc-logo&quot;&gt;&lt;a href=&quot;./&quot;&gt;&lt;img src=&quot;images/logo-black.png&quot;&gt;&lt;/a&gt;&lt;/li&gt; We have to add the class=\"toc-logo\" in addition to the &lt;img&gt; tag, so that we can style this image in the next step with CSS. Open style.css. Add the following to your CSS. This will make space for your logo image above your TOC. /*--- LOGO ---*/ .toc-logo { width: 200px !important; object-fit: contain; margin: 0 auto; display: block; } .toc-logo img { max-width: 100%; margin-bottom: 10px; } .summary &gt; li:first-child { height: auto !important; } Build and preview your handywork. Go back to the CSS and adjust the width: parameter of .toc-logo to adjust the size of your logo. Make sure that your logo file makes it into the images/ folder that lives inside the docs/ folder. This is supposed to happen automatically when your book is built, but we find that there’s a bit of mystery around this actually being the case. If you don’t see your logo file in docs/images/, then just break one of our golden RMD rules, and copy your logo file there manually. 30.3.5 Custom link colors Links are great ways to pepper your site with an accent color without it becoming too overwhelming. Let’s style the links’ regular appearance and also what they will look like when hovered over. Optionally, have a color picker open in a nearby tab to help with selecting some good hexcode colors. Paste the following into style.css to accomplish this. And yes, the CSS selectors for the links are annoyingly long and specific. /*-----Body Links-------*/ .book .book-body .page-wrapper .page-inner section.normal a { color: #3f88ca; } .book .book-body .page-wrapper .page-inner section.normal a:hover { color: #1f5386; /* darker color when hovering */ text-decoration: none; } Choose a color for all the links in the main text. A safe bet is to choose something that is similar-ish to what we chose for our .title color. Replace the #hexcode with the one for your color of choice in the top style rule above. Choose a second color that’s a bit darker or ligher, that will be the link color when you hover over it. Replace the #hexcode with the one for your color of choice in the bottom style rule. It’s already in the pasted code, so nothing to change, but text-decoration: none in the bottom style rule is what gets rid of the underline that appears when we hover. 30.3.6 Add a hero image A hero image is “web-speak” for the large banner image that usually stretches across the page of many websites. We can sort of accomplish this in bookdown with a combination of both HTML and CSS. The image will not go all the way across the page, but will stop at the TOC. Before you decide to implement this, you should first know that this image will appear at the top of every single book page. If you feel like that will visually wear you out, then either skip this step, or think carefully about choosing an image that doesn’t have too much going on. You’ll need: An image. This should be an image that will still look good when it appears large across the screen. Some good options here. An HTML file CSS to style the image To edit _output.yml Let’s get started: 30.3.6.1 Embed the image in an HTML file Create a new HTML file by going to File &gt; New File &gt; Text File. Paste these contents at the top of the file. &lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;div class=&quot;hero-image-container&quot;&gt; &lt;img class= &quot;hero-image&quot; src=&quot;../images/books.png&quot;&gt; &lt;/div&gt; &lt;link href=\"style.css\" rel=\"stylesheet\"&gt; will allow any content we put in this HTML file to be styled by the CSS file we’ve been working on. The &lt;div class=\"hero-image-container\"&gt; &lt;/div&gt; tags will serve as the \"container\" for our image. The reason we bother with putting our image in a \"container\" at all is because this can make it easier to position and size our image later on the page. We give it a class name“hero-image-container”` because that’s what we’ll use as a selector to style it in our CSS. The tag itself is where we actually specify the image path. Replace the file path to the image (what comes within src= \" \") with your own file path. Save this HTML file in your project directory, ideally inside of the assets/ folder. Name it hero-image.html. You can choose a different name. 30.3.6.2 Add the HTML file to _output.yml Now we tell bookdown that this HTML exists and that we want its contents (our image) to be the first thing in the &lt;body&gt; tag of our site: Open up _output.yml. Add the includes: and before_body: options with a path to your hero-image.html file. bookdown::gitbook: includes: before_body: assets/hero-image.html css: style.css 30.3.6.3 Position and style the image with CSS Finally, we add CSS to the styles.css file to style and position the image in the right spot. This might take a little bit of rendering and adjusting to get it just right. Open style.css Paste the three style rules below into your CSS. /* HERO IMAGE */ .hero-image-container { position: absolute; top: 0; left: 0; right: 0; height: 390px; background-color: #133454; } .hero-image { width: 100%; height: 390px; object-fit: cover; } .page-inner { padding-top: 400px !important; } Change the background-color: to a color that that will match your image. Why does an image need a background color? This is important because it will give the container some “placeholder” content while your image loads or in case your image doesn’t render. (If your hero image has some transparency, then your background color will be visible). Note: The height: of .hero-image-container must be the same height that you choose for the .hero-image. The height you choose is up to you. It does not necessarily have the be the same height as your image file. Note: To disable the hero image (especially if you’re using the rstudio4edu template), you can add display: none; to each of the first two style rules as an additonal line, and then comment out the third style rule above below, using /* on it’s own line just above where the style rule begins and */ after its closing the curly brace }. Build your book, and see if you like your hero image choices! A little more about what’s going on under the hood: position: absolute: To make the image go all the way across the page (not including the table of contents), we have to make the container that the image sits in position: absolute and then spell out its position explicitly (with top, left, right, etc. all set to 0.) These positions are relative to the container that .hero-image-container itself is inside. .page-inner: All of our book content is by default inside a container labelled .page-inner. We don’t want our book content to get stuck hiding behind the big image we just stuck to the top of our page. So, we need to move the book content down by at least the height of our image + some wiggle room of about 10px. That’s what adding so much padding-top: is doing here. 30.4 Usability The next three additions are less about aesthetics and more about making your book easier to read and use. We’ll add: Custom sidebar div tips: These are the “notes” boxes scattered throughout a book that point out tips or warnings or note. You can create differently styles div tips for different purposes. Anchor links: These linked icons next to every section header make it easy for readers to link and share specific parts of your book. See this resource. Copy to clipboard: This creates small clipboard icons within code chunks that let your users quickly copy and paste from book to script. 30.4.1 Custom div tips Open your style.css file. Paste the following two style rules into your CSS file: /* -----------Sidebar div tips------------- */ /* from r-pkgs.org*/ div.puzzle, div.fyi, div.demo, div.note { padding: 1em; margin: 1em 0; padding-left: 100px; background-size: 70px; background-repeat: no-repeat; background-position: 15px center; min-height: 120px; color: #1f5386; background-color: #bed3ec; border: solid 5px #dfedff; } div.puzzle { background-image: url(&quot;../images/Your-turn.png&quot;); } div.fyi { background-image: url(&quot;../images/fyi.png&quot;); } div.demo { background-image: url(&quot;../images/Live-code.png&quot;); } div.note { background-image: url(&quot;../images/lightbulb.png&quot;); } Format the color of the box by changing background-color: and change the color of the text of the div tips with color:. With this styling, all div tip sidebars will be the same except for the icons. Those are controlled with background-image:. You can swap the image paths out for ones of your own if you want to use different images. Use the div tips, in any of your .Rmds. For example, here’s what it looks like to use the div.puzzle one: :::puzzle You use a div tip by writing `:::` following by the name that you assigned to it in the CSS after the `div`. ::: Which makes a div tip that looks like this: You use a div tip by writing ::: followed by the name that you assigned to it in the CSS after the div. 30.4.2 Anchor links The steps that follow are an abbreviated version of the tutorial that you can find here. Here’s what we’re going to use to make anchor links: A wee bit of javascript in a .js file (“but I know nothing about javascript!” you say?–don’t worry, you don’t need to. Copy/paste is all you need). An HTML file Some CSS style rules. Linking our HTML file to _output.yml. 30.4.2.1 Add javascript to make anchor links for all section headers In RStudio, go to File &gt; New File &gt; Text File . Paste the javascript below into this new file. $(document).ready(function() { // Section anchors $(&#39;.section h1, .section h2, .section h3, .section h4, .section h5&#39;).each(function() { anchor = &#39;#&#39; + $(this).parent().attr(&#39;id&#39;); $(this).addClass(&quot;hasAnchor&quot;).prepend(&#39;&lt;a href=&quot;&#39; + anchor + &#39;&quot; class=&quot;anchor&quot;&gt;&lt;/a&gt;&#39;); }); }); This code essentially says, “Wait until the page is loaded and ready, and when it is, find every section header and tack on a link to itself right before that header.” The other important thing the javascript file will do is to add a CSS class \"hasAnchor\" to each of the headers. This is part of what will allow to style our anchor links with CSS in a couple steps. Save the file as book.js. (You can give it another name, but the convention is usually to name it file after the project you’re using it for.) Save this file in your working directory or in the assets/ folder. Phew–you’re done with the javascript code now! 30.4.2.2 Embed book.js into HTML file We’ll make an HTML file that will refer to our javascript file. In RStudio, go to File &gt; New File &gt; Text File . Paste the line below into this new file. &lt;script src=&quot;book.js&quot;&gt;&lt;/script&gt; Modify the path in quotes to point to your javascript file if yours is not in your working directory. Save this file as header.html in your project directory or in the assets/ folder. You can choose a different name if you’d like. :::tip *No tags needed*: If you have a little experience with javascript, then you may know that any javascript &lt;script&gt; tags usually need to be placed within &lt;head&gt; tags, too. We don’t need to use these here because this little line of code will be automatically injected within our bookdown’s existing &lt;head&gt; tags when we use includes: in_header: in a few steps. ::: 30.4.2.3 Add CSS to show anchor links In our javascript code, we had the class \"hasAnchor\" be programatically added to our sections headers. So, we can now style them so that each time we hover over the section header, the anchor link icon will become visible. Open your style.css file. Paste the CSS below to this file. These will govern the anchor link icon’s position, size, and color. /* -----------Section anchors -------------*/ .book .book-body .page-wrapper .page-inner section.normal { overflow: visible !important; /*so anchor link doesnt get cut off */ } a.anchor { margin-left: -30px; padding-right: 3px; display:inline-block; width: 30px; height: 30px; background-image: url(https://image.flaticon.com/icons/svg/34/34735.svg) !important; background-repeat: no-repeat !important; background-size: 20px 20px !important; background-position: center bottom !important; opacity: 0; } .hasAnchor:hover a.anchor, a.anchor:hover { opacity: 0.6; } @media (max-width: 1144px) { /* dont show anchor link on small screens */ .hasAnchor:hover a.anchor { visibility: hidden; } } 30.4.2.4 Add anchor link elements to _output.yml We created all the anchor link infrastructure, now we just need to tell bookdown about it by referencing it in our _output.yml. Open _output.yml, located in your project directory Reference your HTML file with the includes: in_header: option underneath bookdown::gitbook. Make sure CSS file is also referenced. This part of your _output.yml should look something like this: bookdown::gitbook: includes: in_header: assets/header.html before_body: assets/hero-image.html css: style.css Save and build your book to check that everything has worked! 30.4.3 Copy to clipboard Here’s what we’re going to need to make copy to clipboard buttons: A little javascript in a .js file (we can add on to the .js file we used to make the anchor links). An HTML file –we can use the same one we created for the anchor links above. One CSS style rule Linking our HTML file to _output.yml (you already did this if you created the anchor links). Open book.js that you created for making section anchors. If you didn’t make section anchors, then go back and do 1) and 3) from this section. Paste the following javasript into into the book.js file, beneath the other javascript from your section anchors. $(document).ready(function() { // Copy Button $chunks = $(&#39;pre.sourceCode &gt; code.sourceCode&#39;); $chunks.each(function(i, val) { $(this).prepend(&quot;&lt;button class=\\&quot;button copy\\&quot;&gt;&lt;i class=\\&quot;fa fa-copy fa-2x\\&quot;&gt;&lt;/i&gt;&lt;/button&gt;&quot;).click(function() { var $temp = $(&quot;&lt;textarea&gt;&quot;); $(&quot;body&quot;).append($temp); var content = $(this).clone().children(&quot;button&quot;).remove().end().text(); $temp.val(content).select(); document.execCommand(&quot;copy&quot;); $temp.remove(); }); }); }); Open style.css. Add the following to style the appearance of the button: .copy { width: inherit; background-color: #e2e2e2 ; border: none; border-radius: 2px; float: right; font-size: 60%; padding: 4px 4px 4px 4px; } Build and preview your work! 30.5 Table of Contents Now comes the time to style the TOC. It’s a huge part of the book’s appearance, so we can get a lot of bang for our buck if we’re intentional about our choices here. All of these changes will be made using CSS alone. We will: Change the TOC background color Style the TOC links Make the TOC hierarchy clearer by adding space and styling Part titles 30.5.1 Change TOC background color Open style.css. Paste in the CSS below. The selector for the Table of Contents is .book-summary. The border-right: none parameter removes the line that separates the TOC by default. If you want to keep the little line, then either remove border-right: none; below, so that bookdown will keep the default line. Alternatively, style the line differently by replacing none with a different thickness, color, and line-type (e.g. border-right: 5px #5699cc solid). /*------------ TOC --------------*/ .book .book-summary { background: white; border-right: none; } We chose white as the background color for the TOC because we think it helps “open up” the space. But feel free to experiment here. 30.5.2 Style the TOC links Adding to the TOC style rules we started above, now we’ll change the font, color, active, and hover behavior for all the links. Change the TOC font, paste in the CSS below. You’ll have to choose from a font that you already imported earlier. .summary{ font-family: &#39;Muli&#39;, sans-serif; } Change the color by adding the CSS rule below. We also add padding in all directions, to give the TOC items a bit more breathing room. /* all TOC list items, basically */ .book .book-summary ul.summary li a, .book .book-summary ul.summary li span { padding-top: 8px; padding-bottom: 8px; padding-left: 15px; padding-right: 15px; color: #2f5175; } For a different color for links that are hovered, you can add the CSS rule below. .summary a:hover { color: #778ca5 !important; } Add style for active links. Active links indicate which page you’re actively viewing. We’ll do two things: Change the color: of the link. We chose the same color as our .title in this case. Add a left border of the same color to draw more attention to the active link within the long list of other links in the TOC. .book .book-summary ul.summary li.active&gt;a { /*active TOC links*/ color: #778ca5 !important; border-left: solid 4px; border-color: #5699cc; padding-left: 11px !important; } When you add a border-left: with a thickness of 4px, it will shift over the text by 4px, too. So, compensate for this by overriding the original padding-left: 15px that we set in an earlier style rule with a new padding-left: that is 4px less. That’s why we ended up with 11px here. The !important is what signals the override. We like choosing TOC text colors that aren’t too flashy. Save the pops of color for hovering or active link behavior. Here we went with the same dark color that we used for h1, h2, etc. 30.5.3 Hierarchy styling Lastly, we make it clearer which chapters belong to the same part by styling the Part titles a bit differently. Give breathing room, darken, and make uppercase Copy and paste the CSS rule below. li.appendix span, li.part span { /* for TOC part names */ margin-top: 1em; color: color: #1c3046 !important; opacity: 1 !important; text-transform: uppercase; } We added margin-top: 1em for some much needed space above each Part title. We choose a color: that is similar to the dark blue of the links, but even closer towards black on that spectrum without going all the way to black (#000000). By default, bookdown gives Part titles an opacity that makes them appear light-colored. We have to override this, by choosing an opacity of 1. We also make these Part title uppercase. Unnumbered first chapters If you’re using Parts for your book, then you might want to use the first (unnumbered) chapter of each part as an intro chapter to that Part. You can style this ununumbered chapter differently with the following CSS. We make it uppercase. ```style.css /* grabs first .chapter immediately after .part...but only those ch without numbers */ .part + li[data-level=&quot;&quot;] { text-transform: uppercase; } ``` Now time to build and preview your fancy book! "],["intro-blogdown.html", "Introduction", " Introduction Overview- this is a section filled with recipes for making common types of educational content… "],["make-blogdown.html", "Chapter 31 Make a site", " Chapter 31 Make a site "],["make-a-site-for-a-workshop.html", "Chapter 32 Make a site for a workshop", " Chapter 32 Make a site for a workshop "],["make-a-site-for-a-course.html", "Chapter 33 Make a site for a course", " Chapter 33 Make a site for a course "],["make-it-fancier-4.html", "Chapter 34 Make it fancier", " Chapter 34 Make it fancier "],["css-crash.html", "A CSS Crash Course A.1 What’s in a name? A.2 How do I change the color of….?", " A CSS Crash Course Every element of a website that you see, from links to pictures to paragraphs, has a category label. These labels can be tags (for example, all links on websites have a tags, all big headers have h1 tags), or they can be IDs or classes (described later). If you know the label for something on a website, then you can style its appearance by using a .css file. In a CSS file, you write style rules that will apply to all elements of the same category. This is a very useful thing to be able to do because it allows you to break free from the limitations of built-in templates and themes that come with R Markdown. Below is a quick example of some CSS that would change all link colors to the color “orchid” and all link text from being uppercase: a { color: orchid; text-transform: uppercase; } You begin with the element’s “label” (technically called a selector). Within curly braces, { }, you can include as many different style properties as you’d like for that element. Each new property must end with a ;. What are your options for properties to style? There are many, but don’t feel overwhelmed– just pick one or two things to change as you start out. A.1 What’s in a name? How could you have known that the selector for links was an a? The answer is by opening up your existing website, and right-clicking anywhere on the page and clicking on Inspect (in Chrome browsers) or Inspect Element (in Firefox). Clicking on this will open a small set of windows inside of your browser called the Developer Tools (a.k.a “devtools”) or the inspector. These give you an inside peek into all the CSS styles that are being applied to every element in the site. (The examples that follow use the Chrome developer tools.) In the lower left pane of the subwindow, click on the icon of a rectangle with an arrow. Now as you hover and then click on anything in your website, you will see the contents of the developer tools change. The pane on the right shows the CSS styles that are applied. Taking a closer look at the CSS pane on the right, we can see that the link we are hovering over does indeed have an a as its selector. One neat thing about the developer tools is that you can click and temporarily edit the CSS properties in this very window and simlutaneously see the changes take effect on the page. These edits only happen in your browser, so nothing in your R Markdown document will change (in fact, your edits will be lost as soon as you refresh the page in your browser), but editing here is a fast way to test out any CSS ideas. [ALSO ADD TEXTTRANSFORM IN SCREENSHOT TO MATCH ABOVE EXAMPLE] There’s a lot more we could say about CSS here. But it’s faster and more rewarding to learn via real examples. Let’s start tinkering! [OTHER TOPICS TO MENTION:] [1. EXAMPLES OF CLASSES AS CSS SELECTORS. (WHY DO SOME SELECTORS BEGIN WITH . AND OTHERS DON’T?)] [2. MULTIPLE ATTRIBUTES. COMBINING THEM WITH . vs separated by spaces ] A.2 How do I change the color of….? I’m going to model how I would go about changing the color of the navbar of an RMD site. We’ll use the developer tools to try out different options in real time. Pull up your site and right click to open the developer tools. When we click on the navigation bar, we see that it highlights a certain line of HTML in the left pane of the developer tools. Look for anything that says class =. The values that follow class are the CSS selectors that are currently styling our navigation bar. In this case, our navbar has three classes navbar, navbar-default, and navbar-fixed-top. ![](images/navbar.png) In the righthand pane of the developer tools. we see these classes being used in the CSS (notice that a class needs to have a . before it in when it’s a selector–but a tag, like the link example above, does not). [SAY SOMETHING ABOUT THE ORDER EACH ARE LISTED?] Let’s choose the first CSS selector .navbar and play around with it in this pane to decide what color we’d like. Type background-color: followed by any HEX code or rgb code and press Enter. You can also click on the small color square to use sliders to set the color and transparency of your navigation bar. I’m selecting _________ color. When you change the color in the developer tools, you should see the element on your site also changing in real-time. Cool, huh? If you don’t see the color changing on your site, then it means you either have the wrong selector OR it means that something else is overriding your color choice (do you see a strikethrough line through what you just wrote?). You can force it to go with your choice by adding !important to the end of line you added, right before the ;. Now we need to immortalize your color choice by putting your selector and your color choice in a CSS file. Make a CSS file (file &gt; new file &gt; text file &gt; save as style.css) and paste something like this into it. .navbar { background-color: #fcfcfc; } Link your CSS file to your R Markdown site/blog/tool…see the specific cookbook for how to do this for your particular tool. Build your site–do you see your CSS style taking effect? "],["backlog.html", "B Backlog", " B Backlog Here is a list of items that would be cool to include, but are lower priority. [timer function for workshops] Continuous integration? https://github.com/chris-prener/travis-test pandoc/ knitr/ addressing a letter version of R Markdown and YAML "],["miscellaneous.html", "C Miscellaneous", " C Miscellaneous Consistent use of pronouns in the book: our site, your site, we suggest, I suggest….? Rmd, R Markdown doc, .Rmd – which to use? A growing yaml—-show each feature getting added on? Or just focus on the one at hand? Other pursuits: * PR to Hugo Academic Themes * rmd4edu: Template package * writing function and doing a PR for the roxygen comment stuff for package * word doc template "],["spillover-from-distill.html", "D Spillover from distill", " D Spillover from distill Unique to R Markdown [ Probably remove] rmarkdown:::site_skeleton(getwd()) What happens to Rmd’s placed in subdirectories? ** They’re still knit…but not compiled in an automatic and smart way (?) A logo can only be added with HTML/CSS– unless you create your own pandoc template (Ahh!) Footer must be constructed using HTML/CSS manually with includes.... in YAML. And it doesn’t go all the way across the page easily. Google analytics need to be inserted manually within HTML file and includes.. before body in YAML Appendix not an option unless manually built into footer. Favicon: can you not do this in r Markdown within the YAML? output: html_document….or whatever else you want. "],["teaching-and-learning-with-jupyter-book-review.html", "E Teaching and Learning with Jupyter Book Review", " E Teaching and Learning with Jupyter Book Review Desiree’s thoughts: Good stuff Description of the use cases Screenshots of examples of activities/questions in notebooks (e.g. in Section 2.3.22. Inclusion of ‘pro-tips content’ throughout content I do like the pedagogical patterns section, though I see how including something like this greatly increases the scope of our project. I think what I like most about it, is that they’re concrete examples of creative use-cases. The tips and tricks section I find to be useful, practical advice. In thinking of how this applies toour own project, I think a lot of this could be condensed into little “tips” boxes. Different ways of running Jupyter w/ pros and cons. Useful for educators to know ahead of time Stuff I don’t like as much Needs way more color, pictures, graphics. I think there is too much text for this to be an effective way of “selling” the notebooks. You have to read a lot of prefaces before you get to the practical implementations and concrete examples. Tone is kinda dry Not sure if it’s the layout, but I think just by nature of it being a book, it doesn’t feel like as a user that I can or should skip around to only the sections I need. It’s hard to know which sections will be most useful to me when I “arrive” to this resource. "],["rmd-themes.html", "F R Markdown Themes", " F R Markdown Themes Theme options include the following. Click through the tabs to see what they each look like on our basic course demo site. F.0.1 default F.0.2 cerulean F.0.3 journal F.0.4 flatly F.0.5 darkly F.0.6 readable F.0.7 spacelab F.0.8 united F.0.9 cosmo F.0.10 lumen F.0.11 paper F.0.12 sandstone F.0.13 simplex F.0.14 yeti "],["teach-offer.html", "G What should I make", " G What should I make Make a data package Make an R Markdown template Make an R Studio project template Make an interactive tutorial Make an R Markdown site Make a Distill site Make a book Make a Blogdown site I think that quite early on in this book, we should try to answer the question “I’m an educator…what should/can I make here?”. I’m not sure whether this should happen here or in the preface, but one way we can do this is with the flowchart. Below is just a very rough conceptual sketch of how a flowchart here might be a fun way to give users a visual map of where they could end up after using the rstudio4edu resource. This is the idea I’m riffing off of. Needless to say, right now the example below is yucky, too small, and incomplete. And it’s also just kind of acting as funny eye-candy. But if we make it nicer (and perhaps summarize it more efficiently with a table beneath it), would this be the spot for it? (Could alternatively place this in the introductory section for the Cookbooks Section–and only include tools that we have cookbooks for (ie. leave out stuff like Connect)). "],["teach-learners.html", "H Teaching learners", " H Teaching learners teaching to make reprexes teaching about community/SO/etc "],["teach-day1.html", "I What to do on day 1", " I What to do on day 1 See: https://github.com/rstudio-education/datascience-box/issues/47 Link to mine’s eat cake first stuff. start with a data package (if you can); caveat: you are teaching importing data. link to mine’s dsinabox, perhaps garrett’s latest repro research stuff orient to IDE (great tip by kierisi: play with RStudio IDE themes?) start with Rmd (if you can)- you can teach minimal markdown etc. "],["licensing-your-content.html", "J Licensing your content", " J Licensing your content Some opinionated guidance. Does it make sense to move the Licensing section closer to the end of the book– after they’ve created new content (or remixed ours or others’) with the cookbooks? "],["remixing-licensed-content.html", "K Remixing licensed content", " K Remixing licensed content Recommended ways to offer attribution If you are reusing others’ content in say a workshop with slides, add your attributions on the last slide, and include an “Attributions” section in the repository’s READ ME file. So if it’s a workshop, once on the last slide + in the repo readme. If it’s a semester long course, just somewhere on the course website "],["community.html", "L Community", " L Community https://community.rstudio.com/c/teaching "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
