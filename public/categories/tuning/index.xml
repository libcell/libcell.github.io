<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
  <title>tuning on Tidymodels</title>
  <link>https://www.tidymodels.org/categories/tuning/</link>
  <description>Recent content in tuning on Tidymodels</description>
  <generator>Hugo -- gohugo.io</generator>
<language>en-us</language>

<atom:link href="https://www.tidymodels.org/categories/tuning/index.xml" rel="self" type="application/rss+xml" />


<item>
  <title>Build a model</title>
  <link>https://www.tidymodels.org/start/models/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/start/models/</guid>
  <description>&lt;h2 id=&#34;intro&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;How do you create a statistical model using tidymodels? In this article, we will walk you through the steps. We start with data for modeling, learn how to specify and train models with different engines using the &lt;a href=&#34;https://parsnip.tidymodels.org/&#34;&gt;parsnip package&lt;/a&gt;, and understand why these functions are designed this way.&lt;/p&gt;
&lt;p&gt;To use code in this article,  you will need to install the following packages: broom.mixed, dotwhisker, readr, rstanarm, and tidymodels.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(tidymodels)  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# for the parsnip package, along with the rest of tidymodels&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Helper packages&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(readr)       &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# for importing data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(broom.mixed) &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# for converting bayesian models to tidy tibbles&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(dotwhisker)  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# for visualizing regression results&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt; Alternatively, open an interactive version of this article in your browser: &lt;/p&gt;

&lt;a href=&#34;https://rstudio.cloud/project/2674862&#34;&gt;
  &lt;button class=&#34;test-drive-btn&#34;&gt;&lt;i class=&#34;fa fa-cloud&#34;&gt;&lt;/i&gt; Test Drive on RStudio Cloud&lt;/button&gt;
&lt;/a&gt;

&lt;h2 id=&#34;data&#34;&gt;The Sea Urchins Data&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s use the data from &lt;a href=&#34;https://link.springer.com/article/10.1007/BF00349318&#34;&gt;Constable (1993)&lt;/a&gt; to explore how three different feeding regimes affect the size of sea urchins over time. The initial size of the sea urchins at the beginning of the experiment probably affects how big they grow as they are fed.&lt;/p&gt;
&lt;p&gt;To start, let&amp;rsquo;s read our urchins data into R, which we&amp;rsquo;ll do by providing &lt;a href=&#34;https://readr.tidyverse.org/reference/read_delim.html&#34;&gt;&lt;code&gt;readr::read_csv()&lt;/code&gt;&lt;/a&gt; with a url where our CSV data is located (&amp;quot;&lt;a href=&#34;https://tidymodels.org/start/models/urchins.csv&#34;&gt;https://tidymodels.org/start/models/urchins.csv&lt;/a&gt;&amp;quot;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;urchins &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Data were assembled for a tutorial &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# at https://www.flutterbys.com.au/stats/tut/tut7.5a.html&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;read_csv&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;https://tidymodels.org/start/models/urchins.csv&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Change the names to be a little more verbose&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;setNames&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;food_regime&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;initial_volume&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;width&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Factors are very helpful for modeling, so we convert one column&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(food_regime &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;factor&lt;/span&gt;(food_regime, levels &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Initial&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Low&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;High&amp;#34;&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Rows: 72 Columns: 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Column specification ──────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Delimiter: &amp;#34;,&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; chr (1): TREAT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; dbl (2): IV, SUTW&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ℹ Use `spec()` to retrieve the full column specification for this data.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s take a quick look at the data:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;urchins
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 72 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    food_regime initial_volume width&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;fct&amp;gt;                &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 Initial                3.5 0.01 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 Initial                5   0.02 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 Initial                8   0.061&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 Initial               10   0.051&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 Initial               13   0.041&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 Initial               13   0.061&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 Initial               15   0.041&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 Initial               15   0.071&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 Initial               16   0.092&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 Initial               17   0.051&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 62 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The urchins data is a &lt;a href=&#34;https://tibble.tidyverse.org/index.html&#34;&gt;tibble&lt;/a&gt;. If you are new to tibbles, the best place to start is the &lt;a href=&#34;https://r4ds.had.co.nz/tibbles.html&#34;&gt;tibbles chapter&lt;/a&gt; in &lt;em&gt;R for Data Science&lt;/em&gt;. For each of the 72 urchins, we know their:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;experimental feeding regime group (&lt;code&gt;food_regime&lt;/code&gt;: either &lt;code&gt;Initial&lt;/code&gt;, &lt;code&gt;Low&lt;/code&gt;, or &lt;code&gt;High&lt;/code&gt;),&lt;/li&gt;
&lt;li&gt;size in milliliters at the start of the experiment (&lt;code&gt;initial_volume&lt;/code&gt;), and&lt;/li&gt;
&lt;li&gt;suture width at the end of the experiment (&lt;code&gt;width&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a first step in modeling, it&amp;rsquo;s always a good idea to plot the data:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(urchins,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; initial_volume, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; width, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           group &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; food_regime, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           col &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; food_regime)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_point&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_smooth&lt;/span&gt;(method &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; lm, se &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;scale_color_viridis_d&lt;/span&gt;(option &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;plasma&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;.7&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; `geom_smooth()` using formula &amp;#39;y ~ x&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/urchin-plot-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;We can see that urchins that were larger in volume at the start of the experiment tended to have wider sutures at the end, but the slopes of the lines look different so this effect may depend on the feeding regime condition.&lt;/p&gt;
&lt;h2 id=&#34;build-model&#34;&gt;Build and fit a model&lt;/h2&gt;
&lt;p&gt;A standard two-way analysis of variance (&lt;a href=&#34;https://www.itl.nist.gov/div898/handbook/prc/section4/prc43.htm&#34;&gt;ANOVA&lt;/a&gt;) model makes sense for this dataset because we have both a continuous predictor and a categorical predictor. Since the slopes appear to be different for at least two of the feeding regimes, let&amp;rsquo;s build a model that allows for two-way interactions. Specifying an R formula with our variables in this way:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;width &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; initial_volume &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; food_regime
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;allows our regression model depending on initial volume to have separate slopes and intercepts for each food regime.&lt;/p&gt;
&lt;p&gt;For this kind of model, ordinary least squares is a good initial approach. With tidymodels, we start by specifying the &lt;em&gt;functional form&lt;/em&gt; of the model that we want using the &lt;a href=&#34;https://parsnip.tidymodels.org/&#34;&gt;parsnip package&lt;/a&gt;. Since there is a numeric outcome and the model should be linear with slopes and intercepts, the model type is &lt;a href=&#34;https://parsnip.tidymodels.org/reference/linear_reg.html&#34;&gt;&amp;ldquo;linear regression&amp;rdquo;&lt;/a&gt;. We can declare this with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;linear_reg&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Linear Regression Model Specification (regression)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Computational engine: lm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That is pretty underwhelming since, on its own, it doesn&amp;rsquo;t really do much. However, now that the type of model has been specified, we can think about a method for &lt;em&gt;fitting&lt;/em&gt; or training the model, the model &lt;strong&gt;engine&lt;/strong&gt;. The engine value is often a mash-up of the software that can be used to fit or train the model as well as the estimation method. The default for &lt;code&gt;linear_reg()&lt;/code&gt; is &lt;code&gt;&amp;quot;lm&amp;quot;&lt;/code&gt; for ordinary least squares, as you can see above. We could set a non-default option instead:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;linear_reg&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;set_engine&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;keras&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Linear Regression Model Specification (regression)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Computational engine: keras&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;a href=&#34;https://parsnip.tidymodels.org/reference/linear_reg.html&#34;&gt;documentation page for &lt;code&gt;linear_reg()&lt;/code&gt;&lt;/a&gt; lists all the possible engines. We&amp;rsquo;ll save our model object using the default engine as &lt;code&gt;lm_mod&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lm_mod &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;linear_reg&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From here, the model can be estimated or trained using the &lt;a href=&#34;https://parsnip.tidymodels.org/reference/fit.html&#34;&gt;&lt;code&gt;fit()&lt;/code&gt;&lt;/a&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lm_fit &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lm_mod &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;fit&lt;/span&gt;(width &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; initial_volume &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; food_regime, data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; urchins)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lm_fit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; parsnip model object&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Call:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; stats::lm(formula = width ~ initial_volume * food_regime, data = data)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Coefficients:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;                    (Intercept)                  initial_volume  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;                      0.0331216                       0.0015546  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;                 food_regimeLow                 food_regimeHigh  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;                      0.0197824                       0.0214111  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  initial_volume:food_regimeLow  initial_volume:food_regimeHigh  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;                     -0.0012594                       0.0005254&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Perhaps our analysis requires a description of the model parameter estimates and their statistical properties. Although the &lt;code&gt;summary()&lt;/code&gt; function for &lt;code&gt;lm&lt;/code&gt; objects can provide that, it gives the results back in an unwieldy format. Many models have a &lt;code&gt;tidy()&lt;/code&gt; method that provides the summary results in a more predictable and useful format (e.g. a data frame with standard column names):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;tidy&lt;/span&gt;(lm_fit)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 6 × 5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   term                            estimate std.error statistic  p.value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;                              &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 (Intercept)                     0.0331    0.00962      3.44  0.00100 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 initial_volume                  0.00155   0.000398     3.91  0.000222&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 food_regimeLow                  0.0198    0.0130       1.52  0.133   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4 food_regimeHigh                 0.0214    0.0145       1.47  0.145   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5 initial_volume:food_regimeLow  -0.00126   0.000510    -2.47  0.0162  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 6 initial_volume:food_regimeHigh  0.000525  0.000702     0.748 0.457&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This kind of output can be used to generate a dot-and-whisker plot of our regression results using the dotwhisker package:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;tidy&lt;/span&gt;(lm_fit) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;dwplot&lt;/span&gt;(dot_args &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(size &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, color &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;black&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         whisker_args &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(color &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;black&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         vline &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;geom_vline&lt;/span&gt;(xintercept &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, colour &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;grey50&amp;#34;&lt;/span&gt;, linetype &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/dwplot-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;h2 id=&#34;predict-model&#34;&gt;Use a model to predict&lt;/h2&gt;
&lt;p&gt;This fitted object &lt;code&gt;lm_fit&lt;/code&gt; has the &lt;code&gt;lm&lt;/code&gt; model output built-in, which you can access with &lt;code&gt;lm_fit$fit&lt;/code&gt;, but there are some benefits to using the fitted parsnip model object when it comes to predicting.&lt;/p&gt;
&lt;p&gt;Suppose that, for a publication, it would be particularly interesting to make a plot of the mean body size for urchins that started the experiment with an initial volume of 20ml. To create such a graph, we start with some new example data that we will make predictions for, to show in our graph:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;new_points &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;expand.grid&lt;/span&gt;(initial_volume &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;20&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          food_regime &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Initial&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Low&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;High&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;new_points
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   initial_volume food_regime&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1             20     Initial&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2             20         Low&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3             20        High&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To get our predicted results, we can use the &lt;code&gt;predict()&lt;/code&gt; function to find the mean values at 20ml.&lt;/p&gt;
&lt;p&gt;It is also important to communicate the variability, so we also need to find the predicted confidence intervals. If we had used &lt;code&gt;lm()&lt;/code&gt; to fit the model directly, a few minutes of reading the &lt;a href=&#34;https://stat.ethz.ch/R-manual/R-devel/library/stats/html/predict.lm.html&#34;&gt;documentation page&lt;/a&gt; for &lt;code&gt;predict.lm()&lt;/code&gt; would explain how to do this. However, if we decide to use a different model to estimate urchin size (&lt;em&gt;spoiler:&lt;/em&gt; we will!), it is likely that a completely different syntax would be required.&lt;/p&gt;
&lt;p&gt;Instead, with tidymodels, the types of predicted values are standardized so that we can use the same syntax to get these values.&lt;/p&gt;
&lt;p&gt;First, let&amp;rsquo;s generate the mean body width values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mean_pred &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;predict&lt;/span&gt;(lm_fit, new_data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; new_points)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mean_pred
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 3 × 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    .pred&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 0.0642&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 0.0588&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 0.0961&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When making predictions, the tidymodels convention is to always produce a tibble of results with standardized column names. This makes it easy to combine the original data and the predictions in a usable format:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conf_int_pred &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;predict&lt;/span&gt;(lm_fit, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         new_data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; new_points, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;conf_int&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conf_int_pred
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 3 × 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   .pred_lower .pred_upper&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;         &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1      0.0555      0.0729&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2      0.0499      0.0678&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3      0.0870      0.105&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Now combine: &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plot_data &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  new_points &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;bind_cols&lt;/span&gt;(mean_pred) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;bind_cols&lt;/span&gt;(conf_int_pred)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# and plot:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(plot_data, &lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; food_regime)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_point&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; .pred)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_errorbar&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(ymin &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; .pred_lower, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    ymax &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; .pred_upper),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                width &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;.2&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;labs&lt;/span&gt;(y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;urchin size&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/lm-all-pred-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;h2 id=&#34;new-engine&#34;&gt;Model with a different engine&lt;/h2&gt;
&lt;p&gt;Every one on your team is happy with that plot &lt;em&gt;except&lt;/em&gt; that one person who just read their first book on &lt;a href=&#34;https://bayesian.org/what-is-bayesian-analysis/&#34;&gt;Bayesian analysis&lt;/a&gt;. They are interested in knowing if the results would be different if the model were estimated using a Bayesian approach. In such an analysis, a &lt;a href=&#34;https://towardsdatascience.com/introduction-to-bayesian-linear-regression-e66e60791ea7&#34;&gt;&lt;em&gt;prior distribution&lt;/em&gt;&lt;/a&gt; needs to be declared for each model parameter that represents the possible values of the parameters (before being exposed to the observed data). After some discussion, the group agrees that the priors should be bell-shaped but, since no one has any idea what the range of values should be, to take a conservative approach and make the priors &lt;em&gt;wide&lt;/em&gt; using a Cauchy distribution (which is the same as a t-distribution with a single degree of freedom).&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://mc-stan.org/rstanarm/articles/priors.html&#34;&gt;documentation&lt;/a&gt; on the rstanarm package shows us that the &lt;code&gt;stan_glm()&lt;/code&gt; function can be used to estimate this model, and that the function arguments that need to be specified are called &lt;code&gt;prior&lt;/code&gt; and &lt;code&gt;prior_intercept&lt;/code&gt;. It turns out that &lt;code&gt;linear_reg()&lt;/code&gt; has a &lt;a href=&#34;https://parsnip.tidymodels.org/reference/linear_reg.html#details&#34;&gt;&lt;code&gt;stan&lt;/code&gt; engine&lt;/a&gt;. Since these prior distribution arguments are specific to the Stan software, they are passed as arguments to &lt;a href=&#34;https://parsnip.tidymodels.org/reference/set_engine.html&#34;&gt;&lt;code&gt;parsnip::set_engine()&lt;/code&gt;&lt;/a&gt;. After that, the same exact &lt;code&gt;fit()&lt;/code&gt; call is used:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# set the prior distribution&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;prior_dist &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; rstanarm&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;student_t&lt;/span&gt;(df &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;123&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# make the parsnip model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bayes_mod &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;linear_reg&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;set_engine&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;stan&amp;#34;&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             prior_intercept &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; prior_dist, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             prior &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; prior_dist) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# train the model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bayes_fit &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  bayes_mod &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;fit&lt;/span&gt;(width &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; initial_volume &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; food_regime, data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; urchins)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;print&lt;/span&gt;(bayes_fit, digits &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; parsnip model object&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; stan_glm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  family:       gaussian [identity]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  formula:      width ~ initial_volume * food_regime&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  observations: 72&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  predictors:   6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ------&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;                                Median   MAD_SD  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; (Intercept)                     0.03373  0.00963&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; initial_volume                  0.00153  0.00040&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; food_regimeLow                  0.01916  0.01290&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; food_regimeHigh                 0.02090  0.01477&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; initial_volume:food_regimeLow  -0.00124  0.00051&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; initial_volume:food_regimeHigh  0.00053  0.00072&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Auxiliary parameter(s):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       Median  MAD_SD &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; sigma 0.02130 0.00184&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ------&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; * For help interpreting the printed output see ?print.stanreg&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; * For info on the priors used see ?prior_summary.stanreg&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This kind of Bayesian analysis (like many models) involves randomly generated numbers in its fitting procedure. We can use &lt;code&gt;set.seed()&lt;/code&gt; to ensure that the same (pseudo-)random numbers are generated each time we run this code. The number &lt;code&gt;123&lt;/code&gt; isn&amp;rsquo;t special or related to our data; it is just a &amp;ldquo;seed&amp;rdquo; used to choose random numbers.&lt;/p&gt;
&lt;p&gt;To update the parameter table, the &lt;code&gt;tidy()&lt;/code&gt; method is once again used:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;tidy&lt;/span&gt;(bayes_fit, conf.int &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 6 × 5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   term                            estimate std.error  conf.low conf.high&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;                              &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 (Intercept)                     0.0337    0.00963   0.0166    0.0497  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 initial_volume                  0.00153   0.000396  0.000896  0.00221 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 food_regimeLow                  0.0192    0.0129   -0.00255   0.0413  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4 food_regimeHigh                 0.0209    0.0148   -0.00403   0.0457  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5 initial_volume:food_regimeLow  -0.00124   0.000506 -0.00210  -0.000411&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 6 initial_volume:food_regimeHigh  0.000535  0.000717 -0.000652  0.00174&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A goal of the tidymodels packages is that the &lt;strong&gt;interfaces to common tasks are standardized&lt;/strong&gt; (as seen in the &lt;code&gt;tidy()&lt;/code&gt; results above). The same is true for getting predictions; we can use the same code even though the underlying packages use very different syntax:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bayes_plot_data &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  new_points &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;bind_cols&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;predict&lt;/span&gt;(bayes_fit, new_data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; new_points)) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;bind_cols&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;predict&lt;/span&gt;(bayes_fit, new_data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; new_points, type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;conf_int&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(bayes_plot_data, &lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; food_regime)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_point&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; .pred)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_errorbar&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(ymin &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; .pred_lower, ymax &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; .pred_upper), width &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;.2&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;labs&lt;/span&gt;(y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;urchin size&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;ggtitle&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Bayesian model with t(1) prior distribution&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/stan-pred-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;This isn&amp;rsquo;t very different from the non-Bayesian results (except in interpretation).&lt;/p&gt;
&lt;div class=&#34;note&#34;&gt;The &lt;a href=&#34;https://parsnip.tidymodels.org/&#34;&gt;parsnip&lt;/a&gt; package can work with many model types, engines, and arguments. Check out &lt;a href=&#34;https://www.tidymodels.org/find/parsnip/&#34;&gt;tidymodels.org/find/parsnip&lt;/a&gt; to see what is available.&lt;/div&gt;
&lt;h2 id=&#34;why&#34;&gt;Why does it work that way?&lt;/h2&gt;
&lt;p&gt;The extra step of defining the model using a function like &lt;code&gt;linear_reg()&lt;/code&gt; might seem superfluous since a call to &lt;code&gt;lm()&lt;/code&gt; is much more succinct. However, the problem with standard modeling functions is that they don&amp;rsquo;t separate what you want to do from the execution. For example, the process of executing a formula has to happen repeatedly across model calls even when the formula does not change; we can&amp;rsquo;t recycle those computations.&lt;/p&gt;
&lt;p&gt;Also, using the tidymodels framework, we can do some interesting things by incrementally creating a model (instead of using single function call). &lt;a href=&#34;https://www.tidymodels.org/start/tuning/&#34;&gt;Model tuning&lt;/a&gt; with tidymodels uses the specification of the model to declare what parts of the model should be tuned. That would be very difficult to do if &lt;code&gt;linear_reg()&lt;/code&gt; immediately fit the model.&lt;/p&gt;
&lt;p&gt;If you are familiar with the tidyverse, you may have noticed that our modeling code uses the magrittr pipe (&lt;code&gt;%&amp;gt;%&lt;/code&gt;). With dplyr and other tidyverse packages, the pipe works well because all of the functions take the &lt;em&gt;data&lt;/em&gt; as the first argument. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;urchins &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;group_by&lt;/span&gt;(food_regime) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;summarize&lt;/span&gt;(med_vol &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;median&lt;/span&gt;(initial_volume))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 3 × 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   food_regime med_vol&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;fct&amp;gt;         &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 Initial        20.5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 Low            19.2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 High           15&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;whereas the modeling code uses the pipe to pass around the &lt;em&gt;model object&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bayes_mod &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;fit&lt;/span&gt;(width &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; initial_volume &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; food_regime, data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; urchins)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This may seem jarring if you have used dplyr a lot, but it is extremely similar to how ggplot2 operates:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(urchins,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(initial_volume, width)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;      &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# returns a ggplot object &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_jitter&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;                         &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# same&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_smooth&lt;/span&gt;(method &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; lm, se &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# same                    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;labs&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Volume&amp;#34;&lt;/span&gt;, y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Width&amp;#34;&lt;/span&gt;)         &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# etc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;session-info&#34;&gt;Session information&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#&amp;gt; ─ Session info ─────────────────────────────────────────────────────
#&amp;gt;  setting  value
#&amp;gt;  version  R version 4.1.1 (2021-08-10)
#&amp;gt;  os       macOS Monterey 12.2.1
#&amp;gt;  system   aarch64, darwin20
#&amp;gt;  ui       X11
#&amp;gt;  language (EN)
#&amp;gt;  collate  en_US.UTF-8
#&amp;gt;  ctype    en_US.UTF-8
#&amp;gt;  tz       America/Denver
#&amp;gt;  date     2022-03-23
#&amp;gt;  pandoc   2.17.1.1 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/ (via rmarkdown)
#&amp;gt; 
#&amp;gt; ─ Packages ─────────────────────────────────────────────────────────
#&amp;gt;  package     * version date (UTC) lib source
#&amp;gt;  broom       * 0.7.12  2022-01-28 [1] CRAN (R 4.1.1)
#&amp;gt;  broom.mixed * 0.2.7   2021-07-07 [1] CRAN (R 4.1.0)
#&amp;gt;  dials       * 0.1.0   2022-01-31 [1] CRAN (R 4.1.1)
#&amp;gt;  dotwhisker  * 0.7.4   2021-09-02 [1] CRAN (R 4.1.1)
#&amp;gt;  dplyr       * 1.0.8   2022-02-08 [1] CRAN (R 4.1.1)
#&amp;gt;  ggplot2     * 3.3.5   2021-06-25 [1] CRAN (R 4.1.0)
#&amp;gt;  infer       * 1.0.0   2021-08-13 [1] CRAN (R 4.1.1)
#&amp;gt;  parsnip     * 0.2.1   2022-03-17 [1] CRAN (R 4.1.1)
#&amp;gt;  purrr       * 0.3.4   2020-04-17 [1] CRAN (R 4.1.0)
#&amp;gt;  readr       * 2.1.2   2022-01-30 [1] CRAN (R 4.1.1)
#&amp;gt;  recipes     * 0.2.0   2022-02-18 [1] CRAN (R 4.1.1)
#&amp;gt;  rlang         1.0.2   2022-03-04 [1] CRAN (R 4.1.1)
#&amp;gt;  rsample     * 0.1.1   2021-11-08 [1] CRAN (R 4.1.1)
#&amp;gt;  rstanarm    * 2.21.1  2020-07-20 [1] CRAN (R 4.1.0)
#&amp;gt;  tibble      * 3.1.6   2021-11-07 [1] CRAN (R 4.1.1)
#&amp;gt;  tidymodels  * 0.2.0   2022-03-19 [1] CRAN (R 4.1.1)
#&amp;gt;  tune        * 0.2.0   2022-03-19 [1] CRAN (R 4.1.1)
#&amp;gt;  workflows   * 0.2.6   2022-03-18 [1] CRAN (R 4.1.1)
#&amp;gt;  yardstick   * 0.0.9   2021-11-22 [1] CRAN (R 4.1.1)
#&amp;gt; 
#&amp;gt;  [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library
#&amp;gt; 
#&amp;gt; ────────────────────────────────────────────────────────────────────
&lt;/code&gt;&lt;/pre&gt;</description>
  </item>
  
<item>
  <title>Correlation and regression fundamentals with tidy data principles</title>
  <link>https://www.tidymodels.org/learn/statistics/tidy-analysis/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/learn/statistics/tidy-analysis/</guid>
  <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This article only requires the tidymodels package.&lt;/p&gt;
&lt;p&gt;While the tidymodels package &lt;a href=&#34;https://broom.tidyverse.org/&#34;&gt;broom&lt;/a&gt; is useful for summarizing the result of a single analysis in a consistent format, it is really designed for high-throughput applications, where you must combine results from multiple analyses. These could be subgroups of data, analyses using different models, bootstrap replicates, permutations, and so on. In particular, it plays well with the &lt;code&gt;nest()/unnest()&lt;/code&gt; functions from &lt;a href=&#34;https://tidyr.tidyverse.org/&#34;&gt;tidyr&lt;/a&gt; and the &lt;code&gt;map()&lt;/code&gt; function in &lt;a href=&#34;https://purrr.tidyverse.org/&#34;&gt;purrr&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;correlation-analysis&#34;&gt;Correlation analysis&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s demonstrate this with a simple data set, the built-in &lt;code&gt;Orange&lt;/code&gt;. We start by coercing &lt;code&gt;Orange&lt;/code&gt; to a &lt;code&gt;tibble&lt;/code&gt;. This gives a nicer print method that will be especially useful later on when we start working with list-columns.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(tidymodels)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;data&lt;/span&gt;(Orange)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Orange &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;as_tibble&lt;/span&gt;(Orange)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Orange
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 35 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    Tree    age circumference&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;ord&amp;gt; &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 1       118            30&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 1       484            58&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 1       664            87&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 1      1004           115&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 1      1231           120&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 1      1372           142&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 1      1582           145&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 2       118            33&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 2       484            69&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 2       664           111&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 25 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This contains 35 observations of three variables: &lt;code&gt;Tree&lt;/code&gt;, &lt;code&gt;age&lt;/code&gt;, and &lt;code&gt;circumference&lt;/code&gt;. &lt;code&gt;Tree&lt;/code&gt; is a factor with five levels describing five trees. As might be expected, age and circumference are correlated:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;cor&lt;/span&gt;(Orange&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;age, Orange&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;circumference)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 0.914&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(ggplot2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(Orange, &lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(age, circumference, color &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; Tree)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_line&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/unnamed-chunk-2-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;Suppose you want to test for correlations individually &lt;em&gt;within&lt;/em&gt; each tree. You can do this with dplyr&amp;rsquo;s &lt;code&gt;group_by&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Orange &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;group_by&lt;/span&gt;(Tree) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;summarize&lt;/span&gt;(correlation &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;cor&lt;/span&gt;(age, circumference))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 5 × 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   Tree  correlation&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;ord&amp;gt;       &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 3           0.988&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 1           0.985&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 5           0.988&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4 2           0.987&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5 4           0.984&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(Note that the correlations are much higher than the aggregated one, and also we can now see the correlation is similar across trees).&lt;/p&gt;
&lt;p&gt;Suppose that instead of simply estimating a correlation, we want to perform a hypothesis test with &lt;code&gt;cor.test()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ct &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;cor.test&lt;/span&gt;(Orange&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;age, Orange&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;circumference)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ct
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 	Pearson&amp;#39;s product-moment correlation&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; data:  Orange$age and Orange$circumference&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; t = 13, df = 33, p-value = 2e-14&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; alternative hypothesis: true correlation is not equal to 0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 95 percent confidence interval:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  0.834 0.956&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; sample estimates:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   cor &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 0.914&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This test output contains multiple values we may be interested in. Some are vectors of length 1, such as the p-value and the estimate, and some are longer, such as the confidence interval. We can get this into a nicely organized tibble using the &lt;code&gt;tidy()&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;tidy&lt;/span&gt;(ct)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 × 8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   estimate statistic  p.value parameter conf.low conf.high method    alternative&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;      &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;     &amp;lt;int&amp;gt;    &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;      &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1    0.914      12.9 1.93e-14        33    0.834     0.956 Pearson&amp;#39;… two.sided&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Often, we want to perform multiple tests or fit multiple models, each on a different part of the data. In this case, we recommend a &lt;code&gt;nest-map-unnest&lt;/code&gt; workflow. For example, suppose we want to perform correlation tests for each different tree. We start by &lt;code&gt;nest&lt;/code&gt;ing our data based on the group of interest:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nested &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Orange &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;nest&lt;/span&gt;(data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(age, circumference))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then we perform a correlation test for each nested tibble using &lt;code&gt;purrr::map()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nested &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(test &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;(data, &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;cor.test&lt;/span&gt;(.x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;age, .x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;circumference)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 5 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   Tree  data             test   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;ord&amp;gt; &amp;lt;list&amp;gt;           &amp;lt;list&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 1     &amp;lt;tibble [7 × 2]&amp;gt; &amp;lt;htest&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 2     &amp;lt;tibble [7 × 2]&amp;gt; &amp;lt;htest&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 3     &amp;lt;tibble [7 × 2]&amp;gt; &amp;lt;htest&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4 4     &amp;lt;tibble [7 × 2]&amp;gt; &amp;lt;htest&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5 5     &amp;lt;tibble [7 × 2]&amp;gt; &amp;lt;htest&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This results in a list-column of S3 objects. We want to tidy each of the objects, which we can also do with &lt;code&gt;map()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nested &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    test &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;(data, &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;cor.test&lt;/span&gt;(.x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;age, .x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;circumference)), &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# S3 list-col&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tidied &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;(test, tidy)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 5 × 4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   Tree  data             test    tidied          &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;ord&amp;gt; &amp;lt;list&amp;gt;           &amp;lt;list&amp;gt;  &amp;lt;list&amp;gt;          &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 1     &amp;lt;tibble [7 × 2]&amp;gt; &amp;lt;htest&amp;gt; &amp;lt;tibble [1 × 8]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 2     &amp;lt;tibble [7 × 2]&amp;gt; &amp;lt;htest&amp;gt; &amp;lt;tibble [1 × 8]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 3     &amp;lt;tibble [7 × 2]&amp;gt; &amp;lt;htest&amp;gt; &amp;lt;tibble [1 × 8]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4 4     &amp;lt;tibble [7 × 2]&amp;gt; &amp;lt;htest&amp;gt; &amp;lt;tibble [1 × 8]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5 5     &amp;lt;tibble [7 × 2]&amp;gt; &amp;lt;htest&amp;gt; &amp;lt;tibble [1 × 8]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, we want to unnest the tidied data frames so we can see the results in a flat tibble. All together, this looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Orange &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;nest&lt;/span&gt;(data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(age, circumference)) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    test &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;(data, &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;cor.test&lt;/span&gt;(.x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;age, .x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;circumference)), &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# S3 list-col&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tidied &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;(test, tidy)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unnest&lt;/span&gt;(cols &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; tidied) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;data, &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;test)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 5 × 9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   Tree  estimate statistic   p.value parameter conf.low conf.high method        &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;ord&amp;gt;    &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;int&amp;gt;    &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;         &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 1        0.985      13.0 0.0000485         5    0.901     0.998 Pearson&amp;#39;s pro…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 2        0.987      13.9 0.0000343         5    0.914     0.998 Pearson&amp;#39;s pro…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 3        0.988      14.4 0.0000290         5    0.919     0.998 Pearson&amp;#39;s pro…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4 4        0.984      12.5 0.0000573         5    0.895     0.998 Pearson&amp;#39;s pro…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5 5        0.988      14.1 0.0000318         5    0.916     0.998 Pearson&amp;#39;s pro…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 1 more variable: alternative &amp;lt;chr&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;regression-models&#34;&gt;Regression models&lt;/h2&gt;
&lt;p&gt;This type of workflow becomes even more useful when applied to regressions. Untidy output for a regression looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lm_fit &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;lm&lt;/span&gt;(age &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; circumference, data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; Orange)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;summary&lt;/span&gt;(lm_fit)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Call:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; lm(formula = age ~ circumference, data = Orange)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Residuals:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    Min     1Q Median     3Q    Max &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; -317.9 -140.9  -17.2   96.5  471.2 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Coefficients:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;               Estimate Std. Error t value Pr(&amp;gt;|t|)    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; (Intercept)     16.604     78.141    0.21     0.83    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; circumference    7.816      0.606   12.90  1.9e-14 ***&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ---&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Residual standard error: 203 on 33 degrees of freedom&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Multiple R-squared:  0.835,	Adjusted R-squared:  0.83 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; F-statistic:  166 on 1 and 33 DF,  p-value: 1.93e-14&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When we tidy these results, we get multiple rows of output for each model:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;tidy&lt;/span&gt;(lm_fit)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 2 × 5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   term          estimate std.error statistic  p.value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;            &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 (Intercept)      16.6     78.1       0.212 8.33e- 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 circumference     7.82     0.606    12.9   1.93e-14&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can handle multiple regressions at once using exactly the same workflow as before:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Orange &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;nest&lt;/span&gt;(data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;Tree)) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fit &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;(data, &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;lm&lt;/span&gt;(age &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; circumference, data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; .x)),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tidied &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;(fit, tidy)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unnest&lt;/span&gt;(tidied) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;data, &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;fit)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 10 × 6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    Tree  term          estimate std.error statistic   p.value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;ord&amp;gt; &amp;lt;chr&amp;gt;            &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 1     (Intercept)    -265.      98.6      -2.68  0.0436   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 1     circumference    11.9      0.919    13.0   0.0000485&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 2     (Intercept)    -132.      83.1      -1.59  0.172    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 2     circumference     7.80     0.560    13.9   0.0000343&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 3     (Intercept)    -210.      85.3      -2.46  0.0574   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 3     circumference    12.0      0.835    14.4   0.0000290&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 4     (Intercept)     -76.5     88.3      -0.867 0.426    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 4     circumference     7.17     0.572    12.5   0.0000573&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 5     (Intercept)     -54.5     76.9      -0.709 0.510    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 5     circumference     8.79     0.621    14.1   0.0000318&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can just as easily use multiple predictors in the regressions, as shown here on the &lt;code&gt;mtcars&lt;/code&gt; dataset. We nest the data into automatic vs. manual cars (the &lt;code&gt;am&lt;/code&gt; column), then perform the regression within each nested tibble.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;data&lt;/span&gt;(mtcars)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mtcars &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;as_tibble&lt;/span&gt;(mtcars)  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# to play nicely with list-cols&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mtcars
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 32 × 11&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 22 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mtcars &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;nest&lt;/span&gt;(data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;am)) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fit &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;(data, &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;lm&lt;/span&gt;(wt &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; mpg &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; qsec &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; gear, data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; .x)),  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# S3 list-col&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tidied &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;(fit, tidy)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unnest&lt;/span&gt;(tidied) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;data, &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;fit)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 8 × 6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;      am term        estimate std.error statistic  p.value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     1 (Intercept)   4.28      3.46      1.24   0.247   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2     1 mpg          -0.101     0.0294   -3.43   0.00750 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3     1 qsec          0.0398    0.151     0.264  0.798   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4     1 gear         -0.0229    0.349    -0.0656 0.949   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5     0 (Intercept)   4.92      1.40      3.52   0.00309 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 6     0 mpg          -0.192     0.0443   -4.33   0.000591&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 7     0 qsec          0.0919    0.0983    0.935  0.365   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 8     0 gear          0.147     0.368     0.398  0.696&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What if you want not just the &lt;code&gt;tidy()&lt;/code&gt; output, but the &lt;code&gt;augment()&lt;/code&gt; and &lt;code&gt;glance()&lt;/code&gt; outputs as well, while still performing each regression only once? Since we&amp;rsquo;re using list-columns, we can just fit the model once and use multiple list-columns to store the tidied, glanced and augmented outputs.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;regressions &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  mtcars &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;nest&lt;/span&gt;(data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;am)) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fit &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;(data, &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;lm&lt;/span&gt;(wt &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; mpg &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; qsec &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; gear, data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; .x)),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tidied &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;(fit, tidy),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    glanced &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;(fit, glance),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    augmented &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;(fit, augment)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;regressions &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(tidied) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unnest&lt;/span&gt;(tidied)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 8 × 5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   term        estimate std.error statistic  p.value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 (Intercept)   4.28      3.46      1.24   0.247   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 mpg          -0.101     0.0294   -3.43   0.00750 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 qsec          0.0398    0.151     0.264  0.798   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4 gear         -0.0229    0.349    -0.0656 0.949   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5 (Intercept)   4.92      1.40      3.52   0.00309 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 6 mpg          -0.192     0.0443   -4.33   0.000591&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 7 qsec          0.0919    0.0983    0.935  0.365   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 8 gear          0.147     0.368     0.398  0.696&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;regressions &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(glanced) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unnest&lt;/span&gt;(glanced)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 2 × 12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   r.squared adj.r.squared sigma statistic  p.value    df    logLik   AIC   BIC&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     0.833         0.778 0.291     15.0  0.000759     3  -0.00580  10.0  12.8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2     0.625         0.550 0.522      8.32 0.00170      3 -12.4      34.7  39.4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 3 more variables: deviance &amp;lt;dbl&amp;gt;, df.residual &amp;lt;int&amp;gt;, nobs &amp;lt;int&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;regressions &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(augmented) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unnest&lt;/span&gt;(augmented)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 32 × 10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       wt   mpg  qsec  gear .fitted  .resid  .hat .sigma  .cooksd .std.resid&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1  2.62  21    16.5     4    2.73 -0.107  0.517  0.304 0.0744      -0.527 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2  2.88  21    17.0     4    2.75  0.126  0.273  0.304 0.0243       0.509 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3  2.32  22.8  18.6     4    2.63 -0.310  0.312  0.279 0.188       -1.29  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4  2.2   32.4  19.5     4    1.70  0.505  0.223  0.233 0.278        1.97  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5  1.62  30.4  18.5     4    1.86 -0.244  0.269  0.292 0.0889      -0.982 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6  1.84  33.9  19.9     4    1.56  0.274  0.286  0.286 0.125        1.12  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7  1.94  27.3  18.9     4    2.19 -0.253  0.151  0.293 0.0394      -0.942 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8  2.14  26    16.7     5    2.21 -0.0683 0.277  0.307 0.00732     -0.276 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9  1.51  30.4  16.9     5    1.77 -0.259  0.430  0.284 0.263       -1.18  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10  3.17  15.8  14.5     5    3.15  0.0193 0.292  0.308 0.000644     0.0789&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 22 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By combining the estimates and p-values across all groups into the same tidy data frame (instead of a list of output model objects), a new class of analyses and visualizations becomes straightforward. This includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sorting by p-value or estimate to find the most significant terms across all tests,&lt;/li&gt;
&lt;li&gt;p-value histograms, and&lt;/li&gt;
&lt;li&gt;volcano plots comparing p-values to effect size estimates.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In each of these cases, we can easily filter, facet, or distinguish based on the &lt;code&gt;term&lt;/code&gt; column. In short, this makes the tools of tidy data analysis available for the &lt;em&gt;results&lt;/em&gt; of data analysis and models, not just the inputs.&lt;/p&gt;
&lt;h2 id=&#34;session-information&#34;&gt;Session information&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#&amp;gt; ─ Session info ─────────────────────────────────────────────────────
#&amp;gt;  setting  value
#&amp;gt;  version  R version 4.1.2 (2021-11-01)
#&amp;gt;  os       macOS Monterey 12.3
#&amp;gt;  system   aarch64, darwin20
#&amp;gt;  ui       X11
#&amp;gt;  language (EN)
#&amp;gt;  collate  en_GB.UTF-8
#&amp;gt;  ctype    en_GB.UTF-8
#&amp;gt;  tz       Europe/London
#&amp;gt;  date     2022-04-11
#&amp;gt;  pandoc   2.14.0.3 @ /Applications/RStudio.app/Contents/MacOS/pandoc/ (via rmarkdown)
#&amp;gt; 
#&amp;gt; ─ Packages ─────────────────────────────────────────────────────────
#&amp;gt;  package    * version date (UTC) lib source
#&amp;gt;  broom      * 0.7.12  2022-01-28 [1] CRAN (R 4.1.1)
#&amp;gt;  dials      * 0.1.1   2022-04-06 [1] CRAN (R 4.1.2)
#&amp;gt;  dplyr      * 1.0.8   2022-02-08 [1] CRAN (R 4.1.2)
#&amp;gt;  ggplot2    * 3.3.5   2021-06-25 [1] CRAN (R 4.1.1)
#&amp;gt;  infer      * 1.0.0   2021-08-13 [1] CRAN (R 4.1.1)
#&amp;gt;  parsnip    * 0.2.1   2022-03-17 [1] CRAN (R 4.1.1)
#&amp;gt;  purrr      * 0.3.4   2020-04-17 [1] CRAN (R 4.1.0)
#&amp;gt;  recipes    * 0.2.0   2022-02-18 [1] CRAN (R 4.1.1)
#&amp;gt;  rlang        1.0.2   2022-03-04 [1] CRAN (R 4.1.1)
#&amp;gt;  rsample    * 0.1.1   2021-11-08 [1] CRAN (R 4.1.2)
#&amp;gt;  tibble     * 3.1.6   2021-11-07 [1] CRAN (R 4.1.1)
#&amp;gt;  tidymodels * 0.2.0   2022-03-19 [1] CRAN (R 4.1.1)
#&amp;gt;  tune       * 0.2.0   2022-03-19 [1] CRAN (R 4.1.2)
#&amp;gt;  workflows  * 0.2.6   2022-03-18 [1] CRAN (R 4.1.2)
#&amp;gt;  yardstick  * 0.0.9   2021-11-22 [1] CRAN (R 4.1.1)
#&amp;gt; 
#&amp;gt;  [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library
#&amp;gt; 
#&amp;gt; ────────────────────────────────────────────────────────────────────
&lt;/code&gt;&lt;/pre&gt;</description>
  </item>
  
<item>
  <title>Create your own recipe step function</title>
  <link>https://www.tidymodels.org/learn/develop/recipes/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/learn/develop/recipes/</guid>
  <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;To use the code in this article, you will need to install the following packages: modeldata and tidymodels.&lt;/p&gt;
&lt;p&gt;There are many existing recipe steps in packages like recipes, themis, textrecipes, and others. A full list of steps in CRAN packages &lt;a href=&#34;https://www.tidymodels.org/find/recipes/&#34;&gt;can be found here&lt;/a&gt;. However, you might need to define your own preprocessing operations; this article describes how to do that. If you are looking for good examples of existing steps, we suggest looking at the code for &lt;a href=&#34;https://github.com/tidymodels/recipes/blob/master/R/center.R&#34;&gt;centering&lt;/a&gt; or &lt;a href=&#34;https://github.com/tidymodels/recipes/blob/master/R/pca.R&#34;&gt;PCA&lt;/a&gt; to start.&lt;/p&gt;
&lt;p&gt;For check operations (e.g. &lt;code&gt;check_class()&lt;/code&gt;), the process is very similar. Notes on this are available at the end of this article.&lt;/p&gt;
&lt;p&gt;The general process to follow is to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Define a step constructor function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create the minimal S3 methods for &lt;code&gt;prep()&lt;/code&gt;, &lt;code&gt;bake()&lt;/code&gt;, and &lt;code&gt;print()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optionally add some extra methods to work with other tidymodels packages, such as &lt;code&gt;tunable()&lt;/code&gt; and &lt;code&gt;tidy()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As an example, we will create a step for converting data into percentiles.&lt;/p&gt;
&lt;h2 id=&#34;a-new-step-definition&#34;&gt;A new step definition&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s create a step that replaces the value of a variable with its percentile from the training set. The example data we&amp;rsquo;ll use is from the modeldata package:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(modeldata)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;data&lt;/span&gt;(biomass)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;str&lt;/span&gt;(biomass)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &amp;#39;data.frame&amp;#39;:	536 obs. of  8 variables:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  $ sample  : chr  &amp;#34;Akhrot Shell&amp;#34; &amp;#34;Alabama Oak Wood Waste&amp;#34; &amp;#34;Alder&amp;#34; &amp;#34;Alfalfa&amp;#34; ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  $ dataset : chr  &amp;#34;Training&amp;#34; &amp;#34;Training&amp;#34; &amp;#34;Training&amp;#34; &amp;#34;Training&amp;#34; ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  $ carbon  : num  49.8 49.5 47.8 45.1 46.8 ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  $ hydrogen: num  5.64 5.7 5.8 4.97 5.4 5.75 5.99 5.7 5.5 5.9 ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  $ oxygen  : num  42.9 41.3 46.2 35.6 40.7 ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  $ nitrogen: num  0.41 0.2 0.11 3.3 1 2.04 2.68 1.7 0.8 1.2 ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  $ sulfur  : num  0 0 0.02 0.16 0.02 0.1 0.2 0.2 0 0.1 ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  $ HHV     : num  20 19.2 18.3 18.2 18.4 ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;biomass_tr &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; biomass[biomass&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;dataset &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Training&amp;#34;&lt;/span&gt;,]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;biomass_te &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; biomass[biomass&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;dataset &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Testing&amp;#34;&lt;/span&gt;,]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To illustrate the transformation with the &lt;code&gt;carbon&lt;/code&gt; variable, note the training set distribution of this variable with a vertical line below for the first value of the test set.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(ggplot2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;theme_set&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;theme_bw&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(biomass_tr, &lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; carbon)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_histogram&lt;/span&gt;(binwidth &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;, col &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;, fill &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;, alpha &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;.5&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_vline&lt;/span&gt;(xintercept &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; biomass_te&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;carbon[1], lty &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/carbon_dist-1.svg&#34; width=&#34;100%&#34; /&gt;
&lt;p&gt;Based on the training set, 42.1% of the data are less than a value of 46.35. There are some applications where it might be advantageous to represent the predictor values as percentiles rather than their original values.&lt;/p&gt;
&lt;p&gt;Our new step will do this computation for any numeric variables of interest. We will call this new recipe step &lt;code&gt;step_percentile()&lt;/code&gt;. The code below is designed for illustration and not speed or best practices. We&amp;rsquo;ve left out a lot of error trapping that we would want in a real implementation.&lt;/p&gt;
&lt;h2 id=&#34;create-the-function&#34;&gt;Create the function&lt;/h2&gt;
&lt;p&gt;To start, there is a &lt;em&gt;user-facing&lt;/em&gt; function. Let&amp;rsquo;s call that &lt;code&gt;step_percentile()&lt;/code&gt;. This is just a simple wrapper around a &lt;em&gt;constructor function&lt;/em&gt;, which defines the rules for any step object that defines a percentile transformation. We&amp;rsquo;ll call this constructor &lt;code&gt;step_percentile_new()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;step_percentile()&lt;/code&gt; takes the same arguments as your function and simply adds it to a new recipe. The &lt;code&gt;...&lt;/code&gt; signifies the variable selectors that can be used.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;step_percentile &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  recipe, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  role &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NA&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  trained &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ref_dist &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  options &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(probs &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt;, names &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  skip &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  id &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;rand_id&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;percentile&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;## The variable selectors are not immediately evaluated by using&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;##  the `quos()` function in `rlang`. `ellipse_check()` captures &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;##  the values and also checks to make sure that they are not empty.  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  terms &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;ellipse_check&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;add_step&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    recipe, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;step_percentile_new&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      terms &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; terms, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      trained &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; trained,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      role &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; role, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ref_dist &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; ref_dist,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      options &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; options,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      skip &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; skip,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      id &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; id
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should always keep the first four arguments (&lt;code&gt;recipe&lt;/code&gt; though &lt;code&gt;trained&lt;/code&gt;) the same as listed above. Some notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;role&lt;/code&gt; argument is used when you either 1) create new variables and want their role to be pre-set or 2) replace the existing variables with new values. The latter is what we will be doing and using &lt;code&gt;role = NA&lt;/code&gt; will leave the existing role intact.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trained&lt;/code&gt; is set by the package when the estimation step has been run. You should default your function definition&amp;rsquo;s argument to &lt;code&gt;FALSE&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;skip&lt;/code&gt; is a logical. Whenever a recipe is prepped, each step is trained and then baked. However, there are some steps that should not be applied when a call to &lt;code&gt;bake()&lt;/code&gt; is used. For example, if a step is applied to the variables with roles of &amp;ldquo;outcomes&amp;rdquo;, these data would not be available for new samples.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt; is a character string that can be used to identify steps in package code. &lt;code&gt;rand_id()&lt;/code&gt; will create an ID that has the prefix and a random character sequence.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can estimate the percentiles of new data points based on the percentiles from the training set with &lt;code&gt;approx()&lt;/code&gt;. Our &lt;code&gt;step_percentile&lt;/code&gt; contains a &lt;code&gt;ref_dist&lt;/code&gt; object to store these percentiles (pre-computed from the training set in &lt;code&gt;prep()&lt;/code&gt;) for later use in &lt;code&gt;bake()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We will use &lt;code&gt;stats::quantile()&lt;/code&gt; to compute the grid. However, we might also want to have control over the granularity of this grid, so the &lt;code&gt;options&lt;/code&gt; argument will be used to define how that calculation is done. We could use the ellipses (aka &lt;code&gt;...&lt;/code&gt;) so that any options passed to &lt;code&gt;step_percentile()&lt;/code&gt; that are not one of its arguments will then be passed to &lt;code&gt;stats::quantile()&lt;/code&gt;. However, we recommend making a separate list object with the options and use these inside the function because &lt;code&gt;...&lt;/code&gt; is already used to define the variable selection.&lt;/p&gt;
&lt;p&gt;It is also important to consider if there are any &lt;em&gt;main arguments&lt;/em&gt; to the step. For example, for spline-related steps such as &lt;code&gt;step_ns()&lt;/code&gt;, users typically want to adjust the argument for the degrees of freedom in the spline (e.g. &lt;code&gt;splines::ns(x, df)&lt;/code&gt;). Rather than letting users add &lt;code&gt;df&lt;/code&gt; to the &lt;code&gt;options&lt;/code&gt; argument:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Allow the important arguments to be main arguments to the step function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Follow the tidymodels &lt;a href=&#34;https://tidymodels.github.io/model-implementation-principles/standardized-argument-names.html&#34;&gt;conventions for naming arguments&lt;/a&gt;. Whenever possible, avoid jargon and keep common argument names.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are benefits to following these principles (as shown below).&lt;/p&gt;
&lt;h2 id=&#34;initialize-a-new-object&#34;&gt;Initialize a new object&lt;/h2&gt;
&lt;p&gt;Now, the constructor function can be created.&lt;/p&gt;
&lt;p&gt;The function cascade is:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;step_percentile() calls recipes::add_step()
└──&amp;gt; recipes::add_step() calls step_percentile_new()
    └──&amp;gt; step_percentile_new() calls recipes::step()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;step()&lt;/code&gt; is a general constructor for recipes that mainly makes sure that the resulting step object is a list with an appropriate S3 class structure. Using &lt;code&gt;subclass = &amp;quot;percentile&amp;quot;&lt;/code&gt; will set the class of new objects to &lt;code&gt;&amp;quot;step_percentile&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;step_percentile_new &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(terms, role, trained, ref_dist, options, skip, id) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;step&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      subclass &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;percentile&amp;#34;&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      terms &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; terms,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      role &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; role,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      trained &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; trained,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ref_dist &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; ref_dist,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      options &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; options,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      skip &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; skip,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      id &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; id
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This constructor function should have no default argument values. Defaults should be set in the user-facing step object.&lt;/p&gt;
&lt;h2 id=&#34;create-the-prep-method&#34;&gt;Create the &lt;code&gt;prep&lt;/code&gt; method&lt;/h2&gt;
&lt;p&gt;You will need to create a new &lt;code&gt;prep()&lt;/code&gt; method for your step&amp;rsquo;s class. To do this, three arguments that the method should have are:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(x, training, info &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;where&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; will be the &lt;code&gt;step_percentile&lt;/code&gt; object,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;training&lt;/code&gt; will be a &lt;em&gt;tibble&lt;/em&gt; that has the training set data, and&lt;/li&gt;
&lt;li&gt;&lt;code&gt;info&lt;/code&gt; will also be a tibble that has information on the current set of data available. This information is updated as each step is evaluated by its specific &lt;code&gt;prep()&lt;/code&gt; method so it may not have the variables from the original data. The columns in this tibble are &lt;code&gt;variable&lt;/code&gt; (the variable name), &lt;code&gt;type&lt;/code&gt; (currently either &amp;ldquo;numeric&amp;rdquo; or &amp;ldquo;nominal&amp;rdquo;), &lt;code&gt;role&lt;/code&gt; (defining the variable&amp;rsquo;s role), and &lt;code&gt;source&lt;/code&gt; (either &amp;ldquo;original&amp;rdquo; or &amp;ldquo;derived&amp;rdquo; depending on where it originated).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can define other arguments as well.&lt;/p&gt;
&lt;p&gt;The first thing that you might want to do in the &lt;code&gt;prep()&lt;/code&gt; function is to translate the specification listed in the &lt;code&gt;terms&lt;/code&gt; argument to column names in the current data. There is a function called &lt;code&gt;recipes_eval_select()&lt;/code&gt; that can be used to obtain this.&lt;/p&gt;
&lt;div class=&#34;warning&#34;&gt;The &lt;code&gt;recipes_eval_select()&lt;/code&gt; function is not one you interact with as a typical recipes user, but it is helpful if you develop your own custom recipe steps.&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;prep.step_percentile &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(x, training, info &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  col_names &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;recipes_eval_select&lt;/span&gt;(x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;terms, training, info) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# TODO finish the rest of the function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After this function call, it is a good idea to check that the selected columns have the appropriate type (e.g. numeric for this example). See &lt;code&gt;recipes::check_type()&lt;/code&gt; to do this for basic types.&lt;/p&gt;
&lt;p&gt;Once we have this, we can save the approximation grid. For the grid, we will use a helper function that enables us to run &lt;code&gt;rlang::exec()&lt;/code&gt; to splice in any extra arguments contained in the &lt;code&gt;options&lt;/code&gt; list to the call to &lt;code&gt;quantile()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;get_train_pctl &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(x, args &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  res &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; rlang&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;exec&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;quantile&amp;#34;&lt;/span&gt;, x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; x, &lt;span style=&#34;color:#666&#34;&gt;!!!&lt;/span&gt;args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Remove duplicate percentile values&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  res[&lt;span style=&#34;color:#666&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;duplicated&lt;/span&gt;(res)]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# For example:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;get_train_pctl&lt;/span&gt;(biomass_tr&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;carbon, &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(probs &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   0% 100% &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 14.6 97.2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;get_train_pctl&lt;/span&gt;(biomass_tr&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;carbon)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   0%  25%  50%  75% 100% &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 14.6 44.7 47.1 49.7 97.2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, the &lt;code&gt;prep()&lt;/code&gt; method can be created:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;prep.step_percentile &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(x, training, info &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  col_names &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;recipes_eval_select&lt;/span&gt;(x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;terms, training, info)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;## You can add error trapping for non-numeric data here and so on. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;## We&amp;#39;ll use the names later so make sure they are available&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if &lt;/span&gt;(x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;options&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;names &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    rlang&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;abort&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;`names` should be set to TRUE&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;any&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;names&lt;/span&gt;(x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;options) &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;probs&amp;#34;&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;options&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;probs &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; (&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } else {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;options&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;probs &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;sort&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;unique&lt;/span&gt;(x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;options&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;probs))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Compute percentile grid&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ref_dist &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; purrr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;(training[, col_names],  get_train_pctl, args &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;options)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;## Use the constructor function to return the updated object. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;## Note that `trained` is now set to TRUE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_percentile_new&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    terms &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;terms, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    trained &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    role &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;role, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ref_dist &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; ref_dist,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    options &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;options,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    skip &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;skip,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;id
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We suggest favoring &lt;code&gt;rlang::abort()&lt;/code&gt; and &lt;code&gt;rlang::warn()&lt;/code&gt; over &lt;code&gt;stop()&lt;/code&gt; and &lt;code&gt;warning()&lt;/code&gt;. The former can be used for better traceback results.&lt;/p&gt;
&lt;h2 id=&#34;create-the-bake-method&#34;&gt;Create the &lt;code&gt;bake&lt;/code&gt; method&lt;/h2&gt;
&lt;p&gt;Remember that the &lt;code&gt;prep()&lt;/code&gt; function does not &lt;em&gt;apply&lt;/em&gt; the step to the data; it only estimates any required values such as &lt;code&gt;ref_dist&lt;/code&gt;. We will need to create a new method for our &lt;code&gt;step_percentile()&lt;/code&gt; class. The minimum arguments for this are&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(object, new_data, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;where &lt;code&gt;object&lt;/code&gt; is the updated step function that has been through the corresponding &lt;code&gt;prep()&lt;/code&gt; code and &lt;code&gt;new_data&lt;/code&gt; is a tibble of data to be processed.&lt;/p&gt;
&lt;p&gt;Here is the code to convert the new data to percentiles. The input data (&lt;code&gt;x&lt;/code&gt; below) comes in as a numeric vector and the output is a vector of approximate percentiles:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pctl_by_approx &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(x, ref) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# In case duplicates were removed, get the percentiles from&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# the names of the reference object&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  grid &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;as.numeric&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;gsub&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#00f&#34;&gt;names&lt;/span&gt;(ref))) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;approx&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; ref, y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; grid, xout &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; x)&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;y&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These computations are done column-wise using &lt;code&gt;purrr::map2_dfc()&lt;/code&gt; to modify the new data in-place:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bake.step_percentile &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(object, new_data, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;## For illustration (and not speed), we will loop through the affected variables&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;## and do the computations&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  vars &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;names&lt;/span&gt;(object&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;ref_dist)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  new_data[, vars] &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    purrr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;map2_dfc&lt;/span&gt;(new_data[, vars], object&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;ref_dist, pctl_by_approx)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;## Always convert to tibbles on the way out&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tibble&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;as_tibble&lt;/span&gt;(new_data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;note&#34;&gt;You need to import &lt;code&gt;recipes::prep()&lt;/code&gt; and &lt;code&gt;recipes::bake()&lt;/code&gt; to create your own step function in a package.&lt;/div&gt;
&lt;h2 id=&#34;run-the-example&#34;&gt;Run the example&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s use the example data to make sure that it works:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rec_obj &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;recipe&lt;/span&gt;(HHV &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; ., data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; biomass_tr) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_percentile&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;ends_with&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;gen&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;prep&lt;/span&gt;(training &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; biomass_tr)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;biomass_te &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;ends_with&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;gen&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;slice&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   hydrogen oxygen nitrogen&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     5.67   47.2     0.30&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2     5.50   48.1     2.85&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;bake&lt;/span&gt;(rec_obj, biomass_te &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;slice&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;), &lt;span style=&#34;color:#00f&#34;&gt;ends_with&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;gen&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 2 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   hydrogen oxygen nitrogen&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;      &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     0.45  0.903    0.21 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2     0.38  0.922    0.928&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Checking to get approximate result: &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;mean&lt;/span&gt;(biomass_tr&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;hydrogen &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; biomass_te&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;hydrogen[1])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 0.452&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;mean&lt;/span&gt;(biomass_tr&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;oxygen   &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; biomass_te&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;oxygen[1])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 0.901&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The plot below shows how the original hydrogen percentiles line up with the estimated values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hydrogen_values &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;bake&lt;/span&gt;(rec_obj, biomass_te, hydrogen) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;bind_cols&lt;/span&gt;(biomass_te &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(original &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; hydrogen))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(biomass_tr, &lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; hydrogen)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Plot the empirical distribution function of the &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# hydrogen training set values as a black line&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;stat_ecdf&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Overlay the estimated percentiles for the new data: &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_point&lt;/span&gt;(data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; hydrogen_values, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; original, y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; hydrogen), 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             col &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;, alpha &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;.5&lt;/span&gt;, cex &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;labs&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;New Hydrogen Values&amp;#34;&lt;/span&gt;, y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Percentile Based on Training Set&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/cdf_plot-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;These line up very nicely!&lt;/p&gt;
&lt;h2 id=&#34;custom-check-operations&#34;&gt;Custom check operations&lt;/h2&gt;
&lt;p&gt;The process here is exactly the same as steps; the internal functions have a similar naming convention:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;add_check()&lt;/code&gt; instead of &lt;code&gt;add_step()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check()&lt;/code&gt; instead of &lt;code&gt;step()&lt;/code&gt;, and so on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is strongly recommended that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The operations start with &lt;code&gt;check_&lt;/code&gt; (i.e. &lt;code&gt;check_range()&lt;/code&gt; and &lt;code&gt;check_range_new()&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;The check uses &lt;code&gt;rlang::abort(paste0(...))&lt;/code&gt; when the conditions are not met&lt;/li&gt;
&lt;li&gt;The original data are returned (unaltered) by the check when the conditions are satisfied.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;other-step-methods&#34;&gt;Other step methods&lt;/h2&gt;
&lt;p&gt;There are a few other S3 methods that can be created for your step function. They are not required unless you plan on using your step in the broader tidymodels package set.&lt;/p&gt;
&lt;h3 id=&#34;a-print-method&#34;&gt;A print method&lt;/h3&gt;
&lt;p&gt;If you don&amp;rsquo;t add a print method for &lt;code&gt;step_percentile&lt;/code&gt;, it will still print but it will be printed as a list of (potentially large) objects and look a bit ugly. The recipes package contains a helper function called &lt;code&gt;printer()&lt;/code&gt; that should be useful in most cases. We are using it here for the custom print method for &lt;code&gt;step_percentile&lt;/code&gt;. It requires the original terms specification and the column names this specification is evaluated to by &lt;code&gt;prep()&lt;/code&gt;. For the former, our step object is structured so that the list object &lt;code&gt;ref_dist&lt;/code&gt; has the names of the selected variables:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print.step_percentile &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(x, width &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;max&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#00f&#34;&gt;options&lt;/span&gt;()&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;width &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;35&lt;/span&gt;), &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;cat&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Percentile transformation on &amp;#34;&lt;/span&gt;, sep &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;printer&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Names before prep (could be selectors)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      untr_obj &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;terms,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Names after prep:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      tr_obj &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;names&lt;/span&gt;(x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;ref_dist),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Has it been prepped? &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      trained &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;trained,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# An estimate of how many characters to print on a line: &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      width &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; width
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;invisible&lt;/span&gt;(x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Results before `prep()`:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;recipe&lt;/span&gt;(HHV &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; ., data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; biomass_tr) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_percentile&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;ends_with&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;gen&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Recipe&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Inputs:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       role #variables&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    outcome          1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  predictor          7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Operations:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Percentile transformation on &amp;lt;none&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Results after `prep()`: &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rec_obj
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Recipe&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Inputs:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       role #variables&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    outcome          1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  predictor          7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Training data contained 456 data points and no missing data.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Operations:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Percentile transformation on ~ends_with(&amp;#34;gen&amp;#34;) [trained]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;methods-for-declaring-required-packages&#34;&gt;Methods for declaring required packages&lt;/h3&gt;
&lt;p&gt;Some recipe steps use functions from other packages. When this is the case, the &lt;code&gt;step_*()&lt;/code&gt; function should check to see if the package is installed. The function &lt;code&gt;recipes::recipes_pkg_check()&lt;/code&gt; will do this. For example:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; recipes::recipes_pkg_check(&amp;#34;some_package&amp;#34;)
1 package is needed for this step and is not installed. (some_package). Start 
a clean R session then run: install.packages(&amp;#34;some_package&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There is an S3 method that can be used to declare what packages should be loaded when using the step. For a hypothetical step that relies on the &lt;code&gt;hypothetical&lt;/code&gt; package, this might look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;required_pkgs.step_hypothetical &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(x, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;hypothetical&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;myrecipespkg&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, &lt;code&gt;myrecipespkg&lt;/code&gt; is the package where the step resides (if it is in a package).&lt;/p&gt;
&lt;p&gt;The reason to declare what packages should be loaded is parallel processing. When parallel worker processes are created, there is heterogeneity across technologies regarding which packages are loaded. Multicore methods on macOS and Linux load all of the packages that were loaded in the main R process. However, parallel processing using psock clusters have no additional packages loaded. If the home package for a recipe step is not loaded in the worker processes, the &lt;code&gt;prep()&lt;/code&gt; methods cannot be found and an error occurs.&lt;/p&gt;
&lt;p&gt;If this S3 method is used for your step, you can rely on this for checking the installation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;recipes&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;recipes_pkg_check&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;required_pkgs.step_hypothetical&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you&amp;rsquo;d like an example of this in a package, please take a look at the &lt;a href=&#34;https://github.com/tidymodels/embed/&#34;&gt;embed&lt;/a&gt; or &lt;a href=&#34;https://github.com/tidymodels/themis/&#34;&gt;themis&lt;/a&gt; package.&lt;/p&gt;
&lt;h3 id=&#34;a-tidy-method&#34;&gt;A tidy method&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;broom::tidy()&lt;/code&gt; method is a means to return information about the step in a usable format. For our step, it would be helpful to know the reference values.&lt;/p&gt;
&lt;p&gt;When the recipe has been prepped, those data are in the list &lt;code&gt;ref_dist&lt;/code&gt;. A small function can be used to reformat that data into a tibble. It is customary to return the main values as &lt;code&gt;value&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;format_pctl &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(x) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tibble&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;tibble&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    value &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;unname&lt;/span&gt;(x),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    percentile &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;as.numeric&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;gsub&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#00f&#34;&gt;names&lt;/span&gt;(x))) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# For example: &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pctl_step_object &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; rec_obj&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;steps[[1]]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pctl_step_object
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Percentile transformation on hydrogen, oxygen, nitrogen [trained]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;format_pctl&lt;/span&gt;(pctl_step_object&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;ref_dist[[&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;hydrogen&amp;#34;&lt;/span&gt;]])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 87 × 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    value percentile&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 0.03           0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 0.934          1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 1.60           2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 2.07           3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 2.45           4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 2.74           5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 3.15           6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 3.49           7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 3.71           8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 3.99           9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 77 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The tidy method could return these values for each selected column. Before &lt;code&gt;prep()&lt;/code&gt;, missing values can be used as placeholders.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tidy.step_percentile &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(x, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;is_trained&lt;/span&gt;(x)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    res &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map_dfr&lt;/span&gt;(x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;ref_dist, format_pctl, .id &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;term&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  else {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    term_names &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;sel2char&lt;/span&gt;(x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;terms)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    res &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;tibble&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        terms &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; term_names,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        value &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; rlang&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;na_dbl,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        percentile &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; rlang&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;na_dbl
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Always return the step id: &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  res&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;id &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;id
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  res
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;tidy&lt;/span&gt;(rec_obj, number &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 274 × 4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    term     value percentile id              &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;           &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 hydrogen 0.03           0 percentile_aIu1M&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 hydrogen 0.934          1 percentile_aIu1M&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 hydrogen 1.60           2 percentile_aIu1M&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 hydrogen 2.07           3 percentile_aIu1M&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 hydrogen 2.45           4 percentile_aIu1M&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 hydrogen 2.74           5 percentile_aIu1M&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 hydrogen 3.15           6 percentile_aIu1M&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 hydrogen 3.49           7 percentile_aIu1M&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 hydrogen 3.71           8 percentile_aIu1M&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 hydrogen 3.99           9 percentile_aIu1M&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 264 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;methods-for-tuning-parameters&#34;&gt;Methods for tuning parameters&lt;/h3&gt;
&lt;p&gt;The tune package can be used to find reasonable values of step arguments by model tuning. There are some S3 methods that are useful to define for your step. The percentile example doesn&amp;rsquo;t really have any tunable parameters, so we will demonstrate using &lt;code&gt;step_poly()&lt;/code&gt;, which returns a polynomial expansion of selected columns. Its function definition has the arguments:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;args&lt;/span&gt;(step_poly)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; function (recipe, ..., role = &amp;#34;predictor&amp;#34;, trained = FALSE, objects = NULL, &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     degree = 2, options = list(), skip = FALSE, id = rand_id(&amp;#34;poly&amp;#34;)) &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; NULL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The argument &lt;code&gt;degree&lt;/code&gt; is tunable.&lt;/p&gt;
&lt;p&gt;To work with tune it is &lt;em&gt;helpful&lt;/em&gt; (but not required) to use an S3 method called &lt;code&gt;tunable()&lt;/code&gt; to define which arguments should be tuned and how values of those arguments should be generated.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tunable()&lt;/code&gt; takes the step object as its argument and returns a tibble with columns:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;name&lt;/code&gt;: The name of the argument.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;call_info&lt;/code&gt;: A list that describes how to call a function that returns a dials parameter object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;source&lt;/code&gt;: A character string that indicates where the tuning value comes from (i.e., a model, a recipe etc.). Here, it is just &lt;code&gt;&amp;quot;recipe&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;component&lt;/code&gt;: A character string with more information about the source. For recipes, this is just the name of the step (e.g. &lt;code&gt;&amp;quot;step_poly&amp;quot;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;component_id&lt;/code&gt;: A character string to indicate where a unique identifier is for the object. For recipes, this is just the &lt;code&gt;id&lt;/code&gt; value of the step object.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main piece of information that requires some detail is &lt;code&gt;call_info&lt;/code&gt;. This is a list column in the tibble. Each element of the list is a list that describes the package and function that can be used to create a dials parameter object.&lt;/p&gt;
&lt;p&gt;For example, for a nearest-neighbors &lt;code&gt;neighbors&lt;/code&gt; parameter, this value is just:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;info &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(pkg &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;dials&amp;#34;&lt;/span&gt;, fun &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;neighbors&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# FYI: how it is used under-the-hood: &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;new_param_call &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; rlang&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;call2&lt;/span&gt;(.fn &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; info&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;fun, .ns &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; info&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;pkg)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rlang&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;eval_tidy&lt;/span&gt;(new_param_call)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # Nearest Neighbors (quantitative)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Range: [1, 10]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For &lt;code&gt;step_poly()&lt;/code&gt;, a dials object is needed that returns an integer that is the number of new columns to create. It turns out that there are a few different types of tuning parameters related to degree:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;lsf.str&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;package:dials&amp;#34;&lt;/span&gt;, pattern &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;degree&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;degree &lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function &lt;/span&gt;(range &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;), trans &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;degree_int &lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function &lt;/span&gt;(range &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1L&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;3L&lt;/span&gt;), trans &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;prod_degree &lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function &lt;/span&gt;(range &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1L&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2L&lt;/span&gt;), trans &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;spline_degree &lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function &lt;/span&gt;(range &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;3L&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;10L&lt;/span&gt;), trans &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;)  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Looking at the &lt;code&gt;range&lt;/code&gt; values, some return doubles and others return integers. For our problem, &lt;code&gt;degree_int()&lt;/code&gt; would be a good choice.&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;step_poly()&lt;/code&gt; the &lt;code&gt;tunable()&lt;/code&gt; S3 method could be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tunable.step_poly &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function &lt;/span&gt;(x, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tibble&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;tibble&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;degree&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    call_info &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(pkg &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;dials&amp;#34;&lt;/span&gt;, fun &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;degree_int&amp;#34;&lt;/span&gt;)),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    source &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;recipe&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    component &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;step_poly&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    component_id &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;id
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;session-information&#34;&gt;Session information&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#&amp;gt; ─ Session info ─────────────────────────────────────────────────────
#&amp;gt;  setting  value
#&amp;gt;  version  R version 4.1.2 (2021-11-01)
#&amp;gt;  os       macOS Monterey 12.3
#&amp;gt;  system   aarch64, darwin20
#&amp;gt;  ui       X11
#&amp;gt;  language (EN)
#&amp;gt;  collate  en_GB.UTF-8
#&amp;gt;  ctype    en_GB.UTF-8
#&amp;gt;  tz       Europe/London
#&amp;gt;  date     2022-04-11
#&amp;gt;  pandoc   2.14.0.3 @ /Applications/RStudio.app/Contents/MacOS/pandoc/ (via rmarkdown)
#&amp;gt; 
#&amp;gt; ─ Packages ─────────────────────────────────────────────────────────
#&amp;gt;  package    * version date (UTC) lib source
#&amp;gt;  broom      * 0.7.12  2022-01-28 [1] CRAN (R 4.1.1)
#&amp;gt;  dials      * 0.1.1   2022-04-06 [1] CRAN (R 4.1.2)
#&amp;gt;  dplyr      * 1.0.8   2022-02-08 [1] CRAN (R 4.1.2)
#&amp;gt;  ggplot2    * 3.3.5   2021-06-25 [1] CRAN (R 4.1.1)
#&amp;gt;  infer      * 1.0.0   2021-08-13 [1] CRAN (R 4.1.1)
#&amp;gt;  modeldata  * 0.1.1   2021-07-14 [1] CRAN (R 4.1.2)
#&amp;gt;  parsnip    * 0.2.1   2022-03-17 [1] CRAN (R 4.1.1)
#&amp;gt;  purrr      * 0.3.4   2020-04-17 [1] CRAN (R 4.1.0)
#&amp;gt;  recipes    * 0.2.0   2022-02-18 [1] CRAN (R 4.1.1)
#&amp;gt;  rlang        1.0.2   2022-03-04 [1] CRAN (R 4.1.1)
#&amp;gt;  rsample    * 0.1.1   2021-11-08 [1] CRAN (R 4.1.2)
#&amp;gt;  tibble     * 3.1.6   2021-11-07 [1] CRAN (R 4.1.1)
#&amp;gt;  tidymodels * 0.2.0   2022-03-19 [1] CRAN (R 4.1.1)
#&amp;gt;  tune       * 0.2.0   2022-03-19 [1] CRAN (R 4.1.2)
#&amp;gt;  workflows  * 0.2.6   2022-03-18 [1] CRAN (R 4.1.2)
#&amp;gt;  yardstick  * 0.0.9   2021-11-22 [1] CRAN (R 4.1.1)
#&amp;gt; 
#&amp;gt;  [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library
#&amp;gt; 
#&amp;gt; ────────────────────────────────────────────────────────────────────
&lt;/code&gt;&lt;/pre&gt;</description>
  </item>
  
<item>
  <title>Model tuning via grid search</title>
  <link>https://www.tidymodels.org/learn/work/tune-svm/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/learn/work/tune-svm/</guid>
  <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;To use the code in this article, you will need to install the following packages: kernlab, mlbench, and tidymodels.&lt;/p&gt;
&lt;p&gt;This article demonstrates how to tune a model using grid search. Many models have &lt;strong&gt;hyperparameters&lt;/strong&gt; that can&amp;rsquo;t be learned directly from a single data set when training the model. Instead, we can train many models in a grid of possible hyperparameter values and see which ones turn out best.&lt;/p&gt;
&lt;h2 id=&#34;example-data&#34;&gt;Example data&lt;/h2&gt;
&lt;p&gt;To demonstrate model tuning, we&amp;rsquo;ll use the Ionosphere data in the mlbench package:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(tidymodels)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(mlbench)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;data&lt;/span&gt;(Ionosphere)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From &lt;code&gt;?Ionosphere&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This radar data was collected by a system in Goose Bay, Labrador. This system consists of a phased array of 16 high-frequency antennas with a total transmitted power on the order of 6.4 kilowatts. See the paper for more details. The targets were free electrons in the ionosphere. &amp;ldquo;good&amp;rdquo; radar returns are those showing evidence of some type of structure in the ionosphere. &amp;ldquo;bad&amp;rdquo; returns are those that do not; their signals pass through the ionosphere.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Received signals were processed using an autocorrelation function whose arguments are the time of a pulse and the pulse number. There were 17 pulse numbers for the Goose Bay system. Instances in this databse are described by 2 attributes per pulse number, corresponding to the complex values returned by the function resulting from the complex electromagnetic signal. See cited below for more details.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are 43 predictors and a factor outcome. Two of the predictors are factors (&lt;code&gt;V1&lt;/code&gt; and &lt;code&gt;V2&lt;/code&gt;) and the rest are numeric variables that have been scaled to a range of -1 to 1. Note that the two factor predictors have sparse distributions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;table&lt;/span&gt;(Ionosphere&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;V1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   0   1 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  38 313&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;table&lt;/span&gt;(Ionosphere&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;V2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   0 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 351&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There&amp;rsquo;s no point of putting &lt;code&gt;V2&lt;/code&gt; into any model since is is a zero-variance predictor. &lt;code&gt;V1&lt;/code&gt; is not but it &lt;em&gt;could&lt;/em&gt; be if the resampling process ends up sampling all of the same value. Is this an issue? It might be since the standard R formula infrastructure fails when there is only a single observed value:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;glm&lt;/span&gt;(Class &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; ., data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; Ionosphere, family &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; binomial)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Error in `contrasts&amp;lt;-`(`*tmp*`, value = contr.funs[1 + isOF[nn]]): contrasts can be applied only to factors with 2 or more levels&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Surprisingly, this doesn&amp;#39;t help: &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;glm&lt;/span&gt;(Class &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; . &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; V2, data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; Ionosphere, family &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; binomial)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Error in `contrasts&amp;lt;-`(`*tmp*`, value = contr.funs[1 + isOF[nn]]): contrasts can be applied only to factors with 2 or more levels&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s remove these two problematic variables:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Ionosphere &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; Ionosphere &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;V1, &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;V2)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;inputs-for-the-search&#34;&gt;Inputs for the search&lt;/h2&gt;
&lt;p&gt;To demonstrate, we&amp;rsquo;ll fit a radial basis function support vector machine to these data and tune the SVM cost parameter and the &lt;code&gt;\(\sigma\)&lt;/code&gt; parameter in the kernel function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;svm_mod &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;svm_rbf&lt;/span&gt;(cost &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tune&lt;/span&gt;(), rbf_sigma &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tune&lt;/span&gt;()) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;set_mode&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;classification&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;set_engine&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;kernlab&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this article, tuning will be demonstrated in two ways, using:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a standard R formula, and&lt;/li&gt;
&lt;li&gt;a recipe.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s create a simple recipe here:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iono_rec &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;recipe&lt;/span&gt;(Class &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; ., data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; Ionosphere)  &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# remove any zero variance predictors&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_zv&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;all_predictors&lt;/span&gt;()) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# remove any linear combinations&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_lincomb&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;all_numeric&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The only other required item for tuning is a resampling strategy as defined by an rsample object. Let&amp;rsquo;s demonstrate using basic bootstrapping:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;4943&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iono_rs &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;bootstraps&lt;/span&gt;(Ionosphere, times &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;30&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;optional-inputs&#34;&gt;Optional inputs&lt;/h2&gt;
&lt;p&gt;An &lt;em&gt;optional&lt;/em&gt; step for model tuning is to specify which metrics should be computed using the out-of-sample predictions. For classification, the default is to calculate the log-likelihood statistic and overall accuracy. Instead of the defaults, the area under the ROC curve will be used. To do this, a yardstick package function can be used to create a metric set:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;roc_vals &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;metric_set&lt;/span&gt;(roc_auc)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If no grid or parameters are provided, a set of 10 hyperparameters are created using a space-filling design (via a Latin hypercube). A grid can be given in a data frame where the parameters are in columns and parameter combinations are in rows. Here, the default will be used.&lt;/p&gt;
&lt;p&gt;Also, a control object can be passed that specifies different aspects of the search. Here, the verbose option is turned off and the option to save the out-of-sample predictions is turned on.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ctrl &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;control_grid&lt;/span&gt;(verbose &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;, save_pred &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;executing-with-a-formula&#34;&gt;Executing with a formula&lt;/h2&gt;
&lt;p&gt;First, we can use the formula interface:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;35&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;formula_res &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  svm_mod &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;tune_grid&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Class &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; .,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resamples &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; iono_rs,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    metrics &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; roc_vals,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    control &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; ctrl
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;formula_res
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # Tuning results&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # Bootstrap sampling &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 30 × 5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    splits            id          .metrics          .notes           .predictions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;list&amp;gt;            &amp;lt;chr&amp;gt;       &amp;lt;list&amp;gt;            &amp;lt;list&amp;gt;           &amp;lt;list&amp;gt;      &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 &amp;lt;split [351/120]&amp;gt; Bootstrap01 &amp;lt;tibble [10 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt; &amp;lt;tibble&amp;gt;    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 &amp;lt;split [351/130]&amp;gt; Bootstrap02 &amp;lt;tibble [10 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt; &amp;lt;tibble&amp;gt;    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 &amp;lt;split [351/137]&amp;gt; Bootstrap03 &amp;lt;tibble [10 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt; &amp;lt;tibble&amp;gt;    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 &amp;lt;split [351/141]&amp;gt; Bootstrap04 &amp;lt;tibble [10 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt; &amp;lt;tibble&amp;gt;    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 &amp;lt;split [351/131]&amp;gt; Bootstrap05 &amp;lt;tibble [10 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt; &amp;lt;tibble&amp;gt;    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 &amp;lt;split [351/131]&amp;gt; Bootstrap06 &amp;lt;tibble [10 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt; &amp;lt;tibble&amp;gt;    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 &amp;lt;split [351/127]&amp;gt; Bootstrap07 &amp;lt;tibble [10 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt; &amp;lt;tibble&amp;gt;    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 &amp;lt;split [351/123]&amp;gt; Bootstrap08 &amp;lt;tibble [10 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt; &amp;lt;tibble&amp;gt;    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 &amp;lt;split [351/131]&amp;gt; Bootstrap09 &amp;lt;tibble [10 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt; &amp;lt;tibble&amp;gt;    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 &amp;lt;split [351/117]&amp;gt; Bootstrap10 &amp;lt;tibble [10 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt; &amp;lt;tibble&amp;gt;    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 20 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;.metrics&lt;/code&gt; column contains tibbles of the performance metrics for each tuning parameter combination:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;formula_res &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(.metrics) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;slice&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;pull&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 10 × 6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;        cost rbf_sigma .metric .estimator .estimate .config              &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;                &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1  0.00849  1.11e-10 roc_auc binary         0.815 Preprocessor1_Model01&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2  0.176    7.28e- 8 roc_auc binary         0.839 Preprocessor1_Model02&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 14.9      3.93e- 4 roc_auc binary         0.870 Preprocessor1_Model03&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4  5.51     2.10e- 3 roc_auc binary         0.919 Preprocessor1_Model04&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5  1.87     3.53e- 7 roc_auc binary         0.838 Preprocessor1_Model05&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6  0.00719  1.45e- 5 roc_auc binary         0.832 Preprocessor1_Model06&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7  0.00114  8.41e- 2 roc_auc binary         0.969 Preprocessor1_Model07&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8  0.950    1.74e- 1 roc_auc binary         0.984 Preprocessor1_Model08&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9  0.189    3.13e- 6 roc_auc binary         0.832 Preprocessor1_Model09&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10  0.0364   4.96e- 9 roc_auc binary         0.839 Preprocessor1_Model10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To get the final resampling estimates, the &lt;code&gt;collect_metrics()&lt;/code&gt; function can be used on the grid object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;estimates &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;collect_metrics&lt;/span&gt;(formula_res)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;estimates
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 10 × 8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;        cost rbf_sigma .metric .estimator  mean     n std_err .config            &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;              &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1  0.00849  1.11e-10 roc_auc binary     0.822    30 0.00718 Preprocessor1_Mode…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2  0.176    7.28e- 8 roc_auc binary     0.871    30 0.00525 Preprocessor1_Mode…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 14.9      3.93e- 4 roc_auc binary     0.916    30 0.00497 Preprocessor1_Mode…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4  5.51     2.10e- 3 roc_auc binary     0.960    30 0.00378 Preprocessor1_Mode…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5  1.87     3.53e- 7 roc_auc binary     0.871    30 0.00524 Preprocessor1_Mode…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6  0.00719  1.45e- 5 roc_auc binary     0.871    30 0.00534 Preprocessor1_Mode…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7  0.00114  8.41e- 2 roc_auc binary     0.966    30 0.00301 Preprocessor1_Mode…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8  0.950    1.74e- 1 roc_auc binary     0.979    30 0.00204 Preprocessor1_Mode…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9  0.189    3.13e- 6 roc_auc binary     0.871    30 0.00536 Preprocessor1_Mode…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10  0.0364   4.96e- 9 roc_auc binary     0.871    30 0.00537 Preprocessor1_Mode…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The top combinations are:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;show_best&lt;/span&gt;(formula_res, metric &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;roc_auc&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 5 × 8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       cost rbf_sigma .metric .estimator  mean     n std_err .config             &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;      &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;               &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1  0.950   0.174     roc_auc binary     0.979    30 0.00204 Preprocessor1_Model…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2  0.00114 0.0841    roc_auc binary     0.966    30 0.00301 Preprocessor1_Model…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3  5.51    0.00210   roc_auc binary     0.960    30 0.00378 Preprocessor1_Model…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4 14.9     0.000393  roc_auc binary     0.916    30 0.00497 Preprocessor1_Model…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5  0.00719 0.0000145 roc_auc binary     0.871    30 0.00534 Preprocessor1_Model…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;executing-with-a-recipe&#34;&gt;Executing with a recipe&lt;/h2&gt;
&lt;p&gt;Next, we can use the same syntax but pass a &lt;em&gt;recipe&lt;/em&gt; in as the pre-processor argument:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;325&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;recipe_res &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  svm_mod &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;tune_grid&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    iono_rec,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resamples &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; iono_rs,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    metrics &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; roc_vals,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    control &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; ctrl
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;recipe_res
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # Tuning results&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # Bootstrap sampling &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 30 × 5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    splits            id          .metrics          .notes           .predictions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;list&amp;gt;            &amp;lt;chr&amp;gt;       &amp;lt;list&amp;gt;            &amp;lt;list&amp;gt;           &amp;lt;list&amp;gt;      &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 &amp;lt;split [351/120]&amp;gt; Bootstrap01 &amp;lt;tibble [10 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt; &amp;lt;tibble&amp;gt;    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 &amp;lt;split [351/130]&amp;gt; Bootstrap02 &amp;lt;tibble [10 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt; &amp;lt;tibble&amp;gt;    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 &amp;lt;split [351/137]&amp;gt; Bootstrap03 &amp;lt;tibble [10 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt; &amp;lt;tibble&amp;gt;    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 &amp;lt;split [351/141]&amp;gt; Bootstrap04 &amp;lt;tibble [10 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt; &amp;lt;tibble&amp;gt;    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 &amp;lt;split [351/131]&amp;gt; Bootstrap05 &amp;lt;tibble [10 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt; &amp;lt;tibble&amp;gt;    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 &amp;lt;split [351/131]&amp;gt; Bootstrap06 &amp;lt;tibble [10 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt; &amp;lt;tibble&amp;gt;    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 &amp;lt;split [351/127]&amp;gt; Bootstrap07 &amp;lt;tibble [10 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt; &amp;lt;tibble&amp;gt;    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 &amp;lt;split [351/123]&amp;gt; Bootstrap08 &amp;lt;tibble [10 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt; &amp;lt;tibble&amp;gt;    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 &amp;lt;split [351/131]&amp;gt; Bootstrap09 &amp;lt;tibble [10 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt; &amp;lt;tibble&amp;gt;    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 &amp;lt;split [351/117]&amp;gt; Bootstrap10 &amp;lt;tibble [10 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt; &amp;lt;tibble&amp;gt;    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 20 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The best setting here is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;show_best&lt;/span&gt;(recipe_res, metric &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;roc_auc&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 5 × 8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;      cost rbf_sigma .metric .estimator  mean     n std_err .config              &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;                &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 15.6    0.182     roc_auc binary     0.981    30 0.00213 Preprocessor1_Model04&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2  0.385  0.0276    roc_auc binary     0.978    30 0.00222 Preprocessor1_Model03&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3  0.143  0.00243   roc_auc binary     0.930    30 0.00443 Preprocessor1_Model06&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4  0.841  0.000691  roc_auc binary     0.892    30 0.00504 Preprocessor1_Model07&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5  0.0499 0.0000335 roc_auc binary     0.872    30 0.00521 Preprocessor1_Model08&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;out-of-sample-predictions&#34;&gt;Out-of-sample predictions&lt;/h2&gt;
&lt;p&gt;If we used &lt;code&gt;save_pred = TRUE&lt;/code&gt; to keep the out-of-sample predictions for each resample during tuning, we can obtain those predictions, along with the tuning parameters and resample identifier, using &lt;code&gt;collect_predictions()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;collect_predictions&lt;/span&gt;(recipe_res)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 38,740 × 8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    id          .pred_bad .pred_good  .row    cost  rbf_sigma Class .config      &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;chr&amp;gt;           &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt; &amp;lt;chr&amp;gt;        &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 Bootstrap01     0.333      0.667     1 0.00296 0.00000383 good  Preprocessor…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 Bootstrap01     0.333      0.667     9 0.00296 0.00000383 good  Preprocessor…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 Bootstrap01     0.333      0.667    10 0.00296 0.00000383 bad   Preprocessor…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 Bootstrap01     0.333      0.667    12 0.00296 0.00000383 bad   Preprocessor…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 Bootstrap01     0.333      0.667    14 0.00296 0.00000383 bad   Preprocessor…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 Bootstrap01     0.333      0.667    15 0.00296 0.00000383 good  Preprocessor…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 Bootstrap01     0.333      0.667    16 0.00296 0.00000383 bad   Preprocessor…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 Bootstrap01     0.334      0.666    22 0.00296 0.00000383 bad   Preprocessor…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 Bootstrap01     0.333      0.667    23 0.00296 0.00000383 good  Preprocessor…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 Bootstrap01     0.334      0.666    24 0.00296 0.00000383 bad   Preprocessor…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 38,730 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can obtain the hold-out sets for all the resamples augmented with the predictions using &lt;code&gt;augment()&lt;/code&gt;, which provides opportunities for flexible visualization of model results:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;augment&lt;/span&gt;(recipe_res) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(V3, .pred_good, color &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; Class)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_point&lt;/span&gt;(show.legend &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;facet_wrap&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt;Class)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/augment-preds-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;h2 id=&#34;session-information&#34;&gt;Session information&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#&amp;gt; ─ Session info ─────────────────────────────────────────────────────
#&amp;gt;  setting  value
#&amp;gt;  version  R version 4.1.2 (2021-11-01)
#&amp;gt;  os       macOS Monterey 12.3
#&amp;gt;  system   aarch64, darwin20
#&amp;gt;  ui       X11
#&amp;gt;  language (EN)
#&amp;gt;  collate  en_GB.UTF-8
#&amp;gt;  ctype    en_GB.UTF-8
#&amp;gt;  tz       Europe/London
#&amp;gt;  date     2022-04-11
#&amp;gt;  pandoc   2.14.0.3 @ /Applications/RStudio.app/Contents/MacOS/pandoc/ (via rmarkdown)
#&amp;gt; 
#&amp;gt; ─ Packages ─────────────────────────────────────────────────────────
#&amp;gt;  package    * version date (UTC) lib source
#&amp;gt;  broom      * 0.7.12  2022-01-28 [1] CRAN (R 4.1.1)
#&amp;gt;  dials      * 0.1.1   2022-04-06 [1] CRAN (R 4.1.2)
#&amp;gt;  dplyr      * 1.0.8   2022-02-08 [1] CRAN (R 4.1.2)
#&amp;gt;  ggplot2    * 3.3.5   2021-06-25 [1] CRAN (R 4.1.1)
#&amp;gt;  infer      * 1.0.0   2021-08-13 [1] CRAN (R 4.1.1)
#&amp;gt;  kernlab    * 0.9-30  2022-04-02 [1] CRAN (R 4.1.2)
#&amp;gt;  mlbench    * 2.1-3   2021-01-29 [1] CRAN (R 4.1.2)
#&amp;gt;  parsnip    * 0.2.1   2022-03-17 [1] CRAN (R 4.1.1)
#&amp;gt;  purrr      * 0.3.4   2020-04-17 [1] CRAN (R 4.1.0)
#&amp;gt;  recipes    * 0.2.0   2022-02-18 [1] CRAN (R 4.1.1)
#&amp;gt;  rlang        1.0.2   2022-03-04 [1] CRAN (R 4.1.1)
#&amp;gt;  rsample    * 0.1.1   2021-11-08 [1] CRAN (R 4.1.2)
#&amp;gt;  tibble     * 3.1.6   2021-11-07 [1] CRAN (R 4.1.1)
#&amp;gt;  tidymodels * 0.2.0   2022-03-19 [1] CRAN (R 4.1.1)
#&amp;gt;  tune       * 0.2.0   2022-03-19 [1] CRAN (R 4.1.2)
#&amp;gt;  workflows  * 0.2.6   2022-03-18 [1] CRAN (R 4.1.2)
#&amp;gt;  yardstick  * 0.0.9   2021-11-22 [1] CRAN (R 4.1.1)
#&amp;gt; 
#&amp;gt;  [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library
#&amp;gt; 
#&amp;gt; ────────────────────────────────────────────────────────────────────
&lt;/code&gt;&lt;/pre&gt;</description>
  </item>
  
<item>
  <title>Regression models two ways</title>
  <link>https://www.tidymodels.org/learn/models/parsnip-ranger-glmnet/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/learn/models/parsnip-ranger-glmnet/</guid>
  <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;To use the code in this article, you will need to install the following packages: glmnet, randomForest, ranger, and tidymodels.&lt;/p&gt;
&lt;p&gt;We can create regression models with the tidymodels package &lt;a href=&#34;https://parsnip.tidymodels.org/&#34;&gt;parsnip&lt;/a&gt; to predict continuous or numeric quantities. Here, let&amp;rsquo;s first fit a random forest model, which does &lt;em&gt;not&lt;/em&gt; require all numeric input (see discussion &lt;a href=&#34;https://bookdown.org/max/FES/categorical-trees.html&#34;&gt;here&lt;/a&gt;) and discuss how to use &lt;code&gt;fit()&lt;/code&gt; and &lt;code&gt;fit_xy()&lt;/code&gt;, as well as &lt;em&gt;data descriptors&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Second, let&amp;rsquo;s fit a regularized linear regression model to demonstrate how to move between different types of models using parsnip.&lt;/p&gt;
&lt;h2 id=&#34;the-ames-housing-data&#34;&gt;The Ames housing data&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ll use the Ames housing data set to demonstrate how to create regression models using parsnip. First, set up the data set and create a simple training/test set split:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(tidymodels)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;data&lt;/span&gt;(ames)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;4595&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data_split &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;initial_split&lt;/span&gt;(ames, strata &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Sale_Price&amp;#34;&lt;/span&gt;, prop &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.75&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ames_train &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;training&lt;/span&gt;(data_split)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ames_test  &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;testing&lt;/span&gt;(data_split)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The use of the test set here is &lt;em&gt;only for illustration&lt;/em&gt;; normally in a data analysis these data would be saved to the very end after many models have been evaluated.&lt;/p&gt;
&lt;h2 id=&#34;random-forest&#34;&gt;Random forest&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ll start by fitting a random forest model to a small set of parameters. Let&amp;rsquo;s create a model with the predictors &lt;code&gt;Longitude&lt;/code&gt;, &lt;code&gt;Latitude&lt;/code&gt;, &lt;code&gt;Lot_Area&lt;/code&gt;, &lt;code&gt;Neighborhood&lt;/code&gt;, and &lt;code&gt;Year_Sold&lt;/code&gt;. A simple random forest model can be specified via:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rf_defaults &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;rand_forest&lt;/span&gt;(mode &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;regression&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rf_defaults
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Random Forest Model Specification (regression)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Computational engine: ranger&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The model will be fit with the ranger package by default. Since we didn&amp;rsquo;t add any extra arguments to &lt;code&gt;fit&lt;/code&gt;, &lt;em&gt;many&lt;/em&gt; of the arguments will be set to their defaults from the function  &lt;code&gt;ranger::ranger()&lt;/code&gt;. The help pages for the model function describe the default parameters and you can also use the &lt;code&gt;translate()&lt;/code&gt; function to check out such details.&lt;/p&gt;
&lt;p&gt;The parsnip package provides two different interfaces to fit a model:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the formula interface (&lt;code&gt;fit()&lt;/code&gt;), and&lt;/li&gt;
&lt;li&gt;the non-formula interface (&lt;code&gt;fit_xy()&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s start with the non-formula interface:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;preds &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Longitude&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Latitude&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Lot_Area&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Neighborhood&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Year_Sold&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rf_xy_fit &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rf_defaults &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;set_engine&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ranger&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;fit_xy&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; ames_train[, preds],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;log10&lt;/span&gt;(ames_train&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;Sale_Price)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rf_xy_fit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; parsnip model object&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Ranger result&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Call:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  ranger::ranger(x = maybe_data_frame(x), y = y, num.threads = 1,      verbose = FALSE, seed = sample.int(10^5, 1)) &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Type:                             Regression &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Number of trees:                  500 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Sample size:                      2197 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Number of independent variables:  5 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Mtry:                             2 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Target node size:                 5 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Variable importance mode:         none &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Splitrule:                        variance &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; OOB prediction error (MSE):       0.0085 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; R squared (OOB):                  0.724&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The non-formula interface doesn&amp;rsquo;t do anything to the predictors before passing them to the underlying model function. This particular model does &lt;em&gt;not&lt;/em&gt; require indicator variables (sometimes called &amp;ldquo;dummy variables&amp;rdquo;) to be created prior to fitting the model. Note that the output shows &amp;ldquo;Number of independent variables:  5&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;For regression models, we can use the basic &lt;code&gt;predict()&lt;/code&gt; method, which returns a tibble with a column named &lt;code&gt;.pred&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test_results &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ames_test &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(Sale_Price) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(Sale_Price &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;log10&lt;/span&gt;(Sale_Price)) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;bind_cols&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;predict&lt;/span&gt;(rf_xy_fit, new_data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; ames_test[, preds])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test_results &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;slice&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 5 × 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   Sale_Price .pred&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;        &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1       5.39  5.25&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2       5.28  5.29&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3       5.23  5.26&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4       5.21  5.30&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5       5.60  5.51&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# summarize performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test_results &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;metrics&lt;/span&gt;(truth &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; Sale_Price, estimate &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; .pred) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 3 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   .metric .estimator .estimate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 rmse    standard      0.0945&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 rsq     standard      0.733 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 mae     standard      0.0629&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the model required indicator variables, we would have to create them manually prior to using &lt;code&gt;fit()&lt;/code&gt; (perhaps using the recipes package).&lt;/li&gt;
&lt;li&gt;We had to manually log the outcome prior to modeling.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, for illustration, let&amp;rsquo;s use the formula method using some new parameter values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;rand_forest&lt;/span&gt;(mode &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;regression&amp;#34;&lt;/span&gt;, mtry &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, trees &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1000&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;set_engine&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ranger&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;fit&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;log10&lt;/span&gt;(Sale_Price) &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; Longitude &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; Latitude &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; Lot_Area &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; Neighborhood &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; Year_Sold,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; ames_train
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; parsnip model object&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Ranger result&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Call:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  ranger::ranger(x = maybe_data_frame(x), y = y, mtry = min_cols(~3,      x), num.trees = ~1000, num.threads = 1, verbose = FALSE,      seed = sample.int(10^5, 1)) &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Type:                             Regression &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Number of trees:                  1000 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Sample size:                      2197 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Number of independent variables:  5 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Mtry:                             3 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Target node size:                 5 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Variable importance mode:         none &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Splitrule:                        variance &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; OOB prediction error (MSE):       0.0084 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; R squared (OOB):                  0.727&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Suppose that we would like to use the randomForest package instead of ranger. To do so, the only part of the syntax that needs to change is the &lt;code&gt;set_engine()&lt;/code&gt; argument:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;rand_forest&lt;/span&gt;(mode &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;regression&amp;#34;&lt;/span&gt;, mtry &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, trees &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1000&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;set_engine&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;randomForest&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;fit&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;log10&lt;/span&gt;(Sale_Price) &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; Longitude &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; Latitude &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; Lot_Area &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; Neighborhood &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; Year_Sold,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; ames_train
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; parsnip model object&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Call:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  randomForest(x = maybe_data_frame(x), y = y, ntree = ~1000, mtry = min_cols(~3,      x)) &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;                Type of random forest: regression&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;                      Number of trees: 1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; No. of variables tried at each split: 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;           Mean of squared residuals: 0.00847&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;                     % Var explained: 72.5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Look at the formula code that was printed out; one function uses the argument name &lt;code&gt;ntree&lt;/code&gt; and the other uses &lt;code&gt;num.trees&lt;/code&gt;. The parsnip models don&amp;rsquo;t require you to know the specific names of the main arguments.&lt;/p&gt;
&lt;p&gt;Now suppose that we want to modify the value of &lt;code&gt;mtry&lt;/code&gt; based on the number of predictors in the data. Usually, a good default value is &lt;code&gt;floor(sqrt(num_predictors))&lt;/code&gt; but a pure bagging model requires an &lt;code&gt;mtry&lt;/code&gt; value equal to the total number of parameters. There may be cases where you may not know how many predictors are going to be present when the model will be fit (perhaps due to the generation of indicator variables or a variable filter) so this might be difficult to know exactly ahead of time when you write your code.&lt;/p&gt;
&lt;p&gt;When the model it being fit by parsnip, &lt;a href=&#34;https://parsnip.tidymodels.org/reference/descriptors.html&#34;&gt;&lt;em&gt;data descriptors&lt;/em&gt;&lt;/a&gt; are made available. These attempt to let you know what you will have available when the model is fit. When a model object is created (say using &lt;code&gt;rand_forest()&lt;/code&gt;), the values of the arguments that you give it are &lt;em&gt;immediately evaluated&lt;/em&gt; unless you delay them. To delay the evaluation of any argument, you can used &lt;code&gt;rlang::expr()&lt;/code&gt; to make an expression.&lt;/p&gt;
&lt;p&gt;Two relevant data descriptors for our example model are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.preds()&lt;/code&gt;: the number of predictor &lt;em&gt;variables&lt;/em&gt; in the data set that are associated with the predictors &lt;strong&gt;prior to dummy variable creation&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.cols()&lt;/code&gt;: the number of predictor &lt;em&gt;columns&lt;/em&gt; after dummy variables (or other encodings) are created.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since ranger won&amp;rsquo;t create indicator values, &lt;code&gt;.preds()&lt;/code&gt; would be appropriate for &lt;code&gt;mtry&lt;/code&gt; for a bagging model.&lt;/p&gt;
&lt;p&gt;For example, let&amp;rsquo;s use an expression with the &lt;code&gt;.preds()&lt;/code&gt; descriptor to fit a bagging model:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;rand_forest&lt;/span&gt;(mode &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;regression&amp;#34;&lt;/span&gt;, mtry &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;.preds&lt;/span&gt;(), trees &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1000&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;set_engine&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ranger&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;fit&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;log10&lt;/span&gt;(Sale_Price) &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; Longitude &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; Latitude &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; Lot_Area &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; Neighborhood &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; Year_Sold,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; ames_train
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; parsnip model object&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Ranger result&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Call:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  ranger::ranger(x = maybe_data_frame(x), y = y, mtry = min_cols(~.preds(),      x), num.trees = ~1000, num.threads = 1, verbose = FALSE,      seed = sample.int(10^5, 1)) &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Type:                             Regression &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Number of trees:                  1000 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Sample size:                      2197 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Number of independent variables:  5 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Mtry:                             5 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Target node size:                 5 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Variable importance mode:         none &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Splitrule:                        variance &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; OOB prediction error (MSE):       0.00867 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; R squared (OOB):                  0.718&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;regularized-regression&#34;&gt;Regularized regression&lt;/h2&gt;
&lt;p&gt;A linear model might work for this data set as well. We can use the &lt;code&gt;linear_reg()&lt;/code&gt; parsnip model. There are two engines that can perform regularization/penalization, the glmnet and sparklyr packages. Let&amp;rsquo;s use the former here. The glmnet package only implements a non-formula method, but parsnip will allow either one to be used.&lt;/p&gt;
&lt;p&gt;When regularization is used, the predictors should first be centered and scaled before being passed to the model. The formula method won&amp;rsquo;t do that automatically so we will need to do this ourselves. We&amp;rsquo;ll use the &lt;a href=&#34;https://recipes.tidymodels.org/&#34;&gt;recipes&lt;/a&gt; package for these steps.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;norm_recipe &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;recipe&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Sale_Price &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; Longitude &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; Latitude &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; Lot_Area &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; Neighborhood &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; Year_Sold, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; ames_train
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_other&lt;/span&gt;(Neighborhood) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_dummy&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;all_nominal&lt;/span&gt;()) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_center&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;all_predictors&lt;/span&gt;()) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_scale&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;all_predictors&lt;/span&gt;()) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_log&lt;/span&gt;(Sale_Price, base &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# estimate the means and standard deviations&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;prep&lt;/span&gt;(training &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; ames_train, retain &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Now let&amp;#39;s fit the model using the processed version of the data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;glmn_fit &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;linear_reg&lt;/span&gt;(penalty &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.001&lt;/span&gt;, mixture &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.5&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;set_engine&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;glmnet&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;fit&lt;/span&gt;(Sale_Price &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; ., data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;bake&lt;/span&gt;(norm_recipe, new_data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;glmn_fit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; parsnip model object&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Call:  glmnet::glmnet(x = maybe_matrix(x), y = y, family = &amp;#34;gaussian&amp;#34;,      alpha = ~0.5) &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    Df %Dev Lambda&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1   0  0.0 0.1380&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2   1  2.0 0.1260&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3   1  3.7 0.1150&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4   1  5.3 0.1050&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5   2  7.1 0.0953&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 6   3  9.6 0.0869&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 7   4 12.6 0.0791&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 8   5 15.4 0.0721&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 9   5 17.9 0.0657&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10  7 20.8 0.0599&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 11  7 23.5 0.0545&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 12  7 25.8 0.0497&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 13  8 28.2 0.0453&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 14  8 30.3 0.0413&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 15  8 32.1 0.0376&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 16  8 33.7 0.0343&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 17  8 35.0 0.0312&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 18  8 36.1 0.0284&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 19  8 37.0 0.0259&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 20  9 37.9 0.0236&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 21  9 38.6 0.0215&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 22  9 39.3 0.0196&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 23  9 39.8 0.0179&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 24  9 40.3 0.0163&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 25 10 40.7 0.0148&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 26 11 41.1 0.0135&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 27 11 41.4 0.0123&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 28 11 41.6 0.0112&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 29 11 41.9 0.0102&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 30 12 42.1 0.0093&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 31 12 42.3 0.0085&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 32 12 42.4 0.0077&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 33 12 42.6 0.0070&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 34 12 42.7 0.0064&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 35 12 42.8 0.0059&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 36 12 42.8 0.0053&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 37 12 42.9 0.0049&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 38 12 43.0 0.0044&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 39 12 43.0 0.0040&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 40 12 43.0 0.0037&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 41 12 43.1 0.0034&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 42 12 43.1 0.0031&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 43 12 43.1 0.0028&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 44 12 43.1 0.0025&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 45 12 43.1 0.0023&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 46 12 43.2 0.0021&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 47 12 43.2 0.0019&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 48 12 43.2 0.0018&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 49 12 43.2 0.0016&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 50 12 43.2 0.0014&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 51 12 43.2 0.0013&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 52 12 43.2 0.0012&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 53 12 43.2 0.0011&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 54 12 43.2 0.0010&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 55 12 43.2 0.0009&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 56 12 43.2 0.0008&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 57 12 43.2 0.0008&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 58 12 43.2 0.0007&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 59 12 43.2 0.0006&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 60 12 43.2 0.0006&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 61 12 43.2 0.0005&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 62 12 43.2 0.0005&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 63 12 43.2 0.0004&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 64 12 43.2 0.0004&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 65 12 43.2 0.0004&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If &lt;code&gt;penalty&lt;/code&gt; were not specified, all of the &lt;code&gt;lambda&lt;/code&gt; values would be computed.&lt;/p&gt;
&lt;p&gt;To get the predictions for this specific value of &lt;code&gt;lambda&lt;/code&gt; (aka &lt;code&gt;penalty&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# First, get the processed version of the test set predictors:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test_normalized &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;bake&lt;/span&gt;(norm_recipe, new_data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; ames_test, &lt;span style=&#34;color:#00f&#34;&gt;all_predictors&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test_results &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  test_results &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;rename&lt;/span&gt;(`random forest` &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; .pred) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;bind_cols&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;predict&lt;/span&gt;(glmn_fit, new_data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; test_normalized) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;rename&lt;/span&gt;(glmnet &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; .pred)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test_results
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 733 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    Sale_Price `random forest` glmnet&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;         &amp;lt;dbl&amp;gt;           &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1       5.39            5.25   5.16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2       5.28            5.29   5.27&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3       5.23            5.26   5.24&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4       5.21            5.30   5.24&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5       5.60            5.51   5.24&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6       5.32            5.29   5.26&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7       5.17            5.14   5.18&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8       5.06            5.13   5.17&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9       4.98            5.01   5.18&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10       5.11            5.14   5.19&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 723 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test_results &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;metrics&lt;/span&gt;(truth &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; Sale_Price, estimate &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; glmnet) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 3 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   .metric .estimator .estimate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 rmse    standard      0.142 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 rsq     standard      0.391 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 mae     standard      0.0979&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test_results &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;gather&lt;/span&gt;(model, prediction, &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;Sale_Price) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; prediction, y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; Sale_Price)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_abline&lt;/span&gt;(col &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;green&amp;#34;&lt;/span&gt;, lty &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_point&lt;/span&gt;(alpha &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;.4&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;facet_wrap&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt;model) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;coord_fixed&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/glmn-pred-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;This final plot compares the performance of the random forest and regularized regression models.&lt;/p&gt;
&lt;h2 id=&#34;session-information&#34;&gt;Session information&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#&amp;gt; ─ Session info ─────────────────────────────────────────────────────
#&amp;gt;  setting  value
#&amp;gt;  version  R version 4.1.2 (2021-11-01)
#&amp;gt;  os       macOS Monterey 12.3
#&amp;gt;  system   aarch64, darwin20
#&amp;gt;  ui       X11
#&amp;gt;  language (EN)
#&amp;gt;  collate  en_GB.UTF-8
#&amp;gt;  ctype    en_GB.UTF-8
#&amp;gt;  tz       Europe/London
#&amp;gt;  date     2022-04-11
#&amp;gt;  pandoc   2.14.0.3 @ /Applications/RStudio.app/Contents/MacOS/pandoc/ (via rmarkdown)
#&amp;gt; 
#&amp;gt; ─ Packages ─────────────────────────────────────────────────────────
#&amp;gt;  package      * version date (UTC) lib source
#&amp;gt;  broom        * 0.7.12  2022-01-28 [1] CRAN (R 4.1.1)
#&amp;gt;  dials        * 0.1.1   2022-04-06 [1] CRAN (R 4.1.2)
#&amp;gt;  dplyr        * 1.0.8   2022-02-08 [1] CRAN (R 4.1.2)
#&amp;gt;  ggplot2      * 3.3.5   2021-06-25 [1] CRAN (R 4.1.1)
#&amp;gt;  glmnet       * 4.1-3   2021-11-02 [1] CRAN (R 4.1.2)
#&amp;gt;  infer        * 1.0.0   2021-08-13 [1] CRAN (R 4.1.1)
#&amp;gt;  parsnip      * 0.2.1   2022-03-17 [1] CRAN (R 4.1.1)
#&amp;gt;  purrr        * 0.3.4   2020-04-17 [1] CRAN (R 4.1.0)
#&amp;gt;  randomForest * 4.7-1   2022-02-03 [1] CRAN (R 4.1.2)
#&amp;gt;  ranger       * 0.13.1  2021-07-14 [1] CRAN (R 4.1.2)
#&amp;gt;  recipes      * 0.2.0   2022-02-18 [1] CRAN (R 4.1.1)
#&amp;gt;  rlang          1.0.2   2022-03-04 [1] CRAN (R 4.1.1)
#&amp;gt;  rsample      * 0.1.1   2021-11-08 [1] CRAN (R 4.1.2)
#&amp;gt;  tibble       * 3.1.6   2021-11-07 [1] CRAN (R 4.1.1)
#&amp;gt;  tidymodels   * 0.2.0   2022-03-19 [1] CRAN (R 4.1.1)
#&amp;gt;  tune         * 0.2.0   2022-03-19 [1] CRAN (R 4.1.2)
#&amp;gt;  workflows    * 0.2.6   2022-03-18 [1] CRAN (R 4.1.2)
#&amp;gt;  yardstick    * 0.0.9   2021-11-22 [1] CRAN (R 4.1.1)
#&amp;gt; 
#&amp;gt;  [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library
#&amp;gt; 
#&amp;gt; ────────────────────────────────────────────────────────────────────
&lt;/code&gt;&lt;/pre&gt;</description>
  </item>
  
<item>
  <title>Search all of tidymodels</title>
  <link>https://www.tidymodels.org/find/all/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/find/all/</guid>
  <description>
&lt;script src=&#34;https://www.tidymodels.org/find/all/index_files/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://www.tidymodels.org/find/all/index_files/datatables-css/datatables-crosstalk.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://www.tidymodels.org/find/all/index_files/datatables-binding/datatables.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://www.tidymodels.org/find/all/index_files/jquery/jquery-3.6.0.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://www.tidymodels.org/find/all/index_files/dt-core/css/jquery.dataTables.min.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;link href=&#34;https://www.tidymodels.org/find/all/index_files/dt-core/css/jquery.dataTables.extra.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://www.tidymodels.org/find/all/index_files/dt-core/js/jquery.dataTables.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://www.tidymodels.org/find/all/index_files/nouislider/jquery.nouislider.min.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://www.tidymodels.org/find/all/index_files/nouislider/jquery.nouislider.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://www.tidymodels.org/find/all/index_files/selectize/selectize.bootstrap3.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://www.tidymodels.org/find/all/index_files/selectize/selectize.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://www.tidymodels.org/find/all/index_files/crosstalk/css/crosstalk.min.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://www.tidymodels.org/find/all/index_files/crosstalk/js/crosstalk.min.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Here are all the functions available across all of the &lt;a href=&#34;https://www.tidymodels.org/packages/&#34;&gt;tidymodels packages&lt;/a&gt;. Click on the link in the &lt;strong&gt;topic&lt;/strong&gt; column to find the relevant reference documentation.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:auto;&#34; class=&#34;datatables html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;filter&#34;:&#34;top&#34;,&#34;vertical&#34;:false,&#34;filterHTML&#34;:&#34;&lt;tr&gt;\n  &lt;td data-type=\&#34;character\&#34; style=\&#34;vertical-align: top;\&#34;&gt;\n    &lt;div class=\&#34;form-group has-feedback\&#34; style=\&#34;margin-bottom: auto;\&#34;&gt;\n      &lt;input type=\&#34;search\&#34; placeholder=\&#34;All\&#34; class=\&#34;form-control\&#34; style=\&#34;width: 100%;\&#34;/&gt;\n      &lt;span class=\&#34;glyphicon glyphicon-remove-circle form-control-feedback\&#34;&gt;&lt;\/span&gt;\n    &lt;\/div&gt;\n  &lt;\/td&gt;\n  &lt;td data-type=\&#34;character\&#34; style=\&#34;vertical-align: top;\&#34;&gt;\n    &lt;div class=\&#34;form-group has-feedback\&#34; style=\&#34;margin-bottom: auto;\&#34;&gt;\n      &lt;input type=\&#34;search\&#34; placeholder=\&#34;All\&#34; class=\&#34;form-control\&#34; style=\&#34;width: 100%;\&#34;/&gt;\n      &lt;span class=\&#34;glyphicon glyphicon-remove-circle form-control-feedback\&#34;&gt;&lt;\/span&gt;\n    &lt;\/div&gt;\n  &lt;\/td&gt;\n  &lt;td data-type=\&#34;factor\&#34; style=\&#34;vertical-align: top;\&#34;&gt;\n    &lt;div class=\&#34;form-group has-feedback\&#34; style=\&#34;margin-bottom: auto;\&#34;&gt;\n      &lt;input type=\&#34;search\&#34; placeholder=\&#34;All\&#34; class=\&#34;form-control\&#34; style=\&#34;width: 100%;\&#34;/&gt;\n      &lt;span class=\&#34;glyphicon glyphicon-remove-circle form-control-feedback\&#34;&gt;&lt;\/span&gt;\n    &lt;\/div&gt;\n    &lt;div style=\&#34;width: 100%; display: none;\&#34;&gt;\n      &lt;select multiple=\&#34;multiple\&#34; style=\&#34;width: 100%;\&#34; data-options=\&#34;[&amp;quot;applicable&amp;quot;,&amp;quot;baguette&amp;quot;,&amp;quot;broom&amp;quot;,&amp;quot;brulee&amp;quot;,&amp;quot;butcher&amp;quot;,&amp;quot;corrr&amp;quot;,&amp;quot;dials&amp;quot;,&amp;quot;discrim&amp;quot;,&amp;quot;embed&amp;quot;,&amp;quot;finetune&amp;quot;,&amp;quot;hardhat&amp;quot;,&amp;quot;infer&amp;quot;,&amp;quot;modeldata&amp;quot;,&amp;quot;modeldb&amp;quot;,&amp;quot;multilevelmod&amp;quot;,&amp;quot;parsnip&amp;quot;,&amp;quot;plsmod&amp;quot;,&amp;quot;poissonreg&amp;quot;,&amp;quot;probably&amp;quot;,&amp;quot;recipes&amp;quot;,&amp;quot;rsample&amp;quot;,&amp;quot;rules&amp;quot;,&amp;quot;shinymodels&amp;quot;,&amp;quot;spatialsample&amp;quot;,&amp;quot;stacks&amp;quot;,&amp;quot;textrecipes&amp;quot;,&amp;quot;themis&amp;quot;,&amp;quot;tidypredict&amp;quot;,&amp;quot;tune&amp;quot;,&amp;quot;usemodels&amp;quot;,&amp;quot;workflows&amp;quot;,&amp;quot;workflowsets&amp;quot;,&amp;quot;yardstick&amp;quot;]\&#34;&gt;&lt;\/select&gt;\n    &lt;\/div&gt;\n  &lt;\/td&gt;\n&lt;\/tr&gt;&#34;,&#34;data&#34;:[[&#34;Helper functions for checking the penalty of glmnet models&#34;,&#34;Helper functions for checking the penalty of glmnet models&#34;,&#34;Data Set Characteristics Available when Fitting Models&#34;,&#34;Helper functions to convert between formula and matrix interface&#34;,&#34;Helper functions to convert between formula and matrix interface&#34;,&#34;Helper functions to convert between formula and matrix interface&#34;,&#34;Helper functions to convert between formula and matrix interface&#34;,&#34;Data Set Characteristics Available when Fitting Models&#34;,&#34;Data Set Characteristics Available when Fitting Models&#34;,&#34;Obtain a identifier for the resamples&#34;,&#34;Obtain a identifier for the resamples&#34;,&#34;Obtain a identifier for the resamples&#34;,&#34;Various accessor functions&#34;,&#34;Various accessor functions&#34;,&#34;Various accessor functions&#34;,&#34;Various accessor functions&#34;,&#34;Various accessor functions&#34;,&#34;Various accessor functions&#34;,&#34;Various accessor functions&#34;,&#34;Data Set Characteristics Available when Fitting Models&#34;,&#34;Data Set Characteristics Available when Fitting Models&#34;,&#34;Organize glmnet predictions&#34;,&#34;Data Set Characteristics Available when Fitting Models&#34;,&#34;Data Set Characteristics Available when Fitting Models&#34;,&#34;Data Set Characteristics Available when Fitting Models&#34;,&#34;Tidy a(n) aareg object&#34;,&#34;Checks that the formula can be parsed&#34;,&#34;Accuracy&#34;,&#34;Accuracy&#34;,&#34;Accuracy&#34;,&#34;Activation functions between network layers&#34;,&#34;Alzheimer&#39;s disease data&#34;,&#34;Adaptive Synthetic Algorithm&#34;,&#34;Add model definitions to a data stack&#34;,&#34;Add a New Operation to the Current Recipe&#34;,&#34;Creates dummy variables&#34;,&#34;Add formula terms to a workflow&#34;,&#34;Add an intercept column to &lt;code&gt;data&lt;\/code&gt;&#34;,&#34;Add a model to a workflow&#34;,&#34;Add a recipe to a workflow&#34;,&#34;Augment a data set with resampling identifiers&#34;,&#34;Manually Alter Roles&#34;,&#34;Add a column of row numbers to a data frame&#34;,&#34;Add a New Operation to the Current Recipe&#34;,&#34;Add variables to a workflow&#34;,&#34;Add WoE in a data frame&#34;,&#34;Parameters to adjust effective degrees of freedom&#34;,&#34;Tidy a(n) ivreg object&#34;,&#34;Parameter to determine which neighbors to use&#34;,&#34;Role Selection&#34;,&#34;Role Selection&#34;,&#34;Role Selection&#34;,&#34;Role Selection&#34;,&#34;Role Selection&#34;,&#34;Role Selection&#34;,&#34;Role Selection&#34;,&#34;Role Selection&#34;,&#34;Ames Housing Data&#34;,&#34;Example Analysis of Ames Housing Data&#34;,&#34;Example Analysis of Ames Housing Data&#34;,&#34;Iterative optimization of neural network&#34;,&#34;Recent Ames Iowa Houses&#34;,&#34;Example Analysis of Ames Housing Data&#34;,&#34;Convert an &lt;code&gt;rsplit&lt;\/code&gt; object to a data frame&#34;,&#34;Locate equivocal values&#34;,&#34;Fit a &lt;code&gt;apd_hat_values&lt;\/code&gt;&#34;,&#34;Fit a &lt;code&gt;apd_hat_values&lt;\/code&gt;&#34;,&#34;Fit a &lt;code&gt;apd_hat_values&lt;\/code&gt;&#34;,&#34;Fit a &lt;code&gt;apd_hat_values&lt;\/code&gt;&#34;,&#34;Fit a &lt;code&gt;apd_hat_values&lt;\/code&gt;&#34;,&#34;Fit a &lt;code&gt;apd_hat_values&lt;\/code&gt;&#34;,&#34;Fit a &lt;code&gt;apd_pca&lt;\/code&gt;&#34;,&#34;Fit a &lt;code&gt;apd_pca&lt;\/code&gt;&#34;,&#34;Fit a &lt;code&gt;apd_pca&lt;\/code&gt;&#34;,&#34;Fit a &lt;code&gt;apd_pca&lt;\/code&gt;&#34;,&#34;Fit a &lt;code&gt;apd_pca&lt;\/code&gt;&#34;,&#34;Fit a &lt;code&gt;apd_pca&lt;\/code&gt;&#34;,&#34;Applicability domain methods using binary similarity analysis&#34;,&#34;Applicability domain methods using binary similarity analysis&#34;,&#34;Applicability domain methods using binary similarity analysis&#34;,&#34;Applicability domain methods using binary similarity analysis&#34;,&#34;Applicability domain methods using binary similarity analysis&#34;,&#34;Applicability domain methods using binary similarity analysis&#34;,&#34;Sampling for the Apparent Error Rate&#34;,&#34;Add a &lt;code&gt;class_pred&lt;\/code&gt; column&#34;,&#34;applicable: A Compilation of Applicability Domain Methods&#34;,&#34;Tidy a(n) Arima object&#34;,&#34;Coerce to a &lt;code&gt;class_pred&lt;\/code&gt; object&#34;,&#34;Coerce lists and matrices to correlation data frames&#34;,&#34;Convert a correlation data frame to matrix format&#34;,&#34;Prepares parsed model object&#34;,&#34;Prepares parsed model object&#34;,&#34;Convert existing objects to a workflow set&#34;,&#34;Convert an &lt;code&gt;rsplit&lt;\/code&gt; object to a data frame&#34;,&#34;Console Messages&#34;,&#34;Convert an &lt;code&gt;rsplit&lt;\/code&gt; object to a data frame&#34;,&#34;Define a theoretical distribution&#34;,&#34;Job attrition&#34;,&#34;Job Attrition&#34;,&#34;Tidy a(n) roc object&#34;,&#34;Add fitted values, residuals, and other common outputs to an augment call&#34;,&#34;Augment data with information from a(n) betamfx object&#34;,&#34;Augment data with information from a(n) betareg object&#34;,&#34;Augment data with information from a(n) clm object&#34;,&#34;Augment data with information from a(n) coxph object&#34;,&#34;Tidiers for data.frame objects&#34;,&#34;Augment data with information from a(n) decomposed.ts object&#34;,&#34;Augment data with information from a(n) drc object&#34;,&#34;Augment data with information from a(n) factanal object&#34;,&#34;Augment data with information from a(n) felm object&#34;,&#34;Augment data with information from a(n) fixest object&#34;,&#34;Augment data with information from a(n) gam object&#34;,&#34;Augment data with information from a(n) glm object&#34;,&#34;Augment data with information from a(n) glmrob object&#34;,&#34;Augment data with information from a(n) glmRob object&#34;,&#34;Augment data with information from a(n) htest object&#34;,&#34;Augment data with information from a(n) ivreg object&#34;,&#34;Augment data with information from a(n) kmeans object&#34;,&#34;Augment data with holdout predictions&#34;,&#34;Augment data with information from a(n) lm object&#34;,&#34;Augment data with information from a(n) lmrob object&#34;,&#34;Augment data with information from a(n) lmRob object&#34;,&#34;Tidy a(n) loess object&#34;,&#34;Augment data with information from a(n) mfx object&#34;,&#34;Augment data with information from a(n) Mclust object&#34;,&#34;Augment data with information from a(n) mfx object&#34;,&#34;Augment data with information from a(n) mjoint object&#34;,&#34;Augment data with information from a(n) mlogit object&#34;,&#34;Augment data with predictions&#34;,&#34;Augment data with information from a(n) mfx object&#34;,&#34;Tidy a(n) nlrq object&#34;,&#34;Augment data with information from a(n) nls object&#34;,&#34;Tidiers for NULL inputs&#34;,&#34;Augment data with information from a(n) pam object&#34;,&#34;Augment data with information from a(n) plm object&#34;,&#34;Augment data with information from a(n) mfx object&#34;,&#34;Augment data with information from a(n) poLCA object&#34;,&#34;Augment data with information from a(n) polr object&#34;,&#34;Augment data with information from a(n) prcomp object&#34;,&#34;Augment data with information from a(n) mfx object&#34;,&#34;Augment data with holdout predictions&#34;,&#34;Augment data with information from a(n) rlm object&#34;,&#34;Augment data with information from a(n) rma object&#34;,&#34;Augment data with information from a(n) rq object&#34;,&#34;Augment data with information from a(n) rqs object&#34;,&#34;Augment data with information from a(n) spatialreg object&#34;,&#34;Tidy a(n) smooth.spline object&#34;,&#34;Augment data with information from a(n) speedlm object&#34;,&#34;Augment data with information from a(n) stl object&#34;,&#34;Augment data with information from a(n) survreg object&#34;,&#34;Augment data with holdout predictions&#34;,&#34;Augment data with predictions&#34;,&#34;Plot the distribution function for pcas&#34;,&#34;Plot the cumulative distribution function for similarity metrics&#34;,&#34;Plot model loss over epochs&#34;,&#34;Plot model loss over epochs&#34;,&#34;Plot model loss over epochs&#34;,&#34;Plot model loss over epochs&#34;,&#34;Create a ggplot for a model object&#34;,&#34;Plot results of a stacked ensemble model.&#34;,&#34;Create a ggplot for a model object&#34;,&#34;Plot tuning search results&#34;,&#34;Plot the results of a workflow set&#34;,&#34;Area under the precision recall curve&#34;,&#34;Area under the precision recall curve&#34;,&#34;Area under the precision recall curve&#34;,&#34;Axe a call.&#34;,&#34;Axing a C5.0.&#34;,&#34;Axing a classbagg object.&#34;,&#34;Axing an earth object.&#34;,&#34;Axing an elnet.&#34;,&#34;Axing an flexsurvreg.&#34;,&#34;Axing a gausspr.&#34;,&#34;Axing a glmnet.&#34;,&#34;Axing an kknn.&#34;,&#34;Axing a ksvm object.&#34;,&#34;Axing an lm.&#34;,&#34;Axing a mda.&#34;,&#34;Axing a spark object.&#34;,&#34;Axing an model_fit.&#34;,&#34;Axing a model_stack.&#34;,&#34;Axing an multnet.&#34;,&#34;Axing a nnet.&#34;,&#34;Axing an randomForest.&#34;,&#34;Axing an ranger.&#34;,&#34;Axing a rpart.&#34;,&#34;Axing a sclass object.&#34;,&#34;Axing an survreg.&#34;,&#34;Axing an survreg.penal&#34;,&#34;Axing a train object.&#34;,&#34;Axing a train.recipe object.&#34;,&#34;Butcher methods for a workflow&#34;,&#34;Axing a xgb.Booster.&#34;,&#34;Axe controls.&#34;,&#34;Axing a C5.0.&#34;,&#34;Axing a spark object.&#34;,&#34;Axing an model_fit.&#34;,&#34;Axing a model_stack.&#34;,&#34;Axing an randomForest.&#34;,&#34;Axing a rpart.&#34;,&#34;Axing a train object.&#34;,&#34;Axing a train.recipe object.&#34;,&#34;Butcher methods for a workflow&#34;,&#34;Axing a xgb.Booster.&#34;,&#34;Axe data.&#34;,&#34;Axing a classbagg object.&#34;,&#34;Axing an earth object.&#34;,&#34;Axing a gausspr.&#34;,&#34;Axing a ksvm object.&#34;,&#34;Axing a spark object.&#34;,&#34;Axing an model_fit.&#34;,&#34;Axing a model_stack.&#34;,&#34;Axing a rpart.&#34;,&#34;Axing an survreg.&#34;,&#34;Axing an survreg.penal&#34;,&#34;Axing a train object.&#34;,&#34;Axing a train.recipe object.&#34;,&#34;Butcher methods for a workflow&#34;,&#34;Axe an environment.&#34;,&#34;Axing a classbagg object.&#34;,&#34;Axing an flexsurvreg.&#34;,&#34;Axing formulas.&#34;,&#34;Axing functions.&#34;,&#34;Axing a gausspr.&#34;,&#34;Axing an kknn.&#34;,&#34;Axing an lm.&#34;,&#34;Axing a mda.&#34;,&#34;Axing an model_fit.&#34;,&#34;Axing a model_stack.&#34;,&#34;Axing a nnet.&#34;,&#34;Axing a recipe object.&#34;,&#34;Axing an randomForest.&#34;,&#34;Axing a recipe object.&#34;,&#34;Axing a rpart.&#34;,&#34;Axing a sclass object.&#34;,&#34;Axing a recipe object.&#34;,&#34;Axing a recipe object.&#34;,&#34;Axing a recipe object.&#34;,&#34;Axing a recipe object.&#34;,&#34;Axing a recipe object.&#34;,&#34;Axing a recipe object.&#34;,&#34;Axing a recipe object.&#34;,&#34;Axing a recipe object.&#34;,&#34;Axing a recipe object.&#34;,&#34;Axing a recipe object.&#34;,&#34;Axing a recipe object.&#34;,&#34;Axing a recipe object.&#34;,&#34;Axing an survreg.&#34;,&#34;Axing an survreg.penal&#34;,&#34;Axing for terms inputs.&#34;,&#34;Axing a train object.&#34;,&#34;Axing a train.recipe object.&#34;,&#34;Butcher methods for a workflow&#34;,&#34;Axing a xgb.Booster.&#34;,&#34;Axe fitted values.&#34;,&#34;Axing a C5.0.&#34;,&#34;Axing an earth object.&#34;,&#34;Axing a gausspr.&#34;,&#34;Axing an kknn.&#34;,&#34;Axing a ksvm object.&#34;,&#34;Axing an lm.&#34;,&#34;Axing a mda.&#34;,&#34;Axing a spark object.&#34;,&#34;Axing an model_fit.&#34;,&#34;Axing a model_stack.&#34;,&#34;Axing a nnet.&#34;,&#34;Axing an ranger.&#34;,&#34;Axing a train object.&#34;,&#34;Axing a train.recipe object.&#34;,&#34;Butcher methods for a workflow&#34;,&#34;Axing a xgb.Booster.&#34;,&#34;Axing a model_stack.&#34;,&#34;Axing a C5.0.&#34;,&#34;Axing a classbagg object.&#34;,&#34;Axing an earth object.&#34;,&#34;Axing an elnet.&#34;,&#34;Axing an flexsurvreg.&#34;,&#34;Axing formulas.&#34;,&#34;Axing functions.&#34;,&#34;Axing a gausspr.&#34;,&#34;Axing a glmnet.&#34;,&#34;Axing an kknn.&#34;,&#34;Axing a ksvm object.&#34;,&#34;Axing an lm.&#34;,&#34;Axing a mda.&#34;,&#34;Axing an model_fit.&#34;,&#34;Axing an multnet.&#34;,&#34;Axing a nnet.&#34;,&#34;Axing an randomForest.&#34;,&#34;Axing an ranger.&#34;,&#34;Axing a recipe object.&#34;,&#34;Axing a rpart.&#34;,&#34;Axing a sclass object.&#34;,&#34;Axing a spark object.&#34;,&#34;Axing an survreg.&#34;,&#34;Axing an survreg.penal&#34;,&#34;Axing for terms inputs.&#34;,&#34;Axing a train object.&#34;,&#34;Axing a train.recipe object.&#34;,&#34;Axing a xgb.Booster.&#34;,&#34;Ensembles of MARS models&#34;,&#34;Ensembles of decision trees&#34;,&#34;Bagging functions&#34;,&#34;Bagging functions&#34;,&#34;Bagging functions&#34;,&#34;Bagging functions&#34;,&#34;Bagging functions&#34;,&#34;Bagging functions&#34;,&#34;Apply a trained preprocessing recipe&#34;,&#34;Apply a trained preprocessing recipe&#34;,&#34;Balanced accuracy&#34;,&#34;Balanced accuracy&#34;,&#34;Balanced accuracy&#34;,&#34;Bayesian additive regression trees (BART)&#34;,&#34;Developer functions for predictions via BART models&#34;,&#34;Parameters for BART models These parameters are used for constructing Bayesian adaptive regression tree\n(BART) models.&#34;,&#34;Developer functions for predictions via BART models&#34;,&#34;Neural network parameters&#34;,&#34;Tidy a(n) mle2 object&#34;,&#34;Tidy a(n) betareg object&#34;,&#34;Binary QSAR Data&#34;,&#34;Binary QSAR Data&#34;,&#34;Binary QSAR Data&#34;,&#34;Tidy a(n) binDesign object&#34;,&#34;Tidy a(n) binWidth object&#34;,&#34;Biomass data&#34;,&#34;Example bivariate classification data&#34;,&#34;Example bivariate classification data&#34;,&#34;Example bivariate classification data&#34;,&#34;Example bivariate classification data&#34;,&#34;Determine stacking coefficients from a data stack&#34;,&#34;Boosted trees&#34;,&#34;Tidy a(n) boot object&#34;,&#34;Set up bootstrap replicates of a dplyr operation&#34;,&#34;Bootstrap Sampling&#34;,&#34;Convert Statistical Objects into Tidy Tibbles&#34;,&#34;brulee: High-Level Modeling Functions with &#39;torch&#39;&#34;,&#34;Fit a linear regression model&#34;,&#34;Fit a linear regression model&#34;,&#34;Fit a linear regression model&#34;,&#34;Fit a linear regression model&#34;,&#34;Fit a linear regression model&#34;,&#34;Fit a linear regression model&#34;,&#34;Fit a logistic regression model&#34;,&#34;Fit a logistic regression model&#34;,&#34;Fit a logistic regression model&#34;,&#34;Fit a logistic regression model&#34;,&#34;Fit a logistic regression model&#34;,&#34;Fit a logistic regression model&#34;,&#34;Fit neural networks&#34;,&#34;Fit neural networks&#34;,&#34;Fit neural networks&#34;,&#34;Fit neural networks&#34;,&#34;Fit neural networks&#34;,&#34;Fit neural networks&#34;,&#34;Fit a multinomial regression model&#34;,&#34;Fit a multinomial regression model&#34;,&#34;Fit a multinomial regression model&#34;,&#34;Fit a multinomial regression model&#34;,&#34;Fit a multinomial regression model&#34;,&#34;Fit a multinomial regression model&#34;,&#34;Plot model loss over epochs&#34;,&#34;Extract Model Coefficients&#34;,&#34;borderline-SMOTE Algorithm&#34;,&#34;Tidy a(n) btergm object&#34;,&#34;Creates an R expression for a linear predictor from a data frame of terms and coefficients&#34;,&#34;Creates an R expression for a linear predictor from a data frame of terms and coefficients&#34;,&#34;Creates an R expression for a linear predictor from a data frame of terms and coefficients&#34;,&#34;Creates an R expression for a linear predictor from a data frame of terms and coefficients&#34;,&#34;Butcher an object.&#34;,&#34;Get path to model object example.&#34;,&#34;C5.0 rule-based classification models&#34;,&#34;Boosted trees via C5.0&#34;,&#34;Calculate summary statistics&#34;,&#34;Kelly Blue Book resale data for 2005 model year GM cars&#34;,&#34;Tidy a(n) confusionMatrix object&#34;,&#34;Convert Resampling Objects to Other Formats&#34;,&#34;Resampled bagged tree results&#34;,&#34;Concordance correlation coefficient&#34;,&#34;Concordance correlation coefficient&#34;,&#34;Concordance correlation coefficient&#34;,&#34;Tidy a(n) cch object&#34;,&#34;A CART classification tree tuned via racing&#34;,&#34;Cell body segmentation&#34;,&#34;Tidy a(n) lavaan object&#34;,&#34;&lt;code&gt;step&lt;\/code&gt; sets the class of the &lt;code&gt;step&lt;\/code&gt; and &lt;code&gt;check&lt;\/code&gt; is for checks.&#34;,&#34;Check Variable Class&#34;,&#34;Check if all Columns are Present&#34;,&#34;Ensure that &lt;code&gt;data&lt;\/code&gt; contains required column names&#34;,&#34;Check to ensure that ellipses are empty&#34;,&#34;Functions required for parsnip-adjacent packages&#34;,&#34;Get colors for tune text.&#34;,&#34;Get colors for tune text.&#34;,&#34;Check for Missing Values&#34;,&#34;Tools to Register Models&#34;,&#34;Tools to Register Models&#34;,&#34;check that newly created variable names don&#39;t overlap&#34;,&#34;Check for New Values&#34;,&#34;Ensure no duplicate terms appear in &lt;code&gt;formula&lt;\/code&gt;&#34;,&#34;Ensure that the outcome has binary factors&#34;,&#34;Ensure that the outcome has only factor columns&#34;,&#34;Ensure outcomes are all numeric&#34;,&#34;Ensure that the outcome is univariate&#34;,&#34;Ensure that predictions have the correct number of rows&#34;,&#34;Ensure predictors are all numeric&#34;,&#34;Check Range Consistency&#34;,&#34;Get colors for tune text.&#34;,&#34;Get colors for tune text.&#34;,&#34;Execution time data&#34;,&#34;Quantitatively check on variables&#34;,&#34;Get colors for tune text.&#34;,&#34;Example Data Sets&#34;,&#34;Example Data Sets&#34;,&#34;Chicago ridership data&#34;,&#34;Tidy chi-squared test statistic&#34;,&#34;Tidy chi-squared test&#34;,&#34;Synthetic Dataset With a Circle&#34;,&#34;Cost parameter for minority class&#34;,&#34;Example Objects&#34;,&#34;Create a class prediction object&#34;,&#34;Example Objects&#34;,&#34;Example Objects&#34;,&#34;Parameters for class weights for imbalanced problems&#34;,&#34;Costs function for poor classification&#34;,&#34;Costs function for poor classification&#34;,&#34;Costs function for poor classification&#34;,&#34;Tidy a(n) cmprsk object&#34;,&#34;Extract Model Coefficients&#34;,&#34;Extract Model Coefficients&#34;,&#34;Extract Model Coefficients&#34;,&#34;Extract Model Coefficients&#34;,&#34;Tidy a(n) coeftest object&#34;,&#34;Obtain and format results produced by tuning functions&#34;,&#34;Obtain and format results produced by tuning functions&#34;,&#34;Obtain and format results produced by tuning functions&#34;,&#34;Obtain and format results produced by tuning functions for workflow sets&#34;,&#34;Obtain and format results produced by tuning functions&#34;,&#34;Obtain and format results produced by tuning functions&#34;,&#34;Collect candidate parameters and stacking coefficients&#34;,&#34;Collect candidate parameters and stacking coefficients&#34;,&#34;Collect candidate parameters and stacking coefficients&#34;,&#34;Collect candidate parameters and stacking coefficients&#34;,&#34;Obtain and format results produced by tuning functions&#34;,&#34;Obtain and format results produced by tuning functions&#34;,&#34;Obtain and format results produced by tuning functions&#34;,&#34;Obtain and format results produced by tuning functions for workflow sets&#34;,&#34;Apply a function to all pairs of columns in a data frame&#34;,&#34;Add annotations and comments for workflows&#34;,&#34;Add annotations and comments for workflows&#34;,&#34;Add annotations and comments for workflows&#34;,&#34;Add annotations and comments for workflows&#34;,&#34;Parameter functions for Cubist models&#34;,&#34;Determine the Assessment Samples&#34;,&#34;Determine the Assessment Samples&#34;,&#34;Determine the Assessment Samples&#34;,&#34;Determine the Assessment Samples&#34;,&#34;Determine the Assessment Samples&#34;,&#34;Determine the Assessment Samples&#34;,&#34;Determine the Assessment Samples&#34;,&#34;Compressive strength of concrete mixtures&#34;,&#34;Parameters for possible engine parameters for party models&#34;,&#34;Parameters for possible engine parameters for party models&#34;,&#34;Parameters for possible engine parameters for party models&#34;,&#34;Acquisition function for scoring parameter combinations&#34;,&#34;Deprecated functions and objects&#34;,&#34;Confusion Matrix for Categorical Data&#34;,&#34;Compute average confusion matrix across resamples&#34;,&#34;Confusion Matrix for Categorical Data&#34;,&#34;Confusion Matrix for Categorical Data&#34;,&#34;Confusion Matrix for Categorical Data&#34;,&#34;Parameters for possible engine parameters for C5.0&#34;,&#34;(Deprecated) Calculate confidence interval as a tidy data frame&#34;,&#34;Tidy a(n) confusionMatrix object&#34;,&#34;Contrast function for one-hot encodings&#34;,&#34;Contrast function for one-hot encodings&#34;,&#34;Controlling the bagging process&#34;,&#34;Control aspects of the Bayesian search process&#34;,&#34;Control aspects of the grid search process&#34;,&#34;Control the fit function&#34;,&#34;Control aspects of the grid search racing process&#34;,&#34;Control aspects of the grid search process&#34;,&#34;Control aspects of the simulated annealing search process&#34;,&#34;Control wrappers&#34;,&#34;Control wrappers&#34;,&#34;Control wrappers&#34;,&#34;Control object for a workflow&#34;,&#34;Convenience function for intervals&#34;,&#34;Use same scale for plots of observed vs predicted values&#34;,&#34;Correlation Data Frame&#34;,&#34;corrr: Correlations in R&#34;,&#34;Support vector machine parameters&#34;,&#34;Parameter functions related to tree- and rule-based models.&#34;,&#34;Raw cover type data&#34;,&#34;Tidy a(n) coxph object&#34;,&#34;Create a modeling package&#34;,&#34;Credit data&#34;,&#34;Rates of Cricket Chirps&#34;,&#34;Comparing Cubist and RuleFit&#34;,&#34;Cubist rule-based regression models&#34;,&#34;Role Selection&#34;,&#34;Tidiers for data.frame objects&#34;,&#34;Visualize a KMeans Cluster with lots of data&#34;,&#34;Developer functions for predictions via BART models&#34;,&#34;Decision trees&#34;,&#34;Augment data with information from a(n) decomposed.ts object&#34;,&#34;Default formula blueprint&#34;,&#34;Default recipe blueprint&#34;,&#34;Default XY blueprint&#34;,&#34;Degrees of freedom (integer)&#34;,&#34;Parameters for exponents&#34;,&#34;Parameters for exponents&#34;,&#34;Delete the response from a terms object&#34;,&#34;Ratio Variable Creation&#34;,&#34;Deprecated functions and objects&#34;,&#34;Data Set Characteristics Available when Fitting Models&#34;,&#34;Bagged MARS via earth&#34;,&#34;Bagged trees via C5.0&#34;,&#34;Bagged trees via rpart&#34;,&#34;Bayesian additive regression trees via dbarts&#34;,&#34;Boosted trees via C5.0&#34;,&#34;Boosted trees&#34;,&#34;Boosted trees via Spark&#34;,&#34;Boosted trees via xgboost&#34;,&#34;C5.0 rule-based classification models&#34;,&#34;Cubist rule-based regression models&#34;,&#34;Decision trees via C5.0&#34;,&#34;Decision trees via party&#34;,&#34;Decision trees via CART&#34;,&#34;Decision trees via Spark&#34;,&#34;Flexible discriminant analysis via earth&#34;,&#34;Linear discriminant analysis via MASS&#34;,&#34;Linear discriminant analysis via flexible discriminant analysis&#34;,&#34;Linear discriminant analysis via James-Stein-type shrinkage estimation&#34;,&#34;Linear discriminant analysis via regularization&#34;,&#34;Quadratic discriminant analysis via MASS&#34;,&#34;Quadratic discriminant analysis via regularization&#34;,&#34;Regularized discriminant analysis via klaR&#34;,&#34;Generalized additive models via mgcv&#34;,&#34;Linear regression via brulee&#34;,&#34;Linear regression via generalized estimating equations (GEE)&#34;,&#34;Linear regression via glm&#34;,&#34;Linear regression via glmnet&#34;,&#34;Linear regression via generalized least squares&#34;,&#34;Linear regression via keras/tensorflow&#34;,&#34;Linear regression via lm&#34;,&#34;Linear regression via mixed models&#34;,&#34;Linear regression via mixed models&#34;,&#34;Linear regression via spark&#34;,&#34;Linear regression via Bayesian Methods&#34;,&#34;Linear regression via hierarchical Bayesian methods&#34;,&#34;Logistic regression via brulee&#34;,&#34;Logistic regression via generalized estimating equations (GEE)&#34;,&#34;Logistic regression via glm&#34;,&#34;Logistic regression via mixed models&#34;,&#34;Logistic regression via glmnet&#34;,&#34;Logistic regression via keras&#34;,&#34;Logistic regression via LiblineaR&#34;,&#34;Logistic regression via spark&#34;,&#34;Logistic regression via stan&#34;,&#34;Logistic regression via hierarchical Bayesian methods&#34;,&#34;Multivariate adaptive regression splines (MARS) via earth&#34;,&#34;Multilayer perceptron via brulee&#34;,&#34;Multilayer perceptron via keras&#34;,&#34;Multilayer perceptron via nnet&#34;,&#34;Multinomial regression via brulee&#34;,&#34;Multinomial regression via glmnet&#34;,&#34;Multinomial regression via keras&#34;,&#34;Multinomial regression via nnet&#34;,&#34;Multinomial regression via spark&#34;,&#34;Naive Bayes models via klaR&#34;,&#34;Naive Bayes models via naivebayes&#34;,&#34;K-nearest neighbors via kknn&#34;,&#34;Partial least squares via mixOmics&#34;,&#34;Poisson regression via generalized estimating equations (GEE)&#34;,&#34;Poisson regression via glm&#34;,&#34;Poisson regression via mixed models&#34;,&#34;Poisson regression via glmnet&#34;,&#34;Poisson regression via pscl&#34;,&#34;Poisson regression via stan&#34;,&#34;Poisson regression via hierarchical Bayesian methods&#34;,&#34;Poisson regression via pscl&#34;,&#34;Proportional hazards regression&#34;,&#34;Proportional hazards regression&#34;,&#34;Random forests via party&#34;,&#34;Random forests via randomForest&#34;,&#34;Random forests via ranger&#34;,&#34;Random forests via spark&#34;,&#34;RuleFit models via xrf&#34;,&#34;Parametric survival regression&#34;,&#34;Parametric survival regression&#34;,&#34;Parametric survival regression&#34;,&#34;Parametric survival regression&#34;,&#34;Linear support vector machines (SVMs) via kernlab&#34;,&#34;Linear support vector machines (SVMs) via LiblineaR&#34;,&#34;Polynomial support vector machines (SVMs) via kernlab&#34;,&#34;Radial basis function support vector machines (SVMs) via kernlab&#34;,&#34;Detect if a particular step or check is used in a recipe&#34;,&#34;Detection prevalence&#34;,&#34;Detection prevalence&#34;,&#34;Detection prevalence&#34;,&#34;Developer helpers&#34;,&#34;Parameters for possible engine parameters for sda models&#34;,&#34;dials: Tools for working with tuning parameters&#34;,&#34;Returns a correlation table with the selected fields only&#34;,&#34;Weight of evidence dictionary&#34;,&#34;Discretize Numeric Variables&#34;,&#34;Discretize Numeric Variables&#34;,&#34;Discretize Numeric Variables&#34;,&#34;parsnip methods for discriminant analysis&#34;,&#34;Flexible discriminant analysis&#34;,&#34;Linear discriminant analysis&#34;,&#34;Quadratic discriminant analysis&#34;,&#34;Regularized discriminant analysis&#34;,&#34;Gets the config and translate to a sentence with the parameter values&#34;,&#34;Minkowski distance parameter&#34;,&#34;Tools for documenting engines&#34;,&#34;Developer helpers&#34;,&#34;Tidy a(n) drc object&#34;,&#34;Sample time series data&#34;,&#34;Sample Time Series Data&#34;,&#34;Neural network parameters&#34;,&#34;Naming Tools&#34;,&#34;Naming Tools&#34;,&#34;Tidy/glance a(n) durbinWatsonTest object&#34;,&#34;embed: Extra Recipes for Encoding Predictors&#34;,&#34;Encoding Factors into Multiple Columns&#34;,&#34;Tidy a(n) lsmobj object&#34;,&#34;Sample sentences with emojis&#34;,&#34;Get colors for tune text.&#34;,&#34;Get colors for tune text.&#34;,&#34;Class for converting parameter values back and forth to the unit range&#34;,&#34;Tidy a(n) epi.2by2 object&#34;,&#34;Neural network parameters&#34;,&#34;Tidy a(n) ergm object&#34;,&#34;Get colors for tune text.&#34;,&#34;Evaluate parsnip model arguments&#34;,&#34;Example Analysis of Ames Housing Data&#34;,&#34;Example Objects&#34;,&#34;Example data for hardhat&#34;,&#34;Example data for hardhat&#34;,&#34;Acquisition function for scoring parameter combinations&#34;,&#34;Explore model results&#34;,&#34;Explore model results&#34;,&#34;Exponential decay function&#34;,&#34;Generics for object extraction&#34;,&#34;Extract elements of a parsnip model object&#34;,&#34;Extract elements of &lt;code&gt;tune&lt;\/code&gt; objects&#34;,&#34;Extract elements of a workflow&#34;,&#34;Extract elements of workflow sets&#34;,&#34;Generics for object extraction&#34;,&#34;Extract elements of &lt;code&gt;tune&lt;\/code&gt; objects&#34;,&#34;Extract elements of a workflow&#34;,&#34;Extract elements of workflow sets&#34;,&#34;Convenience functions to extract model&#34;,&#34;Generics for object extraction&#34;,&#34;Extract elements of &lt;code&gt;tune&lt;\/code&gt; objects&#34;,&#34;Extract elements of a workflow&#34;,&#34;Extract elements of workflow sets&#34;,&#34;Generics for object extraction&#34;,&#34;Extract elements of a parsnip model object&#34;,&#34;Extract elements of a workflow&#34;,&#34;Generics for object extraction&#34;,&#34;Extract elements of a parsnip model object&#34;,&#34;Extract elements of a workflow&#34;,&#34;Generics for object extraction&#34;,&#34;Extract elements of &lt;code&gt;tune&lt;\/code&gt; objects&#34;,&#34;Extract elements of a workflow&#34;,&#34;Extract elements of workflow sets&#34;,&#34;Extract a prototype&#34;,&#34;Generics for object extraction&#34;,&#34;Extract elements of &lt;code&gt;tune&lt;\/code&gt; objects&#34;,&#34;Extract elements of a workflow&#34;,&#34;Extract elements of workflow sets&#34;,&#34;Generics for object extraction&#34;,&#34;Extract elements of a parsnip model object&#34;,&#34;Extract elements of &lt;code&gt;tune&lt;\/code&gt; objects&#34;,&#34;Extract elements of a workflow&#34;,&#34;Extract elements of workflow sets&#34;,&#34;Generics for object extraction&#34;,&#34;Extract elements of workflow sets&#34;,&#34;Extract elements of &lt;code&gt;tune&lt;\/code&gt; objects&#34;,&#34;Extract elements of &lt;code&gt;tune&lt;\/code&gt; objects&#34;,&#34;Extract elements of workflow sets&#34;,&#34;Extract elements of a parsnip model object&#34;,&#34;Extract elements of &lt;code&gt;tune&lt;\/code&gt; objects&#34;,&#34;Extract elements of a workflow&#34;,&#34;Parameters for possible engine parameters for Cubist&#34;,&#34;F Measure&#34;,&#34;F Measure&#34;,&#34;F Measure&#34;,&#34;Tidy a(n) factanal object&#34;,&#34;Fashion a correlation data frame for printing.&#34;,&#34;Tidy a(n) felm object&#34;,&#34;Remove some tuning parameter results&#34;,&#34;Functions to finalize data-specific parameter ranges&#34;,&#34;Developer helpers&#34;,&#34;Developer helpers&#34;,&#34;Splice final parameters into objects&#34;,&#34;Splice final parameters into objects&#34;,&#34;Splice final parameters into objects&#34;,&#34;Functions to finalize data-specific parameter ranges&#34;,&#34;Functions to finalize data-specific parameter ranges&#34;,&#34;Functions to finalize data-specific parameter ranges&#34;,&#34;Functions to finalize data-specific parameter ranges&#34;,&#34;Functions to finalize data-specific parameter ranges&#34;,&#34;Tools for documenting engines&#34;,&#34;finetune: Additional Functions for Model Tuning&#34;,&#34;(Deprecated) Add logLik, AIC, BIC, and other common measurements to a glance of a prediction&#34;,&#34;Returns the name of predictions column for the first level variable&#34;,&#34;Add a first column to a data.frame&#34;,&#34;Returns the first level of a classification model&#34;,&#34;Control the fit function&#34;,&#34;Determine the minimum set of model fits&#34;,&#34;Fit model stack members with non-zero stacking coefficients&#34;,&#34;Wrapper for sparsediscrim models&#34;,&#34;Wrapper for sparsediscrim models&#34;,&#34;Fit multiple models via resampling&#34;,&#34;Fit multiple models via resampling&#34;,&#34;Fit multiple models via resampling&#34;,&#34;Fit a Model Specification to a Dataset&#34;,&#34;Fit a workflow object&#34;,&#34;Fit linear models to infer objects&#34;,&#34;Fit a Model Specification to a Dataset&#34;,&#34;Fit a workflow object&#34;,&#34;Tidy a(n) fitdistr object&#34;,&#34;Ensure an object is a data frame, with rownames moved into a column&#34;,&#34;Helper Functions for Profile Data Sets&#34;,&#34;Helper Functions for Profile Data Sets&#34;,&#34;Helper Functions for Profile Data Sets&#34;,&#34;Helper Functions for Profile Data Sets&#34;,&#34;Helper Functions for Profile Data Sets&#34;,&#34;Helper Functions for Profile Data Sets&#34;,&#34;Helper Functions for Profile Data Sets&#34;,&#34;Focus on section of a correlation data frame.&#34;,&#34;Focus on section of a correlation data frame.&#34;,&#34;Conditionally focus correlation data frame&#34;,&#34;Forge prediction-ready data&#34;,&#34;Extract Predictor Names from Formula or Terms&#34;,&#34;Helpers for printing step functions&#34;,&#34;Returns the hover columns to be displayed in interactive plots&#34;,&#34;Helpers for printing step functions&#34;,&#34;Create a Formula from a Prepared Recipe&#34;,&#34;Parameter objects for Regularized Discriminant Models&#34;,&#34;Parameter objects for Regularized Discriminant Models&#34;,&#34;Near-zero variance parameters&#34;,&#34;Check to see if a recipe is trained/prepared&#34;,&#34;Parameters for possible engine parameters for C5.0&#34;,&#34;Gain capture&#34;,&#34;Gain capture&#34;,&#34;Gain capture&#34;,&#34;Gain curve&#34;,&#34;Gain curve&#34;,&#34;Tidy a(n) gam object&#34;,&#34;Tidy a(n) Gam object&#34;,&#34;Tidy a(n) garch object&#34;,&#34;Gather an &lt;code&gt;rset&lt;\/code&gt; Object&#34;,&#34;GEE fitting function&#34;,&#34;Tidy a(n) geeglm object&#34;,&#34;Tidy a(n) geeglm object&#34;,&#34;Generalized additive models (GAMs)&#34;,&#34;Generate resamples, permutations, or simulations&#34;,&#34;Functions to finalize data-specific parameter ranges&#34;,&#34;Compute confidence interval&#34;,&#34;Compute confidence interval&#34;,&#34;Extract data classes from a data frame or matrix&#34;,&#34;Tools to Register Models&#34;,&#34;Tools to Register Models&#34;,&#34;Obtain prediction equations for all possible values of type&#34;,&#34;Obtain prediction equations for all possible values of type&#34;,&#34;Obtain prediction equations for all possible values of type&#34;,&#34;Obtain prediction equations for all possible values of type&#34;,&#34;Tools to Register Models&#34;,&#34;Working with the parsnip model environment&#34;,&#34;Get the &lt;code&gt;keep_original_cols&lt;\/code&gt; value of a recipe step&#34;,&#34;Extract factor levels from a data frame&#34;,&#34;Functions to finalize data-specific parameter ranges&#34;,&#34;Working with the parsnip model environment&#34;,&#34;Functions to finalize data-specific parameter ranges&#34;,&#34;Functions to finalize data-specific parameter ranges&#34;,&#34;Functions to finalize data-specific parameter ranges&#34;,&#34;Extract factor levels from a data frame&#34;,&#34;Functions to finalize data-specific parameter ranges&#34;,&#34;Compute p-value&#34;,&#34;Compute p-value&#34;,&#34;Compute p-value&#34;,&#34;Tools to Register Models&#34;,&#34;Compute p-value&#34;,&#34;Functions to finalize data-specific parameter ranges&#34;,&#34;Get colors for tune text.&#34;,&#34;Developer helpers&#34;,&#34;Tidy a(n) optim object masquerading as list&#34;,&#34;Glance at a(n) aareg object&#34;,&#34;Glance at a(n) lm object&#34;,&#34;Glance at a(n) Arima object&#34;,&#34;Glance at a(n) betamfx object&#34;,&#34;Glance at a(n) betareg object&#34;,&#34;Glance at a(n) biglm object&#34;,&#34;Glance at a(n) binDesign object&#34;,&#34;Glance at a(n) cch object&#34;,&#34;Glance at a(n) clm object&#34;,&#34;Glance at a(n) clmm object&#34;,&#34;Glance at a(n) coeftest object&#34;,&#34;Glance at a(n) coxph object&#34;,&#34;Glance at a(n) crr object&#34;,&#34;Glance at a(n) cv.glmnet object&#34;,&#34;Tidiers for data.frame objects&#34;,&#34;Glance at a(n) drc object&#34;,&#34;Tidy/glance a(n) durbinWatsonTest object&#34;,&#34;Glance at a(n) ergm object&#34;,&#34;Glance at a(n) factanal object&#34;,&#34;Glance at a(n) felm object&#34;,&#34;Glance at a(n) fitdistr object&#34;,&#34;Glance at a(n) fixest object&#34;,&#34;Glance at a(n) gam object&#34;,&#34;Glance at a(n) Gam object&#34;,&#34;Tidy a(n) garch object&#34;,&#34;Glance at a(n) geeglm object&#34;,&#34;Glance at a(n) glm object&#34;,&#34;Glance at a(n) glmnet object&#34;,&#34;Glance at a(n) glmRob object&#34;,&#34;Glance at a(n) gmm object&#34;,&#34;Tidy/glance a(n) htest object&#34;,&#34;Glance at a(n) ivreg object&#34;,&#34;Glance at a(n) kmeans object&#34;,&#34;Glance at a(n) lavaan object&#34;,&#34;Tidying methods for lists / returned values that are not S3 objects&#34;,&#34;Glance at a(n) lm object&#34;,&#34;Glance at a(n) lmodel2 object&#34;,&#34;Glance at a(n) lmrob object&#34;,&#34;Glance at a(n) lmRob object&#34;,&#34;Glance at a(n) mfx object&#34;,&#34;Glance at a(n) margins object&#34;,&#34;Glance at a(n) Mclust object&#34;,&#34;Glance at a(n) mfx object&#34;,&#34;Glance at a(n) mjoint object&#34;,&#34;Glance at a(n) mlogit object&#34;,&#34;Construct a single row summary \&#34;glance\&#34; of a model, fit, or other object&#34;,&#34;Glance at a(n) muhaz object&#34;,&#34;Glance at a(n) multinom object&#34;,&#34;Glance at a(n) negbin object&#34;,&#34;Glance at a(n) mfx object&#34;,&#34;Glance at a(n) nlrq object&#34;,&#34;Glance at a(n) nls object&#34;,&#34;Tidiers for NULL inputs&#34;,&#34;Tidy a(n) optim object masquerading as list&#34;,&#34;Glance at a(n) orcutt object&#34;,&#34;Glance at a(n) pam object&#34;,&#34;Glance at a(n) plm object&#34;,&#34;Glance at a(n) mfx object&#34;,&#34;Glance at a(n) poLCA object&#34;,&#34;Glance at a(n) polr object&#34;,&#34;Glance at a(n) mfx object&#34;,&#34;Glance at a(n) pyears object&#34;,&#34;Glance at a(n) ridgelm object&#34;,&#34;Glance at a(n) rlm object&#34;,&#34;Glance at a(n) rma object&#34;,&#34;Glance at a(n) rq object&#34;,&#34;Glance at a(n) spatialreg object&#34;,&#34;Tidy a(n) smooth.spine object&#34;,&#34;Glance at a(n) speedglm object&#34;,&#34;Glance at a(n) speedlm object&#34;,&#34;Glance at a(n) summary.lm object&#34;,&#34;(Deprecated) Tidy summaryDefault objects&#34;,&#34;Glance at a(n) survdiff object&#34;,&#34;Glance at a(n) survexp object&#34;,&#34;Glance at a(n) survfit object&#34;,&#34;Glance at a(n) survreg object&#34;,&#34;Glance at a(n) svyglm object&#34;,&#34;Glance at a(n) svyolr object&#34;,&#34;Glance at a(n) varest object&#34;,&#34;Glance at a workflow model&#34;,&#34;Glance at a(n) negbin object&#34;,&#34;Tidy a(n) glmnet object&#34;,&#34;Technical aspects of the glmnet model&#34;,&#34;Tidy a(n) gmm object&#34;,&#34;Grant acceptance data&#34;,&#34;Grant acceptance data&#34;,&#34;Grant acceptance data&#34;,&#34;Grant acceptance data&#34;,&#34;Space-filling parameter grids&#34;,&#34;Space-filling parameter grids&#34;,&#34;Space-filling parameter grids&#34;,&#34;Space-filling parameter grids&#34;,&#34;Space-filling parameter grids&#34;,&#34;Space-filling parameter grids&#34;,&#34;Space-filling parameter grids&#34;,&#34;Space-filling parameter grids&#34;,&#34;Space-filling parameter grids&#34;,&#34;Space-filling parameter grids&#34;,&#34;Create grids of tuning parameters&#34;,&#34;Create grids of tuning parameters&#34;,&#34;Create grids of tuning parameters&#34;,&#34;Create grids of tuning parameters&#34;,&#34;Create grids of tuning parameters&#34;,&#34;Create grids of tuning parameters&#34;,&#34;Create grids of tuning parameters&#34;,&#34;Create grids of tuning parameters&#34;,&#34;Create grids of tuning parameters&#34;,&#34;Create grids of tuning parameters&#34;,&#34;Group V-Fold Cross-Validation&#34;,&#34;Subset of data from the General Social Survey (GSS).&#34;,&#34;hardhat: Construct Modeling Packages&#34;,&#34;Example data for hardhat&#34;,&#34;Generics for object extraction&#34;,&#34;Tools for models that predict on sub-models&#34;,&#34;Tools for models that predict on sub-models&#34;,&#34;Tools for models that predict on sub-models&#34;,&#34;Tools for models that predict on sub-models&#34;,&#34;Role Selection&#34;,&#34;Role Selection&#34;,&#34;Placeholder for unknown parameter values&#34;,&#34;Neural network parameters&#34;,&#34;Tidy a(n) rcorr object&#34;,&#34;Class probability predictions&#34;,&#34;Multiclass Probability Predictions&#34;,&#34;High-performance computing system data&#34;,&#34;Tidy/glance a(n) htest object&#34;,&#34;Huber loss&#34;,&#34;Psuedo-Huber Loss&#34;,&#34;Psuedo-Huber Loss&#34;,&#34;Psuedo-Huber Loss&#34;,&#34;Huber loss&#34;,&#34;Huber loss&#34;,&#34;Declare a null hypothesis&#34;,&#34;Declare a null hypothesis&#34;,&#34;Index of ideality of correlation&#34;,&#34;Index of ideality of correlation&#34;,&#34;Index of ideality of correlation&#34;,&#34;Impute via bagged trees&#34;,&#34;infer: a grammar for statistical inference&#34;,&#34;Simple Training/Test Set Splitting&#34;,&#34;Simple Training/Test Set Splitting&#34;,&#34;Bootstrap confidence intervals&#34;,&#34;Bootstrap confidence intervals&#34;,&#34;Bootstrap confidence intervals&#34;,&#34;Tidy a(n) irlba object masquerading as list&#34;,&#34;Is &lt;code&gt;x&lt;\/code&gt; a preprocessing blueprint?&#34;,&#34;Test if an object inherits from &lt;code&gt;class_pred&lt;\/code&gt;&#34;,&#34;Locate equivocal values&#34;,&#34;Get colors for tune text.&#34;,&#34;Get colors for tune text.&#34;,&#34;Test to see if tensorflow is available&#34;,&#34;Determine if a workflow has been trained&#34;,&#34;Placeholder for unknown parameter values&#34;,&#34;Functions required for parsnip-adjacent packages&#34;,&#34;Get colors for tune text.&#34;,&#34;Tidy a(n) ivreg object&#34;,&#34;J-index&#34;,&#34;J-index&#34;,&#34;J-index&#34;,&#34;Tidy a(n) mjoint object&#34;,&#34;Extract transformed training set&#34;,&#34;Kappa&#34;,&#34;Kappa&#34;,&#34;Kappa&#34;,&#34;Tidy a(n) kappa object&#34;,&#34;Tidy a(n) kde object&#34;,&#34;Tidy a(n) Kendall object&#34;,&#34;Tidy a(n) Kendall object&#34;,&#34;Simple interface to MLP models via keras&#34;,&#34;Wrapper for keras class predictions&#34;,&#34;Kernel parameters&#34;,&#34;Tidy a(n) kmeans object&#34;,&#34;Knit engine-specific documentation&#34;,&#34;Knit print method for test predictions results&#34;,&#34;Tidy a(n) kde object&#34;,&#34;Find Labels from rset Object&#34;,&#34;Find Labels from rsplit Object&#34;,&#34;Find Labels from rset Object&#34;,&#34;Laplace correction parameter&#34;,&#34;Fit the final best model to the training set and evaluate the test set&#34;,&#34;Fit the final best model to the training set and evaluate the test set&#34;,&#34;Fit the final best model to the training set and evaluate the test set&#34;,&#34;Tidy a(n) lavaan object&#34;,&#34;Tidy a(n) regsubsets object&#34;,&#34;Learning rate&#34;,&#34;Create formulas without each predictor&#34;,&#34;Loan data&#34;,&#34;Extract &lt;code&gt;class_pred&lt;\/code&gt; levels&#34;,&#34;Tidy/glance a(n) leveneTest object&#34;,&#34;Tidy a(n) felm object&#34;,&#34;Lift curve&#34;,&#34;Lift curve&#34;,&#34;Linear regression&#34;,&#34;Fits a Linear Regression model&#34;,&#34;Locate and show errors/warnings in engine-specific documentation&#34;,&#34;Tidying methods for lists / returned values that are not S3 objects&#34;,&#34;Tidy a(n) lm object&#34;,&#34;Tidy a(n) lmodel2 object&#34;,&#34;Tidy a(n) coeftest object&#34;,&#34;Quietly load package namespace&#34;,&#34;Locate part of an object.&#34;,&#34;Locate equivocal values&#34;,&#34;Tidy a(n) loess object&#34;,&#34;Example Objects&#34;,&#34;Example Objects&#34;,&#34;Logistic regression&#34;,&#34;Simulated longitudinal Poisson counts&#34;,&#34;Leave-One-Out Cross-Validation&#34;,&#34;Parameter functions related to tree- and rule-based models.&#34;,&#34;Parameters for possible engine parameters for ranger&#34;,&#34;Mean absolute error&#34;,&#34;Mean absolute error&#34;,&#34;Mean absolute error&#34;,&#34;Make a parsnip call expression&#34;,&#34;Create a &lt;code&gt;class_pred&lt;\/code&gt; vector from class probabilities&#34;,&#34;Prepend a new class&#34;,&#34;Tools for documenting engines&#34;,&#34;Tools for documenting engines&#34;,&#34;Constructors for split objects&#34;,&#34;Constructors for split objects&#34;,&#34;Constructors for split objects&#34;,&#34;Constructors for split objects&#34;,&#34;Create or Modify Stratification Variables&#34;,&#34;Create a &lt;code&gt;class_pred&lt;\/code&gt; vector from class probabilities&#34;,&#34;Manual resampling&#34;,&#34;Mean absolute percent error&#34;,&#34;Mean absolute percent error&#34;,&#34;Mean absolute percent error&#34;,&#34;Tidy a(n) map object&#34;,&#34;Tidy a(n) margins object&#34;,&#34;Multivariate adaptive regression splines (MARS)&#34;,&#34;Mean absolute scaled error&#34;,&#34;Mean absolute scaled error&#34;,&#34;Mean absolute scaled error&#34;,&#34;Convert data to torch format&#34;,&#34;Parameters for possible engine parameters for randomForest&#34;,&#34;Parameters for possible engine parameters for earth models&#34;,&#34;Parameters for possible engine parameters for Cubist&#34;,&#34;Parameter functions for Cubist models&#34;,&#34;Word frequencies for removal&#34;,&#34;Maximum number of retained tokens&#34;,&#34;Fuzzy conversions&#34;,&#34;Fuzzy conversions&#34;,&#34;Monte Carlo Cross-Validation&#34;,&#34;Matthews correlation coefficient&#34;,&#34;Matthews correlation coefficient&#34;,&#34;Matthews correlation coefficient&#34;,&#34;Tidy a(n) Mclust object&#34;,&#34;Fat, water and protein content of meat samples&#34;,&#34;Tidy a(n) mediate object&#34;,&#34;Console Messages&#34;,&#34;Merge parameter grid values into objects&#34;,&#34;Merge parameter grid values into objects&#34;,&#34;Write a message that respects the line width&#34;,&#34;Combine metric functions&#34;,&#34;Developer function for summarizing new metrics&#34;,&#34;Tweak a metric function&#34;,&#34;Developer function for calling new metrics&#34;,&#34;General Function to Estimate Performance&#34;,&#34;Get colors for tune text.&#34;,&#34;General Function to Estimate Performance&#34;,&#34;Tidy a(n) gam object&#34;,&#34;Execution-time data dimension checks&#34;,&#34;Parameter for the effective minimum distance between embedded points&#34;,&#34;Determine the minimum set of model fits&#34;,&#34;Determine the minimum set of model fits&#34;,&#34;Determine the minimum set of model fits&#34;,&#34;Determine the minimum set of model fits&#34;,&#34;Determine the minimum set of model fits&#34;,&#34;Determine the minimum set of model fits&#34;,&#34;Determine the minimum set of model fits&#34;,&#34;Determine the minimum set of model fits&#34;,&#34;Determine the minimum set of model fits&#34;,&#34;Determine the minimum set of model fits&#34;,&#34;Determine the minimum set of model fits&#34;,&#34;Determine the minimum set of model fits&#34;,&#34;Parameter functions related to tree- and rule-based models.&#34;,&#34;Execution-time data dimension checks&#34;,&#34;Word frequencies for removal&#34;,&#34;Number of unique values for pre-processing&#34;,&#34;Mixture of penalization terms&#34;,&#34;Tidy a(n) mjoint object&#34;,&#34;Customer churn data&#34;,&#34;Tidy a(n) mle2 object&#34;,&#34;Tidying methods for logit models&#34;,&#34;Single layer neural network&#34;,&#34;Mean log loss for multinomial data&#34;,&#34;Mean log loss for multinomial data&#34;,&#34;Mean log loss for multinomial data&#34;,&#34;parsnip model specification database&#34;,&#34;Model Fit Object Information&#34;,&#34;Construct a model frame&#34;,&#34;Construct a design matrix&#34;,&#34;Extract a model offset&#34;,&#34;Print helper for model objects&#34;,&#34;Model Specification Information&#34;,&#34;modeldb: Fits Models Inside the Database&#34;,&#34;Mold data for modeling&#34;,&#34;Default XY blueprint&#34;,&#34;Default formula blueprint&#34;,&#34;Default XY blueprint&#34;,&#34;Default recipe blueprint&#34;,&#34;Gradient descent momentum parameter&#34;,&#34;Mean percentage error&#34;,&#34;Mean percentage error&#34;,&#34;Mean percentage error&#34;,&#34;Measurement systems analysis data&#34;,&#34;Mean signed deviation&#34;,&#34;Mean signed deviation&#34;,&#34;Mean signed deviation&#34;,&#34;Number of randomly sampled predictors&#34;,&#34;Number of randomly sampled predictors&#34;,&#34;Proportion of Randomly Selected Predictors&#34;,&#34;Tidy a(n) muhaz object&#34;,&#34;Tidy a(n) glht object&#34;,&#34;Model predictions across many sub-models&#34;,&#34;Tools for models that predict on sub-models&#34;,&#34;Tools for models that predict on sub-models&#34;,&#34;Tools for models that predict on sub-models&#34;,&#34;Tools for models that predict on sub-models&#34;,&#34;&lt;code&gt;multi_predict()&lt;\/code&gt; methods for rule-based models&#34;,&#34;Model predictions across many sub-models&#34;,&#34;&lt;code&gt;multi_predict()&lt;\/code&gt; methods for rule-based models&#34;,&#34;Model predictions across many sub-models&#34;,&#34;Model predictions across many sub-models&#34;,&#34;Model predictions across many sub-models&#34;,&#34;Model predictions across many sub-models&#34;,&#34;Model predictions across many sub-models&#34;,&#34;Model predictions across many sub-models&#34;,&#34;Model predictions across many sub-models&#34;,&#34;Model predictions across many sub-models&#34;,&#34;Model predictions across many sub-models&#34;,&#34;Model predictions across many sub-models&#34;,&#34;Model predictions across many sub-models&#34;,&#34;Model predictions across many sub-models&#34;,&#34;&lt;code&gt;multi_predict()&lt;\/code&gt; methods for rule-based models&#34;,&#34;Model predictions across many sub-models&#34;,&#34;parsnip methods for hierarchical models&#34;,&#34;Multinomial regression&#34;,&#34;Tidying methods for multinomial logistic regression models&#34;,&#34;Naive Bayes models&#34;,&#34;Naming Tools&#34;,&#34;K-nearest neighbors&#34;,&#34;Remove Points Near Other Classes&#34;,&#34;Number of neighbors&#34;,&#34;Nested or Double Resampling&#34;,&#34;Network plot of a correlation data frame&#34;,&#34;Create a new preprocessing blueprint&#34;,&#34;Construct a new metric function&#34;,&#34;Create a new default blueprint&#34;,&#34;Create a new default blueprint&#34;,&#34;Create a new default blueprint&#34;,&#34;Create a new preprocessing blueprint&#34;,&#34;Get colors for tune text.&#34;,&#34;Constructor for a base model&#34;,&#34;New axe functions for a modeling object.&#34;,&#34;Functions required for parsnip-adjacent packages&#34;,&#34;Construct a new metric function&#34;,&#34;Construct a new metric function&#34;,&#34;Tools for creating new parameter objects&#34;,&#34;Tools for creating new parameter objects&#34;,&#34;Create a new preprocessing blueprint&#34;,&#34;Constructor for new rset objects&#34;,&#34;Create a new preprocessing blueprint&#34;,&#34;Create a new preprocessing blueprint&#34;,&#34;Create a new default blueprint&#34;,&#34;Construct a new metric function&#34;,&#34;Tools for creating new parameter objects&#34;,&#34;Tidy a(n) nlrq object&#34;,&#34;Tidy a(n) nls object&#34;,&#34;Tidying methods for multinomial logistic regression models&#34;,&#34;Parameters for possible engine parameters for C5.0&#34;,&#34;Negative predictive value&#34;,&#34;Negative predictive value&#34;,&#34;Negative predictive value&#34;,&#34;Null model&#34;,&#34;Tidiers for NULL inputs&#34;,&#34;Functions required for parsnip-adjacent packages&#34;,&#34;Fit a simple, non-informative model&#34;,&#34;Fit a simple, non-informative model&#34;,&#34;Number of cut-points for binning&#34;,&#34;Number of new features&#34;,&#34;Text hashing parameters&#34;,&#34;Number of knots (integer)&#34;,&#34;Parameters for possible engine parameters for ranger&#34;,&#34;Number of new features&#34;,&#34;Parameter to determine number of tokens in ngram&#34;,&#34;Calculate observed statistics&#34;,&#34;Fatty acid composition of commercial oils&#34;,&#34;OkCupid data&#34;,&#34;OkCupid Binary Predictors&#34;,&#34;OkCupid Binary Predictors&#34;,&#34;OkCupid Binary Predictors&#34;,&#34;OkCupid data&#34;,&#34;Tidy a(n) optim object masquerading as list&#34;,&#34;Add and edit options saved in a workflow set&#34;,&#34;Add and edit options saved in a workflow set&#34;,&#34;Make a classed list of options&#34;,&#34;Add and edit options saved in a workflow set&#34;,&#34;Tidy a(n) orcutt object&#34;,&#34;Tidy a(n) clm object&#34;,&#34;Extract data from objects to use in a shiny app&#34;,&#34;Extract data from objects to use in a shiny app&#34;,&#34;Extract data from objects to use in a shiny app&#34;,&#34;Determine names of the outcome data in a workflow&#34;,&#34;Determine names of the outcome data in a workflow&#34;,&#34;Determine names of the outcome data in a workflow&#34;,&#34;Determine names of the outcome data in a workflow&#34;,&#34;Determine names of the outcome data in a workflow&#34;,&#34;Determine names of the outcome data in a workflow&#34;,&#34;Parameters for class-imbalance sampling&#34;,&#34;Deprecated functions and objects&#34;,&#34;Number of pairwise complete cases.&#34;,&#34;Tidy a(n) pam object&#34;,&#34;Parabolic class boundary data&#34;,&#34;Parabolic class boundary data&#34;,&#34;Information on tuning parameters within an object&#34;,&#34;Construct a new parameter set object&#34;,&#34;Information on tuning parameters within an object&#34;,&#34;Information on tuning parameters within an object&#34;,&#34;Determination of parameter sets for other objects&#34;,&#34;Information on tuning parameters within an object&#34;,&#34;Determination of parameter sets for other objects&#34;,&#34;Determination of parameter sets for other objects&#34;,&#34;Converts an R model object into a table.&#34;,&#34;parsnip&#34;,&#34;Start an RStudio Addin that can write model specifications&#34;,&#34;Updating a model specification&#34;,&#34;Liver pathology data&#34;,&#34;Liver Pathology Data&#34;,&#34;Parkinson&#39;s disease speech classification data set&#34;,&#34;Amount of regularization/penalization&#34;,&#34;Parameters for possible engine parameters for xgboost&#34;,&#34;Parameters for possible engine parameters for xgboost&#34;,&#34;Palmer Station penguin data&#34;,&#34;This function takes result of organize_data to calculate and reformat performance metrics for each candidate model.&#34;,&#34;Permutation sampling&#34;,&#34;Tidy a(n) plm object&#34;,&#34;Visualize a KMeans Cluster with lots of data&#34;,&#34;Visualizing the confusion matrix for a classification model&#34;,&#34;Visualizing predicted probability vs. true class for a multi-class classification model&#34;,&#34;Visualizing the PR curve for a classification model&#34;,&#34;Visualizing the predicted probabilities vs. a factor variable for a classification model&#34;,&#34;Visualizing the predicted probabilities vs. a numeric column for a classification model&#34;,&#34;Visualizing the ROC curve for a classification model&#34;,&#34;Visualizing observed vs. predicted values for a regression model&#34;,&#34;Visualizing residuals vs. a factor column for a regression model&#34;,&#34;Visualizing residuals vs. a numeric column for a regression model&#34;,&#34;Visualizing residuals vs. predicted values for a regression model&#34;,&#34;Plot racing results&#34;,&#34;Visualizing the confusion matrix for a classification model&#34;,&#34;Visualizing predicted probability vs. true class for a two-class classification model&#34;,&#34;Visualizing the PR curve for a classification model&#34;,&#34;Visualizing the predicted probabilities vs. a factor variable for a classification model&#34;,&#34;Visualizing the predicted probabilities vs. a numeric column for a classification model&#34;,&#34;Visualizing the ROC curve for a classification model&#34;,&#34;Partial least squares (PLS)&#34;,&#34;Wrapper for mixOmics pls functions&#34;,&#34;parsnip methods for partial least squares (PLS)&#34;,&#34;Mean log loss for Poisson data&#34;,&#34;Mean log loss for Poisson data&#34;,&#34;Mean log loss for Poisson data&#34;,&#34;Poisson regression models&#34;,&#34;parsnip methods for Poisson regression&#34;,&#34;Tidy a(n) poLCA object&#34;,&#34;Tidy a(n) polr object&#34;,&#34;Add Assessment Indices&#34;,&#34;Positive predictive value&#34;,&#34;Positive predictive value&#34;,&#34;Positive predictive value&#34;,&#34;Area under the precision recall curve&#34;,&#34;Area under the precision recall curve&#34;,&#34;Area under the precision recall curve&#34;,&#34;Precision recall curve&#34;,&#34;Precision recall curve&#34;,&#34;Tidy a(n) prcomp object&#34;,&#34;Precision&#34;,&#34;Precision&#34;,&#34;Precision&#34;,&#34;Tools to Register Models&#34;,&#34;Other predict methods.&#34;,&#34;Other predict methods.&#34;,&#34;Other predict methods.&#34;,&#34;Other predict methods.&#34;,&#34;Other predict methods.&#34;,&#34;Other predict methods.&#34;,&#34;Other predict methods.&#34;,&#34;Other predict methods.&#34;,&#34;Other predict methods.&#34;,&#34;Model predictions&#34;,&#34;Model predictions across many sub-models&#34;,&#34;Model predictions&#34;,&#34;Other predict methods.&#34;,&#34;Other predict methods.&#34;,&#34;Other predict methods.&#34;,&#34;Other predict methods.&#34;,&#34;Predict from a workflow&#34;,&#34;Predictions from a bagged model&#34;,&#34;Predict from a &lt;code&gt;brulee_linear_reg&lt;\/code&gt;&#34;,&#34;Predict from a &lt;code&gt;brulee_logistic_reg&lt;\/code&gt;&#34;,&#34;Predict from a &lt;code&gt;brulee_mlp&lt;\/code&gt;&#34;,&#34;Predict from a &lt;code&gt;brulee_multinomial_reg&lt;\/code&gt;&#34;,&#34;Predicting with a model stack&#34;,&#34;Discretize Numeric Variables&#34;,&#34;Model predictions&#34;,&#34;Predicting with a model stack&#34;,&#34;Fit a simple, non-informative model&#34;,&#34;Predict from a workflow&#34;,&#34;Convert one or more linear predictor to a format used for prediction&#34;,&#34;Convert one or more linear predictor to a format used for prediction&#34;,&#34;Convert one or more linear predictor to a format used for prediction&#34;,&#34;Convert one or more linear predictor to a format used for prediction&#34;,&#34;Proportion of predictors&#34;,&#34;Parameters for possible engine parameters for C5.0&#34;,&#34;Estimate a preprocessing recipe&#34;,&#34;Estimate a preprocessing recipe&#34;,&#34;Prepare data based on parsnip encoding information&#34;,&#34;Wrapper function for preparing recipes within resampling&#34;,&#34;Short Descriptions of rsets&#34;,&#34;Short Descriptions of rsets&#34;,&#34;Short Descriptions of rsets&#34;,&#34;Short Descriptions of rsets&#34;,&#34;Short Descriptions of rsets&#34;,&#34;Short Descriptions of rsets&#34;,&#34;Short Descriptions of rsets&#34;,&#34;Short Descriptions of rsets&#34;,&#34;Short Descriptions of rsets&#34;,&#34;Short Descriptions of rsets&#34;,&#34;Short Descriptions of rsets&#34;,&#34;Short Descriptions of rsets&#34;,&#34;Short Descriptions of spatial rsets&#34;,&#34;Short Descriptions of rsets&#34;,&#34;Short Descriptions of rsets&#34;,&#34;Print number of predictors and principal components used.&#34;,&#34;Print number of predictors and principal components used.&#34;,&#34;Print number of predictors and principal components used.&#34;,&#34;Print methods&#34;,&#34;Print methods&#34;,&#34;Print methods&#34;,&#34;Fit a simple, non-informative model&#34;,&#34;Print a Recipe&#34;,&#34;Returns the class, app type, y name, and the number of rows of an object of &lt;code&gt;shiny_data&lt;\/code&gt; class&#34;,&#34;print method for test predictions results&#34;,&#34;Bayesian PCA parameters&#34;,&#34;Parameters for BART models These parameters are used for constructing Bayesian adaptive regression tree\n(BART) models.&#34;,&#34;Bayesian PCA parameters&#34;,&#34;Parameters for BART models These parameters are used for constructing Bayesian adaptive regression tree\n(BART) models.&#34;,&#34;Parameters for BART models These parameters are used for constructing Bayesian adaptive regression tree\n(BART) models.&#34;,&#34;Acquisition function for scoring parameter combinations&#34;,&#34;probably: Tools for Post-Processing Class Probability Estimates&#34;,&#34;Parameters for exponents&#34;,&#34;Helper Functions for Profile Data Sets&#34;,&#34;Helper Functions for Profile Data Sets&#34;,&#34;Helper Functions for Profile Data Sets&#34;,&#34;Helper Functions for Profile Data Sets&#34;,&#34;Helper Functions for Profile Data Sets&#34;,&#34;Helper Functions for Profile Data Sets&#34;,&#34;Tidy proportion test&#34;,&#34;Proportional hazards regression&#34;,&#34;Parameter functions related to tree- and rule-based models.&#34;,&#34;MARS pruning methods&#34;,&#34;Tidy a(n) kappa object&#34;,&#34;Return a dials parameter object associated with parameters&#34;,&#34;Return a dials parameter object associated with parameters&#34;,&#34;Return a dials parameter object associated with parameters&#34;,&#34;Return a dials parameter object associated with parameters&#34;,&#34;Return a dials parameter object associated with parameters&#34;,&#34;Get colors for tune text.&#34;,&#34;Extract elements from a workflow set&#34;,&#34;Extract elements of a workflow&#34;,&#34;Extract elements of a workflow&#34;,&#34;Extract elements of a workflow&#34;,&#34;Extract elements of a workflow&#34;,&#34;Extract elements from a workflow set&#34;,&#34;Extract elements of a workflow&#34;,&#34;Tidy a(n) pyears object&#34;,&#34;Binary QSAR Data&#34;,&#34;Tidy a(n) rq object&#34;,&#34;Random forest&#34;,&#34;Make a random identification field for steps&#34;,&#34;Tools for working with parameter ranges&#34;,&#34;Tools for working with parameter ranges&#34;,&#34;Tools for working with parameter ranges&#34;,&#34;Parameters for possible engine parameters for ranger&#34;,&#34;Parameters for possible engine parameters for ranger&#34;,&#34;Parameters for possible engine parameters for ranger&#34;,&#34;Rank the results by a metric&#34;,&#34;Kernel parameters&#34;,&#34;Tidy a(n) rcorr object&#34;,&#34;ngram generator&#34;,&#34;Re-arrange a correlation data frame&#34;,&#34;Recall&#34;,&#34;Recall&#34;,&#34;Recall&#34;,&#34;Create a recipe for preprocessing data&#34;,&#34;Create a recipe for preprocessing data&#34;,&#34;Create a recipe for preprocessing data&#34;,&#34;Create a recipe for preprocessing data&#34;,&#34;Create a recipe for preprocessing data&#34;,&#34;recipes: A package for computing and preprocessing design matrices.&#34;,&#34;Evaluate a selection with tidyselect semantics specific to recipes&#34;,&#34;Update packages&#34;,&#34;Refresh a preprocessing blueprint&#34;,&#34;Example Objects&#34;,&#34;A convenience function for confidence intervals with linear-ish parametric models&#34;,&#34;Example Objects&#34;,&#34;Example Objects&#34;,&#34;Example Objects&#34;,&#34;Parameters for possible engine parameters for ranger&#34;,&#34;Estimation methods for regularized models&#34;,&#34;Parameters for possible engine parameters for ranger&#34;,&#34;Add formula terms to a workflow&#34;,&#34;Add a model to a workflow&#34;,&#34;Add a recipe to a workflow&#34;,&#34;Manually Alter Roles&#34;,&#34;Add variables to a workflow&#34;,&#34;Perform repeated sampling&#34;,&#34;Perform repeated sampling&#34;,&#34;Repair a model call object&#34;,&#34;Calculate the reportable rate&#34;,&#34;Determine required packages for a model&#34;,&#34;Determine required packages for a model&#34;,&#34;Determine required packages for a model&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;Determine required packages for a model&#34;,&#34;Determine required packages for a model&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;S3 methods for tracking which additional packages are needed for steps.&#34;,&#34;Creates a data frame from a stretched correlation table&#34;,&#34;Tidy a(n) ridgelm object&#34;,&#34;Imipramine longitudinal data&#34;,&#34;Glance at a(n) rlm object&#34;,&#34;Root mean squared error&#34;,&#34;Root mean squared error&#34;,&#34;Root mean squared error&#34;,&#34;Tidy a(n) lmRob object&#34;,&#34;Tidy a(n) lmrob object&#34;,&#34;Area under the receiver operator curve&#34;,&#34;Area under the receiver operator curve&#34;,&#34;Area under the receiver operator curve&#34;,&#34;Area under the ROC curve of each class against the rest, using the a priori class distribution&#34;,&#34;Area under the ROC curve of each class against the rest, using the a priori class distribution&#34;,&#34;Area under the ROC curve of each class against the rest, using the a priori class distribution&#34;,&#34;Area under the ROC curve of each class against the rest, using the uniform class distribution&#34;,&#34;Area under the ROC curve of each class against the rest, using the uniform class distribution&#34;,&#34;Area under the ROC curve of each class against the rest, using the uniform class distribution&#34;,&#34;Receiver operator curve&#34;,&#34;Receiver operator curve&#34;,&#34;Tidy a(n) roc object&#34;,&#34;Manually Alter Roles&#34;,&#34;Rolling Origin Forecast Resampling&#34;,&#34;Decision trees via rpart&#34;,&#34;Ratio of performance to deviation&#34;,&#34;Ratio of performance to deviation&#34;,&#34;Ratio of performance to deviation&#34;,&#34;Ratio of performance to inter-quartile&#34;,&#34;Ratio of performance to inter-quartile&#34;,&#34;Ratio of performance to inter-quartile&#34;,&#34;Plot a correlation data frame.&#34;,&#34;Tidy a(n) rq object&#34;,&#34;Tidy a(n) rqs object&#34;,&#34;rsample: General Resampling Infrastructure for R&#34;,&#34;Compatibility with dplyr&#34;,&#34;Convert Resampling Objects to Other Formats&#34;,&#34;Extending rsample with new rset subclasses&#34;,&#34;R squared&#34;,&#34;R squared - traditional&#34;,&#34;R squared - traditional&#34;,&#34;R squared - traditional&#34;,&#34;R squared&#34;,&#34;R squared&#34;,&#34;Parameters for possible engine parameters for C5.0&#34;,&#34;RuleFit models&#34;,&#34;Call &lt;code&gt;mold$clean()&lt;\/code&gt; and &lt;code&gt;mold$process()&lt;\/code&gt;&#34;,&#34;Sacramento CA home prices&#34;,&#34;Parameter functions related to tree- and rule-based models.&#34;,&#34;Parameter functions related to tree- and rule-based models.&#34;,&#34;Kernel parameters&#34;,&#34;Parameters for possible engine parameters for xgboost&#34;,&#34;Morphometric data on scat&#34;,&#34;Tuned flexible discriminant analysis results&#34;,&#34;A scoring function&#34;,&#34;Score new samples using hat values&#34;,&#34;Predict from a &lt;code&gt;apd_pca&lt;\/code&gt;&#34;,&#34;Score new samples using similarity methods&#34;,&#34;A scoring function&#34;,&#34;😱  Scream.&#34;,&#34;Image segmentation predictions&#34;,&#34;Image segmentation predictions&#34;,&#34;Investigate best tuning parameters&#34;,&#34;Investigate best tuning parameters&#34;,&#34;Investigate best tuning parameters&#34;,&#34;Parameter to enable feature selection&#34;,&#34;Methods for selecting variables in step functions&#34;,&#34;Methods for selecting variables in step functions&#34;,&#34;Tidy a(n) lavaan object&#34;,&#34;Alcohol, Cigarette, and Marijuana Use for High School Seniors&#34;,&#34;Sensitivity&#34;,&#34;Sensitivity&#34;,&#34;Sensitivity&#34;,&#34;Sensitivity&#34;,&#34;Sensitivity&#34;,&#34;Sensitivity&#34;,&#34;Change elements of a model specification&#34;,&#34;Tools to Register Models&#34;,&#34;Tools to Register Models&#34;,&#34;Declare a computational engine and specific arguments&#34;,&#34;Working with the parsnip model environment&#34;,&#34;Tools to Register Models&#34;,&#34;Working with the parsnip model environment&#34;,&#34;Change elements of a model specification&#34;,&#34;Tools to Register Models&#34;,&#34;Tools to Register Models&#34;,&#34;Tools to Register Models&#34;,&#34;Tools to Register Models&#34;,&#34;Tools to Register Models&#34;,&#34;Set seed in R and TensorFlow at the same time&#34;,&#34;Tidy a(n) survexp object&#34;,&#34;Add information about confidence interval&#34;,&#34;Add information about confidence interval&#34;,&#34;Shade histogram area beyond an observed statistic&#34;,&#34;Shade histogram area beyond an observed statistic&#34;,&#34;Shave off upper/lower triangle.&#34;,&#34;shinymodels: Interactive Assessments of Models&#34;,&#34;Investigate best tuning parameters&#34;,&#34;Print the model call&#34;,&#34;Display currently available engines for a model&#34;,&#34;Functions required for parsnip-adjacent packages&#34;,&#34;Tools to Register Models&#34;,&#34;Show token output of recipe&#34;,&#34;Subset only required columns&#34;,&#34;Parameters for possible engine parameters for sda models&#34;,&#34;Parameters for possible engine parameters for sda models&#34;,&#34;Parameters for possible engine parameters for sda models&#34;,&#34;Text hashing parameters&#34;,&#34;Parameters for possible engine parameters for ranger&#34;,&#34;Simple kmeans routine that works in-database&#34;,&#34;Time-based Resampling&#34;,&#34;Time-based Resampling&#34;,&#34;Time-based Resampling&#34;,&#34;Time-based Resampling&#34;,&#34;Fine foods example data&#34;,&#34;Symmetric mean absolute percentage error&#34;,&#34;Symmetric mean absolute percentage error&#34;,&#34;Symmetric mean absolute percentage error&#34;,&#34;Smithsonian museums&#34;,&#34;Tidy a(n) smooth.spline object&#34;,&#34;Kernel Smoothness&#34;,&#34;Parameter objects for Regularized Discriminant Models&#34;,&#34;SMOTE Algorithm&#34;,&#34;SMOTENC Algorithm&#34;,&#34;Compound solubility data&#34;,&#34;Solubility predictions from MARS model&#34;,&#34;Solubility Predictions from MARS Model&#34;,&#34;Tidy a(n) SpatialPolygonsDataFrame object&#34;,&#34;Tidy a sparseMatrix object from the Matrix package&#34;,&#34;Spatial or Cluster Cross-Validation&#34;,&#34;Tidying methods for spatially autoregressive models&#34;,&#34;spatialsample: Spatial Resampling Infrastructure for R&#34;,&#34;Specificity&#34;,&#34;Specificity&#34;,&#34;Specificity&#34;,&#34;Predictions on animal species&#34;,&#34;Specificity&#34;,&#34;Specificity&#34;,&#34;Specificity&#34;,&#34;Specify response and explanatory variables&#34;,&#34;Tidy a(n) speedglm object&#34;,&#34;Tidy a(n) speedlm object&#34;,&#34;Parameters for exponents&#34;,&#34;Parameters for possible engine parameters for ranger&#34;,&#34;Spruce up predictions&#34;,&#34;Spruce up predictions&#34;,&#34;Spruce up predictions&#34;,&#34;Spruce up predictions&#34;,&#34;Convert one or more linear predictor to a format used for prediction&#34;,&#34;Convert one or more linear predictor to a format used for prediction&#34;,&#34;Convert one or more linear predictor to a format used for prediction&#34;,&#34;Convert one or more linear predictor to a format used for prediction&#34;,&#34;Convert one or more linear predictor to a format used for prediction&#34;,&#34;Convert one or more linear predictor to a format used for prediction&#34;,&#34;Annual Stack Overflow Developer Survey Data&#34;,&#34;Initialize a Stack&#34;,&#34;stacks: Tidy Model Stacking&#34;,&#34;stacks: Tidy Model Stacking&#34;,&#34;Wrapper for stan confidence intervals&#34;,&#34;Standardize the outcome&#34;,&#34;Chicago ridership data&#34;,&#34;&lt;code&gt;step&lt;\/code&gt; sets the class of the &lt;code&gt;step&lt;\/code&gt; and &lt;code&gt;check&lt;\/code&gt; is for checks.&#34;,&#34;Apply Adaptive Synthetic Algorithm&#34;,&#34;Sort rows using dplyr&#34;,&#34;Impute via bagged trees&#34;,&#34;Create a Factors from A Dummy Variable&#34;,&#34;Box-Cox Transformation for Non-Negative Data&#34;,&#34;B-Spline Basis Functions&#34;,&#34;Apply borderline-SMOTE Algorithm&#34;,&#34;Centering numeric data&#34;,&#34;Distances to Class Centroids&#34;,&#34;Clean Categorical Levels&#34;,&#34;Clean Variable Names&#34;,&#34;High Correlation Filter&#34;,&#34;Create Counts of Patterns using Regular Expressions&#34;,&#34;Cut a numeric variable into a factor&#34;,&#34;Date Feature Generator&#34;,&#34;Data Depths&#34;,&#34;Discretize Numeric Variables&#34;,&#34;Discretize numeric variables with CART&#34;,&#34;Discretize numeric variables with XgBoost&#34;,&#34;Down-Sample a Data Set Based on a Factor Variable&#34;,&#34;Down-Sample a Data Set Based on a Factor Variable&#34;,&#34;Create traditional dummy variables&#34;,&#34;Extract patterns from nominal data&#34;,&#34;Indicator Variables via Feature Hashing&#34;,&#34;Handle levels in multiple predictors together&#34;,&#34;Encoding Factors into Multiple Columns&#34;,&#34;Convert Factors to Strings&#34;,&#34;Dummy Variables Creation via Feature Hashing&#34;,&#34;Filter rows using dplyr&#34;,&#34;Missing Value Column Filter&#34;,&#34;Distance between two locations&#34;,&#34;Add sin and cos terms for harmonic analysis&#34;,&#34;Holiday Feature Generator&#34;,&#34;Hyperbolic Transformations&#34;,&#34;ICA Signal Extraction&#34;,&#34;Impute via bagged trees&#34;,&#34;Impute via k-nearest neighbors&#34;,&#34;Impute numeric variables via a linear model&#34;,&#34;Impute numeric data below the threshold of measurement&#34;,&#34;Impute numeric data using the mean&#34;,&#34;Impute numeric data using the median&#34;,&#34;Impute nominal data using the most common value&#34;,&#34;Impute numeric data using a rolling window statistic&#34;,&#34;Create Missing Data Column Indicators&#34;,&#34;Convert values to predefined integers&#34;,&#34;Create Interaction Variables&#34;,&#34;Add intercept (or constant) column&#34;,&#34;Inverse Transformation&#34;,&#34;Inverse Logit Transformation&#34;,&#34;Isomap Embedding&#34;,&#34;Impute via k-nearest neighbors&#34;,&#34;Kernel PCA Signal Extraction&#34;,&#34;Polynomial Kernel PCA Signal Extraction&#34;,&#34;Radial Basis Function Kernel PCA Signal Extraction&#34;,&#34;Create a lagged predictor&#34;,&#34;Calculate LDA Dimension Estimates of Tokens&#34;,&#34;Lemmatization of Token Variables&#34;,&#34;Supervised Factor Conversions into Linear Functions using Bayesian Likelihood Encodings&#34;,&#34;Supervised Factor Conversions into Linear Functions using Likelihood Encodings&#34;,&#34;Supervised Factor Conversions into Linear Functions using Bayesian Likelihood Encodings&#34;,&#34;Linear Combination Filter&#34;,&#34;Logarithmic Transformation&#34;,&#34;Logit Transformation&#34;,&#34;Impute numeric data below the threshold of measurement&#34;,&#34;Impute numeric data using the mean&#34;,&#34;Impute numeric data using the median&#34;,&#34;Impute nominal data using the most common value&#34;,&#34;Add new variables using dplyr&#34;,&#34;Mutate multiple columns using dplyr&#34;,&#34;Remove observations with missing values&#34;,&#34;Remove Points Near Other Classes&#34;,&#34;Generate n-grams From Token Variables&#34;,&#34;Non-Negative Matrix Factorization Signal Extraction&#34;,&#34;Non-Negative Matrix Factorization Signal Extraction with lasso Penalization&#34;,&#34;Center and scale numeric data&#34;,&#34;Simple Value Assignments for Novel Factor Levels&#34;,&#34;Natural Spline Basis Functions&#34;,&#34;Convert Numbers to Factors&#34;,&#34;Near-Zero Variance Filter&#34;,&#34;Convert Ordinal Factors to Numeric Scores&#34;,&#34;Collapse Some Categorical Levels&#34;,&#34;PCA Signal Extraction&#34;,&#34;Sparse PCA Signal Extraction&#34;,&#34;Sparse Bayesian PCA Signal Extraction&#34;,&#34;Percentile Transformation&#34;,&#34;Partial Least Squares Feature Extraction&#34;,&#34;Orthogonal Polynomial Basis Functions&#34;,&#34;Part of Speech Filtering of Token Variables&#34;,&#34;Create a Profiling Version of a Data Set&#34;,&#34;Scaling Numeric Data to a Specific Range&#34;,&#34;Ratio Variable Creation&#34;,&#34;Detect a regular expression&#34;,&#34;Relevel factors to a desired level&#34;,&#34;Apply (Smoothed) Rectified Linear Transformation&#34;,&#34;Rename variables by name using dplyr&#34;,&#34;Rename multiple columns using dplyr&#34;,&#34;General Variable Filter&#34;,&#34;Impute numeric data using a rolling window statistic&#34;,&#34;Apply ROSE Algorithm&#34;,&#34;Sample rows using dplyr&#34;,&#34;Scaling Numeric Data&#34;,&#34;Select variables using dplyr&#34;,&#34;Positional One-Hot encoding of Tokens&#34;,&#34;Shuffle Variables&#34;,&#34;Filter rows by position using dplyr&#34;,&#34;Apply SMOTE Algorithm&#34;,&#34;Apply SMOTENC algorithm&#34;,&#34;Spatial Sign Preprocessing&#34;,&#34;Square Root Transformation&#34;,&#34;Stemming of Token Variables&#34;,&#34;Filtering of Stop Words for Tokens Variables&#34;,&#34;Convert Strings to Factors&#34;,&#34;Normalization of Character Variables&#34;,&#34;Calculate Set of Text Features&#34;,&#34;Feature Hashing of Tokens&#34;,&#34;Term frequency of Tokens&#34;,&#34;Term Frequency-Inverse Document Frequency of Tokens&#34;,&#34;Filter Tokens Based on Term Frequency&#34;,&#34;Tokenization of Character Variables&#34;,&#34;BPE Tokenization of Character Variables&#34;,&#34;Sentencepiece Tokenization of Character Variables&#34;,&#34;Wordpiece Tokenization of Character Variables&#34;,&#34;Combine Multiple Token Variables Into One&#34;,&#34;Remove Tomek’s Links&#34;,&#34;Supervised and unsupervised uniform manifold approximation and projection (UMAP)&#34;,&#34;Assign missing categories to \&#34;unknown\&#34;&#34;,&#34;Convert Ordered Factors to Unordered Factors&#34;,&#34;Untokenization of Token Variables&#34;,&#34;Up-Sample a Data Set Based on a Factor Variable&#34;,&#34;Up-Sample a Data Set Based on a Factor Variable&#34;,&#34;Moving Window Functions&#34;,&#34;Weight of evidence transformation&#34;,&#34;Pretrained Word Embeddings of Tokens&#34;,&#34;Yeo-Johnson Transformation&#34;,&#34;Zero Variance Filter&#34;,&#34;Early stopping parameter&#34;,&#34;Stretch correlation data frame into long format.&#34;,&#34;Rolling summary statistic for moving windows&#34;,&#34;(Deprecated) Tidy summaryDefault objects&#34;,&#34;Summary Statistics for Confusion Matrices&#34;,&#34;Summarize a recipe&#34;,&#34;Parametric distributions for censored data&#34;,&#34;Parametric survival regression&#34;,&#34;Tidy a(n) survdiff object&#34;,&#34;Tidy a(n) survexp object&#34;,&#34;Tidy a(n) survfit object&#34;,&#34;Survival Model Link Function&#34;,&#34;Parametric survival regression&#34;,&#34;Tidy a(n) survreg object&#34;,&#34;Tidy a(n) svd object masquerading as list&#34;,&#34;Linear support vector machines&#34;,&#34;Support vector machine parameters&#34;,&#34;Polynomial support vector machines&#34;,&#34;Radial basis function support vector machines&#34;,&#34;Tidy a(n) svyolr object&#34;,&#34;Tidy a(n) systemfit object&#34;,&#34;Tidy t-test statistic&#34;,&#34;Tidy t-test&#34;,&#34;Tate Gallery modern artwork metadata&#34;,&#34;Select Terms in a Step Function.&#34;,&#34;Simple Training/Test Set Splitting&#34;,&#34;Fine foods example data&#34;,&#34;textrecipes: Extra &#39;Recipes&#39; for Text Processing&#34;,&#34;themis: Extra Recipes Steps for Dealing with Unbalanced Data&#34;,&#34;General thresholding parameter&#34;,&#34;Generate performance metrics across probability thresholds&#34;,&#34;Generate performance metrics across probability thresholds&#34;,&#34;Tidy a(n) irlba object masquerading as list&#34;,&#34;Tidy a(n) optim object masquerading as list&#34;,&#34;Tidy a(n) svd object masquerading as list&#34;,&#34;Tidy a(n) xyz object masquerading as list&#34;,&#34;Turn zero-inflated model results into a tidy tibble&#34;,&#34;tidy methods for glmnet models&#34;,&#34;tidy methods for glmnet models&#34;,&#34;tidy methods for LiblineaR models&#34;,&#34;tidy methods for glmnet models&#34;,&#34;tidy methods for glmnet models&#34;,&#34;Tidy a(n) aareg object&#34;,&#34;Tidy a(n) acf object&#34;,&#34;Tidy a(n) anova object&#34;,&#34;Tidy a(n) aov object&#34;,&#34;Tidy a(n) aovlist object&#34;,&#34;Tidy a(n) Arima object&#34;,&#34;Tidy a(n) betamfx object&#34;,&#34;Tidy a(n) betareg object&#34;,&#34;Tidy a(n) biglm object&#34;,&#34;Tidy a(n) binDesign object&#34;,&#34;Tidy a(n) binWidth object&#34;,&#34;Tidy a(n) boot object&#34;,&#34;Tidy a(n) btergm object&#34;,&#34;Tidy a(n) cch object&#34;,&#34;Tidy atomic vectors&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy a(n) cld object&#34;,&#34;Tidy a(n) clm object&#34;,&#34;Tidy a(n) clmm object&#34;,&#34;Tidy a(n) coeftest object&#34;,&#34;Confusion Matrix for Categorical Data&#34;,&#34;Tidy a(n) confint.glht object&#34;,&#34;Tidy a(n) confusionMatrix object&#34;,&#34;Tidy a(n) coxph object&#34;,&#34;Tidy a(n) cmprsk object&#34;,&#34;Turn regression rule models into tidy tibbles&#34;,&#34;Tidy a(n) cv.glmnet object&#34;,&#34;Tidiers for data.frame objects&#34;,&#34;(Deprecated) Tidy density objects&#34;,&#34;Tidy a sparseMatrix object from the Matrix package&#34;,&#34;Tidy a sparseMatrix object from the Matrix package&#34;,&#34;(Deprecated) Tidy dist objects&#34;,&#34;Tidy a(n) drc object&#34;,&#34;Tidy/glance a(n) durbinWatsonTest object&#34;,&#34;Tidy a(n) emmGrid object&#34;,&#34;Tidy a(n) epi.2by2 object&#34;,&#34;Tidy a(n) ergm object&#34;,&#34;Tidy a(n) factanal object&#34;,&#34;Tidy a(n) felm object&#34;,&#34;Tidy a(n) fitdistr object&#34;,&#34;Tidy a(n) fixest object&#34;,&#34;(Deprecated) Tidy ftable objects&#34;,&#34;Tidy a(n) gam object&#34;,&#34;Tidy a(n) Gam object&#34;,&#34;Tidy a(n) garch object&#34;,&#34;Tidy a(n) geeglm object&#34;,&#34;Tidy a(n) glht object&#34;,&#34;Tidy a(n) glm object&#34;,&#34;Tidy a(n) glmnet object&#34;,&#34;Tidy a(n) glmrob object&#34;,&#34;Tidy a(n) glmRob object&#34;,&#34;Tidy a(n) gmm object&#34;,&#34;Tidy/glance a(n) htest object&#34;,&#34;Turn zero-inflated model results into a tidy tibble&#34;,&#34;Tidy a(n) irlba object masquerading as list&#34;,&#34;Tidy a(n) ivreg object&#34;,&#34;Tidy a(n) kappa object&#34;,&#34;Tidy a(n) kde object&#34;,&#34;Tidy a(n) Kendall object&#34;,&#34;Tidy a(n) kmeans object&#34;,&#34;Tidy a(n) lavaan object&#34;,&#34;Tidy/glance a(n) leveneTest object&#34;,&#34;Tidy a(n) SpatialPolygonsDataFrame object&#34;,&#34;Tidy a(n) SpatialPolygonsDataFrame object&#34;,&#34;Tidying methods for lists / returned values that are not S3 objects&#34;,&#34;Tidy a(n) lm object&#34;,&#34;Tidy a(n) lm.beta object&#34;,&#34;Tidy a(n) lmodel2 object&#34;,&#34;Tidy a(n) lmrob object&#34;,&#34;Tidy a(n) lmRob object&#34;,&#34;Tidy atomic vectors&#34;,&#34;Tidy a(n) mfx object&#34;,&#34;Tidy a(n) lsmobj object&#34;,&#34;Tidy a(n) manova object&#34;,&#34;Tidy a(n) map object&#34;,&#34;Tidy a(n) margins object&#34;,&#34;Tidy a(n) Mclust object&#34;,&#34;Tidy a(n) mediate object&#34;,&#34;Tidy a(n) mfx object&#34;,&#34;Tidy methods for pls and spls objects&#34;,&#34;Tidy methods for pls and spls objects&#34;,&#34;Tidy a(n) mjoint object&#34;,&#34;Tidy a(n) mle2 object&#34;,&#34;Tidy a(n) mlm object&#34;,&#34;Tidying methods for logit models&#34;,&#34;Turn a parsnip model object into a tidy tibble&#34;,&#34;Tidy a(n) muhaz object&#34;,&#34;Tidying methods for multinomial logistic regression models&#34;,&#34;Tidy a(n) negbin object&#34;,&#34;Tidy a(n) mfx object&#34;,&#34;Tidy Resampling Object&#34;,&#34;Tidy a(n) nlrq object&#34;,&#34;Tidy a(n) nls object&#34;,&#34;Tidiers for NULL inputs&#34;,&#34;Tidy method for null models&#34;,&#34;Tidy atomic vectors&#34;,&#34;Tidy a(n) optim object masquerading as list&#34;,&#34;Tidy a(n) orcutt object&#34;,&#34;Tidy a(n) pairwise.htest object&#34;,&#34;Tidy a(n) pam object&#34;,&#34;Tidy a(n) plm object&#34;,&#34;Tidy the parsed model results&#34;,&#34;Tidy a(n) mfx object&#34;,&#34;Tidy a(n) poLCA object&#34;,&#34;Tidy a(n) polr object&#34;,&#34;Tidy a(n) SpatialPolygonsDataFrame object&#34;,&#34;Tidy a(n) SpatialPolygonsDataFrame object&#34;,&#34;Tidy a(n) power.htest object&#34;,&#34;Tidy a(n) prcomp object&#34;,&#34;Tidy a(n) mfx object&#34;,&#34;Tidy a(n) pyears object&#34;,&#34;Tidy a(n) rcorr object&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy a(n) ref.grid object&#34;,&#34;Tidy a(n) regsubsets object&#34;,&#34;Tidy a(n) ridgelm object&#34;,&#34;Tidy a(n) rlm object&#34;,&#34;Tidy a(n) rma object&#34;,&#34;Tidy a(n) roc object&#34;,&#34;Tidy a(n) rq object&#34;,&#34;Tidy a(n) rqs object&#34;,&#34;Tidy Resampling Object&#34;,&#34;Tidy Resampling Object&#34;,&#34;Tidying methods for spatially autoregressive models&#34;,&#34;Tidy a sparseMatrix object from the Matrix package&#34;,&#34;Tidy a(n) SpatialPolygonsDataFrame object&#34;,&#34;Tidy a(n) SpatialPolygonsDataFrame object&#34;,&#34;Tidy a(n) SpatialPolygonsDataFrame object&#34;,&#34;Tidy a(n) spec object&#34;,&#34;Tidy a(n) speedglm object&#34;,&#34;Tidy a(n) speedlm object&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy the Result of a Recipe&#34;,&#34;Tidy a(n) summary_emm object&#34;,&#34;Tidy a(n) summary.glht object&#34;,&#34;Tidy a(n) summary.lm object&#34;,&#34;(Deprecated) Tidy summaryDefault objects&#34;,&#34;Tidy a(n) survdiff object&#34;,&#34;Tidy a(n) survexp object&#34;,&#34;Tidy a(n) survfit object&#34;,&#34;Tidy a(n) survreg object&#34;,&#34;Tidy a(n) svyglm object&#34;,&#34;Tidy a(n) svyolr object&#34;,&#34;Tidy a(n) systemfit object&#34;,&#34;Tidy a(n) table object&#34;,&#34;Tidy a(n) ts object&#34;,&#34;Tidy a(n) TukeyHSD object&#34;,&#34;Tidy a(n) varest object&#34;,&#34;Tidy Resampling Object&#34;,&#34;Tidy a workflow&#34;,&#34;Turn regression rule models into tidy tibbles&#34;,&#34;Turn zero-inflated model results into a tidy tibble&#34;,&#34;Tidy a(n) zoo object&#34;,&#34;tidypredict: Run Predictions Inside the Database&#34;,&#34;Returns a Tidy Eval formula to calculate fitted values&#34;,&#34;Returns a Tidy Eval formula to calculate prediction interval.&#34;,&#34;Returns a SQL query with formula to calculate fitted values&#34;,&#34;Returns a SQL query with formula to calculate predicted interval&#34;,&#34;Tests base predict function against tidypredict&#34;,&#34;Adds the prediction columns to a piped command set.&#34;,&#34;Token types&#34;,&#34;Create Token Object&#34;,&#34;Simple Training/Test Set Splitting&#34;,&#34;Fine foods example data&#34;,&#34;Resolve a Model Specification for a Computational Engine&#34;,&#34;Resolve a Model Specification for a Computational Engine&#34;,&#34;Parameter functions related to tree- and rule-based models.&#34;,&#34;Tree frog embryo hatching data&#34;,&#34;Example Objects&#34;,&#34;Example Objects&#34;,&#34;Parameter functions related to tree- and rule-based models.&#34;,&#34;tunable methods for embed&#34;,&#34;tunable methods for themis&#34;,&#34;tunable methods for themis&#34;,&#34;tunable methods for embed&#34;,&#34;tunable methods for embed&#34;,&#34;tunable methods for themis&#34;,&#34;Find recommended methods for generating parameter values&#34;,&#34;tunable methods for embed&#34;,&#34;tunable methods for themis&#34;,&#34;Find recommended methods for generating parameter values&#34;,&#34;tunable methods for embed&#34;,&#34;tunable methods for embed&#34;,&#34;tunable methods for themis&#34;,&#34;tunable methods for themis&#34;,&#34;tunable methods for themis&#34;,&#34;Find recommended methods for generating parameter values&#34;,&#34;Find recommended methods for generating parameter values&#34;,&#34;Find recommended methods for generating parameter values&#34;,&#34;Find recommended methods for generating parameter values&#34;,&#34;tunable methods for embed&#34;,&#34;tunable methods for themis&#34;,&#34;tunable methods for embed&#34;,&#34;Mark arguments for tuning&#34;,&#34;Bayesian optimization of model parameters.&#34;,&#34;Bayesian optimization of model parameters.&#34;,&#34;Bayesian optimization of model parameters.&#34;,&#34;Model tuning via grid search&#34;,&#34;Model tuning via grid search&#34;,&#34;Model tuning via grid search&#34;,&#34;Efficient grid search via racing with ANOVA models&#34;,&#34;Efficient grid search via racing with ANOVA models&#34;,&#34;Efficient grid search via racing with ANOVA models&#34;,&#34;Efficient grid search via racing with win/loss statistics&#34;,&#34;Efficient grid search via racing with win/loss statistics&#34;,&#34;Efficient grid search via racing with win/loss statistics&#34;,&#34;Optimization of model parameters via simulated annealing&#34;,&#34;Optimization of model parameters via simulated annealing&#34;,&#34;Optimization of model parameters via simulated annealing&#34;,&#34;Two class data&#34;,&#34;Two Class Data&#34;,&#34;Two class predictions&#34;,&#34;Two Class Predictions&#34;,&#34;Test set results for logistic regression&#34;,&#34;Example Data Sets&#34;,&#34;Example Data Sets&#34;,&#34;Succinct summary of parsnip object&#34;,&#34;Succinct summary of parsnip object&#34;,&#34;Succinct summary of parameter objects&#34;,&#34;Console Messages&#34;,&#34;Parameters for possible engine parameters for Cubist&#34;,&#34;Parameters for class-imbalance sampling&#34;,&#34;Near-zero variance parameters&#34;,&#34;Placeholder for unknown parameter values&#34;,&#34;Update a preprocessing blueprint&#34;,&#34;Functions required for parsnip-adjacent packages&#34;,&#34;Functions required for parsnip-adjacent packages&#34;,&#34;Add formula terms to a workflow&#34;,&#34;Functions required for parsnip-adjacent packages&#34;,&#34;Add a model to a workflow&#34;,&#34;Save information about models&#34;,&#34;Add a recipe to a workflow&#34;,&#34;Manually Alter Roles&#34;,&#34;Add variables to a workflow&#34;,&#34;Update components of a workflow within a workflow set&#34;,&#34;Update components of a workflow within a workflow set&#34;,&#34;Updating a model specification&#34;,&#34;Updating a model specification&#34;,&#34;Updating a model specification&#34;,&#34;Updating a model specification&#34;,&#34;Updating a model specification&#34;,&#34;Updating a model specification&#34;,&#34;Updating a model specification&#34;,&#34;Updating a model specification&#34;,&#34;Updating a model specification&#34;,&#34;Updating a model specification&#34;,&#34;Updating a model specification&#34;,&#34;Updating a model specification&#34;,&#34;Updating a model specification&#34;,&#34;Updating a model specification&#34;,&#34;Updating a model specification&#34;,&#34;Updating a model specification&#34;,&#34;Updating a model specification&#34;,&#34;Updating a model specification&#34;,&#34;Updating a model specification&#34;,&#34;Update a single parameter in a parameter set&#34;,&#34;Updating a model specification&#34;,&#34;Updating a model specification&#34;,&#34;Updating a model specification&#34;,&#34;Updating a model specification&#34;,&#34;Updating a model specification&#34;,&#34;Update a recipe step&#34;,&#34;Updating a model specification&#34;,&#34;Updating a model specification&#34;,&#34;Updating a model specification&#34;,&#34;Updating a model specification&#34;,&#34;Updating a model specification&#34;,&#34;Functions to create boilerplate code for specific models&#34;,&#34;Functions to create boilerplate code for specific models&#34;,&#34;Functions to create boilerplate code for specific models&#34;,&#34;Functions to create boilerplate code for specific models&#34;,&#34;Functions to create boilerplate code for specific models&#34;,&#34;Functions to create boilerplate code for specific models&#34;,&#34;Functions to create boilerplate code for specific models&#34;,&#34;Create a modeling package&#34;,&#34;Create a modeling package&#34;,&#34;Functions to create boilerplate code for specific models&#34;,&#34;Functions to create boilerplate code for specific models&#34;,&#34;Get colors for tune text.&#34;,&#34;Get colors for tune text.&#34;,&#34;Ensure that &lt;code&gt;data&lt;\/code&gt; contains required column names&#34;,&#34;Developer helpers&#34;,&#34;Ensure no duplicate terms appear in &lt;code&gt;formula&lt;\/code&gt;&#34;,&#34;Ensure that the outcome has binary factors&#34;,&#34;Ensure that the outcome has only factor columns&#34;,&#34;Ensure outcomes are all numeric&#34;,&#34;Ensure that the outcome is univariate&#34;,&#34;Ensure that predictions have the correct number of rows&#34;,&#34;Ensure predictors are all numeric&#34;,&#34;Create a Validation Set&#34;,&#34;Create a Validation Set&#34;,&#34;Tools for working with parameter values&#34;,&#34;Tools for working with parameter values&#34;,&#34;Tools for working with parameter values&#34;,&#34;Tools for working with parameter values&#34;,&#34;Tools for working with parameter values&#34;,&#34;Tools for working with parameter values&#34;,&#34;Activation functions between network layers&#34;,&#34;MARS pruning methods&#34;,&#34;Estimation methods for regularized models&#34;,&#34;Rolling summary statistic for moving windows&#34;,&#34;Parametric distributions for censored data&#34;,&#34;Survival Model Link Function&#34;,&#34;Parameters for possible engine parameters for party models&#34;,&#34;Parameters for possible engine parameters for party models&#34;,&#34;Token types&#34;,&#34;Kernel functions for distance weighting&#34;,&#34;Term frequency weighting methods&#34;,&#34;Obtain variable importance scores&#34;,&#34;Tidy a(n) varest object&#34;,&#34;A placeholder function for argument values&#34;,&#34;Determine varying arguments&#34;,&#34;Determine varying arguments&#34;,&#34;Determine varying arguments&#34;,&#34;V-Fold Cross-Validation&#34;,&#34;Visualize statistical inference&#34;,&#34;Visualize statistical inference&#34;,&#34;Number of tokens in vocabulary&#34;,&#34;Watson churn data&#34;,&#34;Weigh the object.&#34;,&#34;Parameter for &lt;code&gt;\&#34;double normalization\&#34;&lt;\/code&gt; when creating token counts&#34;,&#34;Kernel functions for distance weighting&#34;,&#34;Term frequency weighting methods&#34;,&#34;Locate equivocal values&#34;,&#34;Parameter for the moving window size&#34;,&#34;Crosstable with woe between a binary outcome and a predictor variable.&#34;,&#34;Create a workflow&#34;,&#34;Process a series of workflows&#34;,&#34;Generate a set of workflow objects from preprocessing and model objects&#34;,&#34;Add variables to a workflow&#34;,&#34;Butcher methods for a workflow&#34;,&#34;Extract elements of a workflow&#34;,&#34;workflows: Modeling Workflows&#34;,&#34;workflowsets: Create a Collection of &#39;tidymodels&#39; Workflows&#34;,&#34;Boosted trees via xgboost&#34;,&#34;Tidy a(n) xyz object masquerading as list&#34;,&#34;Tidy a(n) zoo object&#34;],[&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/glmnet_helpers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;.check_glmnet_penalty_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/glmnet_helpers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;.check_glmnet_penalty_predict&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/descriptors.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;.cols&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/convert_helpers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;.convert_form_to_xy_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/convert_helpers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;.convert_form_to_xy_new&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/convert_helpers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;.convert_xy_to_form_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/convert_helpers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;.convert_xy_to_form_new&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/descriptors.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;.dat&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/descriptors.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;.facts&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/get_fingerprint.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;.get_fingerprint&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/get_fingerprint.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;.get_fingerprint.default&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/get_fingerprint.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;.get_fingerprint.rset&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/tune_accessor.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;.get_fingerprint.tune_results&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/tune_accessor.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;.get_tune_metric_names&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/tune_accessor.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;.get_tune_metrics&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/tune_accessor.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;.get_tune_outcome_names&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/tune_accessor.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;.get_tune_parameter_names&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/tune_accessor.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;.get_tune_parameters&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/tune_accessor.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;.get_tune_workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/descriptors.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;.lvls&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/descriptors.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;.obs&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/glmnet_helpers_prediction.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;.organize_glmnet_pred&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/descriptors.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;.preds&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/descriptors.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;.x&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/descriptors.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;.y&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.aareg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;aareg_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tidypredict.tidymodels.org/reference/acceptable_formula.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;acceptable_formula&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/accuracy.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;accuracy&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/accuracy.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;accuracy_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/accuracy.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;accuracy.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/activation.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;activation&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/ad_data.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;ad_data&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/adasyn.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;adasyn&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/add_candidates.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;add_candidates&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/add_step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;add_check&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldb.tidymodels.org/reference/add_dummy_variables.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;add_dummy_variables&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/add_formula.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;add_formula&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/add_intercept_column.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;add_intercept_column&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/add_model.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;add_model&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/add_recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;add_recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/add_resample_id.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;add_resample_id&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/roles.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;add_role&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/add_rowindex.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;add_rowindex&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/add_step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;add_step&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/add_variables.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;add_variables&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/add_woe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;add_woe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/adjust_deg_free.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;adjust_deg_free&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.ivreg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;aer_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/all_neighbors.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;all_neighbors&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/has_role.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;all_nominal&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/has_role.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;all_nominal_predictors&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/has_role.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;all_numeric&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/has_role.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;all_numeric_predictors&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/has_role.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;all_outcomes&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/has_role.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;all_predictors&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/all_tokenized.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;all_tokenized&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/all_tokenized.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;all_tokenized_predictors&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/ames.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;ames&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/example_ames_knn.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;ames_grid_search&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/example_ames_knn.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;ames_iter_search&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://shinymodels.tidymodels.org/reference/ames_mlp_itr.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;ames_mlp_itr&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/ames_new.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;ames_new&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/example_ames_knn.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;ames_wflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/as.data.frame.rsplit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;analysis&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://probably.tidymodels.org/reference/locate-equivocal.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;any_equivocal&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/apd_hat_values.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;apd_hat_values&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/apd_hat_values.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;apd_hat_values.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/apd_hat_values.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;apd_hat_values.default&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/apd_hat_values.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;apd_hat_values.formula&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/apd_hat_values.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;apd_hat_values.matrix&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/apd_hat_values.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;apd_hat_values.recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/apd_pca.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;apd_pca&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/apd_pca.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;apd_pca.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/apd_pca.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;apd_pca.default&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/apd_pca.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;apd_pca.formula&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/apd_pca.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;apd_pca.matrix&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/apd_pca.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;apd_pca.recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/apd_similarity.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;apd_similarity&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/apd_similarity.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;apd_similarity.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/apd_similarity.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;apd_similarity.default&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/apd_similarity.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;apd_similarity.formula&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/apd_similarity.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;apd_similarity.matrix&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/apd_similarity.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;apd_similarity.recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/apparent.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;apparent&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://probably.tidymodels.org/reference/append_class_pred.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;append_class_pred&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/applicable-package.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;applicable&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.Arima.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;Arima_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://probably.tidymodels.org/reference/as_class_pred.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;as_class_pred&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://corrr.tidymodels.org/reference/as_cordf.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;as_cordf&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://corrr.tidymodels.org/reference/as_matrix.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;as_matrix&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tidypredict.tidymodels.org/reference/as_parsed_model.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;as_parsed_model&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldb.tidymodels.org/reference/as_parsed_model.modeldb_lm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;as_parsed_model.modeldb_lm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflowsets.tidymodels.org/reference/as_workflow_set.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;as_workflow_set&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/as.data.frame.rsplit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;as.data.frame.rsplit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/ui.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;assess_object&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/as.data.frame.rsplit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;assessment&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/assume.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;assume&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/attrition.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;attrition&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/attrition.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;attrition&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.roc.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;auc_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment_columns.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment_columns&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.betamfx.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.betamfx&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.betareg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.betareg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.clm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.clm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.coxph.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.coxph&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/data.frame_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.decomposed.ts.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.decomposed.ts&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.drc.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.drc&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.factanal.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.factanal&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.felm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.felm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.fixest.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.fixest&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.gam.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.gam&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.glm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.glm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.robustbase.glmrob.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.glmrob&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.glmRob.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.glmRob&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.htest.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.htest&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.ivreg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.ivreg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.kmeans.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.kmeans&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/augment.tune_results.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.last_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.lm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.lm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.robustbase.lmrob.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.lmrob&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.lmRob.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.lmRob&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.loess.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.loess&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.mfx.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.logitmfx&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.Mclust.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.Mclust&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.mfx.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.mfx&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.mjoint.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.mjoint&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.mlogit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.mlogit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/augment.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.model_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.mfx.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.negbinmfx&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.nlrq.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.nlrq&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.nls.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.nls&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/null_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.NULL&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.pam.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.pam&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.plm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.plm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.mfx.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.poissonmfx&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.poLCA.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.poLCA&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.polr.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.polr&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.prcomp.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.prcomp&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.mfx.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.probitmfx&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/augment.tune_results.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.resample_results&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.rlm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.rlm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.rma.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.rma&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.rq.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.rq&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.rqs.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.rqs&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.sarlm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.sarlm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.smooth.spline.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.smooth.spline&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.speedlm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.speedlm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.stl.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.stl&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.survreg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.survreg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/augment.tune_results.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.tune_results&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/augment.workflow.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;augment.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/autoplot.apd_pca.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;autoplot.apd_pca&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/autoplot.apd_similarity.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;autoplot.apd_similarity&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee-autoplot.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;autoplot.brulee_linear_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee-autoplot.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;autoplot.brulee_logistic_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee-autoplot.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;autoplot.brulee_mlp&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee-autoplot.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;autoplot.brulee_multinomial_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/autoplot.model_fit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;autoplot.glmnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/autoplot.linear_stack.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;autoplot.linear_stack&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/autoplot.model_fit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;autoplot.model_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/autoplot.tune_results.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;autoplot.tune_results&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflowsets.tidymodels.org/reference/autoplot.workflow_set.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;autoplot.workflow_set&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/average_precision.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;average_precision&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/average_precision.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;average_precision_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/average_precision.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;average_precision.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe_call.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_call&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-C5.0.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_call.C5.0&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-classbagg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_call.classbagg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-earth.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_call.earth&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-elnet.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_call.elnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-flexsurvreg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_call.flexsurvreg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-gausspr.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_call.gausspr&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-glmnet.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_call.glmnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-kknn.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_call.kknn&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-ksvm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_call.ksvm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-lm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_call.lm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-mda.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_call.mda&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-spark.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_call.ml_model&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-model_fit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_call.model_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/axe_model_stack.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_call.model_stack&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-multnet.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_call.multnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-nnet.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_call.nnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-randomForest.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_call.randomForest&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-ranger.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_call.ranger&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-rpart.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_call.rpart&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-sclass.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_call.sclass&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-survreg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_call.survreg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-survreg.penal.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_call.survreg.penal&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-train.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_call.train&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-train.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_call.train.recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/workflow-butcher.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_call.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-xgb.Booster.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_call.xgb.Booster&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe_ctrl.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_ctrl&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-C5.0.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_ctrl.C5.0&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-spark.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_ctrl.ml_model&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-model_fit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_ctrl.model_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/axe_model_stack.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_ctrl.model_stack&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-randomForest.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_ctrl.randomForest&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-rpart.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_ctrl.rpart&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-train.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_ctrl.train&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-train.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_ctrl.train.recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/workflow-butcher.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_ctrl.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-xgb.Booster.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_ctrl.xgb.Booster&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe_data.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_data&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-classbagg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_data.classbagg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-earth.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_data.earth&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-gausspr.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_data.gausspr&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-ksvm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_data.ksvm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-spark.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_data.ml_model&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-model_fit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_data.model_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/axe_model_stack.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_data.model_stack&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-rpart.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_data.rpart&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-survreg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_data.survreg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-survreg.penal.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_data.survreg.penal&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-train.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_data.train&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-train.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_data.train.recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/workflow-butcher.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_data.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe_env.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-classbagg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.classbagg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-flexsurvreg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.flexsurvreg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-formula.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.formula&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-function.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.function&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-gausspr.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.gausspr&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-kknn.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.kknn&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-lm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.lm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-mda.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.mda&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-model_fit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.model_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/axe_model_stack.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.model_stack&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-nnet.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.nnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.quosure&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-randomForest.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.randomForest&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-rpart.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.rpart&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-sclass.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.sclass&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.step&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.step_arrange&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.step_bagimpute&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.step_filter&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.step_geodist&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.step_impute_bag&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.step_impute_knn&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.step_interact&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.step_knnimpute&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.step_mutate&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.step_ratio&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.step_slice&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-survreg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.survreg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-survreg.penal.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.survreg.penal&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-terms.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.terms&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-train.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.train&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-train.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.train.recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/workflow-butcher.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-xgb.Booster.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_env.xgb.Booster&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe_fitted.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_fitted&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-C5.0.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_fitted.C5.0&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-earth.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_fitted.earth&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-gausspr.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_fitted.gausspr&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-kknn.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_fitted.kknn&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-ksvm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_fitted.ksvm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-lm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_fitted.lm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-mda.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_fitted.mda&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-spark.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_fitted.ml_model&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-model_fit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_fitted.model_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/axe_model_stack.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_fitted.model_stack&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-nnet.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_fitted.nnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-ranger.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_fitted.ranger&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-train.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_fitted.train&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-train.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_fitted.train.recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/workflow-butcher.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_fitted.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-xgb.Booster.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_fitted.xgb.Booster&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/axe_model_stack.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe_model_stack&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-C5.0.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe-C5.0&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-classbagg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe-classbagg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-earth.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe-earth&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-elnet.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe-elnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-flexsurvreg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe-flexsurvreg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-formula.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe-formula&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-function.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe-function&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-gausspr.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe-gausspr&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-glmnet.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe-glmnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-kknn.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe-kknn&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-ksvm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe-ksvm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-lm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe-lm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-mda.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe-mda&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-model_fit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe-model_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-multnet.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe-multnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-nnet.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe-nnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-randomForest.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe-randomForest&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-ranger.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe-ranger&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe-recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-rpart.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe-rpart&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-sclass.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe-sclass&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-spark.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe-spark&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-survreg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe-survreg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-survreg.penal.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe-survreg.penal&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-terms.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe-terms&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-train.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe-train&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-train.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe-train.recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/axe-xgb.Booster.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;axe-xgb.Booster&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/bag_mars.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;bag_mars&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/bag_tree.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;bag_tree&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://baguette.tidymodels.org/reference/bagger.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;bagger&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://baguette.tidymodels.org/reference/bagger.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;bagger.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://baguette.tidymodels.org/reference/bagger.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;bagger.default&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://baguette.tidymodels.org/reference/bagger.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;bagger.formula&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://baguette.tidymodels.org/reference/bagger.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;bagger.matrix&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://baguette.tidymodels.org/reference/bagger.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;bagger.recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/bake.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;bake&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/bake.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;bake.recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/bal_accuracy.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;bal_accuracy&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/bal_accuracy.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;bal_accuracy_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/bal_accuracy.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;bal_accuracy.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/bart.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;bart&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/bart-internal.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;bart-internal&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/bart-param.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;bart-param&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/bart-internal.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;bartMachine_interval_calc&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/dropout.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;batch_size&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.mle2.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;bbmle_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.betareg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;betareg_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/binary.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;binary&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/binary.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;binary_tr&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/binary.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;binary_unk&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.binDesign.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;bindesign_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.binWidth.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;binwidth_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/biomass.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;biomass&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/bivariate.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;bivariate&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/bivariate.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;bivariate_test&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/bivariate.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;bivariate_train&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/bivariate.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;bivariate_val&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/blend_predictions.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;blend_predictions&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/boost_tree.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;boost_tree&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.boot.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;boot_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/bootstrap.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;bootstrap&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/bootstraps.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;bootstraps&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/broom.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;broom&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee-package.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;brulee&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee_linear_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;brulee_linear_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee_linear_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;brulee_linear_reg.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee_linear_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;brulee_linear_reg.default&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee_linear_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;brulee_linear_reg.formula&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee_linear_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;brulee_linear_reg.matrix&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee_linear_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;brulee_linear_reg.recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee_logistic_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;brulee_logistic_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee_logistic_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;brulee_logistic_reg.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee_logistic_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;brulee_logistic_reg.default&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee_logistic_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;brulee_logistic_reg.formula&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee_logistic_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;brulee_logistic_reg.matrix&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee_logistic_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;brulee_logistic_reg.recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee_mlp.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;brulee_mlp&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee_mlp.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;brulee_mlp.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee_mlp.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;brulee_mlp.default&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee_mlp.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;brulee_mlp.formula&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee_mlp.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;brulee_mlp.matrix&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee_mlp.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;brulee_mlp.recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee_multinomial_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;brulee_multinomial_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee_multinomial_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;brulee_multinomial_reg.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee_multinomial_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;brulee_multinomial_reg.default&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee_multinomial_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;brulee_multinomial_reg.formula&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee_multinomial_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;brulee_multinomial_reg.matrix&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee_multinomial_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;brulee_multinomial_reg.recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee-autoplot.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;brulee-autoplot&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee-coefs.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;brulee-coefs&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/bsmote.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;bsmote&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.btergm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;btergm_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/build_linear_predictor.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;build_linear_predictor&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/build_linear_predictor.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;build_linear_predictor._elnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/build_linear_predictor.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;build_linear_predictor._lognet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/build_linear_predictor.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;build_linear_predictor._multnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/butcher.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;butcher&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/butcher_example.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;butcher_example&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/C5_rules.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;C5_rules&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/C5.0_train.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;C5.0_train&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/calculate.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;calculate&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/car_prices.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;car_prices&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.confusionMatrix.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;caret_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/rsample2caret.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;caret2rsample&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://shinymodels.tidymodels.org/reference/cars_bag_vfld.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;cars_bag_vfld&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/ccc.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;ccc&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/ccc.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;ccc_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/ccc.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;ccc.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.cch.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;cch_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://shinymodels.tidymodels.org/reference/cell_race.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;cell_race&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/cells.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;cells&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.lavaan.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;cfa_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;check&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/check_class.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;check_class&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/check_cols.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;check_cols&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/validate_column_names.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;check_column_names&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/check_empty_ellipse.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;check_empty_ellipse&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/add_on_exports.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;check_final_param&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/empty_ellipses.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;check_initial&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/empty_ellipses.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;check_metrics&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/check_missing.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;check_missing&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/set_new_model.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;check_model_doesnt_exist&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/set_new_model.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;check_model_exists&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/check_name.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;check_name&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/check_new_values.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;check_new_values&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/validate_no_formula_duplication.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;check_no_formula_duplication&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/validate_outcomes_are_binary.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;check_outcomes_are_binary&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/validate_outcomes_are_factors.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;check_outcomes_are_factors&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/validate_outcomes_are_numeric.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;check_outcomes_are_numeric&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/validate_outcomes_are_univariate.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;check_outcomes_are_univariate&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/validate_prediction_size.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;check_prediction_size&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/validate_predictors_are_numeric.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;check_predictors_are_numeric&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/check_range.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;check_range&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/empty_ellipses.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;check_rset&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/empty_ellipses.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;check_time&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/check_times.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;check_times&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/check_type.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;check_type&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/empty_ellipses.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;check_workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflowsets.tidymodels.org/reference/two_class_set.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;chi_features_res&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflowsets.tidymodels.org/reference/two_class_set.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;chi_features_set&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/Chicago.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;Chicago&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/chisq_stat.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;chisq_stat&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/chisq_test.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;chisq_test&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/circle_example.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;circle_example&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://baguette.tidymodels.org/reference/class_cost.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;class_cost&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/example_data.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;class_folds&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://probably.tidymodels.org/reference/class_pred.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;class_pred&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/example_data.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;class_res_nn&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/example_data.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;class_res_rf&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/class_weights.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;class_weights&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/classification_cost.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;classification_cost&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/classification_cost.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;classification_cost_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/classification_cost.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;classification_cost.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.crr.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;cmprsk_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee-coefs.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;coef.brulee_linear_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee-coefs.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;coef.brulee_logistic_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee-coefs.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;coef.brulee_mlp&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/brulee-coefs.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;coef.brulee_multinomial_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.coeftest.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;coeftest_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/collect_predictions.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;collect_metrics&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/collect_predictions.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;collect_metrics.tune_race&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/collect_predictions.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;collect_metrics.tune_results&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflowsets.tidymodels.org/reference/collect_metrics.workflow_set.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;collect_metrics.workflow_set&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/collect_predictions.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;collect_notes&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/collect_predictions.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;collect_notes.tune_results&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/collect_parameters.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;collect_parameters&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/collect_parameters.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;collect_parameters.data_stack&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/collect_parameters.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;collect_parameters.default&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/collect_parameters.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;collect_parameters.model_stack&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/collect_predictions.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;collect_predictions&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/collect_predictions.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;collect_predictions.default&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/collect_predictions.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;collect_predictions.tune_results&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflowsets.tidymodels.org/reference/collect_metrics.workflow_set.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;collect_predictions.workflow_set&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://corrr.tidymodels.org/reference/colpair_map.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;colpair_map&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflowsets.tidymodels.org/reference/comment_add.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;comment_add&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflowsets.tidymodels.org/reference/comment_add.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;comment_get&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflowsets.tidymodels.org/reference/comment_add.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;comment_print&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflowsets.tidymodels.org/reference/comment_add.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;comment_reset&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rules.tidymodels.org/reference/committees.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;committees&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/complement.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;complement&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/complement.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;complement.apparent_split&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/complement.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;complement.rof_split&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/complement.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;complement.rsplit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/complement.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;complement.sliding_index_split&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/complement.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;complement.sliding_period_split&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/complement.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;complement.sliding_window_split&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/concrete.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;concrete&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/conditional_min_criterion.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;conditional_min_criterion&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/conditional_min_criterion.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;conditional_test_statistic&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/conditional_min_criterion.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;conditional_test_type&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/prob_improve.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;conf_bound&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/deprecated.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;conf_int&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/conf_mat.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;conf_mat&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/conf_mat_resampled.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;conf_mat_resampled&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/conf_mat.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;conf_mat.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/conf_mat.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;conf_mat.default&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/conf_mat.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;conf_mat.table&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/c5_parameters.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;confidence_factor&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/confint_tidy.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;confint_tidy&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.confusionMatrix.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;confusionMatrix_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/contr_one_hot.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;contr_one_hot&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/contr_one_hot.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;contr_one_hot&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://baguette.tidymodels.org/reference/control_bag.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;control_bag&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/control_bayes.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;control_bayes&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/control_grid.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;control_grid&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/control_parsnip.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;control_parsnip&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://finetune.tidymodels.org/reference/control_race.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;control_race&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/control_grid.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;control_resamples&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://finetune.tidymodels.org/reference/control_sim_anneal.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;control_sim_anneal&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/control_stack.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;control_stack_bayes&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/control_stack.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;control_stack_grid&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/control_stack.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;control_stack_resamples&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/control_workflow.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;control_workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/convert_stan_interval.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;convert_stan_interval&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/coord_obs_pred.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;coord_obs_pred&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://corrr.tidymodels.org/reference/correlate.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;correlate&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://corrr.tidymodels.org/reference/corrr-package.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;corrr&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/cost.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;cost&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/trees.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;cost_complexity&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/covers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;covers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.coxph.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;coxph_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/modeling-package.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;create_modeling_package&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/credit_data.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;credit_data&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/crickets.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;crickets&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rules.tidymodels.org/reference/cubist_and_rulefit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;cubist_and_rulefit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/cubist_rules.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;cubist_rules&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/has_role.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;current_info&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/data.frame_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;data.frame_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldb.tidymodels.org/reference/plot_kmeans.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;db_calculate_squares&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/bart-internal.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;dbart_predict_calc&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/decision_tree.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;decision_tree&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.decomposed.ts.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;decompose_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/default_formula_blueprint.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;default_formula_blueprint&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/default_recipe_blueprint.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;default_recipe_blueprint&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/default_xy_blueprint.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;default_xy_blueprint&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/deg_free.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;deg_free&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/degree.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;degree&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/degree.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;degree_int&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/delete_response.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;delete_response&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_ratio.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;denom_vars&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/deprecated.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;deprecated&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/descriptors.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;descriptors&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_bag_mars_earth.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_bag_mars_earth&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_bag_tree_C5.0.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_bag_tree_C5.0&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_bag_tree_rpart.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_bag_tree_rpart&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_bart_dbarts.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_bart_dbarts&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_boost_tree_C5.0.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_boost_tree_C5.0&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_boost_tree_mboost.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_boost_tree_mboost&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_boost_tree_spark.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_boost_tree_spark&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_boost_tree_xgboost.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_boost_tree_xgboost&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_C5_rules_C5.0.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_C5_rules_C5.0&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_cubist_rules_Cubist.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_cubist_rules_Cubist&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_decision_tree_C5.0.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_decision_tree_C5.0&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_decision_tree_party.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_decision_tree_party&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_decision_tree_rpart.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_decision_tree_rpart&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_decision_tree_spark.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_decision_tree_spark&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_discrim_flexible_earth.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_discrim_flexible_earth&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_discrim_linear_MASS.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_discrim_linear_MASS&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_discrim_linear_mda.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_discrim_linear_mda&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_discrim_linear_sda.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_discrim_linear_sda&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_discrim_linear_sparsediscrim.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_discrim_linear_sparsediscrim&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_discrim_quad_MASS.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_discrim_quad_MASS&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_discrim_quad_sparsediscrim.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_discrim_quad_sparsediscrim&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_discrim_regularized_klaR.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_discrim_regularized_klaR&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_gen_additive_mod_mgcv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_gen_additive_mod_mgcv&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_linear_reg_brulee.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_linear_reg_brulee&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_linear_reg_gee.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_linear_reg_gee&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_linear_reg_glm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_linear_reg_glm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_linear_reg_glmnet.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_linear_reg_glmnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_linear_reg_gls.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_linear_reg_gls&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_linear_reg_keras.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_linear_reg_keras&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_linear_reg_lm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_linear_reg_lm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_linear_reg_lme.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_linear_reg_lme&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_linear_reg_lmer.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_linear_reg_lmer&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_linear_reg_spark.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_linear_reg_spark&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_linear_reg_stan.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_linear_reg_stan&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_linear_reg_stan_glmer.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_linear_reg_stan_glmer&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_logistic_reg_brulee.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_logistic_reg_brulee&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_logistic_reg_gee.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_logistic_reg_gee&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_logistic_reg_glm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_logistic_reg_glm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_logistic_reg_glmer.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_logistic_reg_glmer&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_logistic_reg_glmnet.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_logistic_reg_glmnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_logistic_reg_keras.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_logistic_reg_keras&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_logistic_reg_LiblineaR.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_logistic_reg_LiblineaR&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_logistic_reg_spark.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_logistic_reg_spark&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_logistic_reg_stan.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_logistic_reg_stan&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_logistic_reg_stan_glmer.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_logistic_reg_stan_glmer&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_mars_earth.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_mars_earth&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_mlp_brulee.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_mlp_brulee&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_mlp_keras.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_mlp_keras&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_mlp_nnet.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_mlp_nnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_multinom_reg_brulee.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_multinom_reg_brulee&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_multinom_reg_glmnet.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_multinom_reg_glmnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_multinom_reg_keras.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_multinom_reg_keras&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_multinom_reg_nnet.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_multinom_reg_nnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_multinom_reg_spark.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_multinom_reg_spark&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_naive_Bayes_klaR.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_naive_Bayes_klaR&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_naive_Bayes_naivebayes.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_naive_Bayes_naivebayes&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_nearest_neighbor_kknn.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_nearest_neighbor_kknn&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_pls_mixOmics.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_pls_mixOmics&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_poisson_reg_gee.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_poisson_reg_gee&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_poisson_reg_glm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_poisson_reg_glm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_poisson_reg_glmer.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_poisson_reg_glmer&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_poisson_reg_glmnet.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_poisson_reg_glmnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_poisson_reg_hurdle.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_poisson_reg_hurdle&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_poisson_reg_stan.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_poisson_reg_stan&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_poisson_reg_stan_glmer.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_poisson_reg_stan_glmer&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_poisson_reg_zeroinfl.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_poisson_reg_zeroinfl&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_proportional_hazards_glmnet.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_proportional_hazards_glmnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_proportional_hazards_survival.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_proportional_hazards_survival&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_rand_forest_party.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_rand_forest_party&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_rand_forest_randomForest.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_rand_forest_randomForest&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_rand_forest_ranger.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_rand_forest_ranger&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_rand_forest_spark.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_rand_forest_spark&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_rule_fit_xrf.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_rule_fit_xrf&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_surv_reg_flexsurv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_surv_reg_flexsurv&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_surv_reg_survival.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_surv_reg_survival&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_survival_reg_flexsurv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_survival_reg_flexsurv&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_survival_reg_survival.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_survival_reg_survival&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_svm_linear_kernlab.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_svm_linear_kernlab&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_svm_linear_LiblineaR.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_svm_linear_LiblineaR&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_svm_poly_kernlab.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_svm_poly_kernlab&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/details_svm_rbf_kernlab.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;details_svm_rbf_kernlab&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/detect_step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;detect_step&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/detection_prevalence.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;detection_prevalence&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/detection_prevalence.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;detection_prevalence_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/detection_prevalence.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;detection_prevalence.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/developer-helpers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;developer-helpers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/shrinkage_correlation.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;diagonal_covariance&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/dials-package.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;dials&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://corrr.tidymodels.org/reference/dice.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;dice&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/dictionary.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;dictionary&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/discretize.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;discretize&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/discretize.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;discretize.default&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/discretize.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;discretize.numeric&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://discrim.tidymodels.org/reference/discrim-package.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;discrim&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/discrim_flexible.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;discrim_flexible&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/discrim_linear.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;discrim_linear&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/discrim_quad.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;discrim_quad&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/discrim_regularized.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;discrim_regularized&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://shinymodels.tidymodels.org/reference/display_selected.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;display_selected&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/dist_power.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;dist_power&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/doc-tools.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;doc-tools&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/developer-helpers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;dots_to_estimate&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.drc.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;drc_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/drinks.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;drinks&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/drinks.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;drinks&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/dropout.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;dropout&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/names0.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;dummy_extract_names&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/names0.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;dummy_names&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/durbinWatsonTest_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;durbinWatsonTest_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/embed-package.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;embed&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/step_embed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;embed_control&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.lsmobj.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;emmeans_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/emoji_samples.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;emoji_samples&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/empty_ellipses.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;empty_ellipses&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/empty_ellipses.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;encode_set&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/encode_unit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;encode_unit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.epi.2by2.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;epiR_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/dropout.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;epochs&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.ergm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;ergm_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/empty_ellipses.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;estimate_tune_results&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/eval_args.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;eval_args&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/example_ames_knn.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;example_ames_knn&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/example_data.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;example_data&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/hardhat-example-data.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;example_test&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/hardhat-example-data.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;example_train&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/prob_improve.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;exp_improve&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://shinymodels.tidymodels.org/reference/explore.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;explore.default&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://shinymodels.tidymodels.org/reference/explore.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;explore.tune_results&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/expo_decay.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;expo_decay&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/hardhat-extract.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_fit_engine&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/extract-parsnip.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_fit_engine.model_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/extract-tune.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_fit_engine.tune_results&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/extract-workflow.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_fit_engine.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflowsets.tidymodels.org/reference/extract_workflow_set_result.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_fit_engine.workflow_set&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/hardhat-extract.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_fit_parsnip&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/extract-tune.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_fit_parsnip.tune_results&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/extract-workflow.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_fit_parsnip.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflowsets.tidymodels.org/reference/extract_workflow_set_result.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_fit_parsnip.workflow_set&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/extract_model.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_model&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/hardhat-extract.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_mold&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/extract-tune.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_mold.tune_results&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/extract-workflow.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_mold.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflowsets.tidymodels.org/reference/extract_workflow_set_result.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_mold.workflow_set&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/hardhat-extract.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_parameter_dials&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/extract-parsnip.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_parameter_dials.model_spec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/extract-workflow.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_parameter_dials.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/hardhat-extract.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_parameter_set_dials&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/extract-parsnip.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_parameter_set_dials.model_spec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/extract-workflow.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_parameter_set_dials.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/hardhat-extract.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_preprocessor&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/extract-tune.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_preprocessor.tune_results&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/extract-workflow.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_preprocessor.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflowsets.tidymodels.org/reference/extract_workflow_set_result.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_preprocessor.workflow_set&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/extract_ptype.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_ptype&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/hardhat-extract.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/extract-tune.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_recipe.tune_results&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/extract-workflow.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_recipe.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflowsets.tidymodels.org/reference/extract_workflow_set_result.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_recipe.workflow_set&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/hardhat-extract.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_spec_parsnip&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/extract-parsnip.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_spec_parsnip.model_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/extract-tune.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_spec_parsnip.tune_results&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/extract-workflow.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_spec_parsnip.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflowsets.tidymodels.org/reference/extract_workflow_set_result.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_spec_parsnip.workflow_set&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/hardhat-extract.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflowsets.tidymodels.org/reference/extract_workflow_set_result.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_workflow_set_result&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/extract-tune.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_workflow.last_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/extract-tune.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_workflow.tune_results&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflowsets.tidymodels.org/reference/extract_workflow_set_result.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract_workflow.workflow_set&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/extract-parsnip.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract-parsnip&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/extract-tune.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract-tune&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/extract-workflow.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extract-workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/cubist_parameters.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;extrapolation&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/f_meas.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;f_meas&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/f_meas.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;f_meas_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/f_meas.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;f_meas.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.factanal.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;factanal_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://corrr.tidymodels.org/reference/fashion.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;fashion&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.felm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;felm_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/filter_parameters.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;filter_parameters&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/finalize.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;finalize&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/developer-helpers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;finalize_estimator&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/developer-helpers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;finalize_estimator_internal&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/finalize_model.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;finalize_model&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/finalize_model.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;finalize_recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/finalize_model.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;finalize_workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/finalize.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;finalize.default&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/finalize.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;finalize.list&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/finalize.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;finalize.logical&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/finalize.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;finalize.param&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/finalize.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;finalize.parameters&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/doc-tools.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;find_engine_files&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://finetune.tidymodels.org/reference/finetune-package.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;finetune&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/finish_glance.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;finish_glance&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://shinymodels.tidymodels.org/reference/first_class_prob_name.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;first_class_prob_name&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://corrr.tidymodels.org/reference/first_col.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;first_col&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://shinymodels.tidymodels.org/reference/first_level.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;first_level&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/fit_control.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;fit_control&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/min_grid.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;fit_max_value&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/fit_members.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;fit_members&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://discrim.tidymodels.org/reference/fit_regularized_linear.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;fit_regularized_linear&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://discrim.tidymodels.org/reference/fit_regularized_linear.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;fit_regularized_quad&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/fit_resamples.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;fit_resamples&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/fit_resamples.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;fit_resamples.model_spec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/fit_resamples.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;fit_resamples.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/fit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;fit_xy.model_spec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/fit-workflow.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;fit-workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/fit.infer.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;fit.infer&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/fit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;fit.model_spec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/fit-workflow.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;fit.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.fitdistr.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;fitdistr_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/fix_data_frame.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;fix_data_frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/fixed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;fixed&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/fixed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;fixed.character&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/fixed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;fixed.Date&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/fixed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;fixed.default&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/fixed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;fixed.factor&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/fixed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;fixed.numeric&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/fixed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;fixed.POSIXct&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://corrr.tidymodels.org/reference/focus.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;focus&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://corrr.tidymodels.org/reference/focus.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;focus_&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://corrr.tidymodels.org/reference/focus_if.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;focus_if&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/forge.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;forge&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/form_pred.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;form_pred&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/format_ch_vec.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;format_ch_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://shinymodels.tidymodels.org/reference/format_hover.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;format_hover&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/format_ch_vec.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;format_selectors&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/formula.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;formula.recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://discrim.tidymodels.org/reference/frac_common_cov.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;frac_common_cov&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://discrim.tidymodels.org/reference/frac_common_cov.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;frac_identity&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/freq_cut.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;freq_cut&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/fully_trained.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;fully_trained&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/c5_parameters.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;fuzzy_thresholding&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/gain_capture.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;gain_capture&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/gain_capture.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;gain_capture_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/gain_capture.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;gain_capture.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/gain_curve.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;gain_curve&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/gain_curve.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;gain_curve.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.gam.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;gam_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy_gam_hastie.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;Gam_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.garch.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;garch_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/gather.rset.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;gather.rset&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://multilevelmod.tidymodels.org/reference/gee_fit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;gee_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.geeglm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;geeglm_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.geeglm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;geepack_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/gen_additive_mod.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;gen_additive_mod&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/generate.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;generate&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/finalize.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;get_batch_sizes&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/get_confidence_interval.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;get_ci&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/get_confidence_interval.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;get_confidence_interval&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/get_data_classes.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;get_data_classes&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/set_new_model.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;get_dependency&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/set_new_model.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;get_encoding&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/get_expressions.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;get_expressions&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/get_expressions.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;get_expressions._elnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/get_expressions.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;get_expressions._lognet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/get_expressions.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;get_expressions._multnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/set_new_model.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;get_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/get_model_env.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;get_from_env&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/get_keep_original_cols.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;get_keep_original_cols&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/get_levels.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;get_levels&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/finalize.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;get_log_p&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/get_model_env.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;get_model_env&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/finalize.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;get_n&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/finalize.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;get_n_frac&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/finalize.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;get_n_frac_range&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/get_levels.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;get_outcome_levels&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/finalize.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;get_p&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/get_p_value.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;get_p_value&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/get_p_value.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;get_p_value.default&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/get_p_value.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;get_p_value.infer_dist&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/set_new_model.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;get_pred_type&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/get_p_value.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;get_pvalue&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/finalize.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;get_rbf_range&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/empty_ellipses.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;get_tune_colors&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/developer-helpers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;get_weights&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance_optim.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance_optim&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.aareg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.aareg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.aov.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.aov&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.Arima.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.Arima&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.betamfx.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.betamfx&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.betareg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.betareg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.biglm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.biglm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.binDesign.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.binDesign&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.cch.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.cch&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.clm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.clm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.clmm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.clmm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.coeftest.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.coeftest&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.coxph.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.coxph&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.crr.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.crr&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.cv.glmnet.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.cv.glmnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/data.frame_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.drc.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.drc&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/durbinWatsonTest_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.durbinWatsonTest&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.ergm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.ergm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.factanal.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.factanal&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.felm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.felm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.fitdistr.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.fitdistr&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.fixest.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.fixest&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.gam.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.gam&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance_gam_hastie.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.Gam&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.garch.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.garch&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.geeglm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.geeglm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.glm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.glm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.glmnet.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.glmnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.glmRob.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.glmRob&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.gmm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.gmm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.htest.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.htest&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.ivreg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.ivreg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.kmeans.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.kmeans&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.lavaan.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.lavaan&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/list_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.list&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.lm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.lm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.lmodel2.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.lmodel2&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.robustbase.lmrob.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.lmrob&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.lmRob.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.lmRob&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.mfx.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.logitmfx&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.margins.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.margins&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.Mclust.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.Mclust&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.mfx.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.mfx&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.mjoint.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.mjoint&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.mlogit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.mlogit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/glance.model_fit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.model_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.muhaz.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.muhaz&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.multinom.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.multinom&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.negbin.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.negbin&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.mfx.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.negbinmfx&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.nlrq.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.nlrq&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.nls.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.nls&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/null_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.NULL&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance_optim.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.optim&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.orcutt.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.orcutt&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.pam.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.pam&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.plm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.plm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.mfx.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.poissonmfx&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.poLCA.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.poLCA&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.polr.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.polr&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.mfx.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.probitmfx&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.pyears.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.pyears&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.ridgelm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.ridgelm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.rlm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.rlm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.rma.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.rma&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.rq.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.rq&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.sarlm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.sarlm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.smooth.spline.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.smooth.spline&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.speedglm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.speedglm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.speedlm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.speedlm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.summary.lm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.summary.lm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/summary_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.summaryDefault&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.survdiff.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.survdiff&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.survexp.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.survexp&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.survfit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.survfit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.survreg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.survreg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.svyglm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.svyglm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.svyolr.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.svyolr&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.varest.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.varest&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/glance.workflow.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glance.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.negbin.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glm.nb_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.glmnet.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glmnet_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/glmnet-details.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;glmnet-details&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.gmm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;gmm_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/grants.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;grants&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/grants.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;grants_2008&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/grants.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;grants_other&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/grants.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;grants_test&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/grid_max_entropy.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;grid_latin_hypercube&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/grid_max_entropy.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;grid_latin_hypercube.list&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/grid_max_entropy.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;grid_latin_hypercube.param&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/grid_max_entropy.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;grid_latin_hypercube.parameters&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/grid_max_entropy.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;grid_latin_hypercube.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/grid_max_entropy.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;grid_max_entropy&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/grid_max_entropy.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;grid_max_entropy.list&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/grid_max_entropy.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;grid_max_entropy.param&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/grid_max_entropy.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;grid_max_entropy.parameters&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/grid_max_entropy.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;grid_max_entropy.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/grid_regular.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;grid_random&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/grid_regular.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;grid_random.list&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/grid_regular.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;grid_random.param&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/grid_regular.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;grid_random.parameters&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/grid_regular.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;grid_random.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/grid_regular.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;grid_regular&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/grid_regular.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;grid_regular.list&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/grid_regular.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;grid_regular.param&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/grid_regular.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;grid_regular.parameters&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/grid_regular.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;grid_regular.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/group_vfold_cv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;group_vfold_cv&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/gss.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;gss&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/hardhat-package.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;hardhat&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/hardhat-example-data.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;hardhat-example-data&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/hardhat-extract.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;hardhat-extract&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/has_multi_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;has_multi_predict&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/has_multi_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;has_multi_predict.default&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/has_multi_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;has_multi_predict.model_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/has_multi_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;has_multi_predict.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/has_role.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;has_role&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/has_role.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;has_type&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/unknown.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;has_unknowns&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/dropout.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;hidden_units&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.rcorr.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;Hmisc_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/hpc_cv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;hpc_cv&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/hpc_cv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;hpc_cv&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/hpc_data.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;hpc_data&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.htest.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;htest_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/huber_loss.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;huber_loss&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/huber_loss_pseudo.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;huber_loss_pseudo&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/huber_loss_pseudo.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;huber_loss_pseudo_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/huber_loss_pseudo.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;huber_loss_pseudo.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/huber_loss.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;huber_loss_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/huber_loss.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;huber_loss.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/hypothesize.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;hypothesise&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/hypothesize.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;hypothesize&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/iic.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;iic&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/iic.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;iic_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/iic.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;iic.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_impute_bag.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;imp_vars&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/infer.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;infer&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/initial_split.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;initial_split&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/initial_split.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;initial_time_split&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/int_pctl.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;int_bca&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/int_pctl.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;int_pctl&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/int_pctl.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;int_t&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy_irlba.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;irlba_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/is_blueprint.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;is_blueprint&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://probably.tidymodels.org/reference/is_class_pred.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;is_class_pred&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://probably.tidymodels.org/reference/locate-equivocal.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;is_equivocal&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/empty_ellipses.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;is_preprocessor&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/empty_ellipses.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;is_recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/is_tf_available.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;is_tf_available&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/is_trained_workflow.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;is_trained_workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/unknown.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;is_unknown&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/add_on_exports.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;is_varying&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/empty_ellipses.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;is_workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.ivreg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;ivreg_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/j_index.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;j_index&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/j_index.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;j_index_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/j_index.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;j_index.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.mjoint.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;joinerml_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/juice.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;juice&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/kap.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;kap&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/kap.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;kap_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/kap.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;kap.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.kappa.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;kappa_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.kde.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;kde_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.Kendall.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;kendall_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.Kendall.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;Kendall_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/keras_mlp.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;keras_mlp&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/keras_predict_classes.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;keras_predict_classes&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/rbf_sigma.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;kernel_offset&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.kmeans.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;kmeans_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/knit_engine_docs.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;knit_engine_docs&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tidypredict.tidymodels.org/reference/knit_print.tidypredict_test.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;knit_print.tidypredict_test&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.kde.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;ks_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/labels.rset.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;labels.rset&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/labels.rsplit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;labels.rsplit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/labels.rset.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;labels.vfold_cv&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/Laplace.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;Laplace&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/last_fit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;last_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/last_fit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;last_fit.model_spec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/last_fit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;last_fit.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.lavaan.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;lavaan_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.regsubsets.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;leaps_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/learn_rate.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;learn_rate&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflowsets.tidymodels.org/reference/leave_var_out_formulas.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;leave_var_out_formulas&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/lending_club.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;lending_club&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://probably.tidymodels.org/reference/levels.class_pred.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;levels.class_pred&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/leveneTest_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;leveneTest_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.felm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;lfe_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/lift_curve.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;lift_curve&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/lift_curve.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;lift_curve.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/linear_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;linear_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldb.tidymodels.org/reference/linear_regression_db.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;linear_regression_db&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/list_md_problems.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;list_md_problems&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/list_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;list_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.lm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;lm_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.lmodel2.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;lmodel2_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.coeftest.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;lmtest_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/load_pkgs.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;load_pkgs&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/locate.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;locate&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://probably.tidymodels.org/reference/locate-equivocal.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;locate-equivocal&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.loess.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;loess_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/example_data.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;log_res_nn&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/example_data.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;log_res_rf&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/logistic_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;logistic_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://multilevelmod.tidymodels.org/reference/longitudinal_counts.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;longitudinal_counts&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/loo_cv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;loo_cv&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/trees.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;loss_reduction&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/ranger_parameters.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;lower_quantile&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/mae.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mae&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/mae.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mae_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/mae.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mae.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/make_call.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;make_call&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://probably.tidymodels.org/reference/make_class_pred.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;make_class_pred&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/make_classes.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;make_classes&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/doc-tools.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;make_engine_list&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/doc-tools.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;make_seealso_list&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/make_splits.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;make_splits&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/make_splits.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;make_splits.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/make_splits.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;make_splits.default&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/make_splits.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;make_splits.list&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/make_strata.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;make_strata&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://probably.tidymodels.org/reference/make_class_pred.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;make_two_class_pred&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/manual_rset.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;manual_rset&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/mape.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mape&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/mape.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mape_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/mape.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mape.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.map.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;maps_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.margins.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;margins_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/mars.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mars&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/mase.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mase&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/mase.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mase_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/mase.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mase.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/matrix_to_dataset.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;matrix_to_dataset&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/randomForest_parameters.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;max_nodes&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/earth_parameters.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;max_num_terms&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/cubist_parameters.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;max_rules&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rules.tidymodels.org/reference/committees.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;max_rules&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/max_times.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;max_times&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/max_tokens.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;max_tokens&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/maybe_matrix.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;maybe_data_frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/maybe_matrix.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;maybe_matrix&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/mc_cv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mc_cv&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/mcc.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mcc&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/mcc.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mcc_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/mcc.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mcc.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.Mclust.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mclust_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/meats.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;meats&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.mediate.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mediate_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/ui.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;memory_released&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/merge.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;merge.model_spec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/merge.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;merge.recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/message_wrap.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;message_wrap&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/metric_set.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;metric_set&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/metric_summarizer.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;metric_summarizer&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/metric_tweak.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;metric_tweak&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/metric_vec_template.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;metric_vec_template&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/metrics.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;metrics&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/empty_ellipses.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;metrics_info&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/metrics.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;metrics.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.gam.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mgcv_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/min_cols.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;min_cols&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/min_dist.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;min_dist&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/min_grid.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;min_grid.boost_tree&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/min_grid.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;min_grid.C5_rules&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/min_grid.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;min_grid.cubist_rules&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/min_grid.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;min_grid.linear_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/min_grid.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;min_grid.logistic_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/min_grid.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;min_grid.mars&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/min_grid.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;min_grid.model_spec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/min_grid.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;min_grid.multinom_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/min_grid.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;min_grid.nearest_neighbor&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/min_grid.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;min_grid.pls&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/min_grid.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;min_grid.poisson_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/min_grid.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;min_grid.rule_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/trees.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;min_n&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/min_cols.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;min_rows&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/max_times.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;min_times&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/min_unique.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;min_unique&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/mixture.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mixture&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.mjoint.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mjoint_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/mlc_churn.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mlc_churn&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.mle2.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mle2_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.mlogit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mlogit_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/mlp.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mlp&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/mn_log_loss.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mn_log_loss&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/mn_log_loss.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mn_log_loss_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/mn_log_loss.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mn_log_loss.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/model_db.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;model_db&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/model_fit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;model_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/model_frame.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;model_frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/model_matrix.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;model_matrix&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/model_offset.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;model_offset&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/model_printer.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;model_printer&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/model_spec.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;model_spec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldb.tidymodels.org/reference/modeldb-package.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;modeldb&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/mold.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mold&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/default_xy_blueprint.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mold.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/default_formula_blueprint.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mold.formula&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/default_xy_blueprint.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mold.matrix&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/default_recipe_blueprint.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mold.recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/momentum.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;momentum&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/mpe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mpe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/mpe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mpe_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/mpe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mpe.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://multilevelmod.tidymodels.org/reference/msa_data.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;msa_data&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/msd.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;msd&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/msd.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;msd_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/msd.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;msd.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/mtry.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mtry&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/mtry.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mtry_long&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rules.tidymodels.org/reference/mtry_prop.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mtry_prop&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.muhaz.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;muhaz_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.glht.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;multcomp_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/multi_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;multi_predict&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/has_multi_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;multi_predict_args&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/has_multi_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;multi_predict_args.default&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/has_multi_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;multi_predict_args.model_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/has_multi_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;multi_predict_args.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rules.tidymodels.org/reference/multi_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;multi_predict._C5_rules&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/multi_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;multi_predict._C5.0&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rules.tidymodels.org/reference/multi_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;multi_predict._cubist&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/multi_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;multi_predict._earth&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/multi_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;multi_predict._elnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://poissonreg.tidymodels.org/reference/predict_raw._fishnet.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;multi_predict._fishnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/multi_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;multi_predict._lognet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://plsmod.tidymodels.org/reference/multi_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;multi_predict._mixo_pls&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://plsmod.tidymodels.org/reference/multi_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;multi_predict._mixo_plsda&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://plsmod.tidymodels.org/reference/multi_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;multi_predict._mixo_spls&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://plsmod.tidymodels.org/reference/multi_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;multi_predict._mixo_splsda&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/multi_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;multi_predict._multnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/multi_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;multi_predict._torch_mlp&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/multi_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;multi_predict._train.kknn&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/multi_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;multi_predict._xgb.Booster&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rules.tidymodels.org/reference/multi_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;multi_predict._xrf&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/multi_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;multi_predict.default&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://multilevelmod.tidymodels.org/reference/multilevelmod-package.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;multilevelmod&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/multinom_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;multinom_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.multinom.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;multinom_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/naive_Bayes.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;naive_Bayes&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/names0.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;names0&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/nearest_neighbor.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;nearest_neighbor&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/nearmiss.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;nearmiss&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/neighbors.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;neighbors&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/nested_cv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;nested_cv&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://corrr.tidymodels.org/reference/network_plot.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;network_plot&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/new-blueprint.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;new_blueprint&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/new-metric.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;new_class_metric&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/new-default-blueprint.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;new_default_formula_blueprint&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/new-default-blueprint.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;new_default_recipe_blueprint&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/new-default-blueprint.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;new_default_xy_blueprint&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/new-blueprint.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;new_formula_blueprint&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/empty_ellipses.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;new_iteration_results&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/new_model.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;new_model&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/new_model_butcher.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;new_model_butcher&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/add_on_exports.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;new_model_spec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/new-metric.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;new_numeric_metric&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/new-metric.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;new_prob_metric&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/new-param.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;new_qual_param&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/new-param.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;new_quant_param&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/new-blueprint.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;new_recipe_blueprint&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/new_rset.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;new_rset&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/new-blueprint.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;new_xy_blueprint&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/new-blueprint.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;new-blueprint&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/new-default-blueprint.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;new-default-blueprint&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/new-metric.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;new-metric&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/new-param.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;new-param&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.nlrq.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;nlrq_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.nls.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;nls_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.multinom.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;nnet_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/c5_parameters.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;no_global_pruning&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/npv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;npv&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/npv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;npv_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/npv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;npv.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/null_model.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;null_model&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/null_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;null_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/add_on_exports.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;null_value&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/nullmodel.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;nullmodel&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/nullmodel.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;nullmodel.default&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/num_breaks.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;num_breaks&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/num_comp.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;num_comp&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/texthash.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;num_hash&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/num_knots.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;num_knots&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/ranger_parameters.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;num_random_splits&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/num_comp.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;num_terms&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/num_tokens.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;num_tokens&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/observe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;observe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/oils.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;oils&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/okc.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;okc&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/okc_binary.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;okc_binary&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/okc_binary.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;okc_binary_test&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/okc_binary.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;okc_binary_train&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/okc.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;okc_text&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy_optim.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;optim_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflowsets.tidymodels.org/reference/option_add.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;option_add&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflowsets.tidymodels.org/reference/option_add.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;option_add_parameters&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflowsets.tidymodels.org/reference/option_list.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;option_list&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflowsets.tidymodels.org/reference/option_add.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;option_remove&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.orcutt.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;orcutt_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.clm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;ordinal_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://shinymodels.tidymodels.org/reference/organize_data.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;organize_data&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://shinymodels.tidymodels.org/reference/organize_data.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;organize_data.default&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://shinymodels.tidymodels.org/reference/organize_data.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;organize_data.tune_results&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/outcome_names.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;outcome_names&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/outcome_names.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;outcome_names.formula&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/outcome_names.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;outcome_names.recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/outcome_names.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;outcome_names.terms&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/outcome_names.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;outcome_names.tune_results&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/outcome_names.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;outcome_names.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/over_ratio.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;over_ratio&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/deprecated.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;p_value&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://corrr.tidymodels.org/reference/pair_n.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pair_n&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.pam.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pam_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://discrim.tidymodels.org/reference/parabolic.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;parabolic&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/parabolic.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;parabolic&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/parameters.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;parameters&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/parameters_constr.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;parameters_constr&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/parameters.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;parameters.default&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/parameters.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;parameters.list&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/parameters.workflow.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;parameters.model_spec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/parameters.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;parameters.param&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/parameters.workflow.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;parameters.recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/parameters.workflow.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;parameters.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tidypredict.tidymodels.org/reference/parse_model.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;parse_model&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/parsnip-package.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;parsnip&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/parsnip_addin.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;parsnip_addin&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/parsnip_update.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;parsnip_update&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/pathology.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pathology&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/pathology.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pathology&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/pd_speech.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pd_speech&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/penalty.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;penalty&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/xgboost_parameters.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;penalty_L1&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/xgboost_parameters.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;penalty_L2&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/penguins.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;penguins&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://shinymodels.tidymodels.org/reference/performance_object.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;performance_object&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/permutations.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;permutations&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.plm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;plm_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldb.tidymodels.org/reference/plot_kmeans.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;plot_kmeans&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://shinymodels.tidymodels.org/reference/plot_multiclass_conf_mat.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;plot_multiclass_conf_mat&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://shinymodels.tidymodels.org/reference/plot_multiclass_obs_pred.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;plot_multiclass_obs_pred&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://shinymodels.tidymodels.org/reference/plot_multiclass_pr.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;plot_multiclass_pr&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://shinymodels.tidymodels.org/reference/plot_multiclass_pred_factorcol.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;plot_multiclass_pred_factorcol&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://shinymodels.tidymodels.org/reference/plot_multiclass_pred_numcol.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;plot_multiclass_pred_numcol&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://shinymodels.tidymodels.org/reference/plot_multiclass_roc.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;plot_multiclass_roc&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://shinymodels.tidymodels.org/reference/plot_numeric_obs_pred.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;plot_numeric_obs_pred&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://shinymodels.tidymodels.org/reference/plot_numeric_res_factorcol.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;plot_numeric_res_factorcol&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://shinymodels.tidymodels.org/reference/plot_numeric_res_numcol.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;plot_numeric_res_numcol&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://shinymodels.tidymodels.org/reference/plot_numeric_res_pred.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;plot_numeric_res_pred&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://finetune.tidymodels.org/reference/plot_race.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;plot_race&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://shinymodels.tidymodels.org/reference/plot_twoclass_conf_mat.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;plot_twoclass_conf_mat&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://shinymodels.tidymodels.org/reference/plot_twoclass_obs_pred.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;plot_twoclass_obs_pred&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://shinymodels.tidymodels.org/reference/plot_twoclass_pr.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;plot_twoclass_pr&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://shinymodels.tidymodels.org/reference/plot_twoclass_pred_factorcol.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;plot_twoclass_pred_factorcol&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://shinymodels.tidymodels.org/reference/plot_twoclass_pred_numcol.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;plot_twoclass_pred_numcol&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://shinymodels.tidymodels.org/reference/plot_twoclass_roc.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;plot_twoclass_roc&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/pls.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pls&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://plsmod.tidymodels.org/reference/pls_fit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pls_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://plsmod.tidymodels.org/reference/plsmod-package.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;plsmod&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/poisson_log_loss.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;poisson_log_loss&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/poisson_log_loss.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;poisson_log_loss_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/poisson_log_loss.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;poisson_log_loss.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/poisson_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;poisson_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://poissonreg.tidymodels.org/reference/poissonreg-package.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;poissonreg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.poLCA.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;poLCA_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.polr.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;polr_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/populate.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;populate&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/ppv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;ppv&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/ppv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;ppv_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/ppv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;ppv.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/pr_auc.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pr_auc&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/pr_auc.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pr_auc_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/pr_auc.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pr_auc.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/pr_curve.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pr_curve&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/pr_curve.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pr_curve.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.prcomp.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;prcomp_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/precision.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;precision&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/precision.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;precision_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/precision.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;precision.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/set_new_model.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pred_value_template&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/other_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;predict_class.model_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/other_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;predict_classprob.model_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/other_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;predict_confint.model_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/other_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;predict_hazard.model_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/other_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;predict_linear_pred&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/other_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;predict_linear_pred.model_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/other_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;predict_numeric&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/other_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;predict_numeric.model_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/other_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;predict_quantile.model_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/predict.model_fit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;predict_raw&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://poissonreg.tidymodels.org/reference/predict_raw._fishnet.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;predict_raw._fishnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/predict.model_fit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;predict_raw.model_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/other_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;predict_survival&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/other_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;predict_survival.model_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/other_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;predict_time&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/other_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;predict_time.model_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/predict-workflow.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;predict-workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://baguette.tidymodels.org/reference/predict.bagger.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;predict.bagger&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/predict.brulee_linear_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;predict.brulee_linear_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/predict.brulee_logistic_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;predict.brulee_logistic_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/predict.brulee_mlp.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;predict.brulee_mlp&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://brulee.tidymodels.org/reference/predict.brulee_multinomial_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;predict.brulee_multinomial_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/predict.data_stack.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;predict.data_stack&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/discretize.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;predict.discretize&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/predict.model_fit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;predict.model_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/predict.model_stack.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;predict.model_stack&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/nullmodel.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;predict.nullmodel&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/predict-workflow.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;predict.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/prediction_eqn.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;prediction_eqn&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/prediction_eqn.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;prediction_eqn._elnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/prediction_eqn.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;prediction_eqn._lognet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/prediction_eqn.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;prediction_eqn._multnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/predictor_prop.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;predictor_prop&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/c5_parameters.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;predictor_winnowing&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/prep.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;prep&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/prep.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;prep.recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/prepare_data.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;prepare_data&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/prepper.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;prepper&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/pretty.vfold_cv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pretty.apparent&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/pretty.vfold_cv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pretty.bootstraps&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/pretty.vfold_cv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pretty.group_vfold_cv&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/pretty.vfold_cv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pretty.loo_cv&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/pretty.vfold_cv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pretty.manual_rset&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/pretty.vfold_cv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pretty.mc_cv&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/pretty.vfold_cv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pretty.nested_cv&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/pretty.vfold_cv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pretty.permutations&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/pretty.vfold_cv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pretty.rolling_origin&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/pretty.vfold_cv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pretty.sliding_index&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/pretty.vfold_cv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pretty.sliding_period&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/pretty.vfold_cv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pretty.sliding_window&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://spatialsample.tidymodels.org/reference/pretty.spatial_clustering_cv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pretty.spatial_clustering_cv&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/pretty.vfold_cv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pretty.validation_split&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/pretty.vfold_cv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pretty.vfold_cv&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/print.apd_hat_values.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;print.apd_hat_values&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/print.apd_pca.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;print.apd_pca&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/print.apd_similarity.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;print.apd_similarity&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/print.infer.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;print.infer&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/print.infer.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;print.infer_dist&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/print.infer.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;print.infer_layer&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/nullmodel.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;print.nullmodel&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/print.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;print.recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://shinymodels.tidymodels.org/reference/print.shiny_data.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;print.shiny_data&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tidypredict.tidymodels.org/reference/print.tidypredict_test.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;print.tidypredict_test&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/prior_slab_dispersion.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;prior_mixture_threshold&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/bart-param.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;prior_outcome_range&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/prior_slab_dispersion.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;prior_slab_dispersion&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/bart-param.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;prior_terminal_node_coef&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/bart-param.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;prior_terminal_node_expo&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/prob_improve.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;prob_improve&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://probably.tidymodels.org/reference/probably-package.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;probably&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/degree.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;prod_degree&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/fixed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;prof&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/fixed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;prof.character&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/fixed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;prof.Date&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/fixed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;prof.factor&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/fixed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;prof.numeric&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/fixed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;prof.POSIXct&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/prop_test.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;prop_test&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/proportional_hazards.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;proportional_hazards&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/trees.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;prune&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/prune_method.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;prune_method&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.kappa.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;psych_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/pull_dials_object.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pull_dials_object&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/pull_dials_object.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pull_dials_object.model_spec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/pull_dials_object.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pull_dials_object.parameters&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/pull_dials_object.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pull_dials_object.recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/pull_dials_object.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pull_dials_object.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/empty_ellipses.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pull_rset_attributes&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflowsets.tidymodels.org/reference/pull_workflow_set_result.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pull_workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/workflow-extractors.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pull_workflow_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/workflow-extractors.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pull_workflow_mold&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/workflow-extractors.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pull_workflow_prepped_recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/workflow-extractors.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pull_workflow_preprocessor&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflowsets.tidymodels.org/reference/pull_workflow_set_result.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pull_workflow_set_result&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/workflow-extractors.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pull_workflow_spec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.pyears.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pyears_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/binary.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;qsar_binary&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.rq.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;quantreg_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/rand_forest.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rand_forest&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/rand_id.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rand_id&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/range_validate.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;range_get&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/range_validate.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;range_set&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/range_validate.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;range_validate&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/ranger_parameters.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;ranger_class_rules&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/ranger_parameters.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;ranger_reg_rules&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/ranger_parameters.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;ranger_split_rules&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflowsets.tidymodels.org/reference/rank_results.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rank_results&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/rbf_sigma.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rbf_sigma&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.rcorr.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rcorr_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/rcpp_ngram.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rcpp_ngram&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://corrr.tidymodels.org/reference/rearrange.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rearrange&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/recall.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;recall&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/recall.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;recall_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/recall.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;recall.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;recipe.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;recipe.default&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;recipe.formula&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;recipe.matrix&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/recipes.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;recipes&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/recipes_eval_select.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;recipes_eval_select&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/recipes_pkg_check.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;recipes_pkg_check&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/refresh_blueprint.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;refresh_blueprint&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/example_data.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;reg_folds&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/reg_intervals.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;reg_intervals&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/example_data.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;reg_res_lr&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/example_data.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;reg_res_sp&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/example_data.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;reg_res_svm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/ranger_parameters.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;regularization_factor&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/regularization_method.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;regularization_method&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/ranger_parameters.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;regularize_depth&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/add_formula.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;remove_formula&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/add_model.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;remove_model&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/add_recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;remove_recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/roles.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;remove_role&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/add_variables.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;remove_variables&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/rep_sample_n.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rep_sample_n&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/rep_sample_n.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rep_slice_sample&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/repair_call.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;repair_call&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://probably.tidymodels.org/reference/reportable_rate.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;reportable_rate&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/req_pkgs.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;req_pkgs&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/req_pkgs.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;req_pkgs.model_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/req_pkgs.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;req_pkgs.model_spec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/required_pkgs.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.check&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/required_pkgs.model_spec.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.model_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/required_pkgs.model_spec.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.model_spec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/required_pkgs.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/required_pkgs.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/required_pkgs.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_adasyn&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/required_pkgs.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_bsmote&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/required_pkgs.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_depth&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/required_pkgs.embed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_discretize_cart&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/required_pkgs.embed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_discretize_xgb&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/required_pkgs.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_downsample&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/required_pkgs.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_dummy_hash&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/required_pkgs.embed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_embed&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/required_pkgs.embed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_feature_hash&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/required_pkgs.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_ica&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/required_pkgs.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_isomap&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/required_pkgs.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_kpca&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/required_pkgs.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_kpca_poly&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/required_pkgs.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_kpca_rbf&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/required_pkgs.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_lda&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/required_pkgs.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_lemma&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/required_pkgs.embed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_lencode_bayes&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/required_pkgs.embed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_lencode_glm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/required_pkgs.embed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_lencode_mixed&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/required_pkgs.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_nearmiss&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/required_pkgs.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_ngram&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/required_pkgs.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_nnmf&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/required_pkgs.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_nnmf_sparse&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/required_pkgs.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_pls&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/required_pkgs.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_pos_filter&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/required_pkgs.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_rose&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/required_pkgs.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_sequence_onehot&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/required_pkgs.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_smote&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/required_pkgs.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_smotenc&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/required_pkgs.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_stem&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/required_pkgs.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_stopwords&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/required_pkgs.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_text_normalization&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/required_pkgs.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_textfeature&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/required_pkgs.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_texthash&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/required_pkgs.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_tf&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/required_pkgs.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_tfidf&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/required_pkgs.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_tokenfilter&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/required_pkgs.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_tokenize&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/required_pkgs.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_tokenize_bpe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/required_pkgs.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_tokenize_sentencepiece&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/required_pkgs.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_tokenize_wordpiece&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/required_pkgs.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_tomek&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/required_pkgs.embed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_umap&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/required_pkgs.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_untokenize&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/required_pkgs.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_upsample&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/required_pkgs.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_window&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/required_pkgs.embed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;required_pkgs.step_woe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://corrr.tidymodels.org/reference/retract.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;retract&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.ridgelm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;ridgelm_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://multilevelmod.tidymodels.org/reference/riesby.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;riesby&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/glance.rlm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rlm_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/rmse.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rmse&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/rmse.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rmse_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/rmse.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rmse.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.lmRob.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;robust_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.robustbase.lmrob.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;robustbase_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/roc_auc.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;roc_auc&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/roc_auc.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;roc_auc_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/roc_auc.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;roc_auc.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/roc_aunp.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;roc_aunp&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/roc_aunp.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;roc_aunp_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/roc_aunp.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;roc_aunp.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/roc_aunu.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;roc_aunu&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/roc_aunu.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;roc_aunu_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/roc_aunu.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;roc_aunu.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/roc_curve.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;roc_curve&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/roc_curve.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;roc_curve.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.roc.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;roc_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/roles.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;roles&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/rolling_origin.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rolling_origin&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/rpart_train.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rpart_train&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/rpd.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rpd&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/rpd.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rpd_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/rpd.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rpd.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/rpiq.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rpiq&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/rpiq.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rpiq_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/rpiq.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rpiq.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://corrr.tidymodels.org/reference/rplot.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rplot&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.rq.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rq_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.rqs.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rqs_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/rsample.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rsample&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/rsample-dplyr.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rsample-dplyr&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/rsample2caret.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rsample2caret&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/rset_reconstruct.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rset_reconstruct&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/rsq.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rsq&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/rsq_trad.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rsq_trad&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/rsq_trad.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rsq_trad_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/rsq_trad.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rsq_trad.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/rsq.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rsq_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/rsq.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rsq.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/c5_parameters.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rule_bands&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/rule_fit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rule_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/run_mold.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;run_mold&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/Sacramento.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;Sacramento&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/trees.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;sample_prop&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/trees.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;sample_size&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/rbf_sigma.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;scale_factor&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/xgboost_parameters.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;scale_pos_weight&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/scat.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;scat&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://shinymodels.tidymodels.org/reference/scat_fda_bt.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;scat_fda_bt&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/score.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;score&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/score.apd_hat_values.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;score.apd_hat_values&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/score.apd_pca.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;score.apd_pca&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/score.apd_similarity.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;score.apd_similarity&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://applicable.tidymodels.org/reference/score.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;score.default&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/scream.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;scream&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://probably.tidymodels.org/reference/segment_naive_bayes.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;segment_logistic&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://probably.tidymodels.org/reference/segment_naive_bayes.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;segment_naive_bayes&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/show_best.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;select_best&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/show_best.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;select_by_one_std_err&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/show_best.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;select_by_pct_loss&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/select_features.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;select_features&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/selections.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;selection&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/selections.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;selections&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.lavaan.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;sem_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://poissonreg.tidymodels.org/reference/seniors.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;seniors&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/sens.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;sens&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/sens.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;sens_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/sens.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;sens.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/sens.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;sensitivity&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/sens.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;sensitivity_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/sens.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;sensitivity.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/set_args.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;set_args&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/set_new_model.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;set_dependency&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/set_new_model.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;set_encoding&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/set_engine.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;set_engine&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/get_model_env.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;set_env_val&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/set_new_model.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;set_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/get_model_env.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;set_in_env&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/set_args.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;set_mode&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/set_new_model.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;set_model_arg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/set_new_model.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;set_model_engine&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/set_new_model.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;set_model_mode&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/set_new_model.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;set_new_model&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/set_new_model.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;set_pred&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/set_tf_seed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;set_tf_seed&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.survexp.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;sexpfit_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/shade_confidence_interval.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;shade_ci&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/shade_confidence_interval.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;shade_confidence_interval&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/shade_p_value.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;shade_p_value&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/shade_p_value.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;shade_pvalue&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://corrr.tidymodels.org/reference/shave.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;shave&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://shinymodels.tidymodels.org/reference/shinymodels-package.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;shinymodels&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/show_best.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;show_best&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/show_call.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;show_call&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/show_engines.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;show_engines&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/add_on_exports.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;show_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/set_new_model.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;show_model_info&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/show_tokens.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;show_tokens&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/shrink.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;shrink&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/shrinkage_correlation.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;shrinkage_correlation&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/shrinkage_correlation.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;shrinkage_frequencies&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/shrinkage_correlation.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;shrinkage_variance&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/texthash.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;signed_hash&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/ranger_parameters.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;significance_threshold&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldb.tidymodels.org/reference/simple_kmeans_db.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;simple_kmeans_db&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/slide-resampling.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;slide-resampling&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/slide-resampling.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;sliding_index&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/slide-resampling.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;sliding_period&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/slide-resampling.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;sliding_window&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/small_fine_foods.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;small_fine_foods&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/smape.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;smape&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/smape.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;smape_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/smape.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;smape.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/Smithsonian.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;Smithsonian&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/augment.smooth.spline.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;smooth.spline_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/smoothness.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;smoothness&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://discrim.tidymodels.org/reference/frac_common_cov.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;smoothness&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/smote.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;smote&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/smotenc.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;smotenc&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/solubility.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;solubility&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/solubility_test.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;solubility_test&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/solubility_test.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;solubility_test&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/sp_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;sp_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/sparse_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;sparse_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://spatialsample.tidymodels.org/reference/spatial_clustering_cv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;spatial_clustering_cv&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.sarlm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;spatialreg_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://spatialsample.tidymodels.org/reference/spatialsample.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;spatialsample&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/spec.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;spec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/spec.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;spec_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/spec.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;spec.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://probably.tidymodels.org/reference/species_probs.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;species_probs&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/spec.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;specificity&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/spec.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;specificity_vec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/spec.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;specificity.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/specify.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;specify&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.speedglm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;speedglm_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.speedlm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;speedlm_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/degree.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;spline_degree&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/ranger_parameters.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;splitting_rule&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/spruce.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;spruce&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/spruce.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;spruce_class&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/spruce.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;spruce_numeric&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/spruce.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;spruce_prob&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/stack_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;stack_predict&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/stack_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;stack_predict.elnet_numeric&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/stack_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;stack_predict.lognet_class&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/stack_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;stack_predict.lognet_prob&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/stack_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;stack_predict.multnet_class&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/stack_predict.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;stack_predict.multnet_prob&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/stackoverflow.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;stackoverflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/stacks.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;stacks&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/stacks_description.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;stacks_description&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/stacks_description.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;stacks_package&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/stan_conf_int.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;stan_conf_int&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/standardize.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;standardize&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/Chicago.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;stations&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/step_adasyn.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_adasyn&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_arrange.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_arrange&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_impute_bag.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_bagimpute&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_bin2factor.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_bin2factor&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_BoxCox.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_BoxCox&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_bs.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_bs&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/step_bsmote.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_bsmote&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_center.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_center&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_classdist.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_classdist&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_clean_levels.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_clean_levels&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_clean_names.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_clean_names&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_corr.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_corr&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_count.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_count&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_cut.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_cut&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_date.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_date&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_depth.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_depth&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_discretize.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_discretize&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/step_discretize_cart.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_discretize_cart&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/step_discretize_xgb.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_discretize_xgb&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_downsample.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_downsample&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/step_downsample.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_downsample&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_dummy.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_dummy&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_dummy_extract.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_dummy_extract&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_dummy_hash.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_dummy_hash&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_dummy_multi_choice.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_dummy_multi_choice&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/step_embed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_embed&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_factor2string.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_factor2string&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/step_feature_hash.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_feature_hash&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_filter.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_filter&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_filter_missing.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_filter_missing&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_geodist.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_geodist&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_harmonic.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_harmonic&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_holiday.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_holiday&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_hyperbolic.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_hyperbolic&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_ica.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_ica&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_impute_bag.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_impute_bag&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_impute_knn.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_impute_knn&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_impute_linear.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_impute_linear&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_impute_lower.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_impute_lower&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_impute_mean.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_impute_mean&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_impute_median.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_impute_median&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_impute_mode.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_impute_mode&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_impute_roll.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_impute_roll&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_indicate_na.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_indicate_na&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_integer.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_integer&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_interact.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_interact&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_intercept.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_intercept&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_inverse.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_inverse&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_invlogit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_invlogit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_isomap.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_isomap&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_impute_knn.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_knnimpute&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_kpca.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_kpca&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_kpca_poly.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_kpca_poly&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_kpca_rbf.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_kpca_rbf&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_lag.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_lag&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_lda.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_lda&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_lemma.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_lemma&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/step_lencode_bayes.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_lencode_bayes&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/step_lencode_glm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_lencode_glm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/step_lencode_mixed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_lencode_mixed&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_lincomb.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_lincomb&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_log.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_log&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_logit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_logit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_impute_lower.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_lowerimpute&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_impute_mean.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_meanimpute&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_impute_median.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_medianimpute&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_impute_mode.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_modeimpute&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_mutate.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_mutate&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_mutate_at.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_mutate_at&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_naomit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_naomit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/step_nearmiss.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_nearmiss&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_ngram.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_ngram&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_nnmf.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_nnmf&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_nnmf_sparse.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_nnmf_sparse&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_normalize.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_normalize&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_novel.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_novel&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_ns.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_ns&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_num2factor.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_num2factor&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_nzv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_nzv&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_ordinalscore.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_ordinalscore&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_other.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_other&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_pca.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_pca&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/step_pca_sparse.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_pca_sparse&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/step_pca_sparse_bayes.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_pca_sparse_bayes&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_percentile.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_percentile&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_pls.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_pls&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_poly.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_poly&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_pos_filter.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_pos_filter&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_profile.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_profile&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_range.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_range&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_ratio.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_ratio&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_regex.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_regex&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_relevel.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_relevel&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_relu.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_relu&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_rename.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_rename&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_rename_at.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_rename_at&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_rm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_rm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_impute_roll.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_rollimpute&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/step_rose.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_rose&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_sample.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_sample&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_scale.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_scale&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_select.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_select&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_sequence_onehot.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_sequence_onehot&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_shuffle.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_shuffle&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_slice.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_slice&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/step_smote.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_smote&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/step_smotenc.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_smotenc&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_spatialsign.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_spatialsign&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_sqrt.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_sqrt&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_stem.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_stem&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_stopwords.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_stopwords&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_string2factor.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_string2factor&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_text_normalization.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_text_normalization&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_textfeature.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_textfeature&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_texthash.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_texthash&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_tf.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_tf&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_tfidf.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_tfidf&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_tokenfilter.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_tokenfilter&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_tokenize.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_tokenize&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_tokenize_bpe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_tokenize_bpe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_tokenize_sentencepiece.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_tokenize_sentencepiece&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_tokenize_wordpiece.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_tokenize_wordpiece&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_tokenmerge.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_tokenmerge&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/step_tomek.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_tomek&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/step_umap.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_umap&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_unknown.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_unknown&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_unorder.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_unorder&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_untokenize.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_untokenize&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_upsample.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_upsample&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/step_upsample.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_upsample&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_window.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_window&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/step_woe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_woe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_word_embeddings.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_word_embeddings&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_YeoJohnson.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_YeoJohnson&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_zv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_zv&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/stop_iter.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;stop_iter&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://corrr.tidymodels.org/reference/stretch.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;stretch&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/summary_stat.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;summary_stat&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/summary_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;summary_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/summary.conf_mat.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;summary.conf_mat&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/summary.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;summary.recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/surv_dist.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;surv_dist&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/surv_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;surv_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.survdiff.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;survdiff_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.survexp.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;survexp_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.survfit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;survfit_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/survival_link.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;survival_link&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/survival_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;survival_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.survreg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;survreg_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy_svd.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;svd_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/svm_linear.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;svm_linear&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/cost.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;svm_margin&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/svm_poly.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;svm_poly&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/svm_rbf.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;svm_rbf&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.svyolr.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;svyolr_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.systemfit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;systemfit_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/t_stat.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;t_stat&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/t_test.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;t_test&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/tate_text.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tate_text&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/terms_select.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;terms_select&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/initial_split.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;testing&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/small_fine_foods.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;testing_data&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/textrecipes-package.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;textrecipes&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/themis-package.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;themis&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/threshold.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;threshold&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://probably.tidymodels.org/reference/threshold_perf.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;threshold_perf&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://probably.tidymodels.org/reference/threshold_perf.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;threshold_perf.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy_irlba.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy_irlba&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy_optim.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy_optim&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy_svd.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy_svd&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy_xyz.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy_xyz&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://poissonreg.tidymodels.org/reference/tidy_zip.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy_zip&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/tidy._elnet.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy._elnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/tidy._elnet.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy._fishnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/tidy._LiblineaR.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy._LiblineaR&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/tidy._elnet.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy._lognet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/tidy._elnet.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy._multnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.aareg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.aareg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.acf.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.acf&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.anova.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.anova&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.aov.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.aov&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.aovlist.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.aovlist&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.Arima.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.Arima&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.betamfx.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.betamfx&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.betareg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.betareg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.biglm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.biglm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.binDesign.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.binDesign&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.binWidth.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.binWidth&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.boot.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.boot&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.btergm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.btergm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.cch.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.cch&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/vector_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.character&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.check&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.check_class&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.check_cols&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.check_missing&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.check_new_values&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.check_range&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.cld.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.cld&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.clm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.clm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.clmm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.clmm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.coeftest.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.coeftest&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/conf_mat.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.conf_mat&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.confint.glht.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.confint.glht&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.confusionMatrix.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.confusionMatrix&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.coxph.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.coxph&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.crr.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.crr&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rules.tidymodels.org/reference/tidy.cubist.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.cubist&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.cv.glmnet.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.cv.glmnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/data.frame_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.data.frame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.density.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.density&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/sparse_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.dgCMatrix&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/sparse_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.dgTMatrix&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.dist.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.dist&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.drc.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.drc&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/durbinWatsonTest_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.durbinWatsonTest&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.emmGrid.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.emmGrid&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.epi.2by2.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.epi.2by2&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.ergm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.ergm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.factanal.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.factanal&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.felm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.felm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.fitdistr.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.fitdistr&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.fixest.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.fixest&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.ftable.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.ftable&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.gam.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.gam&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy_gam_hastie.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.Gam&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.garch.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.garch&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.geeglm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.geeglm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.glht.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.glht&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.glm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.glm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.glmnet.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.glmnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.robustbase.glmrob.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.glmrob&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.glmRob.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.glmRob&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.gmm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.gmm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.htest.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.htest&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://poissonreg.tidymodels.org/reference/tidy_zip.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.hurdle&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy_irlba.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.irlba&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.ivreg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.ivreg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.kappa.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.kappa&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.kde.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.kde&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.Kendall.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.Kendall&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.kmeans.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.kmeans&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.lavaan.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.lavaan&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/leveneTest_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.leveneTest&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/sp_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.Line&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/sp_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.Lines&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/list_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.list&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.lm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.lm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.lm.beta.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.lm.beta&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.lmodel2.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.lmodel2&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.robustbase.lmrob.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.lmrob&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.lmRob.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.lmRob&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/vector_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.logical&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.mfx.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.logitmfx&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.lsmobj.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.lsmobj&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.manova.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.manova&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.map.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.map&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.margins.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.margins&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.Mclust.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.Mclust&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.mediate.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.mediate&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.mfx.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.mfx&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://plsmod.tidymodels.org/reference/tidy.mixo_pls.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.mixo_pls&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://plsmod.tidymodels.org/reference/tidy.mixo_pls.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.mixo_spls&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.mjoint.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.mjoint&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.mle2.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.mle2&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.mlm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.mlm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.mlogit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.mlogit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/tidy.model_fit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.model_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.muhaz.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.muhaz&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.multinom.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.multinom&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.negbin.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.negbin&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.mfx.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.negbinmfx&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/tidy.rsplit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.nested_cv&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.nlrq.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.nlrq&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.nls.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.nls&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/null_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.NULL&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/tidy.nullmodel.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.nullmodel&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/vector_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.numeric&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy_optim.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.optim&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.orcutt.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.orcutt&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.pairwise.htest.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.pairwise.htest&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.pam.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.pam&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.plm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.plm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tidypredict.tidymodels.org/reference/tidy.pm_regression.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.pm_regression&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.mfx.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.poissonmfx&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.poLCA.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.poLCA&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.polr.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.polr&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/sp_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.Polygon&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/sp_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.Polygons&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.power.htest.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.power.htest&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.prcomp.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.prcomp&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.mfx.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.probitmfx&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.pyears.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.pyears&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.rcorr.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.rcorr&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.ref.grid.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.ref.grid&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.regsubsets.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.regsubsets&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.ridgelm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.ridgelm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.rlm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.rlm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/metafor_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.rma&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.roc.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.roc&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.rq.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.rq&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.rqs.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.rqs&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/tidy.rsplit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.rset&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/tidy.rsplit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.rsplit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.sarlm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.sarlm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/sparse_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.sparseMatrix&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/sp_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.SpatialLinesDataFrame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/sp_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.SpatialPolygons&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/sp_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.SpatialPolygonsDataFrame&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.spec.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.spec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.speedglm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.speedglm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.speedlm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.speedlm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_adasyn&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_arrange&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_bin2factor&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_BoxCox&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_bs&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_bsmote&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_center&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_classdist&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_clean_levels&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_clean_names&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_corr&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_count&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_cut&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_date&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_depth&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_discretize&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_discretize_cart&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_discretize_xgb&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_downsample&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_dummy&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_dummy_extract&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_dummy_hash&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_dummy_multi_choice&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_embed&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_factor2string&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_feature_hash&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_filter&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_filter_missing&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_geodist&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_harmonic&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_holiday&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_hyperbolic&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_ica&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_impute_bag&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_impute_knn&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_impute_linear&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_impute_lower&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_impute_mean&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_impute_median&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_impute_mode&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_impute_roll&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_indicate_na&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_integer&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_interact&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_inverse&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_invlogit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_isomap&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_kpca&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_kpca_poly&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_kpca_rbf&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_lda&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_lemma&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_lencode_bayes&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_lencode_glm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_lencode_mixed&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_lincomb&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_log&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_logit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_mutate&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_mutate_at&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_naomit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_nearmiss&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_ngram&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_nnmf&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_nnmf_sparse&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_normalize&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_novel&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_ns&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_num2factor&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_nzv&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_ordinalscore&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_other&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_pca&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_pca_sparse&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_pca_sparse_bayes&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_percentile&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_pls&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_poly&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_pos_filter&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_profile&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_range&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_ratio&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_regex&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_relevel&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_relu&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_rename&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_rename_at&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_rm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_rose&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_sample&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_scale&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_select&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_sequence_onehot&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_shuffle&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_slice&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_smote&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_smotenc&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_spatialsign&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_sqrt&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_stem&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_stopwords&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_string2factor&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_text_normalization&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_textfeature&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_texthash&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_tf&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_tfidf&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_tokenfilter&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_tokenize&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_tokenize_bpe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_tokenize_sentencepiece&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_tokenize_wordpiece&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_tokenmerge&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_tomek&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_umap&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_unknown&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_unorder&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_untokenize&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_upsample&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_window&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_woe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_word_embeddings&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_YeoJohnson&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/tidy.recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.step_zv&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.summary_emm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.summary_emm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.summary.glht.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.summary.glht&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.summary.lm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.summary.lm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/summary_tidiers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.summaryDefault&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.survdiff.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.survdiff&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.survexp.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.survexp&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.survfit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.survfit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.survreg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.survreg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.svyglm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.svyglm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.svyolr.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.svyolr&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.systemfit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.systemfit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.table.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.table&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.ts.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.ts&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.TukeyHSD.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.TukeyHSD&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.varest.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.varest&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/tidy.rsplit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.vfold_cv&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/tidy.workflow.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rules.tidymodels.org/reference/tidy.cubist.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.xrf&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://poissonreg.tidymodels.org/reference/tidy_zip.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.zeroinfl&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.zoo.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidy.zoo&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tidypredict.tidymodels.org/reference/tidypredict-package.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidypredict&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tidypredict.tidymodels.org/reference/tidypredict_fit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidypredict_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tidypredict.tidymodels.org/reference/tidypredict_interval.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidypredict_interval&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tidypredict.tidymodels.org/reference/tidypredict_sql.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidypredict_sql&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tidypredict.tidymodels.org/reference/tidypredict_sql_interval.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidypredict_sql_interval&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tidypredict.tidymodels.org/reference/tidypredict_test.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidypredict_test&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tidypredict.tidymodels.org/reference/tidypredict_to_column.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tidypredict_to_column&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/token.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;token&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/tokenlist.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tokenlist&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/initial_split.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;training&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/small_fine_foods.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;training_data&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/translate.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;translate&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/translate.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;translate.default&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/trees.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tree_depth&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/tree_frogs.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tree_frogs&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/example_data.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tree_frogs_class_test&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://stacks.tidymodels.org/reference/example_data.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tree_frogs_reg_test&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/trees.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;trees&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/tunable_embed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tunable_embed&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/tunable.step_adasyn.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tunable.step_adasyn&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/tunable.step_adasyn.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tunable.step_bsmote&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/tunable_embed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tunable.step_discretize_cart&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/tunable_embed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tunable.step_discretize_xgb&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/tunable.step_adasyn.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tunable.step_downsample&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/tunable.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tunable.step_dummy_hash&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/tunable_embed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tunable.step_embed&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/tunable.step_adasyn.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tunable.step_nearmiss&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/tunable.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tunable.step_ngram&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/tunable_embed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tunable.step_pca_sparse&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/tunable_embed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tunable.step_pca_sparse_bayes&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/tunable.step_adasyn.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tunable.step_rose&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/tunable.step_adasyn.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tunable.step_smote&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/tunable.step_adasyn.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tunable.step_smotenc&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/tunable.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tunable.step_texthash&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/tunable.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tunable.step_tf&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/tunable.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tunable.step_tokenfilter&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/tunable.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tunable.step_tokenize&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/tunable_embed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tunable.step_umap&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/tunable.step_adasyn.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tunable.step_upsample&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/tunable_embed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tunable.step_woe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/tune.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tune&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/tune_bayes.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tune_bayes&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/tune_bayes.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tune_bayes.model_spec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/tune_bayes.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tune_bayes.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/tune_grid.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tune_grid&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/tune_grid.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tune_grid.model_spec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/tune_grid.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tune_grid.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://finetune.tidymodels.org/reference/tune_race_anova.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tune_race_anova&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://finetune.tidymodels.org/reference/tune_race_anova.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tune_race_anova.model_spec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://finetune.tidymodels.org/reference/tune_race_anova.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tune_race_anova.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://finetune.tidymodels.org/reference/tune_race_win_loss.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tune_race_win_loss&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://finetune.tidymodels.org/reference/tune_race_win_loss.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tune_race_win_loss.model_spec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://finetune.tidymodels.org/reference/tune_race_win_loss.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tune_race_win_loss.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://finetune.tidymodels.org/reference/tune_sim_anneal.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tune_sim_anneal&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://finetune.tidymodels.org/reference/tune_sim_anneal.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tune_sim_anneal.model_spec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://finetune.tidymodels.org/reference/tune_sim_anneal.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;tune_sim_anneal.workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/two_class_dat.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;two_class_dat&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/two_class_dat.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;two_class_dat&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/two_class_example.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;two_class_example&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/two_class_example.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;two_class_example&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://shinymodels.tidymodels.org/reference/two_class_final.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;two_class_final&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflowsets.tidymodels.org/reference/two_class_set.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;two_class_res&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflowsets.tidymodels.org/reference/two_class_set.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;two_class_set&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/type_sum.model_spec.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;type_sum.model_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/type_sum.model_spec.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;type_sum.model_spec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/type_sum.param.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;type_sum.param&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/ui.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;ui&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/cubist_parameters.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;unbiased_rules&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/over_ratio.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;under_ratio&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/freq_cut.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;unique_cut&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/unknown.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;unknown&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/update_blueprint.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update_blueprint&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/add_on_exports.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update_dot_check&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/add_on_exports.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update_engine_parameters&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/add_formula.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update_formula&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/add_on_exports.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update_main_parameters&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/add_model.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update_model&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/update_model_info_file.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update_model_info_file&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/add_recipe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update_recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/roles.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update_role&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/add_variables.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update_variables&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflowsets.tidymodels.org/reference/update_workflow_model.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update_workflow_model&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflowsets.tidymodels.org/reference/update_workflow_model.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update_workflow_recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/parsnip_update.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update.bag_mars&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/parsnip_update.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update.bag_tree&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/parsnip_update.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update.bart&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/parsnip_update.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update.boost_tree&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/parsnip_update.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update.C5_rules&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/parsnip_update.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update.cubist_rules&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/parsnip_update.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update.decision_tree&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/parsnip_update.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update.discrim_flexible&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/parsnip_update.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update.discrim_linear&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/parsnip_update.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update.discrim_quad&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/parsnip_update.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update.discrim_regularized&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/parsnip_update.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update.gen_additive_mod&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/parsnip_update.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update.linear_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/parsnip_update.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update.logistic_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/parsnip_update.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update.mars&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/parsnip_update.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update.mlp&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/parsnip_update.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update.multinom_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/parsnip_update.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update.naive_Bayes&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/parsnip_update.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update.nearest_neighbor&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/update.parameters.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update.parameters&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/parsnip_update.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update.pls&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/parsnip_update.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update.poisson_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/parsnip_update.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update.proportional_hazards&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/parsnip_update.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update.rand_forest&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/parsnip_update.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update.rule_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/update.step.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update.step&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/parsnip_update.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update.surv_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/parsnip_update.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update.survival_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/parsnip_update.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update.svm_linear&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/parsnip_update.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update.svm_poly&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/parsnip_update.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;update.svm_rbf&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://usemodels.tidymodels.org/reference/templates.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;use_C5.0&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://usemodels.tidymodels.org/reference/templates.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;use_cubist&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://usemodels.tidymodels.org/reference/templates.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;use_earth&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://usemodels.tidymodels.org/reference/templates.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;use_glmnet&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://usemodels.tidymodels.org/reference/templates.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;use_kernlab_svm_poly&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://usemodels.tidymodels.org/reference/templates.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;use_kernlab_svm_rbf&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://usemodels.tidymodels.org/reference/templates.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;use_kknn&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/modeling-package.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;use_modeling_deps&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/modeling-package.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;use_modeling_files&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://usemodels.tidymodels.org/reference/templates.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;use_ranger&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://usemodels.tidymodels.org/reference/templates.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;use_xgboost&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/empty_ellipses.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;val_class_and_single&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://tune.tidymodels.org/reference/empty_ellipses.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;val_class_or_null&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/validate_column_names.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;validate_column_names&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://yardstick.tidymodels.org/reference/developer-helpers.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;validate_estimator&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/validate_no_formula_duplication.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;validate_no_formula_duplication&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/validate_outcomes_are_binary.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;validate_outcomes_are_binary&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/validate_outcomes_are_factors.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;validate_outcomes_are_factors&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/validate_outcomes_are_numeric.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;validate_outcomes_are_numeric&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/validate_outcomes_are_univariate.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;validate_outcomes_are_univariate&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/validate_prediction_size.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;validate_prediction_size&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://hardhat.tidymodels.org/reference/validate_predictors_are_numeric.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;validate_predictors_are_numeric&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/validation_split.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;validation_split&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/validation_split.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;validation_time_split&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/value_validate.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;value_inverse&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/value_validate.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;value_sample&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/value_validate.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;value_seq&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/value_validate.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;value_set&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/value_validate.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;value_transform&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/value_validate.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;value_validate&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/activation.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;values_activation&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/prune_method.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;values_prune_method&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/regularization_method.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;values_regularization_method&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/summary_stat.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;values_summary_stat&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/surv_dist.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;values_surv_dist&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/survival_link.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;values_survival_link&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/conditional_min_criterion.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;values_test_statistic&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/conditional_min_criterion.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;values_test_type&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/token.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;values_token&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/weight_func.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;values_weight_func&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/weight_scheme.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;values_weight_scheme&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://baguette.tidymodels.org/reference/var_imp.bagger.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;var_imp.bagger&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.varest.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;vars_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/varying.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;varying&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/varying_args.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;varying_args.model_spec&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/varying_args.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;varying_args.recipe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/varying_args.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;varying_args.step&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://rsample.tidymodels.org/reference/vfold_cv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;vfold_cv&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/visualize.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;visualise&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://infer.tidymodels.org/reference/visualize.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;visualize&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/vocabulary_size.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;vocabulary_size&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://modeldata.tidymodels.org/reference/wa_churn.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;wa_churn&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://butcher.tidymodels.org/reference/weigh.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;weigh&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/weight.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;weight&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/weight_func.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;weight_func&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/weight_scheme.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;weight_scheme&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://probably.tidymodels.org/reference/locate-equivocal.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;which_equivocal&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://dials.tidymodels.org/reference/window_size.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;window_size&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/woe_table.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;woe_table&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/workflow.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;workflow&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflowsets.tidymodels.org/reference/workflow_map.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;workflow_map&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflowsets.tidymodels.org/reference/workflow_set.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;workflow_set&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/add_variables.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;workflow_variables&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/workflow-butcher.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;workflow-butcher&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/workflow-extractors.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;workflow-extractors&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflows.tidymodels.org/reference/workflows-package.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;workflows&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://workflowsets.tidymodels.org/reference/workflowsets-package.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;workflowsets&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/xgb_train.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;xgb_train&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy_xyz.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;xyz_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://broom.tidymodels.org/reference/tidy.zoo.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;zoo_tidiers&lt;\/tt&gt;&lt;\/a&gt;&#34;],[&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;broom&#34;,&#34;tidypredict&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;dials&#34;,&#34;modeldata&#34;,&#34;themis&#34;,&#34;stacks&#34;,&#34;recipes&#34;,&#34;modeldb&#34;,&#34;workflows&#34;,&#34;hardhat&#34;,&#34;workflows&#34;,&#34;workflows&#34;,&#34;rsample&#34;,&#34;recipes&#34;,&#34;parsnip&#34;,&#34;recipes&#34;,&#34;workflows&#34;,&#34;embed&#34;,&#34;dials&#34;,&#34;broom&#34;,&#34;dials&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;modeldata&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;shinymodels&#34;,&#34;applicable&#34;,&#34;tune&#34;,&#34;rsample&#34;,&#34;probably&#34;,&#34;applicable&#34;,&#34;applicable&#34;,&#34;applicable&#34;,&#34;applicable&#34;,&#34;applicable&#34;,&#34;applicable&#34;,&#34;applicable&#34;,&#34;applicable&#34;,&#34;applicable&#34;,&#34;applicable&#34;,&#34;applicable&#34;,&#34;applicable&#34;,&#34;applicable&#34;,&#34;applicable&#34;,&#34;applicable&#34;,&#34;applicable&#34;,&#34;applicable&#34;,&#34;applicable&#34;,&#34;rsample&#34;,&#34;probably&#34;,&#34;applicable&#34;,&#34;broom&#34;,&#34;probably&#34;,&#34;corrr&#34;,&#34;corrr&#34;,&#34;tidypredict&#34;,&#34;modeldb&#34;,&#34;workflowsets&#34;,&#34;rsample&#34;,&#34;butcher&#34;,&#34;rsample&#34;,&#34;infer&#34;,&#34;modeldata&#34;,&#34;rsample&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;tune&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;parsnip&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;tune&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;tune&#34;,&#34;workflows&#34;,&#34;applicable&#34;,&#34;applicable&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;parsnip&#34;,&#34;stacks&#34;,&#34;parsnip&#34;,&#34;tune&#34;,&#34;workflowsets&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;stacks&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;workflows&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;stacks&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;workflows&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;stacks&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;workflows&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;stacks&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;workflows&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;stacks&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;workflows&#34;,&#34;butcher&#34;,&#34;stacks&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;baguette&#34;,&#34;baguette&#34;,&#34;baguette&#34;,&#34;baguette&#34;,&#34;baguette&#34;,&#34;baguette&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;dials&#34;,&#34;parsnip&#34;,&#34;dials&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;applicable&#34;,&#34;applicable&#34;,&#34;applicable&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;modeldata&#34;,&#34;modeldata&#34;,&#34;modeldata&#34;,&#34;modeldata&#34;,&#34;modeldata&#34;,&#34;stacks&#34;,&#34;parsnip&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;rsample&#34;,&#34;broom&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;themis&#34;,&#34;broom&#34;,&#34;stacks&#34;,&#34;stacks&#34;,&#34;stacks&#34;,&#34;stacks&#34;,&#34;butcher&#34;,&#34;butcher&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;infer&#34;,&#34;modeldata&#34;,&#34;broom&#34;,&#34;rsample&#34;,&#34;shinymodels&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;broom&#34;,&#34;shinymodels&#34;,&#34;modeldata&#34;,&#34;broom&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;hardhat&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;recipes&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;hardhat&#34;,&#34;hardhat&#34;,&#34;hardhat&#34;,&#34;hardhat&#34;,&#34;hardhat&#34;,&#34;hardhat&#34;,&#34;hardhat&#34;,&#34;recipes&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;modeldata&#34;,&#34;recipes&#34;,&#34;tune&#34;,&#34;workflowsets&#34;,&#34;workflowsets&#34;,&#34;modeldata&#34;,&#34;infer&#34;,&#34;infer&#34;,&#34;themis&#34;,&#34;baguette&#34;,&#34;stacks&#34;,&#34;probably&#34;,&#34;stacks&#34;,&#34;stacks&#34;,&#34;dials&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;broom&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;broom&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;workflowsets&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;stacks&#34;,&#34;stacks&#34;,&#34;stacks&#34;,&#34;stacks&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;workflowsets&#34;,&#34;corrr&#34;,&#34;workflowsets&#34;,&#34;workflowsets&#34;,&#34;workflowsets&#34;,&#34;workflowsets&#34;,&#34;rules&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;modeldata&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;tune&#34;,&#34;infer&#34;,&#34;yardstick&#34;,&#34;tune&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;dials&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;hardhat&#34;,&#34;parsnip&#34;,&#34;baguette&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;parsnip&#34;,&#34;finetune&#34;,&#34;tune&#34;,&#34;finetune&#34;,&#34;stacks&#34;,&#34;stacks&#34;,&#34;stacks&#34;,&#34;workflows&#34;,&#34;parsnip&#34;,&#34;tune&#34;,&#34;corrr&#34;,&#34;corrr&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;modeldata&#34;,&#34;broom&#34;,&#34;hardhat&#34;,&#34;modeldata&#34;,&#34;modeldata&#34;,&#34;rules&#34;,&#34;parsnip&#34;,&#34;recipes&#34;,&#34;broom&#34;,&#34;modeldb&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;broom&#34;,&#34;hardhat&#34;,&#34;hardhat&#34;,&#34;hardhat&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;hardhat&#34;,&#34;recipes&#34;,&#34;infer&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;recipes&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;corrr&#34;,&#34;embed&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;discrim&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;shinymodels&#34;,&#34;dials&#34;,&#34;parsnip&#34;,&#34;yardstick&#34;,&#34;broom&#34;,&#34;modeldata&#34;,&#34;rsample&#34;,&#34;dials&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;broom&#34;,&#34;embed&#34;,&#34;embed&#34;,&#34;broom&#34;,&#34;textrecipes&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;dials&#34;,&#34;broom&#34;,&#34;dials&#34;,&#34;broom&#34;,&#34;tune&#34;,&#34;parsnip&#34;,&#34;tune&#34;,&#34;stacks&#34;,&#34;hardhat&#34;,&#34;hardhat&#34;,&#34;tune&#34;,&#34;shinymodels&#34;,&#34;shinymodels&#34;,&#34;tune&#34;,&#34;hardhat&#34;,&#34;parsnip&#34;,&#34;tune&#34;,&#34;workflows&#34;,&#34;workflowsets&#34;,&#34;hardhat&#34;,&#34;tune&#34;,&#34;workflows&#34;,&#34;workflowsets&#34;,&#34;tune&#34;,&#34;hardhat&#34;,&#34;tune&#34;,&#34;workflows&#34;,&#34;workflowsets&#34;,&#34;hardhat&#34;,&#34;parsnip&#34;,&#34;workflows&#34;,&#34;hardhat&#34;,&#34;parsnip&#34;,&#34;workflows&#34;,&#34;hardhat&#34;,&#34;tune&#34;,&#34;workflows&#34;,&#34;workflowsets&#34;,&#34;hardhat&#34;,&#34;hardhat&#34;,&#34;tune&#34;,&#34;workflows&#34;,&#34;workflowsets&#34;,&#34;hardhat&#34;,&#34;parsnip&#34;,&#34;tune&#34;,&#34;workflows&#34;,&#34;workflowsets&#34;,&#34;hardhat&#34;,&#34;workflowsets&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;workflowsets&#34;,&#34;parsnip&#34;,&#34;tune&#34;,&#34;workflows&#34;,&#34;dials&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;broom&#34;,&#34;corrr&#34;,&#34;broom&#34;,&#34;tune&#34;,&#34;dials&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;parsnip&#34;,&#34;finetune&#34;,&#34;broom&#34;,&#34;shinymodels&#34;,&#34;corrr&#34;,&#34;shinymodels&#34;,&#34;parsnip&#34;,&#34;tune&#34;,&#34;stacks&#34;,&#34;discrim&#34;,&#34;discrim&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;parsnip&#34;,&#34;workflows&#34;,&#34;infer&#34;,&#34;parsnip&#34;,&#34;workflows&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;corrr&#34;,&#34;corrr&#34;,&#34;corrr&#34;,&#34;hardhat&#34;,&#34;rsample&#34;,&#34;recipes&#34;,&#34;shinymodels&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;discrim&#34;,&#34;discrim&#34;,&#34;dials&#34;,&#34;recipes&#34;,&#34;dials&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;rsample&#34;,&#34;multilevelmod&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;parsnip&#34;,&#34;infer&#34;,&#34;dials&#34;,&#34;infer&#34;,&#34;infer&#34;,&#34;hardhat&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;stacks&#34;,&#34;stacks&#34;,&#34;stacks&#34;,&#34;stacks&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;recipes&#34;,&#34;hardhat&#34;,&#34;dials&#34;,&#34;parsnip&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;hardhat&#34;,&#34;dials&#34;,&#34;infer&#34;,&#34;infer&#34;,&#34;infer&#34;,&#34;parsnip&#34;,&#34;infer&#34;,&#34;dials&#34;,&#34;tune&#34;,&#34;yardstick&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;parsnip&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;workflows&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;parsnip&#34;,&#34;broom&#34;,&#34;modeldata&#34;,&#34;modeldata&#34;,&#34;modeldata&#34;,&#34;modeldata&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;rsample&#34;,&#34;infer&#34;,&#34;hardhat&#34;,&#34;hardhat&#34;,&#34;hardhat&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;broom&#34;,&#34;modeldata&#34;,&#34;yardstick&#34;,&#34;modeldata&#34;,&#34;broom&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;infer&#34;,&#34;infer&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;recipes&#34;,&#34;infer&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;broom&#34;,&#34;hardhat&#34;,&#34;probably&#34;,&#34;probably&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;embed&#34;,&#34;workflows&#34;,&#34;dials&#34;,&#34;parsnip&#34;,&#34;tune&#34;,&#34;broom&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;broom&#34;,&#34;recipes&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;dials&#34;,&#34;broom&#34;,&#34;parsnip&#34;,&#34;tidypredict&#34;,&#34;broom&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;dials&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;dials&#34;,&#34;workflowsets&#34;,&#34;modeldata&#34;,&#34;probably&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;parsnip&#34;,&#34;modeldb&#34;,&#34;parsnip&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;tune&#34;,&#34;butcher&#34;,&#34;probably&#34;,&#34;broom&#34;,&#34;stacks&#34;,&#34;stacks&#34;,&#34;parsnip&#34;,&#34;multilevelmod&#34;,&#34;rsample&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;parsnip&#34;,&#34;probably&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;probably&#34;,&#34;rsample&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;parsnip&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;brulee&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;rules&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;rsample&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;broom&#34;,&#34;modeldata&#34;,&#34;broom&#34;,&#34;butcher&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;tune&#34;,&#34;yardstick&#34;,&#34;broom&#34;,&#34;parsnip&#34;,&#34;dials&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;dials&#34;,&#34;parsnip&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;broom&#34;,&#34;modeldata&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;parsnip&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;hardhat&#34;,&#34;hardhat&#34;,&#34;hardhat&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;modeldb&#34;,&#34;hardhat&#34;,&#34;hardhat&#34;,&#34;hardhat&#34;,&#34;hardhat&#34;,&#34;hardhat&#34;,&#34;dials&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;multilevelmod&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;rules&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;rules&#34;,&#34;parsnip&#34;,&#34;rules&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;poissonreg&#34;,&#34;parsnip&#34;,&#34;plsmod&#34;,&#34;plsmod&#34;,&#34;plsmod&#34;,&#34;plsmod&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;rules&#34;,&#34;parsnip&#34;,&#34;multilevelmod&#34;,&#34;parsnip&#34;,&#34;broom&#34;,&#34;parsnip&#34;,&#34;recipes&#34;,&#34;parsnip&#34;,&#34;themis&#34;,&#34;dials&#34;,&#34;rsample&#34;,&#34;corrr&#34;,&#34;hardhat&#34;,&#34;yardstick&#34;,&#34;hardhat&#34;,&#34;hardhat&#34;,&#34;hardhat&#34;,&#34;hardhat&#34;,&#34;tune&#34;,&#34;hardhat&#34;,&#34;butcher&#34;,&#34;parsnip&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;hardhat&#34;,&#34;rsample&#34;,&#34;hardhat&#34;,&#34;hardhat&#34;,&#34;hardhat&#34;,&#34;yardstick&#34;,&#34;dials&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;dials&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;parsnip&#34;,&#34;broom&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;infer&#34;,&#34;modeldata&#34;,&#34;modeldata&#34;,&#34;applicable&#34;,&#34;applicable&#34;,&#34;applicable&#34;,&#34;modeldata&#34;,&#34;broom&#34;,&#34;workflowsets&#34;,&#34;workflowsets&#34;,&#34;workflowsets&#34;,&#34;workflowsets&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;shinymodels&#34;,&#34;shinymodels&#34;,&#34;shinymodels&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;dials&#34;,&#34;infer&#34;,&#34;corrr&#34;,&#34;broom&#34;,&#34;discrim&#34;,&#34;modeldata&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;tune&#34;,&#34;dials&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;tidypredict&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;modeldata&#34;,&#34;yardstick&#34;,&#34;modeldata&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;modeldata&#34;,&#34;shinymodels&#34;,&#34;rsample&#34;,&#34;broom&#34;,&#34;modeldb&#34;,&#34;shinymodels&#34;,&#34;shinymodels&#34;,&#34;shinymodels&#34;,&#34;shinymodels&#34;,&#34;shinymodels&#34;,&#34;shinymodels&#34;,&#34;shinymodels&#34;,&#34;shinymodels&#34;,&#34;shinymodels&#34;,&#34;shinymodels&#34;,&#34;finetune&#34;,&#34;shinymodels&#34;,&#34;shinymodels&#34;,&#34;shinymodels&#34;,&#34;shinymodels&#34;,&#34;shinymodels&#34;,&#34;shinymodels&#34;,&#34;parsnip&#34;,&#34;plsmod&#34;,&#34;plsmod&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;parsnip&#34;,&#34;poissonreg&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;rsample&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;broom&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;poissonreg&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;workflows&#34;,&#34;baguette&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;stacks&#34;,&#34;recipes&#34;,&#34;parsnip&#34;,&#34;stacks&#34;,&#34;parsnip&#34;,&#34;workflows&#34;,&#34;stacks&#34;,&#34;stacks&#34;,&#34;stacks&#34;,&#34;stacks&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;parsnip&#34;,&#34;recipes&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;spatialsample&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;applicable&#34;,&#34;applicable&#34;,&#34;applicable&#34;,&#34;infer&#34;,&#34;infer&#34;,&#34;infer&#34;,&#34;parsnip&#34;,&#34;recipes&#34;,&#34;shinymodels&#34;,&#34;tidypredict&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;tune&#34;,&#34;probably&#34;,&#34;dials&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;infer&#34;,&#34;parsnip&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;broom&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;tune&#34;,&#34;workflowsets&#34;,&#34;workflows&#34;,&#34;workflows&#34;,&#34;workflows&#34;,&#34;workflows&#34;,&#34;workflowsets&#34;,&#34;workflows&#34;,&#34;broom&#34;,&#34;applicable&#34;,&#34;broom&#34;,&#34;parsnip&#34;,&#34;recipes&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;workflowsets&#34;,&#34;dials&#34;,&#34;broom&#34;,&#34;textrecipes&#34;,&#34;corrr&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;hardhat&#34;,&#34;stacks&#34;,&#34;rsample&#34;,&#34;stacks&#34;,&#34;stacks&#34;,&#34;stacks&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;workflows&#34;,&#34;workflows&#34;,&#34;workflows&#34;,&#34;recipes&#34;,&#34;workflows&#34;,&#34;infer&#34;,&#34;infer&#34;,&#34;parsnip&#34;,&#34;probably&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;recipes&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;themis&#34;,&#34;themis&#34;,&#34;recipes&#34;,&#34;embed&#34;,&#34;embed&#34;,&#34;themis&#34;,&#34;textrecipes&#34;,&#34;embed&#34;,&#34;embed&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;embed&#34;,&#34;embed&#34;,&#34;embed&#34;,&#34;themis&#34;,&#34;textrecipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;textrecipes&#34;,&#34;themis&#34;,&#34;textrecipes&#34;,&#34;themis&#34;,&#34;themis&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;themis&#34;,&#34;embed&#34;,&#34;textrecipes&#34;,&#34;themis&#34;,&#34;recipes&#34;,&#34;embed&#34;,&#34;corrr&#34;,&#34;broom&#34;,&#34;multilevelmod&#34;,&#34;broom&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;broom&#34;,&#34;recipes&#34;,&#34;rsample&#34;,&#34;parsnip&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;corrr&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;dials&#34;,&#34;parsnip&#34;,&#34;hardhat&#34;,&#34;modeldata&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;modeldata&#34;,&#34;shinymodels&#34;,&#34;applicable&#34;,&#34;applicable&#34;,&#34;applicable&#34;,&#34;applicable&#34;,&#34;applicable&#34;,&#34;hardhat&#34;,&#34;probably&#34;,&#34;probably&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;dials&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;broom&#34;,&#34;poissonreg&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;broom&#34;,&#34;infer&#34;,&#34;infer&#34;,&#34;infer&#34;,&#34;infer&#34;,&#34;corrr&#34;,&#34;shinymodels&#34;,&#34;tune&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;textrecipes&#34;,&#34;hardhat&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;modeldb&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;modeldata&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;modeldata&#34;,&#34;broom&#34;,&#34;dials&#34;,&#34;discrim&#34;,&#34;themis&#34;,&#34;themis&#34;,&#34;embed&#34;,&#34;modeldata&#34;,&#34;yardstick&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;spatialsample&#34;,&#34;broom&#34;,&#34;spatialsample&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;probably&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;yardstick&#34;,&#34;infer&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;hardhat&#34;,&#34;hardhat&#34;,&#34;hardhat&#34;,&#34;hardhat&#34;,&#34;stacks&#34;,&#34;stacks&#34;,&#34;stacks&#34;,&#34;stacks&#34;,&#34;stacks&#34;,&#34;stacks&#34;,&#34;modeldata&#34;,&#34;stacks&#34;,&#34;stacks&#34;,&#34;stacks&#34;,&#34;parsnip&#34;,&#34;hardhat&#34;,&#34;modeldata&#34;,&#34;recipes&#34;,&#34;themis&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;themis&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;embed&#34;,&#34;embed&#34;,&#34;recipes&#34;,&#34;themis&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;textrecipes&#34;,&#34;recipes&#34;,&#34;embed&#34;,&#34;recipes&#34;,&#34;embed&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;embed&#34;,&#34;embed&#34;,&#34;embed&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;themis&#34;,&#34;textrecipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;embed&#34;,&#34;embed&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;textrecipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;themis&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;textrecipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;themis&#34;,&#34;themis&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;recipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;themis&#34;,&#34;embed&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;textrecipes&#34;,&#34;recipes&#34;,&#34;themis&#34;,&#34;recipes&#34;,&#34;embed&#34;,&#34;textrecipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;dials&#34;,&#34;corrr&#34;,&#34;dials&#34;,&#34;broom&#34;,&#34;yardstick&#34;,&#34;recipes&#34;,&#34;dials&#34;,&#34;parsnip&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;dials&#34;,&#34;parsnip&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;parsnip&#34;,&#34;dials&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;infer&#34;,&#34;infer&#34;,&#34;modeldata&#34;,&#34;recipes&#34;,&#34;rsample&#34;,&#34;modeldata&#34;,&#34;textrecipes&#34;,&#34;themis&#34;,&#34;dials&#34;,&#34;probably&#34;,&#34;probably&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;poissonreg&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;yardstick&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;rules&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;poissonreg&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;plsmod&#34;,&#34;plsmod&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;parsnip&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;rsample&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;parsnip&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;tidypredict&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;embed&#34;,&#34;recipes&#34;,&#34;textrecipes&#34;,&#34;themis&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;recipes&#34;,&#34;themis&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;themis&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;embed&#34;,&#34;embed&#34;,&#34;themis&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;textrecipes&#34;,&#34;recipes&#34;,&#34;embed&#34;,&#34;recipes&#34;,&#34;embed&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;embed&#34;,&#34;embed&#34;,&#34;embed&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;themis&#34;,&#34;textrecipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;embed&#34;,&#34;embed&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;textrecipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;themis&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;textrecipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;themis&#34;,&#34;themis&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;recipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;themis&#34;,&#34;embed&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;textrecipes&#34;,&#34;themis&#34;,&#34;recipes&#34;,&#34;embed&#34;,&#34;textrecipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;broom&#34;,&#34;rsample&#34;,&#34;workflows&#34;,&#34;rules&#34;,&#34;poissonreg&#34;,&#34;broom&#34;,&#34;tidypredict&#34;,&#34;tidypredict&#34;,&#34;tidypredict&#34;,&#34;tidypredict&#34;,&#34;tidypredict&#34;,&#34;tidypredict&#34;,&#34;tidypredict&#34;,&#34;dials&#34;,&#34;textrecipes&#34;,&#34;rsample&#34;,&#34;modeldata&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;dials&#34;,&#34;stacks&#34;,&#34;stacks&#34;,&#34;stacks&#34;,&#34;dials&#34;,&#34;embed&#34;,&#34;themis&#34;,&#34;themis&#34;,&#34;embed&#34;,&#34;embed&#34;,&#34;themis&#34;,&#34;textrecipes&#34;,&#34;embed&#34;,&#34;themis&#34;,&#34;textrecipes&#34;,&#34;embed&#34;,&#34;embed&#34;,&#34;themis&#34;,&#34;themis&#34;,&#34;themis&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;embed&#34;,&#34;themis&#34;,&#34;embed&#34;,&#34;hardhat&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;finetune&#34;,&#34;finetune&#34;,&#34;finetune&#34;,&#34;finetune&#34;,&#34;finetune&#34;,&#34;finetune&#34;,&#34;finetune&#34;,&#34;finetune&#34;,&#34;finetune&#34;,&#34;modeldata&#34;,&#34;rsample&#34;,&#34;modeldata&#34;,&#34;yardstick&#34;,&#34;shinymodels&#34;,&#34;workflowsets&#34;,&#34;workflowsets&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;dials&#34;,&#34;butcher&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;hardhat&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;workflows&#34;,&#34;parsnip&#34;,&#34;workflows&#34;,&#34;parsnip&#34;,&#34;workflows&#34;,&#34;recipes&#34;,&#34;workflows&#34;,&#34;workflowsets&#34;,&#34;workflowsets&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;dials&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;recipes&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;usemodels&#34;,&#34;usemodels&#34;,&#34;usemodels&#34;,&#34;usemodels&#34;,&#34;usemodels&#34;,&#34;usemodels&#34;,&#34;usemodels&#34;,&#34;hardhat&#34;,&#34;hardhat&#34;,&#34;usemodels&#34;,&#34;usemodels&#34;,&#34;tune&#34;,&#34;tune&#34;,&#34;hardhat&#34;,&#34;yardstick&#34;,&#34;hardhat&#34;,&#34;hardhat&#34;,&#34;hardhat&#34;,&#34;hardhat&#34;,&#34;hardhat&#34;,&#34;hardhat&#34;,&#34;hardhat&#34;,&#34;rsample&#34;,&#34;rsample&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;baguette&#34;,&#34;broom&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;rsample&#34;,&#34;infer&#34;,&#34;infer&#34;,&#34;dials&#34;,&#34;modeldata&#34;,&#34;butcher&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;dials&#34;,&#34;probably&#34;,&#34;dials&#34;,&#34;embed&#34;,&#34;workflows&#34;,&#34;workflowsets&#34;,&#34;workflowsets&#34;,&#34;workflows&#34;,&#34;workflows&#34;,&#34;workflows&#34;,&#34;workflows&#34;,&#34;workflowsets&#34;,&#34;parsnip&#34;,&#34;broom&#34;,&#34;broom&#34;]],&#34;container&#34;:&#34;&lt;table class=\&#34;cell-border stripe\&#34;&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;title&lt;\/th&gt;\n      &lt;th&gt;topic&lt;\/th&gt;\n      &lt;th&gt;package&lt;\/th&gt;\n    &lt;\/tr&gt;\n  &lt;\/thead&gt;\n&lt;\/table&gt;&#34;,&#34;options&#34;:{&#34;pageLength&#34;:5,&#34;columnDefs&#34;:[],&#34;order&#34;:[],&#34;autoWidth&#34;:false,&#34;orderClasses&#34;:false,&#34;orderCellsTop&#34;:true,&#34;lengthMenu&#34;:[5,10,25,50,100]}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
</description>
  </item>
  
<item>
  <title>Tidy Modeling with R</title>
  <link>https://www.tidymodels.org/books/tmwr/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/books/tmwr/</guid>
  <description>&lt;p&gt;&lt;img src=&#34;cover.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Modeling of data is integral to science, business, politics, and many other aspects of our lives. The goals of this book are to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;introduce and demonstrate how to use the tidymodels packages, and&lt;/li&gt;
&lt;li&gt;outline good practices for the phases of the modeling process.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An &lt;strong&gt;HTML version&lt;/strong&gt; of this text can be found at &lt;a href=&#34;https://tmwr.org&#34;&gt;https://tmwr.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The sources to create the book are available in the GitHub repository &lt;a href=&#34;https://github.com/tidymodels/TMwR&#34;&gt;https://github.com/tidymodels/TMwR&lt;/a&gt;.&lt;/p&gt;
</description>
  </item>
  
<item>
  <title>Classification models using a neural network</title>
  <link>https://www.tidymodels.org/learn/models/parsnip-nnet/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/learn/models/parsnip-nnet/</guid>
  <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;To use the code in this article, you will need to install the following packages: keras and tidymodels. You will also need the python keras library installed (see &lt;code&gt;?keras::install_keras()&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;We can create classification models with the tidymodels package &lt;a href=&#34;https://parsnip.tidymodels.org/&#34;&gt;parsnip&lt;/a&gt; to predict categorical quantities or class labels. Here, let&amp;rsquo;s fit a single classification model using a neural network and evaluate using a validation set. While the &lt;a href=&#34;https://tune.tidymodels.org/&#34;&gt;tune&lt;/a&gt; package has functionality to also do this, the parsnip package is the center of attention in this article so that we can better understand its usage.&lt;/p&gt;
&lt;h2 id=&#34;fitting-a-neural-network&#34;&gt;Fitting a neural network&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s fit a model to a small, two predictor classification data set. The data are in the modeldata package (part of tidymodels) and have been split into training, validation, and test data sets. In this analysis, the test set is left untouched; this article tries to emulate a good data usage methodology where the test set would only be evaluated once at the end after a variety of models have been considered.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;data&lt;/span&gt;(bivariate)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;nrow&lt;/span&gt;(bivariate_train)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 1009&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;nrow&lt;/span&gt;(bivariate_val)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 300&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A plot of the data shows two right-skewed predictors:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(bivariate_train, &lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; A, y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; B, col &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; Class)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_point&lt;/span&gt;(alpha &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;.2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/biv-plot-1.svg&#34; width=&#34;576&#34; /&gt;
&lt;p&gt;Let&amp;rsquo;s use a single hidden layer neural network to predict the outcome. To do this, we transform the predictor columns to be more symmetric (via the &lt;code&gt;step_BoxCox()&lt;/code&gt; function) and on a common scale (using &lt;code&gt;step_normalize()&lt;/code&gt;). We can use &lt;a href=&#34;https://recipes.tidymodels.org/&#34;&gt;recipes&lt;/a&gt; to do so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;biv_rec &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;recipe&lt;/span&gt;(Class &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; ., data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; bivariate_train) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_BoxCox&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;all_predictors&lt;/span&gt;())&lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_normalize&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;all_predictors&lt;/span&gt;()) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;prep&lt;/span&gt;(training &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; bivariate_train, retain &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# We will bake(new_data = NULL) to get the processed training set back&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# For validation:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;val_normalized &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;bake&lt;/span&gt;(biv_rec, new_data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; bivariate_val, &lt;span style=&#34;color:#00f&#34;&gt;all_predictors&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# For testing when we arrive at a final model: &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test_normalized &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;bake&lt;/span&gt;(biv_rec, new_data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; bivariate_test, &lt;span style=&#34;color:#00f&#34;&gt;all_predictors&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can use the keras package to fit a model with 5 hidden units and a 10% dropout rate, to regularize the model:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;57974&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nnet_fit &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mlp&lt;/span&gt;(epochs &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt;, hidden_units &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;, dropout &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.1&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;set_mode&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;classification&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Also set engine-specific `verbose` argument to prevent logging the results: &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;set_engine&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;keras&amp;#34;&lt;/span&gt;, verbose &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;fit&lt;/span&gt;(Class &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; ., data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;bake&lt;/span&gt;(biv_rec, new_data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Loaded Tensorflow version 2.6.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nnet_fit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; parsnip model object&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Model: &amp;#34;sequential&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ________________________________________________________________________________&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Layer (type)                        Output Shape                    Param #     &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ================================================================================&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; dense (Dense)                       (None, 5)                       15          &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ________________________________________________________________________________&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; dense_1 (Dense)                     (None, 5)                       30          &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ________________________________________________________________________________&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; dropout (Dropout)                   (None, 5)                       0           &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ________________________________________________________________________________&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; dense_2 (Dense)                     (None, 2)                       12          &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ================================================================================&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Total params: 57&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Trainable params: 57&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Non-trainable params: 0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ________________________________________________________________________________&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;model-performance&#34;&gt;Model performance&lt;/h2&gt;
&lt;p&gt;In parsnip, the &lt;code&gt;predict()&lt;/code&gt; function can be used to characterize performance on the validation set. Since parsnip always produces tibble outputs, these can just be column bound to the original data:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;val_results &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  bivariate_val &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;bind_cols&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;predict&lt;/span&gt;(nnet_fit, new_data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; val_normalized),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;predict&lt;/span&gt;(nnet_fit, new_data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; val_normalized, type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;prob&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;val_results &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;slice&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 5 × 6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       A     B Class .pred_class .pred_One .pred_Two&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt; &amp;lt;fct&amp;gt;           &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 1061.  74.5 One   Two             0.444    0.556 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 1241.  83.4 One   Two             0.464    0.536 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3  939.  71.9 One   One             0.778    0.222 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4  813.  77.1 One   One             0.988    0.0123&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5 1706.  92.8 Two   Two             0.231    0.769&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;val_results &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;roc_auc&lt;/span&gt;(truth &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; Class, .pred_One)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   .metric .estimator .estimate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 roc_auc binary         0.815&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;val_results &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;accuracy&lt;/span&gt;(truth &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; Class, .pred_class)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   .metric  .estimator .estimate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 accuracy binary         0.733&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;val_results &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;conf_mat&lt;/span&gt;(truth &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; Class, .pred_class)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;           Truth&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Prediction One Two&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;        One 150  28&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;        Two  52  70&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s also create a grid to get a visual sense of the class boundary for the validation set.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a_rng &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;range&lt;/span&gt;(bivariate_train&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;A)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b_rng &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;range&lt;/span&gt;(bivariate_train&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;B)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x_grid &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;expand.grid&lt;/span&gt;(A &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;seq&lt;/span&gt;(a_rng[1], a_rng[2], length.out &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              B &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;seq&lt;/span&gt;(b_rng[1], b_rng[2], length.out &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x_grid_trans &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;bake&lt;/span&gt;(biv_rec, x_grid)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Make predictions using the transformed predictors but &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# attach them to the predictors in the original units: &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x_grid &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  x_grid &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;bind_cols&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;predict&lt;/span&gt;(nnet_fit, x_grid_trans, type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;prob&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(x_grid, &lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; A, y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; B)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_contour&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(z &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; .pred_One), breaks &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;.5&lt;/span&gt;, col &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;black&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_point&lt;/span&gt;(data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; bivariate_val, &lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(col &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; Class), alpha &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/biv-boundary-1.svg&#34; width=&#34;576&#34; /&gt;
&lt;h2 id=&#34;session-information&#34;&gt;Session information&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#&amp;gt; ─ Session info ─────────────────────────────────────────────────────
#&amp;gt;  setting  value
#&amp;gt;  version  R version 4.1.2 (2021-11-01)
#&amp;gt;  os       macOS Monterey 12.3
#&amp;gt;  system   aarch64, darwin20
#&amp;gt;  ui       X11
#&amp;gt;  language (EN)
#&amp;gt;  collate  en_GB.UTF-8
#&amp;gt;  ctype    en_GB.UTF-8
#&amp;gt;  tz       Europe/London
#&amp;gt;  date     2022-04-11
#&amp;gt;  pandoc   2.14.0.3 @ /Applications/RStudio.app/Contents/MacOS/pandoc/ (via rmarkdown)
#&amp;gt; 
#&amp;gt; ─ Packages ─────────────────────────────────────────────────────────
#&amp;gt;  package    * version date (UTC) lib source
#&amp;gt;  broom      * 0.7.12  2022-01-28 [1] CRAN (R 4.1.1)
#&amp;gt;  dials      * 0.1.1   2022-04-06 [1] CRAN (R 4.1.2)
#&amp;gt;  dplyr      * 1.0.8   2022-02-08 [1] CRAN (R 4.1.2)
#&amp;gt;  ggplot2    * 3.3.5   2021-06-25 [1] CRAN (R 4.1.1)
#&amp;gt;  infer      * 1.0.0   2021-08-13 [1] CRAN (R 4.1.1)
#&amp;gt;  keras        2.8.0   2022-02-10 [1] CRAN (R 4.1.1)
#&amp;gt;  parsnip    * 0.2.1   2022-03-17 [1] CRAN (R 4.1.1)
#&amp;gt;  purrr      * 0.3.4   2020-04-17 [1] CRAN (R 4.1.0)
#&amp;gt;  recipes    * 0.2.0   2022-02-18 [1] CRAN (R 4.1.1)
#&amp;gt;  rlang        1.0.2   2022-03-04 [1] CRAN (R 4.1.1)
#&amp;gt;  rsample    * 0.1.1   2021-11-08 [1] CRAN (R 4.1.2)
#&amp;gt;  tibble     * 3.1.6   2021-11-07 [1] CRAN (R 4.1.1)
#&amp;gt;  tidymodels * 0.2.0   2022-03-19 [1] CRAN (R 4.1.1)
#&amp;gt;  tune       * 0.2.0   2022-03-19 [1] CRAN (R 4.1.2)
#&amp;gt;  workflows  * 0.2.6   2022-03-18 [1] CRAN (R 4.1.2)
#&amp;gt;  yardstick  * 0.0.9   2021-11-22 [1] CRAN (R 4.1.1)
#&amp;gt; 
#&amp;gt;  [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library
#&amp;gt; 
#&amp;gt; ─ Python configuration ─────────────────────────────────────────────
#&amp;gt;  python:         /opt/homebrew/Caskroom/miniforge/base/envs/tf_env/bin/python
#&amp;gt;  libpython:      /opt/homebrew/Caskroom/miniforge/base/envs/tf_env/lib/libpython3.9.dylib
#&amp;gt;  pythonhome:     /opt/homebrew/Caskroom/miniforge/base/envs/tf_env:/opt/homebrew/Caskroom/miniforge/base/envs/tf_env
#&amp;gt;  version:        3.9.7 | packaged by conda-forge | (default, Sep 29 2021, 19:24:02)  [Clang 11.1.0 ]
#&amp;gt;  numpy:          /opt/homebrew/Caskroom/miniforge/base/envs/tf_env/lib/python3.9/site-packages/numpy
#&amp;gt;  numpy_version:  1.19.5
#&amp;gt;  tensorflow:     /opt/homebrew/Caskroom/miniforge/base/envs/tf_env/lib/python3.9/site-packages/tensorflow
#&amp;gt;  
#&amp;gt;  NOTE: Python version was forced by RETICULATE_PYTHON
#&amp;gt; 
#&amp;gt; ────────────────────────────────────────────────────────────────────
&lt;/code&gt;&lt;/pre&gt;</description>
  </item>
  
<item>
  <title>How to build a parsnip model</title>
  <link>https://www.tidymodels.org/learn/develop/models/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/learn/develop/models/</guid>
  <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;To use the code in this article, you will need to install the following packages: mda, modeldata, and tidymodels.&lt;/p&gt;
&lt;p&gt;The parsnip package constructs models and predictions by representing those actions in expressions. There are a few reasons for this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It eliminates a lot of duplicate code.&lt;/li&gt;
&lt;li&gt;Since the expressions are not evaluated until fitting, it eliminates many package dependencies.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A parsnip model function is itself very general. For example, the &lt;code&gt;logistic_reg()&lt;/code&gt; function itself doesn&amp;rsquo;t have any model code within it. Instead, each model function is associated with one or more computational &lt;em&gt;engines&lt;/em&gt;. These might be different R packages or some function in another language (that can be evaluated by R).&lt;/p&gt;
&lt;p&gt;This article describes the process of creating a new model function. Before proceeding, take a minute and read our &lt;a href=&#34;https://tidymodels.github.io/model-implementation-principles/&#34;&gt;guidelines on creating modeling packages&lt;/a&gt; to understand the general themes and conventions that we use.&lt;/p&gt;
&lt;h2 id=&#34;an-example-model&#34;&gt;An example model&lt;/h2&gt;
&lt;p&gt;As an example, we&amp;rsquo;ll create a function for &lt;em&gt;mixture discriminant analysis&lt;/em&gt;. There are &lt;a href=&#34;http://search.r-project.org/cgi-bin/namazu.cgi?query=%22mixture+discriminant%22&amp;amp;max=100&amp;amp;result=normal&amp;amp;sort=score&amp;amp;idxname=functions&#34;&gt;a few packages&lt;/a&gt; that implement this but we&amp;rsquo;ll focus on &lt;code&gt;mda::mda&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;str&lt;/span&gt;(mda&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;mda)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; function (formula = formula(data), data = sys.frame(sys.parent()), subclasses = 3, &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     sub.df = NULL, tot.df = NULL, dimension = sum(subclasses) - 1, eps = .Machine$double.eps, &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     iter = 5, weights = mda.start(x, g, subclasses, trace, ...), method = polyreg, &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     keep.fitted = (n * dimension &amp;lt; 5000), trace = FALSE, ...)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The main hyperparameter is the number of subclasses. We&amp;rsquo;ll name our function &lt;code&gt;discrim_mixture&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;aspects-of-models&#34;&gt;Aspects of models&lt;/h2&gt;
&lt;p&gt;Before proceeding, it helps to to review how parsnip categorizes models:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The model &lt;em&gt;type&lt;/em&gt; is related to the structural aspect of the model. For example, the model type &lt;code&gt;linear_reg&lt;/code&gt; represents linear models (slopes and intercepts) that model a numeric outcome. Other model types in the package are &lt;code&gt;nearest_neighbor&lt;/code&gt;, &lt;code&gt;decision_tree&lt;/code&gt;, and so on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Within a model type is the &lt;em&gt;mode&lt;/em&gt;, related to the modeling goal. Currently the two modes in the package are regression and classification. Some models have methods for both models (e.g. nearest neighbors) while others have only a single mode (e.g. logistic regression).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The computation &lt;em&gt;engine&lt;/em&gt; is a combination of the estimation method and the implementation. For example, for linear regression, one engine is &lt;code&gt;&amp;quot;lm&amp;quot;&lt;/code&gt; which uses ordinary least squares analysis via the &lt;code&gt;lm()&lt;/code&gt; function. Another engine is &lt;code&gt;&amp;quot;stan&amp;quot;&lt;/code&gt; which uses the Stan infrastructure to estimate parameters using Bayes rule.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When adding a model into parsnip, the user has to specify which modes and engines are used. The package also enables users to add a new mode or engine to an existing model.&lt;/p&gt;
&lt;h2 id=&#34;the-general-process&#34;&gt;The general process&lt;/h2&gt;
&lt;p&gt;The parsnip package stores information about the models in an internal environment object. The environment can be accessed via the function &lt;code&gt;get_model_env()&lt;/code&gt;. The package includes a variety of functions that can get or set the different aspects of the models.&lt;/p&gt;
&lt;p&gt;If you are adding a new model from your own package, you can use these functions to add new entries into the model environment.&lt;/p&gt;
&lt;h3 id=&#34;step-1-register-the-model-modes-and-arguments&#34;&gt;Step 1. Register the model, modes, and arguments&lt;/h3&gt;
&lt;p&gt;We will add the MDA model using the model type &lt;code&gt;discrim_mixture&lt;/code&gt;. Since this is a classification method, we only have to register a single mode:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(tidymodels)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set_new_model&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;discrim_mixture&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set_model_mode&lt;/span&gt;(model &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;discrim_mixture&amp;#34;&lt;/span&gt;, mode &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;classification&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set_model_engine&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;discrim_mixture&amp;#34;&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  mode &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;classification&amp;#34;&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  eng &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;mda&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set_dependency&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;discrim_mixture&amp;#34;&lt;/span&gt;, eng &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;mda&amp;#34;&lt;/span&gt;, pkg &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;mda&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These functions should silently finish. There is also a function that can be used to show what aspects of the model have been added to parsnip:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;show_model_info&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;discrim_mixture&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Information for `discrim_mixture`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  modes: unknown, classification &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  engines: &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    classification: mda&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  no registered arguments.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  no registered fit modules.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  no registered prediction modules.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The next step would be to declare the main arguments to the model. These are declared independent of the mode.  To specify the argument, there are a few slots to fill in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The name that parsnip uses for the argument. In general, we try to use non-jargony names for arguments (e.g. &amp;ldquo;penalty&amp;rdquo; instead of &amp;ldquo;lambda&amp;rdquo; for regularized regression). We recommend consulting &lt;a href=&#34;https://www.tidymodels.org/find/parsnip/&#34;&gt;the model argument table available here&lt;/a&gt; to see if an existing argument name can be used before creating a new one.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The argument name that is used by the underlying modeling function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A function reference for a &lt;em&gt;constructor&lt;/em&gt; that will be used to generate tuning parameter values. This should be a character vector with a named element called &lt;code&gt;fun&lt;/code&gt; that is the constructor function. There is an optional element &lt;code&gt;pkg&lt;/code&gt; that can be used to call the function using its namespace. If referencing functions from the dials package, quantitative parameters can have additional arguments in the list for &lt;code&gt;trans&lt;/code&gt; and &lt;code&gt;range&lt;/code&gt; while qualitative parameters can pass &lt;code&gt;values&lt;/code&gt; via this list.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A logical value for whether the argument can be used to generate multiple predictions for a single R object. For example, for boosted trees, if a model is fit with 10 boosting iterations, many modeling packages allow the model object to make predictions for any iterations less than the one used to fit the model. In general this is not the case so one would use &lt;code&gt;has_submodels = FALSE&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For &lt;code&gt;mda::mda()&lt;/code&gt;, the main tuning parameter is &lt;code&gt;subclasses&lt;/code&gt; which we will rewrite as &lt;code&gt;sub_classes&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set_model_arg&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  model &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;discrim_mixture&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  eng &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;mda&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  parsnip &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;sub_classes&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  original &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;subclasses&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  func &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(pkg &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;, fun &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  has_submodel &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;show_model_info&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;discrim_mixture&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Information for `discrim_mixture`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  modes: unknown, classification &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  engines: &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    classification: mda&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  arguments: &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    mda: &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       sub_classes --&amp;gt; subclasses&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  no registered fit modules.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  no registered prediction modules.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;step-2-create-the-model-function&#34;&gt;Step 2. Create the model function&lt;/h3&gt;
&lt;p&gt;This is a fairly simple function that can follow a basic template. The main arguments to our function will be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The mode. If the model can do more than one mode, you might default this to &amp;ldquo;unknown&amp;rdquo;. In our case, since it is only a classification model, it makes sense to default it to that mode so that the users won&amp;rsquo;t have to specify it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The argument names (&lt;code&gt;sub_classes&lt;/code&gt; here). These should be defaulted to &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A basic version of the function is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;discrim_mixture &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(mode &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;classification&amp;#34;&lt;/span&gt;,  sub_classes &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Check for correct mode&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if &lt;/span&gt;(mode  &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;classification&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      rlang&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;abort&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;`mode` should be &amp;#39;classification&amp;#39;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Capture the arguments in quosures&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    args &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(sub_classes &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; rlang&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;enquo&lt;/span&gt;(sub_classes))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Save some empty slots for future parts of the specification&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;new_model_spec&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;discrim_mixture&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      args &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; args,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      eng_args &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      mode &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; mode,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      method &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      engine &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is pretty simple since the data are not exposed to this function.&lt;/p&gt;
&lt;div class=&#34;warning&#34;&gt;We strongly suggest favoring &lt;code&gt;rlang::abort()&lt;/code&gt; and &lt;code&gt;rlang::warn()&lt;/code&gt; over &lt;code&gt;stop()&lt;/code&gt; and &lt;code&gt;warning()&lt;/code&gt;. The former return better traceback results and have safer defaults for handling call objects.&lt;/div&gt;
&lt;h3 id=&#34;step-3-add-a-fit-module&#34;&gt;Step 3. Add a fit module&lt;/h3&gt;
&lt;p&gt;Now that parsnip knows about the model, mode, and engine, we can give it the information on fitting the model for our engine. The information needed to fit the model is contained in another list. The elements are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;interface&lt;/code&gt; is a single character value that could be &amp;ldquo;formula&amp;rdquo;, &amp;ldquo;data.frame&amp;rdquo;, or &amp;ldquo;matrix&amp;rdquo;. This defines the type of interface used by the underlying fit function (&lt;code&gt;mda::mda&lt;/code&gt;, in this case). This helps the translation of the data to be in an appropriate format for the that function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;protect&lt;/code&gt; is an optional list of function arguments that &lt;strong&gt;should not be changeable&lt;/strong&gt; by the user. In this case, we probably don&amp;rsquo;t want users to pass data values to these arguments (until the &lt;code&gt;fit()&lt;/code&gt; function is called).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;func&lt;/code&gt; is the package and name of the function that will be called. If you are using a locally defined function, only &lt;code&gt;fun&lt;/code&gt; is required.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;defaults&lt;/code&gt; is an optional list of arguments to the fit function that the user can change, but whose defaults can be set here. This isn&amp;rsquo;t needed in this case, but is described later in this document.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the first engine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set_fit&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  model &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;discrim_mixture&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  eng &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;mda&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  mode &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;classification&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  value &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    interface &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;formula&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    protect &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;formula&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    func &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(pkg &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;mda&amp;#34;&lt;/span&gt;, fun &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;mda&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    defaults &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;show_model_info&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;discrim_mixture&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Information for `discrim_mixture`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  modes: unknown, classification &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  engines: &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    classification: mda&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  arguments: &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    mda: &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       sub_classes --&amp;gt; subclasses&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  fit modules:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  engine           mode&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     mda classification&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  no registered prediction modules.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We also set up the information on how the predictors should be handled. These options ensure that the data that parsnip gives to the underlying model allows for a model fit that is as similar as possible to what it would have produced directly.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;predictor_indicators&lt;/code&gt; describes whether and how to create indicator/dummy variables from factor predictors. There are three options: &lt;code&gt;&amp;quot;none&amp;quot;&lt;/code&gt; (do not expand factor predictors), &lt;code&gt;&amp;quot;traditional&amp;quot;&lt;/code&gt; (apply the standard &lt;code&gt;model.matrix()&lt;/code&gt; encodings), and &lt;code&gt;&amp;quot;one_hot&amp;quot;&lt;/code&gt; (create the complete set including the baseline level for all factors).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;compute_intercept&lt;/code&gt; controls whether &lt;code&gt;model.matrix()&lt;/code&gt; should include the intercept in its formula. This affects more than the inclusion of an intercept column. With an intercept, &lt;code&gt;model.matrix()&lt;/code&gt; computes dummy variables for all but one factor level. Without an intercept, &lt;code&gt;model.matrix()&lt;/code&gt; computes a full set of indicators for the first factor variable, but an incomplete set for the remainder.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;remove_intercept&lt;/code&gt; removes the intercept column &lt;em&gt;after&lt;/em&gt; &lt;code&gt;model.matrix()&lt;/code&gt; is finished. This can be useful if the model function (e.g. &lt;code&gt;lm()&lt;/code&gt;) automatically generates an intercept.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;allow_sparse_x&lt;/code&gt; specifies whether the model can accommodate a sparse representation for predictors during fitting and tuning.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set_encoding&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  model &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;discrim_mixture&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  eng &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;mda&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  mode &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;classification&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  options &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    predictor_indicators &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;traditional&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    compute_intercept &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    remove_intercept &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    allow_sparse_x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;step-4-add-modules-for-prediction&#34;&gt;Step 4. Add modules for prediction&lt;/h3&gt;
&lt;p&gt;Similar to the fitting module, we specify the code for making different types of predictions. To make hard class predictions, the &lt;code&gt;class&lt;/code&gt; object contains the details. The elements of the list are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pre&lt;/code&gt; and &lt;code&gt;post&lt;/code&gt; are optional functions that can preprocess the data being fed to the prediction code and to postprocess the raw output of the predictions. These won&amp;rsquo;t be needed for this example, but a section below has examples of how these can be used when the model code is not easy to use. If the data being predicted has a simple type requirement, you can avoid using a &lt;code&gt;pre&lt;/code&gt; function with the &lt;code&gt;args&lt;/code&gt; below.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;func&lt;/code&gt; is the prediction function (in the same format as above). In many cases, packages have a predict method for their model&amp;rsquo;s class but this is typically not exported. In this case (and the example below), it is simple enough to make a generic call to &lt;code&gt;predict()&lt;/code&gt; with no associated package.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;args&lt;/code&gt; is a list of arguments to pass to the prediction function. These will most likely be wrapped in &lt;code&gt;rlang::expr()&lt;/code&gt; so that they are not evaluated when defining the method. For mda, the code would be &lt;code&gt;predict(object, newdata, type = &amp;quot;class&amp;quot;)&lt;/code&gt;. What is actually given to the function is the parsnip model fit object, which includes a sub-object called &lt;code&gt;fit()&lt;/code&gt; that houses the mda model object. If the data need to be a matrix or data frame, you could also use &lt;code&gt;newdata = quote(as.data.frame(newdata))&lt;/code&gt; or similar.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The parsnip prediction code will expect the result to be an unnamed character string or factor. This will be coerced to a factor with the same levels as the original data.&lt;/p&gt;
&lt;p&gt;To add this method to the model environment, a similar &lt;code&gt;set()&lt;/code&gt; function is used:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class_info &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pre &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    post &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    func &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(fun &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;predict&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    args &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# These lists should be of the form:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# {predict.mda argument name} = {values provided from parsnip objects}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# We don&amp;#39;t want the first two arguments evaluated right now&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# since they don&amp;#39;t exist yet. `type` is a simple object that&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# doesn&amp;#39;t need to have its evaluation deferred. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        object &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;quote&lt;/span&gt;(object&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;fit),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        newdata &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;quote&lt;/span&gt;(new_data),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;class&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set_pred&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  model &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;discrim_mixture&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  eng &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;mda&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  mode &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;classification&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;class&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  value &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; class_info
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A similar call can be used to define the class probability module (if they can be computed). The format is identical to the &lt;code&gt;class&lt;/code&gt; module but the output is expected to be a tibble with columns for each factor level.&lt;/p&gt;
&lt;p&gt;As an example of the &lt;code&gt;post&lt;/code&gt; function, the data frame created by &lt;code&gt;mda:::predict.mda()&lt;/code&gt; will be converted to a tibble. The arguments are &lt;code&gt;x&lt;/code&gt; (the raw results coming from the predict method) and &lt;code&gt;object&lt;/code&gt; (the parsnip model fit object). The latter has a sub-object called &lt;code&gt;lvl&lt;/code&gt; which is a character string of the outcome&amp;rsquo;s factor levels (if any).&lt;/p&gt;
&lt;p&gt;We register the probability module. There is a template function that makes this slightly easier to format the objects:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;prob_info &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;pred_value_template&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    post &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(x, object) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      tibble&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;as_tibble&lt;/span&gt;(x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    func &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(fun &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;predict&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Now everything else is put into the `args` slot&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    object &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;quote&lt;/span&gt;(object&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;fit),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    newdata &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;quote&lt;/span&gt;(new_data),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;posterior&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set_pred&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  model &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;discrim_mixture&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  eng &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;mda&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  mode &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;classification&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;prob&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  value &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; prob_info
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;show_model_info&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;discrim_mixture&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Information for `discrim_mixture`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  modes: unknown, classification &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  engines: &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    classification: mda&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  arguments: &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    mda: &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       sub_classes --&amp;gt; subclasses&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  fit modules:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  engine           mode&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     mda classification&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  prediction modules:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;              mode engine     methods&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    classification    mda class, prob&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If this model could be used for regression situations, we could also add a &amp;ldquo;numeric&amp;rdquo; module. For &lt;code&gt;pred&lt;/code&gt;, the model requires an unnamed numeric vector output (usually).&lt;/p&gt;
&lt;p&gt;Examples are &lt;a href=&#34;https://github.com/tidymodels/parsnip/blob/master/R/linear_reg_data.R&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://github.com/tidymodels/parsnip/blob/master/R/rand_forest_data.R&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;does-it-work&#34;&gt;Does it work?&lt;/h3&gt;
&lt;p&gt;As a developer, one thing that may come in handy is the &lt;code&gt;translate()&lt;/code&gt; function. This will tell you what the model&amp;rsquo;s eventual syntax will be.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;discrim_mixture&lt;/span&gt;(sub_classes &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;translate&lt;/span&gt;(engine &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;mda&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Model Specification (classification)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Main Arguments:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   sub_classes = 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Computational engine: mda &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Model fit template:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; mda::mda(formula = missing_arg(), data = missing_arg(), subclasses = 2)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s try it on a data set from the modeldata package:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;data&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;two_class_dat&amp;#34;&lt;/span&gt;, package &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;modeldata&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;4622&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;example_split &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;initial_split&lt;/span&gt;(two_class_dat, prop &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.99&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;example_train &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;training&lt;/span&gt;(example_split)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;example_test  &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;testing&lt;/span&gt;(example_split)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mda_spec &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;discrim_mixture&lt;/span&gt;(sub_classes &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;set_engine&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;mda&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mda_fit &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; mda_spec &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;fit&lt;/span&gt;(Class &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; ., data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; example_train, engine &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;mda&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mda_fit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; parsnip model object&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Call:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; mda::mda(formula = Class ~ ., data = data, subclasses = ~2)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Dimension: 2 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Percent Between-Group Variance Explained:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    v1    v2 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  82.6 100.0 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Degrees of Freedom (per dimension): 3 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Training Misclassification Error: 0.172 ( N = 783 )&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Deviance: 671&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;predict&lt;/span&gt;(mda_fit, new_data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; example_test, type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;prob&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;bind_cols&lt;/span&gt;(example_test &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(Class))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 8 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   .pred_Class1 .pred_Class2 Class &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;          &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1       0.679         0.321 Class1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2       0.690         0.310 Class1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3       0.384         0.616 Class2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4       0.300         0.700 Class1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5       0.0262        0.974 Class2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 6       0.405         0.595 Class2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 7       0.793         0.207 Class1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 8       0.0949        0.905 Class2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;predict&lt;/span&gt;(mda_fit, new_data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; example_test) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#00f&#34;&gt;bind_cols&lt;/span&gt;(example_test &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(Class))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 8 × 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   .pred_class Class &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;fct&amp;gt;       &amp;lt;fct&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 Class1      Class1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 Class1      Class1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 Class2      Class2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4 Class2      Class1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5 Class2      Class2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 6 Class2      Class2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 7 Class1      Class1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 8 Class2      Class2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;add-an-engine&#34;&gt;Add an engine&lt;/h2&gt;
&lt;p&gt;The process for adding an engine to an existing model is &lt;em&gt;almost&lt;/em&gt; the same as building a new model but simpler with fewer steps. You only need to add the engine-specific aspects of the model. For example, if we wanted to fit a linear regression model using M-estimation, we could only add a new engine. The code for the &lt;code&gt;rlm()&lt;/code&gt; function in MASS is pretty similar to &lt;code&gt;lm()&lt;/code&gt;, so we can copy that code and change the package/function names:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set_model_engine&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;linear_reg&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;regression&amp;#34;&lt;/span&gt;, eng &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;rlm&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set_dependency&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;linear_reg&amp;#34;&lt;/span&gt;, eng &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;rlm&amp;#34;&lt;/span&gt;, pkg &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;MASS&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set_fit&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  model &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;linear_reg&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  eng &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;rlm&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  mode &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;regression&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  value &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    interface &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;formula&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    protect &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;formula&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;weights&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    func &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(pkg &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;MASS&amp;#34;&lt;/span&gt;, fun &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;rlm&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    defaults &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set_encoding&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  model &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;linear_reg&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  eng &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;rlm&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  mode &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;regression&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  options &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    predictor_indicators &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;traditional&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    compute_intercept &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    remove_intercept &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    allow_sparse_x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set_pred&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  model &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;linear_reg&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  eng &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;rlm&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  mode &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;regression&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;numeric&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  value &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pre &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    post &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    func &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(fun &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;predict&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    args &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        object &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;expr&lt;/span&gt;(object&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;fit),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        newdata &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;expr&lt;/span&gt;(new_data),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;response&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# testing:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;linear_reg&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;set_engine&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;rlm&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;fit&lt;/span&gt;(mpg &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; ., data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; mtcars)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; parsnip model object&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Call:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; rlm(formula = mpg ~ ., data = data)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Converged in 8 iterations&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Coefficients:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; (Intercept)         cyl        disp          hp        drat          wt &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     17.8225     -0.2788      0.0159     -0.0254      0.4639     -4.1436 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;        qsec          vs          am        gear        carb &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;      0.6531      0.2498      1.4341      0.8594     -0.0108 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Degrees of freedom: 32 total; 21 residual&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Scale estimate: 2.15&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;add-parsnip-models-to-another-package&#34;&gt;Add parsnip models to another package&lt;/h2&gt;
&lt;p&gt;The process here is almost the same. All of the previous functions are still required but their execution is a little different.&lt;/p&gt;
&lt;p&gt;For parsnip to register them, that package must already be loaded. For this reason, it makes sense to have parsnip in the &amp;ldquo;Depends&amp;rdquo; category.&lt;/p&gt;
&lt;p&gt;The first difference is that the functions that define the model must be inside of a wrapper function that is called when your package is loaded. For our example here, this might look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make_discrim_mixture_mda &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  parsnip&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set_new_model&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;discrim_mixture&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  parsnip&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set_model_mode&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;discrim_mixture&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;classification&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# and so one...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This function is then executed when your package is loaded:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.onLoad &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(libname, pkgname) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# This defines discrim_mixture in the model database&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;make_discrim_mixture_mda&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For an example package that uses parsnip definitions, take a look at the &lt;a href=&#34;https://github.com/tidymodels/discrim&#34;&gt;discrim&lt;/a&gt; package.&lt;/p&gt;
&lt;div class=&#34;warning&#34;&gt;To use a new model and/or engine in the broader tidymodels infrastructure, we recommend your model definition declarations (e.g. &lt;code&gt;set_new_model()&lt;/code&gt; and similar) reside in a package. If these definitions are in a script only, the new model may not work with the tune package, for example for parallel processing.&lt;/div&gt;
&lt;p&gt;It is also important for parallel processing support to &lt;strong&gt;list the home package as a dependency&lt;/strong&gt;. If the &lt;code&gt;discrim_mixture()&lt;/code&gt; function lived in a package called &lt;code&gt;mixedup&lt;/code&gt;, include the line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set_dependency&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;discrim_mixture&amp;#34;&lt;/span&gt;, eng &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;mda&amp;#34;&lt;/span&gt;, pkg &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;mixedup&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Parallel processing requires this explicit dependency setting. When parallel worker processes are created, there is heterogeneity across technologies regarding which packages are loaded. Multicore methods on macOS and Linux will load all of the packages that were loaded in the main R process. However, parallel processing using psock clusters have no additional packages loaded. If the home package for a parsnip model is not loaded in the worker processes, the model will not have an entry in parsnip&amp;rsquo;s internal database (and produce an error).&lt;/p&gt;
&lt;h2 id=&#34;your-model-tuning-parameters-and-you&#34;&gt;Your model, tuning parameters, and you&lt;/h2&gt;
&lt;p&gt;The tune package can be used to find reasonable values of model arguments via tuning. There are some S3 methods that are useful to define for your model. &lt;code&gt;discrim_mixture()&lt;/code&gt; has one main tuning parameter: &lt;code&gt;sub_classes&lt;/code&gt;. To work with tune it is &lt;em&gt;helpful&lt;/em&gt; (but not required) to use an S3 method called &lt;code&gt;tunable()&lt;/code&gt; to define which arguments should be tuned and how values of those arguments should be generated.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tunable()&lt;/code&gt; takes the model specification as its argument and returns a tibble with columns:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;name&lt;/code&gt;: The name of the argument.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;call_info&lt;/code&gt;: A list that describes how to call a function that returns a dials parameter object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;source&lt;/code&gt;: A character string that indicates where the tuning value comes from (i.e., a model, a recipe etc.). Here, it is just &lt;code&gt;&amp;quot;model_spec&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;component&lt;/code&gt;: A character string with more information about the source. For models, this is just the name of the function (e.g. &lt;code&gt;&amp;quot;discrim_mixture&amp;quot;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;component_id&lt;/code&gt;: A character string to indicate where a unique identifier is for the object. For a model, this is indicates the type of model argument (e.g. &amp;ldquo;main&amp;rdquo;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main piece of information that requires some detail is &lt;code&gt;call_info&lt;/code&gt;. This is a list column in the tibble. Each element of the list is a list that describes the package and function that can be used to create a dials parameter object.&lt;/p&gt;
&lt;p&gt;For example, for a nearest-neighbors &lt;code&gt;neighbors&lt;/code&gt; parameter, this value is just:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;info &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(pkg &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;dials&amp;#34;&lt;/span&gt;, fun &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;neighbors&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# FYI: how it is used under-the-hood: &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;new_param_call &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; rlang&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;call2&lt;/span&gt;(.fn &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; info&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;fun, .ns &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; info&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;pkg)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rlang&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;eval_tidy&lt;/span&gt;(new_param_call)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # Nearest Neighbors (quantitative)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Range: [1, 10]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For &lt;code&gt;discrim_mixture()&lt;/code&gt;, a dials object is needed that returns an integer that is the number of sub-classes that should be create. We can create a dials parameter function for this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sub_classes &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(range &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1L&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;10L&lt;/span&gt;), trans &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;new_quant_param&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;integer&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    range &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; range,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    inclusive &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    trans &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; trans,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    label &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(sub_classes &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;# Sub-Classes&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    finalize &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If this were in the dials package, we could use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tunable.discrim_mixture &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(x, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tibble&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;tibble&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;sub_classes&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    call_info &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(pkg &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;, fun &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;sub_classes&amp;#34;&lt;/span&gt;)),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    source &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;model_spec&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    component &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;discrim_mixture&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    component_id &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;main&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once this method is in place, the tuning functions can be used:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mda_spec &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;discrim_mixture&lt;/span&gt;(sub_classes &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tune&lt;/span&gt;()) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;set_engine&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;mda&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;452&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cv &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;vfold_cv&lt;/span&gt;(example_train)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mda_tune_res &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; mda_spec &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;tune_grid&lt;/span&gt;(Class &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; ., cv, grid &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;show_best&lt;/span&gt;(mda_tune_res, metric &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;roc_auc&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 4 × 7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   sub_classes .metric .estimator  mean     n std_err .config             &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;         &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;               &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1           2 roc_auc binary     0.890    10  0.0143 Preprocessor1_Model3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2           3 roc_auc binary     0.889    10  0.0142 Preprocessor1_Model4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3           6 roc_auc binary     0.884    10  0.0147 Preprocessor1_Model2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4           8 roc_auc binary     0.881    10  0.0146 Preprocessor1_Model1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;pro-tips-what-ifs-exceptions-faq-and-minutiae&#34;&gt;Pro-tips, what-ifs, exceptions, FAQ, and minutiae&lt;/h2&gt;
&lt;p&gt;There are various things that came to mind while developing this resource.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Do I have to return a simple vector for &lt;code&gt;predict&lt;/code&gt; and &lt;code&gt;predict_class&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Previously, when discussing the &lt;code&gt;pred&lt;/code&gt; information:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For &lt;code&gt;pred&lt;/code&gt;, the model requires an unnamed numeric vector output &lt;strong&gt;(usually)&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are some models (e.g. &lt;code&gt;glmnet&lt;/code&gt;, &lt;code&gt;plsr&lt;/code&gt;, &lt;code&gt;Cubist&lt;/code&gt;, etc.) that can make predictions for different models from the same fitted model object. We want to facilitate that here so, for these cases, the current convention is to return a tibble with the prediction in a column called &lt;code&gt;values&lt;/code&gt; and have extra columns for any parameters that define the different sub-models.&lt;/p&gt;
&lt;p&gt;For example, if I fit a linear regression model via &lt;code&gt;glmnet&lt;/code&gt; and get four values of the regularization parameter (&lt;code&gt;lambda&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;linear_reg&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;set_engine&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;glmnet&amp;#34;&lt;/span&gt;, nlambda &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;fit&lt;/span&gt;(mpg &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; ., data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; mtcars) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;multi_predict&lt;/span&gt;(new_data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; mtcars[1&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;-1&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;However&lt;/em&gt;, the API is still being developed. Currently, there is not an interface in the prediction functions to pass in the values of the parameters to make predictions with (&lt;code&gt;lambda&lt;/code&gt;, in this case).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What do I do about how my model handles factors or categorical data?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Some modeling functions in R create indicator/dummy variables from categorical data when you use a model formula (typically using &lt;code&gt;model.matrix()&lt;/code&gt;), and some do not. Some examples of models that do &lt;em&gt;not&lt;/em&gt; create indicator variables include tree-based models, naive Bayes models, and multilevel or hierarchical models. The tidymodels ecosystem assumes a &lt;code&gt;model.matrix()&lt;/code&gt;-like default encoding for categorical data used in a model formula, but you can change this encoding using &lt;code&gt;set_encoding()&lt;/code&gt;. For example, you can set predictor encodings that say, &amp;ldquo;leave my data alone,&amp;rdquo; and keep factors as is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set_encoding&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  model &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;decision_tree&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  eng &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;rpart&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  mode &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;regression&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  options &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    predictor_indicators &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    compute_intercept &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    remove_intercept &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;note&#34;&gt;&lt;p&gt;There are three options for &lt;code&gt;predictor_indicators&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;none&amp;rdquo; (do not expand factor predictors)&lt;/li&gt;
&lt;li&gt;&amp;ldquo;traditional&amp;rdquo; (apply the standard &lt;code&gt;model.matrix()&lt;/code&gt; encoding)&lt;/li&gt;
&lt;li&gt;&amp;ldquo;one_hot&amp;rdquo; (create the complete set including the baseline level for all factors)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;To learn more about encoding categorical predictors, check out &lt;a href=&#34;https://www.tidyverse.org/blog/2020/07/parsnip-0-1-2/#predictor-encoding-consistency&#34;&gt;this blog post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is the &lt;code&gt;defaults&lt;/code&gt; slot and why do I need it?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You might want to set defaults that can be overridden by the user. For example, for logistic regression with &lt;code&gt;glm&lt;/code&gt;, it make sense to default &lt;code&gt;family = binomial&lt;/code&gt;. However, if someone wants to use a different link function, they should be able to do that. For that model/engine definition, it has:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;defaults &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(family &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;expr&lt;/span&gt;(binomial))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So that is the default:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;logistic_reg&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;translate&lt;/span&gt;(engine &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;glm&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# but you can change it:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;logistic_reg&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;set_engine&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;glm&amp;#34;&lt;/span&gt;, family &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;expr&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;binomial&lt;/span&gt;(link &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;probit&amp;#34;&lt;/span&gt;))) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;translate&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s what &lt;code&gt;defaults&lt;/code&gt; are for.&lt;/p&gt;
&lt;p&gt;Note that we wrapped &lt;code&gt;binomial&lt;/code&gt; inside of &lt;code&gt;expr()&lt;/code&gt;. If we didn&amp;rsquo;t, it would substitute the results of executing &lt;code&gt;binomial()&lt;/code&gt; inside of the expression (and that&amp;rsquo;s a mess).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What if I want more complex defaults?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;translate&lt;/code&gt; function can be used to check values or set defaults once the model&amp;rsquo;s mode is known. To do this, you can create a model-specific S3 method that first calls the general method (&lt;code&gt;translate.model_spec()&lt;/code&gt;) and then makes modifications or conducts error traps.&lt;/p&gt;
&lt;p&gt;For example, the ranger and randomForest package functions have arguments for calculating importance. One is a logical and the other is a string. Since this is likely to lead to a bunch of frustration and GitHub issues, we can put in a check:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Simplified version&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;translate.rand_forest &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function &lt;/span&gt;(x, engine, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Run the general method to get the real arguments in place&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  x &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;translate.default&lt;/span&gt;(x, engine, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Check and see if they make sense for the engine and/or mode:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if &lt;/span&gt;(x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;engine &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ranger&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;any&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;names&lt;/span&gt;(x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;method&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;fit&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;args) &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;importance&amp;#34;&lt;/span&gt;)) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;is.logical&lt;/span&gt;(x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;method&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;fit&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;args&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;importance)) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        rlang&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;abort&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;`importance` should be a character value. See ?ranger::ranger.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As another example, &lt;code&gt;nnet::nnet()&lt;/code&gt; has an option for the final layer to be linear (called &lt;code&gt;linout&lt;/code&gt;). If &lt;code&gt;mode = &amp;quot;regression&amp;quot;&lt;/code&gt;, that should probably be set to &lt;code&gt;TRUE&lt;/code&gt;. You couldn&amp;rsquo;t do this with the &lt;code&gt;args&lt;/code&gt; (described above) since you need the function translated first.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;My model fit requires more than one function call. So&amp;hellip;.?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The best course of action is to write wrapper so that it can be one call. This was the case with xgboost and keras.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why would I preprocess my data?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There might be non-trivial transformations that the model prediction code requires (such as converting to a sparse matrix representation, etc.)&lt;/p&gt;
&lt;p&gt;This would &lt;strong&gt;not&lt;/strong&gt; include making dummy variables and &lt;code&gt;model.matrix&lt;/code&gt; stuff. The parsnip infrastructure already does that for you.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why would I post-process my predictions?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;What comes back from some R functions may be somewhat&amp;hellip; arcane or problematic. As an example, for xgboost, if you fit a multi-class boosted tree, you might expect the class probabilities to come back as a matrix (&lt;em&gt;narrator: they don&amp;rsquo;t&lt;/em&gt;). If you have four classes and make predictions on three samples, you get a vector of 12 probability values. You need to convert these to a rectangular data set.&lt;/p&gt;
&lt;p&gt;Another example is the predict method for ranger, which encapsulates the actual predictions in a more complex object structure.&lt;/p&gt;
&lt;p&gt;These are the types of problems that the post-processor will solve.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Are there other modes?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Not yet but there will be. For example, it might make sense to have a different mode when doing risk-based modeling via Cox regression models. That would enable different classes of objects and those might be needed since the types of models don&amp;rsquo;t make direct predictions of the outcome.&lt;/p&gt;
&lt;p&gt;If you have a suggestion, please add a &lt;a href=&#34;https://github.com/tidymodels/parsnip/issues&#34;&gt;GitHub issue&lt;/a&gt; to discuss it.&lt;/p&gt;
&lt;h2 id=&#34;session-information&#34;&gt;Session information&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#&amp;gt; ─ Session info ─────────────────────────────────────────────────────
#&amp;gt;  setting  value
#&amp;gt;  version  R version 4.1.2 (2021-11-01)
#&amp;gt;  os       macOS Monterey 12.3
#&amp;gt;  system   aarch64, darwin20
#&amp;gt;  ui       X11
#&amp;gt;  language (EN)
#&amp;gt;  collate  en_GB.UTF-8
#&amp;gt;  ctype    en_GB.UTF-8
#&amp;gt;  tz       Europe/London
#&amp;gt;  date     2022-04-11
#&amp;gt;  pandoc   2.14.0.3 @ /Applications/RStudio.app/Contents/MacOS/pandoc/ (via rmarkdown)
#&amp;gt; 
#&amp;gt; ─ Packages ─────────────────────────────────────────────────────────
#&amp;gt;  package    * version date (UTC) lib source
#&amp;gt;  broom      * 0.7.12  2022-01-28 [1] CRAN (R 4.1.1)
#&amp;gt;  dials      * 0.1.1   2022-04-06 [1] CRAN (R 4.1.2)
#&amp;gt;  dplyr      * 1.0.8   2022-02-08 [1] CRAN (R 4.1.2)
#&amp;gt;  ggplot2    * 3.3.5   2021-06-25 [1] CRAN (R 4.1.1)
#&amp;gt;  infer      * 1.0.0   2021-08-13 [1] CRAN (R 4.1.1)
#&amp;gt;  mda        * 0.5-2   2020-06-29 [1] CRAN (R 4.1.2)
#&amp;gt;  modeldata  * 0.1.1   2021-07-14 [1] CRAN (R 4.1.2)
#&amp;gt;  parsnip    * 0.2.1   2022-03-17 [1] CRAN (R 4.1.1)
#&amp;gt;  purrr      * 0.3.4   2020-04-17 [1] CRAN (R 4.1.0)
#&amp;gt;  recipes    * 0.2.0   2022-02-18 [1] CRAN (R 4.1.1)
#&amp;gt;  rlang        1.0.2   2022-03-04 [1] CRAN (R 4.1.1)
#&amp;gt;  rsample    * 0.1.1   2021-11-08 [1] CRAN (R 4.1.2)
#&amp;gt;  tibble     * 3.1.6   2021-11-07 [1] CRAN (R 4.1.1)
#&amp;gt;  tidymodels * 0.2.0   2022-03-19 [1] CRAN (R 4.1.1)
#&amp;gt;  tune       * 0.2.0   2022-03-19 [1] CRAN (R 4.1.2)
#&amp;gt;  workflows  * 0.2.6   2022-03-18 [1] CRAN (R 4.1.2)
#&amp;gt;  yardstick  * 0.0.9   2021-11-22 [1] CRAN (R 4.1.1)
#&amp;gt; 
#&amp;gt;  [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library
#&amp;gt; 
#&amp;gt; ────────────────────────────────────────────────────────────────────
&lt;/code&gt;&lt;/pre&gt;</description>
  </item>
  
<item>
  <title>K-means clustering with tidy data principles</title>
  <link>https://www.tidymodels.org/learn/statistics/k-means/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/learn/statistics/k-means/</guid>
  <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This article only requires the tidymodels package.&lt;/p&gt;
&lt;p&gt;K-means clustering serves as a useful example of applying tidy data principles to statistical analysis, and especially the distinction between the three tidying functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tidy()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;augment()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;glance()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s start by generating some random two-dimensional data with three clusters. Data in each cluster will come from a multivariate gaussian distribution, with different means for each cluster:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(tidymodels)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;27&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;centers &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tibble&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cluster &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;factor&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;), 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  num_points &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;150&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;50&lt;/span&gt;),  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# number points in each cluster&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  x1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;-3&lt;/span&gt;),              &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# x1 coordinate of cluster center&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  x2 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;-2&lt;/span&gt;)              &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# x2 coordinate of cluster center&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;labelled_points &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  centers &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map2&lt;/span&gt;(num_points, x1, rnorm),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x2 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map2&lt;/span&gt;(num_points, x2, rnorm)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;num_points) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unnest&lt;/span&gt;(cols &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(x1, x2))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(labelled_points, &lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(x1, x2, color &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; cluster)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_point&lt;/span&gt;(alpha &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/unnamed-chunk-1-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;This is an ideal case for k-means clustering.&lt;/p&gt;
&lt;h2 id=&#34;how-does-k-means-work&#34;&gt;How does K-means work?&lt;/h2&gt;
&lt;p&gt;Rather than using equations, this short animation using the &lt;a href=&#34;https://github.com/allisonhorst/stats-illustrations&#34;&gt;artwork&lt;/a&gt; of Allison Horst explains the clustering process:&lt;/p&gt;
&lt;img src=&#34;kmeans.gif&#34; style=&#34;display: block; margin: auto;&#34; /&gt;
&lt;h2 id=&#34;clustering-in-r&#34;&gt;Clustering in R&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ll use the built-in &lt;code&gt;kmeans()&lt;/code&gt; function, which accepts a data frame with all numeric columns as it&amp;rsquo;s primary argument.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;points &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  labelled_points &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;cluster)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kclust &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;kmeans&lt;/span&gt;(points, centers &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kclust
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; K-means clustering with 3 clusters of sizes 148, 51, 101&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Cluster means:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;        x1    x2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1  0.0885  1.05&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 -3.1429 -2.00&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3  5.0040 -1.05&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Clustering vector:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   [1] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  [38] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  [75] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 1 1 1 1 1 1 1 1 1 1 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [112] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [149] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [186] 1 1 1 1 1 1 1 1 1 1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [223] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [260] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [297] 2 2 2 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Within cluster sum of squares by cluster:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 299 109 243&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  (between_SS / total_SS =  82.5 %)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Available components:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;cluster&amp;#34;      &amp;#34;centers&amp;#34;      &amp;#34;totss&amp;#34;        &amp;#34;withinss&amp;#34;     &amp;#34;tot.withinss&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [6] &amp;#34;betweenss&amp;#34;    &amp;#34;size&amp;#34;         &amp;#34;iter&amp;#34;         &amp;#34;ifault&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;summary&lt;/span&gt;(kclust)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;              Length Class  Mode   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; cluster      300    -none- numeric&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; centers        6    -none- numeric&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; totss          1    -none- numeric&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; withinss       3    -none- numeric&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; tot.withinss   1    -none- numeric&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; betweenss      1    -none- numeric&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; size           3    -none- numeric&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; iter           1    -none- numeric&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ifault         1    -none- numeric&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The output is a list of vectors, where each component has a different length. There&amp;rsquo;s one of length 300, the same as our original data set. There are two elements of length 3 (&lt;code&gt;withinss&lt;/code&gt; and &lt;code&gt;tot.withinss&lt;/code&gt;) and &lt;code&gt;centers&lt;/code&gt; is a matrix with 3 rows. And then there are the elements of length 1: &lt;code&gt;totss&lt;/code&gt;, &lt;code&gt;tot.withinss&lt;/code&gt;, &lt;code&gt;betweenss&lt;/code&gt;, and &lt;code&gt;iter&lt;/code&gt;. (The value &lt;code&gt;ifault&lt;/code&gt; indicates possible algorithm problems.)&lt;/p&gt;
&lt;p&gt;These differing lengths have important meaning when we want to tidy our data set; they signify that each type of component communicates a &lt;em&gt;different kind&lt;/em&gt; of information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cluster&lt;/code&gt; (300 values) contains information about each &lt;em&gt;point&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;centers&lt;/code&gt;, &lt;code&gt;withinss&lt;/code&gt;, and &lt;code&gt;size&lt;/code&gt; (3 values) contain information about each &lt;em&gt;cluster&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;totss&lt;/code&gt;, &lt;code&gt;tot.withinss&lt;/code&gt;, &lt;code&gt;betweenss&lt;/code&gt;, and &lt;code&gt;iter&lt;/code&gt; (1 value) contain information about the &lt;em&gt;full clustering&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Which of these do we want to extract? There is no right answer; each of them may be interesting to an analyst. Because they communicate entirely different information (not to mention there&amp;rsquo;s no straightforward way to combine them), they are extracted by separate functions. &lt;code&gt;augment&lt;/code&gt; adds the point classifications to the original data set:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;augment&lt;/span&gt;(kclust, points)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 300 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       x1     x2 .cluster&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1  6.91 -2.74  3       &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2  6.14 -2.45  3       &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3  4.24 -0.946 3       &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4  3.54  0.287 3       &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5  3.91  0.408 3       &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6  5.30 -1.58  3       &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7  5.01 -1.77  3       &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8  6.16 -1.68  3       &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9  7.13 -2.17  3       &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10  5.24 -2.42  3       &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 290 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;tidy()&lt;/code&gt; function summarizes on a per-cluster level:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;tidy&lt;/span&gt;(kclust)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 3 × 5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;        x1    x2  size withinss cluster&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1  0.0885  1.05   148     299. 1      &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 -3.14   -2.00    51     109. 2      &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3  5.00   -1.05   101     243. 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And as it always does, the &lt;code&gt;glance()&lt;/code&gt; function extracts a single-row summary:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;glance&lt;/span&gt;(kclust)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 × 4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   totss tot.withinss betweenss  iter&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 3724.         651.     3073.     2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;exploratory-clustering&#34;&gt;Exploratory clustering&lt;/h2&gt;
&lt;p&gt;While these summaries are useful, they would not have been too difficult to extract out from the data set yourself. The real power comes from combining these analyses with other tools like &lt;a href=&#34;https://dplyr.tidyverse.org/&#34;&gt;dplyr&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say we want to explore the effect of different choices of &lt;code&gt;k&lt;/code&gt;, from 1 to 9, on this clustering. First cluster the data 9 times, each using a different value of &lt;code&gt;k&lt;/code&gt;, then create columns containing the tidied, glanced and augmented data:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kclusts &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;tibble&lt;/span&gt;(k &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    kclust &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;(k, &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;kmeans&lt;/span&gt;(points, .x)),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tidied &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;(kclust, tidy),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    glanced &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;(kclust, glance),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    augmented &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;(kclust, augment, points)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kclusts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 9 × 5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       k kclust   tidied           glanced          augmented         &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;list&amp;gt;   &amp;lt;list&amp;gt;           &amp;lt;list&amp;gt;           &amp;lt;list&amp;gt;            &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     1 &amp;lt;kmeans&amp;gt; &amp;lt;tibble [1 × 5]&amp;gt; &amp;lt;tibble [1 × 4]&amp;gt; &amp;lt;tibble [300 × 3]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2     2 &amp;lt;kmeans&amp;gt; &amp;lt;tibble [2 × 5]&amp;gt; &amp;lt;tibble [1 × 4]&amp;gt; &amp;lt;tibble [300 × 3]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3     3 &amp;lt;kmeans&amp;gt; &amp;lt;tibble [3 × 5]&amp;gt; &amp;lt;tibble [1 × 4]&amp;gt; &amp;lt;tibble [300 × 3]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4     4 &amp;lt;kmeans&amp;gt; &amp;lt;tibble [4 × 5]&amp;gt; &amp;lt;tibble [1 × 4]&amp;gt; &amp;lt;tibble [300 × 3]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5     5 &amp;lt;kmeans&amp;gt; &amp;lt;tibble [5 × 5]&amp;gt; &amp;lt;tibble [1 × 4]&amp;gt; &amp;lt;tibble [300 × 3]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 6     6 &amp;lt;kmeans&amp;gt; &amp;lt;tibble [6 × 5]&amp;gt; &amp;lt;tibble [1 × 4]&amp;gt; &amp;lt;tibble [300 × 3]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 7     7 &amp;lt;kmeans&amp;gt; &amp;lt;tibble [7 × 5]&amp;gt; &amp;lt;tibble [1 × 4]&amp;gt; &amp;lt;tibble [300 × 3]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 8     8 &amp;lt;kmeans&amp;gt; &amp;lt;tibble [8 × 5]&amp;gt; &amp;lt;tibble [1 × 4]&amp;gt; &amp;lt;tibble [300 × 3]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 9     9 &amp;lt;kmeans&amp;gt; &amp;lt;tibble [9 × 5]&amp;gt; &amp;lt;tibble [1 × 4]&amp;gt; &amp;lt;tibble [300 × 3]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can turn these into three separate data sets each representing a different type of data: using &lt;code&gt;tidy()&lt;/code&gt;, using &lt;code&gt;augment()&lt;/code&gt;, and using &lt;code&gt;glance()&lt;/code&gt;. Each of these goes into a separate data set as they represent different types of data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;clusters &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  kclusts &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unnest&lt;/span&gt;(cols &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(tidied))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;assignments &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  kclusts &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unnest&lt;/span&gt;(cols &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(augmented))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;clusterings &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  kclusts &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unnest&lt;/span&gt;(cols &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(glanced))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can plot the original points using the data from &lt;code&gt;augment()&lt;/code&gt;, with each point colored according to the predicted cluster.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p1 &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(assignments, &lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; x1, y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; x2)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_point&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(color &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; .cluster), alpha &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.8&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;facet_wrap&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; k)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/unnamed-chunk-8-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;Already we get a good sense of the proper number of clusters (3), and how the k-means algorithm functions when &lt;code&gt;k&lt;/code&gt; is too high or too low. We can then add the centers of the cluster using the data from &lt;code&gt;tidy()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p2 &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; p1 &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;geom_point&lt;/span&gt;(data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; clusters, size &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;, shape &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/unnamed-chunk-9-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;The data from &lt;code&gt;glance()&lt;/code&gt; fills a different but equally important purpose; it lets us view trends of some summary statistics across values of &lt;code&gt;k&lt;/code&gt;. Of particular interest is the total within sum of squares, saved in the &lt;code&gt;tot.withinss&lt;/code&gt; column.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(clusterings, &lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(k, tot.withinss)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_line&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_point&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/unnamed-chunk-10-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;This represents the variance within the clusters. It decreases as &lt;code&gt;k&lt;/code&gt; increases, but notice a bend (or &amp;ldquo;elbow&amp;rdquo;) around &lt;code&gt;k = 3&lt;/code&gt;. This bend indicates that additional clusters beyond the third have little value. (See &lt;a href=&#34;https://web.stanford.edu/~hastie/Papers/gap.pdf&#34;&gt;here&lt;/a&gt; for a more mathematically rigorous interpretation and implementation of this method). Thus, all three methods of tidying data provided by broom are useful for summarizing clustering output.&lt;/p&gt;
&lt;h2 id=&#34;session-information&#34;&gt;Session information&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#&amp;gt; ─ Session info ─────────────────────────────────────────────────────
#&amp;gt;  setting  value
#&amp;gt;  version  R version 4.1.2 (2021-11-01)
#&amp;gt;  os       macOS Monterey 12.3
#&amp;gt;  system   aarch64, darwin20
#&amp;gt;  ui       X11
#&amp;gt;  language (EN)
#&amp;gt;  collate  en_GB.UTF-8
#&amp;gt;  ctype    en_GB.UTF-8
#&amp;gt;  tz       Europe/London
#&amp;gt;  date     2022-04-11
#&amp;gt;  pandoc   2.14.0.3 @ /Applications/RStudio.app/Contents/MacOS/pandoc/ (via rmarkdown)
#&amp;gt; 
#&amp;gt; ─ Packages ─────────────────────────────────────────────────────────
#&amp;gt;  package    * version date (UTC) lib source
#&amp;gt;  broom      * 0.7.12  2022-01-28 [1] CRAN (R 4.1.1)
#&amp;gt;  dials      * 0.1.1   2022-04-06 [1] CRAN (R 4.1.2)
#&amp;gt;  dplyr      * 1.0.8   2022-02-08 [1] CRAN (R 4.1.2)
#&amp;gt;  ggplot2    * 3.3.5   2021-06-25 [1] CRAN (R 4.1.1)
#&amp;gt;  infer      * 1.0.0   2021-08-13 [1] CRAN (R 4.1.1)
#&amp;gt;  parsnip    * 0.2.1   2022-03-17 [1] CRAN (R 4.1.1)
#&amp;gt;  purrr      * 0.3.4   2020-04-17 [1] CRAN (R 4.1.0)
#&amp;gt;  recipes    * 0.2.0   2022-02-18 [1] CRAN (R 4.1.1)
#&amp;gt;  rlang        1.0.2   2022-03-04 [1] CRAN (R 4.1.1)
#&amp;gt;  rsample    * 0.1.1   2021-11-08 [1] CRAN (R 4.1.2)
#&amp;gt;  tibble     * 3.1.6   2021-11-07 [1] CRAN (R 4.1.1)
#&amp;gt;  tidymodels * 0.2.0   2022-03-19 [1] CRAN (R 4.1.1)
#&amp;gt;  tune       * 0.2.0   2022-03-19 [1] CRAN (R 4.1.2)
#&amp;gt;  workflows  * 0.2.6   2022-03-18 [1] CRAN (R 4.1.2)
#&amp;gt;  yardstick  * 0.0.9   2021-11-22 [1] CRAN (R 4.1.1)
#&amp;gt; 
#&amp;gt;  [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library
#&amp;gt; 
#&amp;gt; ────────────────────────────────────────────────────────────────────
&lt;/code&gt;&lt;/pre&gt;</description>
  </item>
  
<item>
  <title>Nested resampling</title>
  <link>https://www.tidymodels.org/learn/work/nested-resampling/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/learn/work/nested-resampling/</guid>
  <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;To use the code in this article, you will need to install the following packages: furrr, kernlab, mlbench, scales, and tidymodels.&lt;/p&gt;
&lt;p&gt;In this article, we discuss an alternative method for evaluating and tuning models, called &lt;a href=&#34;https://scholar.google.com/scholar?hl=en&amp;amp;as_sdt=0%2C7&amp;amp;q=%22nested+resampling%22+inner+outer&amp;amp;btnG=&#34;&gt;nested resampling&lt;/a&gt;. While it is more computationally taxing and challenging to implement than other resampling methods, it has the potential to produce better estimates of model performance.&lt;/p&gt;
&lt;h2 id=&#34;resampling-models&#34;&gt;Resampling models&lt;/h2&gt;
&lt;p&gt;A typical scheme for splitting the data when developing a predictive model is to create an initial split of the data into a training and test set. If resampling is used, it is executed on the training set. A series of binary splits is created. In rsample, we use the term &lt;em&gt;analysis set&lt;/em&gt; for the data that are used to fit the model and the term &lt;em&gt;assessment set&lt;/em&gt; for the set used to compute performance:&lt;/p&gt;
&lt;img src=&#34;figs/resampling.svg&#34; width=&#34;70%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;
&lt;p&gt;A common method for tuning models is &lt;a href=&#34;https://www.tidymodels.org/learn/work/tune-svm/&#34;&gt;grid search&lt;/a&gt; where a candidate set of tuning parameters is created. The full set of models for every combination of the tuning parameter grid and the resamples is fitted. Each time, the assessment data are used to measure performance and the average value is determined for each tuning parameter.&lt;/p&gt;
&lt;p&gt;The potential problem is that once we pick the tuning parameter associated with the best performance, this performance value is usually quoted as the performance of the model. There is serious potential for &lt;em&gt;optimization bias&lt;/em&gt; since we use the same data to tune the model and to assess performance. This would result in an optimistic estimate of performance.&lt;/p&gt;
&lt;p&gt;Nested resampling uses an additional layer of resampling that separates the tuning activities from the process used to estimate the efficacy of the model. An &lt;em&gt;outer&lt;/em&gt; resampling scheme is used and, for every split in the outer resample, another full set of resampling splits are created on the original analysis set. For example, if 10-fold cross-validation is used on the outside and 5-fold cross-validation on the inside, a total of 500 models will be fit. The parameter tuning will be conducted 10 times and the best parameters are determined from the average of the 5 assessment sets. This process occurs 10 times.&lt;/p&gt;
&lt;p&gt;Once the tuning results are complete, a model is fit to each of the outer resampling splits using the best parameter associated with that resample. The average of the outer method&amp;rsquo;s assessment sets are a unbiased estimate of the model.&lt;/p&gt;
&lt;p&gt;We will simulate some regression data to illustrate the methods. The mlbench package has a function &lt;code&gt;mlbench::mlbench.friedman1()&lt;/code&gt; that can simulate a complex regression data structure from the &lt;a href=&#34;https://scholar.google.com/scholar?hl=en&amp;amp;q=%22Multivariate+adaptive+regression+splines%22&amp;amp;btnG=&amp;amp;as_sdt=1%2C7&amp;amp;as_sdtp=&#34;&gt;original MARS publication&lt;/a&gt;. A training set size of 100 data points are generated as well as a large set that will be used to characterize how well the resampling procedure performed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(mlbench)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sim_data &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tmp &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;mlbench.friedman1&lt;/span&gt;(n, sd &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tmp &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;cbind&lt;/span&gt;(tmp&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;x, tmp&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;y)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tmp &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;as.data.frame&lt;/span&gt;(tmp)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;names&lt;/span&gt;(tmp)&lt;span style=&#34;color:#00f&#34;&gt;[ncol&lt;/span&gt;(tmp)] &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tmp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;9815&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;train_dat &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;sim_data&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;large_dat &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;sim_data&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;^5)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;nested-resampling&#34;&gt;Nested resampling&lt;/h2&gt;
&lt;p&gt;To get started, the types of resampling methods need to be specified. This isn&amp;rsquo;t a large data set, so 5 repeats of 10-fold cross validation will be used as the &lt;em&gt;outer&lt;/em&gt; resampling method for generating the estimate of overall performance. To tune the model, it would be good to have precise estimates for each of the values of the tuning parameter so let&amp;rsquo;s use 25 iterations of the bootstrap. This means that there will eventually be &lt;code&gt;5 * 10 * 25 = 1250&lt;/code&gt; models that are fit to the data &lt;em&gt;per tuning parameter&lt;/em&gt;. These models will be discarded once the performance of the model has been quantified.&lt;/p&gt;
&lt;p&gt;To create the tibble with the resampling specifications:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(tidymodels)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;results &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;nested_cv&lt;/span&gt;(train_dat, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     outside &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;vfold_cv&lt;/span&gt;(repeats &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;), 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     inside &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;bootstraps&lt;/span&gt;(times &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;25&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;results
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # Nested resampling:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; #  outer: 10-fold cross-validation repeated 5 times&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; #  inner: Bootstrap sampling&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 50 × 4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    splits          id      id2    inner_resamples      &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;list&amp;gt;          &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;  &amp;lt;list&amp;gt;               &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 &amp;lt;split [90/10]&amp;gt; Repeat1 Fold01 &amp;lt;bootstraps [25 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 &amp;lt;split [90/10]&amp;gt; Repeat1 Fold02 &amp;lt;bootstraps [25 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 &amp;lt;split [90/10]&amp;gt; Repeat1 Fold03 &amp;lt;bootstraps [25 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 &amp;lt;split [90/10]&amp;gt; Repeat1 Fold04 &amp;lt;bootstraps [25 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 &amp;lt;split [90/10]&amp;gt; Repeat1 Fold05 &amp;lt;bootstraps [25 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 &amp;lt;split [90/10]&amp;gt; Repeat1 Fold06 &amp;lt;bootstraps [25 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 &amp;lt;split [90/10]&amp;gt; Repeat1 Fold07 &amp;lt;bootstraps [25 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 &amp;lt;split [90/10]&amp;gt; Repeat1 Fold08 &amp;lt;bootstraps [25 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 &amp;lt;split [90/10]&amp;gt; Repeat1 Fold09 &amp;lt;bootstraps [25 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 &amp;lt;split [90/10]&amp;gt; Repeat1 Fold10 &amp;lt;bootstraps [25 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 40 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The splitting information for each resample is contained in the &lt;code&gt;split&lt;/code&gt; objects. Focusing on the second fold of the first repeat:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;results&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;splits[[2]]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &amp;lt;Analysis/Assess/Total&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &amp;lt;90/10/100&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;&amp;lt;90/10/100&amp;gt;&lt;/code&gt; indicates the number of observations in the analysis set, assessment set, and the original data.&lt;/p&gt;
&lt;p&gt;Each element of &lt;code&gt;inner_resamples&lt;/code&gt; has its own tibble with the bootstrapping splits.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;results&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;inner_resamples[[5]]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # Bootstrap sampling &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 25 × 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    splits          id         &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;list&amp;gt;          &amp;lt;chr&amp;gt;      &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 &amp;lt;split [90/31]&amp;gt; Bootstrap01&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 &amp;lt;split [90/33]&amp;gt; Bootstrap02&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 &amp;lt;split [90/37]&amp;gt; Bootstrap03&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 &amp;lt;split [90/31]&amp;gt; Bootstrap04&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 &amp;lt;split [90/32]&amp;gt; Bootstrap05&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 &amp;lt;split [90/32]&amp;gt; Bootstrap06&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 &amp;lt;split [90/36]&amp;gt; Bootstrap07&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 &amp;lt;split [90/34]&amp;gt; Bootstrap08&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 &amp;lt;split [90/29]&amp;gt; Bootstrap09&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 &amp;lt;split [90/31]&amp;gt; Bootstrap10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 15 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These are self-contained, meaning that the bootstrap sample is aware that it is a sample of a specific 90% of the data:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;results&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;inner_resamples[[5]]&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;splits[[1]]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &amp;lt;Analysis/Assess/Total&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &amp;lt;90/31/90&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To start, we need to define how the model will be created and measured. Let&amp;rsquo;s use a radial basis support vector machine model via the function &lt;code&gt;kernlab::ksvm&lt;/code&gt;. This model is generally considered to have &lt;em&gt;two&lt;/em&gt; tuning parameters: the SVM cost value and the kernel parameter &lt;code&gt;sigma&lt;/code&gt;. For illustration purposes here, only the cost value will be tuned and the function &lt;code&gt;kernlab::sigest&lt;/code&gt; will be used to estimate &lt;code&gt;sigma&lt;/code&gt; during each model fit. This is automatically done by &lt;code&gt;ksvm&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After the model is fit to the analysis set, the root-mean squared error (RMSE) is computed on the assessment set. &lt;strong&gt;One important note:&lt;/strong&gt; for this model, it is critical to center and scale the predictors before computing dot products. We don&amp;rsquo;t do this operation here because &lt;code&gt;mlbench.friedman1&lt;/code&gt; simulates all of the predictors to be standardized uniform random variables.&lt;/p&gt;
&lt;p&gt;Our function to fit the model and compute the RMSE is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(kernlab)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# `object` will be an `rsplit` object from our `results` tibble&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# `cost` is the tuning parameter&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;svm_rmse &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(object, cost &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  y_col &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;ncol&lt;/span&gt;(object&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  mod &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;svm_rbf&lt;/span&gt;(mode &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;regression&amp;#34;&lt;/span&gt;, cost &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; cost) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;set_engine&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;kernlab&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;fit&lt;/span&gt;(y &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; ., data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;analysis&lt;/span&gt;(object))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  holdout_pred &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;predict&lt;/span&gt;(mod, &lt;span style=&#34;color:#00f&#34;&gt;assessment&lt;/span&gt;(object) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; dplyr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;y)) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;bind_cols&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;assessment&lt;/span&gt;(object) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; dplyr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(y))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;rmse&lt;/span&gt;(holdout_pred, truth &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; y, estimate &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; .pred)&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;.estimate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# In some case, we want to parameterize the function over the tuning parameter:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rmse_wrapper &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(cost, object) &lt;span style=&#34;color:#00f&#34;&gt;svm_rmse&lt;/span&gt;(object, cost)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For the nested resampling, a model needs to be fit for each tuning parameter and each bootstrap split. To do this, create a wrapper:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# `object` will be an `rsplit` object for the bootstrap samples&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tune_over_cost &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(object) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;tibble&lt;/span&gt;(cost &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; ^ &lt;span style=&#34;color:#00f&#34;&gt;seq&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-2&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;, by &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(RMSE &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map_dbl&lt;/span&gt;(cost, rmse_wrapper, object &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; object))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since this will be called across the set of outer cross-validation splits, another wrapper is required:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# `object` is an `rsplit` object in `results$inner_resamples` &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;summarize_tune_results &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(object) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Return row-bound tibble that has the 25 bootstrap results&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;map_df&lt;/span&gt;(object&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;splits, tune_over_cost) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# For each value of the tuning parameter, compute the &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# average RMSE which is the inner bootstrap estimate. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;group_by&lt;/span&gt;(cost) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;summarize&lt;/span&gt;(mean_RMSE &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;mean&lt;/span&gt;(RMSE, na.rm &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              n &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;length&lt;/span&gt;(RMSE),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              .groups &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;drop&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that those functions are defined, we can execute all the inner resampling loops:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tuning_results &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;(results&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;inner_resamples, summarize_tune_results) 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Alternatively, since these computations can be run in parallel, we can use the furrr package. Instead of using &lt;code&gt;map()&lt;/code&gt;, the function &lt;code&gt;future_map()&lt;/code&gt; parallelizes the iterations using the &lt;a href=&#34;https://cran.r-project.org/web/packages/future/vignettes/future-1-overview.html&#34;&gt;future package&lt;/a&gt;. The &lt;code&gt;multisession&lt;/code&gt; plan uses the local cores to process the inner resampling loop. The end results are the same as the sequential computations.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(furrr)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;plan&lt;/span&gt;(multisession)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tuning_results &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;future_map&lt;/span&gt;(results&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;inner_resamples, summarize_tune_results) 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The object &lt;code&gt;tuning_results&lt;/code&gt; is a list of data frames for each of the 50 outer resamples.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s make a plot of the averaged results to see what the relationship is between the RMSE and the tuning parameters for each of the inner bootstrapping operations:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(scales)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pooled_inner &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; tuning_results &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; bind_rows
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;best_cost &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(dat) dat&lt;span style=&#34;color:#00f&#34;&gt;[which.min&lt;/span&gt;(dat&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;mean_RMSE),]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(pooled_inner, &lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; cost, y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; mean_RMSE)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;scale_x_continuous&lt;/span&gt;(trans &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;log2&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;xlab&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;SVM Cost&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;ylab&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Inner RMSE&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;for &lt;/span&gt;(i in &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;length&lt;/span&gt;(tuning_results))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  p &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; p  &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_line&lt;/span&gt;(data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; tuning_results[[i]], alpha &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;.2&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_point&lt;/span&gt;(data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;best_cost&lt;/span&gt;(tuning_results[[i]]), pch &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;, alpha &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; p &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;geom_smooth&lt;/span&gt;(data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; pooled_inner, se &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/rmse-plot-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;Each gray line is a separate bootstrap resampling curve created from a different 90% of the data. The blue line is a LOESS smooth of all the results pooled together.&lt;/p&gt;
&lt;p&gt;To determine the best parameter estimate for each of the outer resampling iterations:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cost_vals &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tuning_results &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;map_df&lt;/span&gt;(best_cost) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(cost)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;results &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;bind_cols&lt;/span&gt;(results, cost_vals) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(cost &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;factor&lt;/span&gt;(cost, levels &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;paste&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; ^ &lt;span style=&#34;color:#00f&#34;&gt;seq&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-2&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;, by &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;))))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(results, &lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; cost)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_bar&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;xlab&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;SVM Cost&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;scale_x_discrete&lt;/span&gt;(drop &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/choose-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;Most of the resamples produced an optimal cost value of 2.0, but the distribution is right-skewed due to the flat trend in the resampling profile once the cost value becomes 10 or larger.&lt;/p&gt;
&lt;p&gt;Now that we have these estimates, we can compute the outer resampling results for each of the 50 splits using the corresponding tuning parameter value:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;results &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  results &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(RMSE &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map2_dbl&lt;/span&gt;(splits, cost, svm_rmse))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;summary&lt;/span&gt;(results&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;RMSE)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    1.57    2.09    2.67    2.69    3.26    4.27&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The estimated RMSE for the model tuning process is 2.69.&lt;/p&gt;
&lt;p&gt;What is the RMSE estimate for the non-nested procedure when only the outer resampling method is used? For each cost value in the tuning grid, 50 SVM models are fit and their RMSE values are averaged. The table of cost values and mean RMSE estimates is used to determine the best cost value. The associated RMSE is the biased estimate.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;not_nested &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;(results&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;splits, tune_over_cost) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  bind_rows
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;outer_summary &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; not_nested &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;group_by&lt;/span&gt;(cost) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;summarize&lt;/span&gt;(outer_RMSE &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;mean&lt;/span&gt;(RMSE), n &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;length&lt;/span&gt;(RMSE))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;outer_summary
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 11 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;      cost outer_RMSE     n&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1   0.25       3.54    50&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2   0.5        3.11    50&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3   1          2.77    50&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4   2          2.62    50&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5   4          2.65    50&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6   8          2.75    50&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7  16          2.82    50&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8  32          2.82    50&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9  64          2.83    50&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 128          2.83    50&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 11 256          2.82    50&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(outer_summary, &lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; cost, y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; outer_RMSE)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_point&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_line&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;scale_x_continuous&lt;/span&gt;(trans &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;log2&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;xlab&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;SVM Cost&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;ylab&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;RMSE&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/not-nested-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;The non-nested procedure estimates the RMSE to be 2.62. Both estimates are fairly close.&lt;/p&gt;
&lt;p&gt;The approximately true RMSE for an SVM model with a cost value of 2.0 can be approximated with the large sample that was simulated at the beginning.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;finalModel &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;ksvm&lt;/span&gt;(y &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; ., data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; train_dat, C &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;large_pred &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;predict&lt;/span&gt;(finalModel, large_dat[, &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;ncol&lt;/span&gt;(large_dat)])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;sqrt&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;mean&lt;/span&gt;((large_dat&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;y &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; large_pred) ^ &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, na.rm &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 2.71&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The nested procedure produces a closer estimate to the approximate truth but the non-nested estimate is very similar.&lt;/p&gt;
&lt;h2 id=&#34;session-information&#34;&gt;Session information&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#&amp;gt; ─ Session info ─────────────────────────────────────────────────────
#&amp;gt;  setting  value
#&amp;gt;  version  R version 4.1.2 (2021-11-01)
#&amp;gt;  os       macOS Monterey 12.3
#&amp;gt;  system   aarch64, darwin20
#&amp;gt;  ui       X11
#&amp;gt;  language (EN)
#&amp;gt;  collate  en_GB.UTF-8
#&amp;gt;  ctype    en_GB.UTF-8
#&amp;gt;  tz       Europe/London
#&amp;gt;  date     2022-04-11
#&amp;gt;  pandoc   2.14.0.3 @ /Applications/RStudio.app/Contents/MacOS/pandoc/ (via rmarkdown)
#&amp;gt; 
#&amp;gt; ─ Packages ─────────────────────────────────────────────────────────
#&amp;gt;  package    * version date (UTC) lib source
#&amp;gt;  broom      * 0.7.12  2022-01-28 [1] CRAN (R 4.1.1)
#&amp;gt;  dials      * 0.1.1   2022-04-06 [1] CRAN (R 4.1.2)
#&amp;gt;  dplyr      * 1.0.8   2022-02-08 [1] CRAN (R 4.1.2)
#&amp;gt;  furrr      * 0.2.3   2021-06-25 [1] CRAN (R 4.1.2)
#&amp;gt;  ggplot2    * 3.3.5   2021-06-25 [1] CRAN (R 4.1.1)
#&amp;gt;  infer      * 1.0.0   2021-08-13 [1] CRAN (R 4.1.1)
#&amp;gt;  kernlab    * 0.9-30  2022-04-02 [1] CRAN (R 4.1.2)
#&amp;gt;  mlbench    * 2.1-3   2021-01-29 [1] CRAN (R 4.1.2)
#&amp;gt;  parsnip    * 0.2.1   2022-03-17 [1] CRAN (R 4.1.1)
#&amp;gt;  purrr      * 0.3.4   2020-04-17 [1] CRAN (R 4.1.0)
#&amp;gt;  recipes    * 0.2.0   2022-02-18 [1] CRAN (R 4.1.1)
#&amp;gt;  rlang        1.0.2   2022-03-04 [1] CRAN (R 4.1.1)
#&amp;gt;  rsample    * 0.1.1   2021-11-08 [1] CRAN (R 4.1.2)
#&amp;gt;  scales     * 1.1.1   2020-05-11 [1] CRAN (R 4.1.2)
#&amp;gt;  tibble     * 3.1.6   2021-11-07 [1] CRAN (R 4.1.1)
#&amp;gt;  tidymodels * 0.2.0   2022-03-19 [1] CRAN (R 4.1.1)
#&amp;gt;  tune       * 0.2.0   2022-03-19 [1] CRAN (R 4.1.2)
#&amp;gt;  workflows  * 0.2.6   2022-03-18 [1] CRAN (R 4.1.2)
#&amp;gt;  yardstick  * 0.0.9   2021-11-22 [1] CRAN (R 4.1.1)
#&amp;gt; 
#&amp;gt;  [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library
#&amp;gt; 
#&amp;gt; ────────────────────────────────────────────────────────────────────
&lt;/code&gt;&lt;/pre&gt;</description>
  </item>
  
<item>
  <title>Preprocess your data with recipes</title>
  <link>https://www.tidymodels.org/start/recipes/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/start/recipes/</guid>
  <description>&lt;script src=&#34;https://www.tidymodels.org/start/recipes/index_files/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://www.tidymodels.org/start/recipes/index_files/lightable/lightable.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;h2 id=&#34;intro&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In our &lt;a href=&#34;https://www.tidymodels.org/start/models/&#34;&gt;&lt;em&gt;Build a Model&lt;/em&gt;&lt;/a&gt; article, we learned how to specify and train models with different engines using the &lt;a href=&#34;https://parsnip.tidymodels.org/&#34;&gt;parsnip package&lt;/a&gt;. In this article, we&amp;rsquo;ll explore another tidymodels package, &lt;a href=&#34;https://recipes.tidymodels.org/&#34;&gt;recipes&lt;/a&gt;, which is designed to help you preprocess your data &lt;em&gt;before&lt;/em&gt; training your model. Recipes are built as a series of preprocessing steps, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;converting qualitative predictors to indicator variables (also known as dummy variables),&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;transforming data to be on a different scale (e.g., taking the logarithm of a variable),&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;transforming whole groups of predictors together,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;extracting key features from raw variables (e.g., getting the day of the week out of a date variable),&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and so on. If you are familiar with R&amp;rsquo;s formula interface, a lot of this might sound familiar and like what a formula already does. Recipes can be used to do many of the same things, but they have a much wider range of possibilities. This article shows how to use recipes for modeling.&lt;/p&gt;
&lt;p&gt;To use code in this article,  you will need to install the following packages: nycflights13, skimr, and tidymodels.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(tidymodels)      &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# for the recipes package, along with the rest of tidymodels&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Helper packages&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(nycflights13)    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# for flight data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(skimr)           &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# for variable summaries&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt; Alternatively, open an interactive version of this article in your browser: &lt;/p&gt;

&lt;a href=&#34;https://rstudio.cloud/project/2674862&#34;&gt;
  &lt;button class=&#34;test-drive-btn&#34;&gt;&lt;i class=&#34;fa fa-cloud&#34;&gt;&lt;/i&gt; Test Drive on RStudio Cloud&lt;/button&gt;
&lt;/a&gt;

&lt;h2 id=&#34;data&#34;&gt;The New York City flight data&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s use the &lt;a href=&#34;https://github.com/hadley/nycflights13&#34;&gt;nycflights13 data&lt;/a&gt; to predict whether a plane arrives more than 30 minutes late. This data set contains information on 325,819 flights departing near New York City in 2013. Let&amp;rsquo;s start by loading the data and making a few changes to the variables:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;123&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flight_data &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  flights &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Convert the arrival delay to a factor&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    arr_delay &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;ifelse&lt;/span&gt;(arr_delay &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;late&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;on_time&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    arr_delay &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;factor&lt;/span&gt;(arr_delay),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# We will use the date (not date-time) in the recipe below&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    date &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; lubridate&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;as_date&lt;/span&gt;(time_hour)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Include the weather data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;inner_join&lt;/span&gt;(weather, by &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;origin&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;time_hour&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Only retain the specific columns we will use&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(dep_time, flight, origin, dest, air_time, distance, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         carrier, date, arr_delay, time_hour) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Exclude missing data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;na.omit&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# For creating models, it is better to have qualitative columns&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# encoded as factors (instead of character strings)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate_if&lt;/span&gt;(is.character, as.factor)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can see that about 16% of the flights in this data set arrived more than 30 minutes late.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flight_data &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;count&lt;/span&gt;(arr_delay) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(prop &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; n&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;sum&lt;/span&gt;(n))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 2 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   arr_delay      n  prop&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;fct&amp;gt;      &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 late       52540 0.161&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 on_time   273279 0.839&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Before we start building up our recipe, let&amp;rsquo;s take a quick look at a few specific variables that will be important for both preprocessing and modeling.&lt;/p&gt;
&lt;p&gt;First, notice that the variable we created called &lt;code&gt;arr_delay&lt;/code&gt; is a factor variable; it is important that our outcome variable for training a logistic regression model is a factor.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;glimpse&lt;/span&gt;(flight_data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Rows: 325,819&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Columns: 10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ dep_time  &amp;lt;int&amp;gt; 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, 558, …&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ flight    &amp;lt;int&amp;gt; 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 49, 71…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ origin    &amp;lt;fct&amp;gt; EWR, LGA, JFK, JFK, LGA, EWR, EWR, LGA, JFK, LGA, JFK, JFK, …&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ dest      &amp;lt;fct&amp;gt; IAH, IAH, MIA, BQN, ATL, ORD, FLL, IAD, MCO, ORD, PBI, TPA, …&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ air_time  &amp;lt;dbl&amp;gt; 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 158, 3…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ distance  &amp;lt;dbl&amp;gt; 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, 1028,…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ carrier   &amp;lt;fct&amp;gt; UA, UA, AA, B6, DL, UA, B6, EV, B6, AA, B6, B6, UA, UA, AA, …&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ date      &amp;lt;date&amp;gt; 2013-01-01, 2013-01-01, 2013-01-01, 2013-01-01, 2013-01-01,…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ arr_delay &amp;lt;fct&amp;gt; on_time, on_time, late, on_time, on_time, on_time, on_time, …&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ time_hour &amp;lt;dttm&amp;gt; 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 05:00:…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Second, there are two variables that we don&amp;rsquo;t want to use as predictors in our model, but that we would like to retain as identification variables that can be used to troubleshoot poorly predicted data points. These are &lt;code&gt;flight&lt;/code&gt;, a numeric value, and &lt;code&gt;time_hour&lt;/code&gt;, a date-time value.&lt;/p&gt;
&lt;p&gt;Third, there are 104 flight destinations contained in &lt;code&gt;dest&lt;/code&gt; and 16 distinct &lt;code&gt;carrier&lt;/code&gt;s.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flight_data &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  skimr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;skim&lt;/span&gt;(dest, carrier) 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table style=&#39;width: auto;&#39;
        class=&#39;table table-condensed&#39;&gt;
&lt;caption&gt;Table 1: Data summary&lt;/caption&gt;
 &lt;thead&gt;
  &lt;tr&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;   &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt;   &lt;/th&gt;
  &lt;/tr&gt;
 &lt;/thead&gt;
&lt;tbody&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; Name &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; Piped data &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; Number of rows &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 325819 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; Number of columns &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 10 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; _______________________ &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt;  &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; Column type frequency: &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt;  &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; factor &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 2 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; ________________________ &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt;  &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; Group variables &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; None &lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Variable type: factor&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
  &lt;tr&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt; skim_variable &lt;/th&gt;
   &lt;th style=&#34;text-align:right;&#34;&gt; n_missing &lt;/th&gt;
   &lt;th style=&#34;text-align:right;&#34;&gt; complete_rate &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt; ordered &lt;/th&gt;
   &lt;th style=&#34;text-align:right;&#34;&gt; n_unique &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt; top_counts &lt;/th&gt;
  &lt;/tr&gt;
 &lt;/thead&gt;
&lt;tbody&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; dest &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 0 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 1 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; FALSE &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 104 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; ATL: 16771, ORD: 16507, LAX: 15942, BOS: 14948 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; carrier &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 0 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 1 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; FALSE &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 16 &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; UA: 57489, B6: 53715, EV: 50868, DL: 47465 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Because we&amp;rsquo;ll be using a simple logistic regression model, the variables &lt;code&gt;dest&lt;/code&gt; and &lt;code&gt;carrier&lt;/code&gt; will be converted to &lt;a href=&#34;https://bookdown.org/max/FES/creating-dummy-variables-for-unordered-categories.html&#34;&gt;dummy variables&lt;/a&gt;. However, some of these values do not occur very frequently and this could complicate our analysis. We&amp;rsquo;ll discuss specific steps later in this article that we can add to our recipe to address this issue before modeling.&lt;/p&gt;
&lt;h2 id=&#34;data-split&#34;&gt;Data splitting&lt;/h2&gt;
&lt;p&gt;To get started, let&amp;rsquo;s split this single dataset into two: a &lt;em&gt;training&lt;/em&gt; set and a &lt;em&gt;testing&lt;/em&gt; set. We&amp;rsquo;ll keep most of the rows in the original dataset (subset chosen randomly) in the &lt;em&gt;training&lt;/em&gt; set. The training data will be used to &lt;em&gt;fit&lt;/em&gt; the model, and the &lt;em&gt;testing&lt;/em&gt; set will be used to measure model performance.&lt;/p&gt;
&lt;p&gt;To do this, we can use the &lt;a href=&#34;https://rsample.tidymodels.org/&#34;&gt;rsample&lt;/a&gt; package to create an object that contains the information on &lt;em&gt;how&lt;/em&gt; to split the data, and then two more rsample functions to create data frames for the training and testing sets:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Fix the random numbers by setting the seed &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# This enables the analysis to be reproducible when random numbers are used &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;222&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Put 3/4 of the data into the training set &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data_split &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;initial_split&lt;/span&gt;(flight_data, prop &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Create data frames for the two sets:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;train_data &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;training&lt;/span&gt;(data_split)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test_data  &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;testing&lt;/span&gt;(data_split)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;recipe&#34;&gt;Create recipe and roles&lt;/h2&gt;
&lt;p&gt;To get started, let&amp;rsquo;s create a recipe for a simple logistic regression model. Before training the model, we can use a recipe to create a few new predictors and conduct some preprocessing required by the model.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s initiate a new recipe:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flights_rec &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;recipe&lt;/span&gt;(arr_delay &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; ., data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; train_data) 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;a href=&#34;https://recipes.tidymodels.org/reference/recipe.html&#34;&gt;&lt;code&gt;recipe()&lt;/code&gt; function&lt;/a&gt; as we used it here has two arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;formula&lt;/strong&gt;. Any variable on the left-hand side of the tilde (&lt;code&gt;~&lt;/code&gt;) is considered the model outcome (here, &lt;code&gt;arr_delay&lt;/code&gt;). On the right-hand side of the tilde are the predictors. Variables may be listed by name, or you can use the dot (&lt;code&gt;.&lt;/code&gt;) to indicate all other variables as predictors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;data&lt;/strong&gt;. A recipe is associated with the data set used to create the model. This will typically be the &lt;em&gt;training&lt;/em&gt; set, so &lt;code&gt;data = train_data&lt;/code&gt; here. Naming a data set doesn&amp;rsquo;t actually change the data itself; it is only used to catalog the names of the variables and their types, like factors, integers, dates, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we can add &lt;a href=&#34;https://recipes.tidymodels.org/reference/roles.html&#34;&gt;roles&lt;/a&gt; to this recipe. We can use the &lt;a href=&#34;https://recipes.tidymodels.org/reference/roles.html&#34;&gt;&lt;code&gt;update_role()&lt;/code&gt; function&lt;/a&gt; to let recipes know that &lt;code&gt;flight&lt;/code&gt; and &lt;code&gt;time_hour&lt;/code&gt; are variables with a custom role that we called &lt;code&gt;&amp;quot;ID&amp;quot;&lt;/code&gt; (a role can have any character value). Whereas our formula included all variables in the training set other than &lt;code&gt;arr_delay&lt;/code&gt; as predictors, this tells the recipe to keep these two variables but not use them as either outcomes or predictors.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flights_rec &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;recipe&lt;/span&gt;(arr_delay &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; ., data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; train_data) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;update_role&lt;/span&gt;(flight, time_hour, new_role &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;) 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This step of adding roles to a recipe is optional; the purpose of using it here is that those two variables can be retained in the data but not included in the model. This can be convenient when, after the model is fit, we want to investigate some poorly predicted value. These ID columns will be available and can be used to try to understand what went wrong.&lt;/p&gt;
&lt;p&gt;To get the current set of variables and roles, use the &lt;code&gt;summary()&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;summary&lt;/span&gt;(flights_rec)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 10 × 4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    variable  type    role      source  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 dep_time  numeric predictor original&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 flight    numeric ID        original&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 origin    nominal predictor original&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 dest      nominal predictor original&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 air_time  numeric predictor original&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 distance  numeric predictor original&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 carrier   nominal predictor original&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 date      date    predictor original&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 time_hour date    ID        original&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 arr_delay nominal outcome   original&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;features&#34;&gt;Create features&lt;/h2&gt;
&lt;p&gt;Now we can start adding steps onto our recipe using the pipe operator. Perhaps it is reasonable for the date of the flight to have an effect on the likelihood of a late arrival. A little bit of &lt;strong&gt;feature engineering&lt;/strong&gt; might go a long way to improving our model. How should the date be encoded into the model? The &lt;code&gt;date&lt;/code&gt; column has an R &lt;code&gt;date&lt;/code&gt; object so including that column &amp;ldquo;as is&amp;rdquo; will mean that the model will convert it to a numeric format equal to the number of days after a reference date:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flight_data &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;distinct&lt;/span&gt;(date) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(numeric_date &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;as.numeric&lt;/span&gt;(date)) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 364 × 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   date       numeric_date&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;date&amp;gt;            &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 2013-01-01        15706&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 2013-01-02        15707&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 2013-01-03        15708&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4 2013-01-04        15709&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5 2013-01-05        15710&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 359 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&amp;rsquo;s possible that the numeric date variable is a good option for modeling; perhaps the model would benefit from a linear trend between the log-odds of a late arrival and the numeric date variable. However, it might be better to add model terms &lt;em&gt;derived&lt;/em&gt; from the date that have a better potential to be important to the model. For example, we could derive the following meaningful features from the single &lt;code&gt;date&lt;/code&gt; variable:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the day of the week,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the month, and&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;whether or not the date corresponds to a holiday.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s do all three of these by adding steps to our recipe:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flights_rec &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;recipe&lt;/span&gt;(arr_delay &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; ., data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; train_data) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;update_role&lt;/span&gt;(flight, time_hour, new_role &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_date&lt;/span&gt;(date, features &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;dow&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;month&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;               
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_holiday&lt;/span&gt;(date, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               holidays &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; timeDate&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;listHolidays&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;US&amp;#34;&lt;/span&gt;), 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               keep_original_cols &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What do each of these steps do?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;With &lt;a href=&#34;https://recipes.tidymodels.org/reference/step_date.html&#34;&gt;&lt;code&gt;step_date()&lt;/code&gt;&lt;/a&gt;, we created two new factor columns with the appropriate day of the week and the month.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With &lt;a href=&#34;https://recipes.tidymodels.org/reference/step_holiday.html&#34;&gt;&lt;code&gt;step_holiday()&lt;/code&gt;&lt;/a&gt;, we created a binary variable indicating whether the current date is a holiday or not. The argument value of &lt;code&gt;timeDate::listHolidays(&amp;quot;US&amp;quot;)&lt;/code&gt; uses the &lt;a href=&#34;https://cran.r-project.org/web/packages/timeDate/index.html&#34;&gt;timeDate package&lt;/a&gt; to list the 17 standard US holidays.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With &lt;code&gt;keep_original_cols = FALSE&lt;/code&gt;, we remove the original &lt;code&gt;date&lt;/code&gt; variable since we no longer want it in the model. Many recipe steps that create new variables have this argument.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next, we&amp;rsquo;ll turn our attention to the variable types of our predictors. Because we plan to train a logistic regression model, we know that predictors will ultimately need to be numeric, as opposed to nominal data like strings and factor variables. In other words, there may be a difference in how we store our data (in factors inside a data frame), and how the underlying equations require them (a purely numeric matrix).&lt;/p&gt;
&lt;p&gt;For factors like &lt;code&gt;dest&lt;/code&gt; and &lt;code&gt;origin&lt;/code&gt;, &lt;a href=&#34;https://bookdown.org/max/FES/creating-dummy-variables-for-unordered-categories.html&#34;&gt;standard practice&lt;/a&gt; is to convert them into &lt;em&gt;dummy&lt;/em&gt; or &lt;em&gt;indicator&lt;/em&gt; variables to make them numeric. These are binary values for each level of the factor. For example, our &lt;code&gt;origin&lt;/code&gt; variable has values of &lt;code&gt;&amp;quot;EWR&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;JFK&amp;quot;&lt;/code&gt;, and &lt;code&gt;&amp;quot;LGA&amp;quot;&lt;/code&gt;. The standard dummy variable encoding, shown below, will create &lt;em&gt;two&lt;/em&gt; numeric columns of the data that are 1 when the originating airport is &lt;code&gt;&amp;quot;JFK&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;LGA&amp;quot;&lt;/code&gt; and zero otherwise, respectively.&lt;/p&gt;
&lt;table class=&#34;table&#34; style=&#34;width: auto !important; margin-left: auto; margin-right: auto;&#34;&gt;
 &lt;thead&gt;
  &lt;tr&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt; origin &lt;/th&gt;
   &lt;th style=&#34;text-align:right;&#34;&gt; origin_JFK &lt;/th&gt;
   &lt;th style=&#34;text-align:right;&#34;&gt; origin_LGA &lt;/th&gt;
  &lt;/tr&gt;
 &lt;/thead&gt;
&lt;tbody&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; JFK &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 1 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 0 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; EWR &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 0 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 0 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; LGA &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 0 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 1 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;But, unlike the standard model formula methods in R, a recipe &lt;strong&gt;does not&lt;/strong&gt; automatically create these dummy variables for you; you&amp;rsquo;ll need to tell your recipe to add this step. This is for two reasons. First, many models do not require &lt;a href=&#34;https://bookdown.org/max/FES/categorical-trees.html&#34;&gt;numeric predictors&lt;/a&gt;, so dummy variables may not always be preferred. Second, recipes can also be used for purposes outside of modeling, where non-dummy versions of the variables may work better. For example, you may want to make a table or a plot with a variable as a single factor. For those reasons, you need to explicitly tell recipes to create dummy variables using &lt;code&gt;step_dummy()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flights_rec &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;recipe&lt;/span&gt;(arr_delay &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; ., data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; train_data) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;update_role&lt;/span&gt;(flight, time_hour, new_role &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_date&lt;/span&gt;(date, features &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;dow&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;month&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;               
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_holiday&lt;/span&gt;(date, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               holidays &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; timeDate&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;listHolidays&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;US&amp;#34;&lt;/span&gt;), 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               keep_original_cols &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_dummy&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;all_nominal_predictors&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, we did something different than before: instead of applying a step to an individual variable, we used &lt;a href=&#34;https://recipes.tidymodels.org/reference/selections.html&#34;&gt;selectors&lt;/a&gt; to apply this recipe step to several variables at once, &lt;code&gt;all_nominal_predictors()&lt;/code&gt;. The &lt;a href=&#34;https://recipes.tidymodels.org/reference/selections.html&#34;&gt;selector functions&lt;/a&gt; can be combined to select intersections of variables.&lt;/p&gt;
&lt;p&gt;At this stage in the recipe, this step selects the &lt;code&gt;origin&lt;/code&gt;, &lt;code&gt;dest&lt;/code&gt;, and &lt;code&gt;carrier&lt;/code&gt; variables. It also includes two new variables, &lt;code&gt;date_dow&lt;/code&gt; and &lt;code&gt;date_month&lt;/code&gt;, that were created by the earlier &lt;code&gt;step_date()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;More generally, the recipe selectors mean that you don&amp;rsquo;t always have to apply steps to individual variables one at a time. Since a recipe knows the &lt;em&gt;variable type&lt;/em&gt; and &lt;em&gt;role&lt;/em&gt; of each column, they can also be selected (or dropped) using this information.&lt;/p&gt;
&lt;p&gt;We need one final step to add to our recipe. Since &lt;code&gt;carrier&lt;/code&gt; and &lt;code&gt;dest&lt;/code&gt; have some infrequently occurring factor values, it is possible that dummy variables might be created for values that don&amp;rsquo;t exist in the training set. For example, there is one destination that is only in the test set:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test_data &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;distinct&lt;/span&gt;(dest) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;anti_join&lt;/span&gt;(train_data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Joining, by = &amp;#34;dest&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 × 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   dest &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;fct&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 LEX&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the recipe is applied to the training set, a column is made for LEX because the factor levels come from &lt;code&gt;flight_data&lt;/code&gt; (not the training set), but this column will contain all zeros. This is a &amp;ldquo;zero-variance predictor&amp;rdquo; that has no information within the column. While some R functions will not produce an error for such predictors, it usually causes warnings and other issues. &lt;code&gt;step_zv()&lt;/code&gt; will remove columns from the data when the training set data have a single value, so it is added to the recipe &lt;em&gt;after&lt;/em&gt; &lt;code&gt;step_dummy()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flights_rec &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;recipe&lt;/span&gt;(arr_delay &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; ., data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; train_data) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;update_role&lt;/span&gt;(flight, time_hour, new_role &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_date&lt;/span&gt;(date, features &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;dow&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;month&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;               
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_holiday&lt;/span&gt;(date, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               holidays &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; timeDate&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;listHolidays&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;US&amp;#34;&lt;/span&gt;), 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               keep_original_cols &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_dummy&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;all_nominal_predictors&lt;/span&gt;()) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_zv&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;all_predictors&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we&amp;rsquo;ve created a &lt;em&gt;specification&lt;/em&gt; of what should be done with the data. How do we use the recipe we made?&lt;/p&gt;
&lt;h2 id=&#34;fit-workflow&#34;&gt;Fit a model with a recipe&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s use logistic regression to model the flight data. As we saw in &lt;a href=&#34;https://www.tidymodels.org/start/models/&#34;&gt;&lt;em&gt;Build a Model&lt;/em&gt;&lt;/a&gt;, we start by &lt;a href=&#34;https://www.tidymodels.org/start/models/#build-model&#34;&gt;building a model specification&lt;/a&gt; using the parsnip package:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lr_mod &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;logistic_reg&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;set_engine&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;glm&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We will want to use our recipe across several steps as we train and test our model. We will:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Process the recipe using the training set&lt;/strong&gt;: This involves any estimation or calculations based on the training set. For our recipe, the training set will be used to determine which predictors should be converted to dummy variables and which predictors will have zero-variance in the training set, and should be slated for removal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Apply the recipe to the training set&lt;/strong&gt;: We create the final predictor set on the training set.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Apply the recipe to the test set&lt;/strong&gt;: We create the final predictor set on the test set. Nothing is recomputed and no information from the test set is used here; the dummy variable and zero-variance results from the training set are applied to the test set.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To simplify this process, we can use a &lt;em&gt;model workflow&lt;/em&gt;, which pairs a model and recipe together. This is a straightforward approach because different recipes are often needed for different models, so when a model and recipe are bundled, it becomes easier to train and test &lt;em&gt;workflows&lt;/em&gt;. We&amp;rsquo;ll use the &lt;a href=&#34;https://workflows.tidymodels.org/&#34;&gt;workflows package&lt;/a&gt; from tidymodels to bundle our parsnip model (&lt;code&gt;lr_mod&lt;/code&gt;) with our recipe (&lt;code&gt;flights_rec&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flights_wflow &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;workflow&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;add_model&lt;/span&gt;(lr_mod) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;add_recipe&lt;/span&gt;(flights_rec)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flights_wflow
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ══ Workflow ══════════════════════════════════════════════════════════&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Preprocessor: Recipe&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Model: logistic_reg()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Preprocessor ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4 Recipe Steps&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; • step_date()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; • step_holiday()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; • step_dummy()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; • step_zv()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Model ─────────────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Logistic Regression Model Specification (classification)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Computational engine: glm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, there is a single function that can be used to prepare the recipe and train the model from the resulting predictors:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flights_fit &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  flights_wflow &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;fit&lt;/span&gt;(data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; train_data)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This object has the finalized recipe and fitted model objects inside. You may want to extract the model or recipe objects from the workflow. To do this, you can use the helper functions &lt;code&gt;extract_fit_parsnip()&lt;/code&gt; and &lt;code&gt;extract_recipe()&lt;/code&gt;. For example, here we pull the fitted model object then use the &lt;code&gt;broom::tidy()&lt;/code&gt; function to get a tidy tibble of model coefficients:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flights_fit &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;extract_fit_parsnip&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;tidy&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 157 × 5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   term                estimate std.error statistic  p.value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;                  &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 (Intercept)          7.28    2.73           2.67 7.64e- 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 dep_time            -0.00166 0.0000141   -118.   0       &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 air_time            -0.0440  0.000563     -78.2  0       &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4 distance             0.00507 0.00150        3.38 7.32e- 4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5 date_USChristmasDay  1.33    0.177          7.49 6.93e-14&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 152 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;predict-workflow&#34;&gt;Use a trained workflow to predict&lt;/h2&gt;
&lt;p&gt;Our goal was to predict whether a plane arrives more than 30 minutes late. We have just:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Built the model (&lt;code&gt;lr_mod&lt;/code&gt;),&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Created a preprocessing recipe (&lt;code&gt;flights_rec&lt;/code&gt;),&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bundled the model and recipe (&lt;code&gt;flights_wflow&lt;/code&gt;), and&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Trained our workflow using a single call to &lt;code&gt;fit()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The next step is to use the trained workflow (&lt;code&gt;flights_fit&lt;/code&gt;) to predict with the unseen test data, which we will do with a single call to &lt;code&gt;predict()&lt;/code&gt;. The &lt;code&gt;predict()&lt;/code&gt; method applies the recipe to the new data, then passes them to the fitted model.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;predict&lt;/span&gt;(flights_fit, test_data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 81,455 × 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   .pred_class&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;fct&amp;gt;      &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 on_time    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 on_time    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 on_time    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4 on_time    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5 on_time    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 81,450 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Because our outcome variable here is a factor, the output from &lt;code&gt;predict()&lt;/code&gt; returns the predicted class: &lt;code&gt;late&lt;/code&gt; versus &lt;code&gt;on_time&lt;/code&gt;. But, let&amp;rsquo;s say we want the predicted class probabilities for each flight instead. To return those, we can specify &lt;code&gt;type = &amp;quot;prob&amp;quot;&lt;/code&gt; when we use &lt;code&gt;predict()&lt;/code&gt; or use &lt;code&gt;augment()&lt;/code&gt; with the model plus test data to save them together:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flights_aug &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;augment&lt;/span&gt;(flights_fit, test_data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# The data look like: &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flights_aug &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(arr_delay, time_hour, flight, .pred_class, .pred_on_time)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 81,455 × 5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   arr_delay time_hour           flight .pred_class .pred_on_time&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;fct&amp;gt;     &amp;lt;dttm&amp;gt;               &amp;lt;int&amp;gt; &amp;lt;fct&amp;gt;               &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 on_time   2013-01-01 05:00:00   1545 on_time             0.945&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 on_time   2013-01-01 05:00:00   1714 on_time             0.949&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 on_time   2013-01-01 06:00:00    507 on_time             0.964&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4 on_time   2013-01-01 06:00:00   5708 on_time             0.961&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5 on_time   2013-01-01 06:00:00     71 on_time             0.962&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 81,450 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that we have a tibble with our predicted class probabilities, how will we evaluate the performance of our workflow? We can see from these first few rows that our model predicted these 5 on time flights correctly because the values of &lt;code&gt;.pred_on_time&lt;/code&gt; are &lt;em&gt;p&lt;/em&gt; &amp;gt; .50. But we also know that we have 81,455 rows total to predict. We would like to calculate a metric that tells how well our model predicted late arrivals, compared to the true status of our outcome variable, &lt;code&gt;arr_delay&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s use the area under the &lt;a href=&#34;https://bookdown.org/max/FES/measuring-performance.html#class-metrics&#34;&gt;ROC curve&lt;/a&gt; as our metric, computed using &lt;code&gt;roc_curve()&lt;/code&gt; and &lt;code&gt;roc_auc()&lt;/code&gt; from the &lt;a href=&#34;https://yardstick.tidymodels.org/&#34;&gt;yardstick package&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To generate a ROC curve, we need the predicted class probabilities for &lt;code&gt;late&lt;/code&gt; and &lt;code&gt;on_time&lt;/code&gt;, which we just calculated in the code chunk above. We can create the ROC curve with these values, using &lt;code&gt;roc_curve()&lt;/code&gt; and then piping to the &lt;code&gt;autoplot()&lt;/code&gt; method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flights_aug &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;roc_curve&lt;/span&gt;(truth &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; arr_delay, .pred_late) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;autoplot&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/roc-plot-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;Similarly, &lt;code&gt;roc_auc()&lt;/code&gt; estimates the area under the curve:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flights_aug &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;roc_auc&lt;/span&gt;(truth &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; arr_delay, .pred_late)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   .metric .estimator .estimate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 roc_auc binary         0.764&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Not too bad! We leave it to the reader to test out this workflow &lt;a href=&#34;https://workflows.tidymodels.org/reference/add_formula.html&#34;&gt;&lt;em&gt;without&lt;/em&gt;&lt;/a&gt; this recipe. You can use &lt;code&gt;workflows::add_formula(arr_delay ~ .)&lt;/code&gt; instead of &lt;code&gt;add_recipe()&lt;/code&gt; (remember to remove the identification variables first!), and see whether our recipe improved our model&amp;rsquo;s ability to predict late arrivals.&lt;/p&gt;
&lt;h2 id=&#34;session-info&#34;&gt;Session information&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#&amp;gt; ─ Session info ─────────────────────────────────────────────────────
#&amp;gt;  setting  value
#&amp;gt;  version  R version 4.1.1 (2021-08-10)
#&amp;gt;  os       macOS Monterey 12.2.1
#&amp;gt;  system   aarch64, darwin20
#&amp;gt;  ui       X11
#&amp;gt;  language (EN)
#&amp;gt;  collate  en_US.UTF-8
#&amp;gt;  ctype    en_US.UTF-8
#&amp;gt;  tz       America/Denver
#&amp;gt;  date     2022-03-23
#&amp;gt;  pandoc   2.17.1.1 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/ (via rmarkdown)
#&amp;gt; 
#&amp;gt; ─ Packages ─────────────────────────────────────────────────────────
#&amp;gt;  package      * version date (UTC) lib source
#&amp;gt;  broom        * 0.7.12  2022-01-28 [1] CRAN (R 4.1.1)
#&amp;gt;  dials        * 0.1.0   2022-01-31 [1] CRAN (R 4.1.1)
#&amp;gt;  dplyr        * 1.0.8   2022-02-08 [1] CRAN (R 4.1.1)
#&amp;gt;  ggplot2      * 3.3.5   2021-06-25 [1] CRAN (R 4.1.0)
#&amp;gt;  infer        * 1.0.0   2021-08-13 [1] CRAN (R 4.1.1)
#&amp;gt;  nycflights13 * 1.0.2   2021-04-12 [1] CRAN (R 4.1.0)
#&amp;gt;  parsnip      * 0.2.1   2022-03-17 [1] CRAN (R 4.1.1)
#&amp;gt;  purrr        * 0.3.4   2020-04-17 [1] CRAN (R 4.1.0)
#&amp;gt;  recipes      * 0.2.0   2022-02-18 [1] CRAN (R 4.1.1)
#&amp;gt;  rlang          1.0.2   2022-03-04 [1] CRAN (R 4.1.1)
#&amp;gt;  rsample      * 0.1.1   2021-11-08 [1] CRAN (R 4.1.1)
#&amp;gt;  skimr        * 2.1.3   2021-03-07 [1] CRAN (R 4.1.0)
#&amp;gt;  tibble       * 3.1.6   2021-11-07 [1] CRAN (R 4.1.1)
#&amp;gt;  tidymodels   * 0.2.0   2022-03-19 [1] CRAN (R 4.1.1)
#&amp;gt;  tune         * 0.2.0   2022-03-19 [1] CRAN (R 4.1.1)
#&amp;gt;  workflows    * 0.2.6   2022-03-18 [1] CRAN (R 4.1.1)
#&amp;gt;  yardstick    * 0.0.9   2021-11-22 [1] CRAN (R 4.1.1)
#&amp;gt; 
#&amp;gt;  [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library
#&amp;gt; 
#&amp;gt; ────────────────────────────────────────────────────────────────────
&lt;/code&gt;&lt;/pre&gt;</description>
  </item>
  
<item>
  <title>Search parsnip models</title>
  <link>https://www.tidymodels.org/find/parsnip/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/find/parsnip/</guid>
  <description>
&lt;script src=&#34;https://www.tidymodels.org/find/parsnip/index_files/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://www.tidymodels.org/find/parsnip/index_files/datatables-css/datatables-crosstalk.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://www.tidymodels.org/find/parsnip/index_files/datatables-binding/datatables.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://www.tidymodels.org/find/parsnip/index_files/jquery/jquery-3.6.0.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://www.tidymodels.org/find/parsnip/index_files/dt-core/css/jquery.dataTables.min.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;link href=&#34;https://www.tidymodels.org/find/parsnip/index_files/dt-core/css/jquery.dataTables.extra.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://www.tidymodels.org/find/parsnip/index_files/dt-core/js/jquery.dataTables.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://www.tidymodels.org/find/parsnip/index_files/nouislider/jquery.nouislider.min.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://www.tidymodels.org/find/parsnip/index_files/nouislider/jquery.nouislider.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://www.tidymodels.org/find/parsnip/index_files/selectize/selectize.bootstrap3.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://www.tidymodels.org/find/parsnip/index_files/selectize/selectize.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://www.tidymodels.org/find/parsnip/index_files/crosstalk/css/crosstalk.min.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://www.tidymodels.org/find/parsnip/index_files/crosstalk/js/crosstalk.min.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;To learn about the parsnip package, see &lt;a href=&#34;https://www.tidymodels.org/start/models/&#34;&gt;&lt;em&gt;Get Started: Build a Model&lt;/em&gt;&lt;/a&gt;. Use the tables below to find &lt;a href=&#34;#models&#34;&gt;model types and engines&lt;/a&gt; and to explore &lt;a href=&#34;#model-args&#34;&gt;model arguments&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;models&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Explore models&lt;/h2&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:auto;&#34; class=&#34;datatables html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;filter&#34;:&#34;top&#34;,&#34;vertical&#34;:false,&#34;filterHTML&#34;:&#34;&lt;tr&gt;\n  &lt;td data-type=\&#34;character\&#34; style=\&#34;vertical-align: top;\&#34;&gt;\n    &lt;div class=\&#34;form-group has-feedback\&#34; style=\&#34;margin-bottom: auto;\&#34;&gt;\n      &lt;input type=\&#34;search\&#34; placeholder=\&#34;All\&#34; class=\&#34;form-control\&#34; style=\&#34;width: 100%;\&#34;/&gt;\n      &lt;span class=\&#34;glyphicon glyphicon-remove-circle form-control-feedback\&#34;&gt;&lt;\/span&gt;\n    &lt;\/div&gt;\n  &lt;\/td&gt;\n  &lt;td data-type=\&#34;character\&#34; style=\&#34;vertical-align: top;\&#34;&gt;\n    &lt;div class=\&#34;form-group has-feedback\&#34; style=\&#34;margin-bottom: auto;\&#34;&gt;\n      &lt;input type=\&#34;search\&#34; placeholder=\&#34;All\&#34; class=\&#34;form-control\&#34; style=\&#34;width: 100%;\&#34;/&gt;\n      &lt;span class=\&#34;glyphicon glyphicon-remove-circle form-control-feedback\&#34;&gt;&lt;\/span&gt;\n    &lt;\/div&gt;\n  &lt;\/td&gt;\n  &lt;td data-type=\&#34;factor\&#34; style=\&#34;vertical-align: top;\&#34;&gt;\n    &lt;div class=\&#34;form-group has-feedback\&#34; style=\&#34;margin-bottom: auto;\&#34;&gt;\n      &lt;input type=\&#34;search\&#34; placeholder=\&#34;All\&#34; class=\&#34;form-control\&#34; style=\&#34;width: 100%;\&#34;/&gt;\n      &lt;span class=\&#34;glyphicon glyphicon-remove-circle form-control-feedback\&#34;&gt;&lt;\/span&gt;\n    &lt;\/div&gt;\n    &lt;div style=\&#34;width: 100%; display: none;\&#34;&gt;\n      &lt;select multiple=\&#34;multiple\&#34; style=\&#34;width: 100%;\&#34; data-options=\&#34;[&amp;quot;modeltime&amp;quot;,&amp;quot;parsnip&amp;quot;]\&#34;&gt;&lt;\/select&gt;\n    &lt;\/div&gt;\n  &lt;\/td&gt;\n  &lt;td data-type=\&#34;factor\&#34; style=\&#34;vertical-align: top;\&#34;&gt;\n    &lt;div class=\&#34;form-group has-feedback\&#34; style=\&#34;margin-bottom: auto;\&#34;&gt;\n      &lt;input type=\&#34;search\&#34; placeholder=\&#34;All\&#34; class=\&#34;form-control\&#34; style=\&#34;width: 100%;\&#34;/&gt;\n      &lt;span class=\&#34;glyphicon glyphicon-remove-circle form-control-feedback\&#34;&gt;&lt;\/span&gt;\n    &lt;\/div&gt;\n    &lt;div style=\&#34;width: 100%; display: none;\&#34;&gt;\n      &lt;select multiple=\&#34;multiple\&#34; style=\&#34;width: 100%;\&#34; data-options=\&#34;[&amp;quot;classification&amp;quot;,&amp;quot;classification, regression&amp;quot;,&amp;quot;regression&amp;quot;]\&#34;&gt;&lt;\/select&gt;\n    &lt;\/div&gt;\n  &lt;\/td&gt;\n  &lt;td data-type=\&#34;character\&#34; style=\&#34;vertical-align: top;\&#34;&gt;\n    &lt;div class=\&#34;form-group has-feedback\&#34; style=\&#34;margin-bottom: auto;\&#34;&gt;\n      &lt;input type=\&#34;search\&#34; placeholder=\&#34;All\&#34; class=\&#34;form-control\&#34; style=\&#34;width: 100%;\&#34;/&gt;\n      &lt;span class=\&#34;glyphicon glyphicon-remove-circle form-control-feedback\&#34;&gt;&lt;\/span&gt;\n    &lt;\/div&gt;\n  &lt;\/td&gt;\n&lt;\/tr&gt;&#34;,&#34;data&#34;:[[&#34;ADAM Regression Models&#34;,&#34;\&#34;Boosted\&#34; ARIMA Regression Models&#34;,&#34;ARIMA Regression Models&#34;,&#34;Ensembles of MARS models&#34;,&#34;Ensembles of decision trees&#34;,&#34;Bayesian additive regression trees (BART)&#34;,&#34;Boosted trees&#34;,&#34;C5.0 rule-based classification models&#34;,&#34;Cubist rule-based regression models&#34;,&#34;Decision trees&#34;,&#34;Flexible discriminant analysis&#34;,&#34;Linear discriminant analysis&#34;,&#34;Quadratic discriminant analysis&#34;,&#34;Regularized discriminant analysis&#34;,&#34;Exponential Smoothing State Space Models&#34;,&#34;Generalized additive models (GAMs)&#34;,&#34;Linear regression&#34;,&#34;Logistic regression&#34;,&#34;Multivariate adaptive regression splines (MARS)&#34;,&#34;Single layer neural network&#34;,&#34;Multinomial regression&#34;,&#34;Naive Bayes models&#34;,&#34;NAIVE Forecast Models&#34;,&#34;K-nearest neighbors&#34;,&#34;NNETAR Regression Models&#34;,&#34;Null model&#34;,&#34;Partial least squares (PLS)&#34;,&#34;Poisson regression models&#34;,&#34;Boosted PROPHET Time Series Models&#34;,&#34;PROPHET Time Series Models&#34;,&#34;Proportional hazards regression&#34;,&#34;Random forest&#34;,&#34;RuleFit models&#34;,&#34;Multiple Seasonality Regression Models (TBATS, STLM)&#34;,&#34;Parametric survival regression&#34;,&#34;Parametric survival regression&#34;,&#34;Linear support vector machines&#34;,&#34;Polynomial support vector machines&#34;,&#34;Radial basis function support vector machines&#34;,&#34;Temporal Hierarchical Forecasting (THIEF) Models&#34;,&#34;Window Forecast Models&#34;],[&#34;&lt;a href=&#39;https://business-science.github.io/modeltime/reference/adam_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;adam_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://business-science.github.io/modeltime/reference/arima_boost.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;arima_boost&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://business-science.github.io/modeltime/reference/arima_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;arima_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/bag_mars.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;bag_mars&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/bag_tree.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;bag_tree&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/bart.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;bart&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/boost_tree.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;boost_tree&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/C5_rules.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;C5_rules&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/cubist_rules.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;cubist_rules&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/decision_tree.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;decision_tree&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/discrim_flexible.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;discrim_flexible&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/discrim_linear.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;discrim_linear&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/discrim_quad.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;discrim_quad&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/discrim_regularized.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;discrim_regularized&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://business-science.github.io/modeltime/reference/exp_smoothing.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;exp_smoothing&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/gen_additive_mod.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;gen_additive_mod&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/linear_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;linear_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/logistic_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;logistic_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/mars.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mars&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/mlp.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;mlp&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/multinom_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;multinom_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/naive_Bayes.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;naive_Bayes&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://business-science.github.io/modeltime/reference/naive_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;naive_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/nearest_neighbor.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;nearest_neighbor&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://business-science.github.io/modeltime/reference/nnetar_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;nnetar_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/null_model.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;null_model&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/pls.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;pls&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/poisson_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;poisson_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://business-science.github.io/modeltime/reference/prophet_boost.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;prophet_boost&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://business-science.github.io/modeltime/reference/prophet_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;prophet_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/proportional_hazards.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;proportional_hazards&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/rand_forest.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rand_forest&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/rule_fit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;rule_fit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://business-science.github.io/modeltime/reference/seasonal_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;seasonal_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/surv_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;surv_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/survival_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;survival_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/svm_linear.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;svm_linear&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/svm_poly.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;svm_poly&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://parsnip.tidymodels.org/reference/svm_rbf.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;svm_rbf&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://business-science.github.io/modeltime/reference/temporal_hierarchy.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;temporal_hierarchy&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://business-science.github.io/modeltime/reference/window_reg.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;window_reg&lt;\/tt&gt;&lt;\/a&gt;&#34;],[&#34;modeltime&#34;,&#34;modeltime&#34;,&#34;modeltime&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;modeltime&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;modeltime&#34;,&#34;parsnip&#34;,&#34;modeltime&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;modeltime&#34;,&#34;modeltime&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;modeltime&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;parsnip&#34;,&#34;modeltime&#34;,&#34;modeltime&#34;],[&#34;regression&#34;,&#34;regression&#34;,&#34;regression&#34;,&#34;classification, regression&#34;,&#34;classification, regression&#34;,&#34;classification, regression&#34;,&#34;classification, regression&#34;,&#34;classification&#34;,&#34;regression&#34;,&#34;classification, regression&#34;,&#34;classification&#34;,&#34;classification&#34;,&#34;classification&#34;,&#34;classification&#34;,&#34;regression&#34;,&#34;classification, regression&#34;,&#34;regression&#34;,&#34;classification&#34;,&#34;classification, regression&#34;,&#34;classification, regression&#34;,&#34;classification&#34;,&#34;classification&#34;,&#34;regression&#34;,&#34;classification, regression&#34;,&#34;regression&#34;,&#34;classification, regression&#34;,&#34;classification, regression&#34;,&#34;regression&#34;,&#34;regression&#34;,&#34;regression&#34;,null,&#34;classification, regression&#34;,&#34;classification, regression&#34;,&#34;regression&#34;,&#34;regression&#34;,null,&#34;classification, regression&#34;,&#34;classification, regression&#34;,&#34;classification, regression&#34;,&#34;regression&#34;,&#34;regression&#34;],[&#34;&lt;tt&gt;adam&lt;\/tt&gt;, &lt;tt&gt;auto_adam&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;arima_xgboost&lt;\/tt&gt;, &lt;tt&gt;auto_arima_xgboost&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;arima&lt;\/tt&gt;, &lt;tt&gt;auto_arima&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;earth&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;C5.0&lt;\/tt&gt;, &lt;tt&gt;rpart&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;dbarts&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;C5.0&lt;\/tt&gt;, &lt;tt&gt;spark&lt;\/tt&gt;, &lt;tt&gt;xgboost&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;C5.0&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;Cubist&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;C5.0&lt;\/tt&gt;, &lt;tt&gt;rpart&lt;\/tt&gt;, &lt;tt&gt;spark&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;earth&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;MASS&lt;\/tt&gt;, &lt;tt&gt;mda&lt;\/tt&gt;, &lt;tt&gt;sda&lt;\/tt&gt;, &lt;tt&gt;sparsediscrim&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;MASS&lt;\/tt&gt;, &lt;tt&gt;sparsediscrim&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;klaR&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;croston&lt;\/tt&gt;, &lt;tt&gt;ets&lt;\/tt&gt;, &lt;tt&gt;smooth_es&lt;\/tt&gt;, &lt;tt&gt;theta&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;mgcv&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;brulee&lt;\/tt&gt;, &lt;tt&gt;glm&lt;\/tt&gt;, &lt;tt&gt;glmnet&lt;\/tt&gt;, &lt;tt&gt;keras&lt;\/tt&gt;, &lt;tt&gt;lm&lt;\/tt&gt;, &lt;tt&gt;spark&lt;\/tt&gt;, &lt;tt&gt;stan&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;brulee&lt;\/tt&gt;, &lt;tt&gt;glm&lt;\/tt&gt;, &lt;tt&gt;glmnet&lt;\/tt&gt;, &lt;tt&gt;keras&lt;\/tt&gt;, &lt;tt&gt;LiblineaR&lt;\/tt&gt;, &lt;tt&gt;spark&lt;\/tt&gt;, &lt;tt&gt;stan&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;earth&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;brulee&lt;\/tt&gt;, &lt;tt&gt;keras&lt;\/tt&gt;, &lt;tt&gt;nnet&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;brulee&lt;\/tt&gt;, &lt;tt&gt;glmnet&lt;\/tt&gt;, &lt;tt&gt;keras&lt;\/tt&gt;, &lt;tt&gt;nnet&lt;\/tt&gt;, &lt;tt&gt;spark&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;klaR&lt;\/tt&gt;, &lt;tt&gt;naivebayes&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;naive&lt;\/tt&gt;, &lt;tt&gt;snaive&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;kknn&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;nnetar&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;parsnip&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;mixOmics&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;glm&lt;\/tt&gt;, &lt;tt&gt;glmnet&lt;\/tt&gt;, &lt;tt&gt;hurdle&lt;\/tt&gt;, &lt;tt&gt;stan&lt;\/tt&gt;, &lt;tt&gt;zeroinfl&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;prophet_xgboost&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;prophet&lt;\/tt&gt;&#34;,null,&#34;&lt;tt&gt;randomForest&lt;\/tt&gt;, &lt;tt&gt;ranger&lt;\/tt&gt;, &lt;tt&gt;spark&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;xrf&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;stlm_arima&lt;\/tt&gt;, &lt;tt&gt;stlm_ets&lt;\/tt&gt;, &lt;tt&gt;tbats&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;flexsurv&lt;\/tt&gt;, &lt;tt&gt;survival&lt;\/tt&gt;&#34;,null,&#34;&lt;tt&gt;kernlab&lt;\/tt&gt;, &lt;tt&gt;LiblineaR&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;kernlab&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;kernlab&lt;\/tt&gt;, &lt;tt&gt;liquidSVM&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;thief&lt;\/tt&gt;&#34;,&#34;&lt;tt&gt;window_function&lt;\/tt&gt;&#34;]],&#34;container&#34;:&#34;&lt;table class=\&#34;cell-border stripe\&#34;&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;title&lt;\/th&gt;\n      &lt;th&gt;model type&lt;\/th&gt;\n      &lt;th&gt;package&lt;\/th&gt;\n      &lt;th&gt;mode&lt;\/th&gt;\n      &lt;th&gt;engine&lt;\/th&gt;\n    &lt;\/tr&gt;\n  &lt;\/thead&gt;\n&lt;\/table&gt;&#34;,&#34;options&#34;:{&#34;pageLength&#34;:5,&#34;columnDefs&#34;:[],&#34;order&#34;:[],&#34;autoWidth&#34;:false,&#34;orderClasses&#34;:false,&#34;orderCellsTop&#34;:true,&#34;lengthMenu&#34;:[5,10,25,50,100]}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Models can be added by the user too. The article &lt;a href=&#34;https://www.tidymodels.org/learn/develop/models/&#34;&gt;How to build a parsnip model&lt;/a&gt; walks you through the steps.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;model-args&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Explore model arguments&lt;/h2&gt;
&lt;p&gt;The parsnip package provides consistent interface for working with similar models across different engines. This means that parsnip adopts standardized parameter names as arguments, and those names may be different from those used by the individual engines. The searchable table below provides a mapping between the parsnip and the engine arguments:&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div id=&#34;htmlwidget-2&#34; style=&#34;width:100%;height:auto;&#34; class=&#34;datatables html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;filter&#34;:&#34;top&#34;,&#34;vertical&#34;:false,&#34;filterHTML&#34;:&#34;&lt;tr&gt;\n  &lt;td data-type=\&#34;character\&#34; style=\&#34;vertical-align: top;\&#34;&gt;\n    &lt;div class=\&#34;form-group has-feedback\&#34; style=\&#34;margin-bottom: auto;\&#34;&gt;\n      &lt;input type=\&#34;search\&#34; placeholder=\&#34;All\&#34; class=\&#34;form-control\&#34; style=\&#34;width: 100%;\&#34;/&gt;\n      &lt;span class=\&#34;glyphicon glyphicon-remove-circle form-control-feedback\&#34;&gt;&lt;\/span&gt;\n    &lt;\/div&gt;\n  &lt;\/td&gt;\n  &lt;td data-type=\&#34;character\&#34; style=\&#34;vertical-align: top;\&#34;&gt;\n    &lt;div class=\&#34;form-group has-feedback\&#34; style=\&#34;margin-bottom: auto;\&#34;&gt;\n      &lt;input type=\&#34;search\&#34; placeholder=\&#34;All\&#34; class=\&#34;form-control\&#34; style=\&#34;width: 100%;\&#34;/&gt;\n      &lt;span class=\&#34;glyphicon glyphicon-remove-circle form-control-feedback\&#34;&gt;&lt;\/span&gt;\n    &lt;\/div&gt;\n  &lt;\/td&gt;\n  &lt;td data-type=\&#34;character\&#34; style=\&#34;vertical-align: top;\&#34;&gt;\n    &lt;div class=\&#34;form-group has-feedback\&#34; style=\&#34;margin-bottom: auto;\&#34;&gt;\n      &lt;input type=\&#34;search\&#34; placeholder=\&#34;All\&#34; class=\&#34;form-control\&#34; style=\&#34;width: 100%;\&#34;/&gt;\n      &lt;span class=\&#34;glyphicon glyphicon-remove-circle form-control-feedback\&#34;&gt;&lt;\/span&gt;\n    &lt;\/div&gt;\n  &lt;\/td&gt;\n  &lt;td data-type=\&#34;character\&#34; style=\&#34;vertical-align: top;\&#34;&gt;\n    &lt;div class=\&#34;form-group has-feedback\&#34; style=\&#34;margin-bottom: auto;\&#34;&gt;\n      &lt;input type=\&#34;search\&#34; placeholder=\&#34;All\&#34; class=\&#34;form-control\&#34; style=\&#34;width: 100%;\&#34;/&gt;\n      &lt;span class=\&#34;glyphicon glyphicon-remove-circle form-control-feedback\&#34;&gt;&lt;\/span&gt;\n    &lt;\/div&gt;\n  &lt;\/td&gt;\n&lt;\/tr&gt;&#34;,&#34;data&#34;:[[&#34;adam_reg&#34;,&#34;adam_reg&#34;,&#34;adam_reg&#34;,&#34;adam_reg&#34;,&#34;adam_reg&#34;,&#34;adam_reg&#34;,&#34;adam_reg&#34;,&#34;adam_reg&#34;,&#34;adam_reg&#34;,&#34;adam_reg&#34;,&#34;adam_reg&#34;,&#34;adam_reg&#34;,&#34;adam_reg&#34;,&#34;adam_reg&#34;,&#34;adam_reg&#34;,&#34;adam_reg&#34;,&#34;adam_reg&#34;,&#34;adam_reg&#34;,&#34;adam_reg&#34;,&#34;adam_reg&#34;,&#34;adam_reg&#34;,&#34;adam_reg&#34;,&#34;adam_reg&#34;,&#34;adam_reg&#34;,&#34;adam_reg&#34;,&#34;adam_reg&#34;,&#34;adam_reg&#34;,&#34;adam_reg&#34;,&#34;adam_reg&#34;,&#34;adam_reg&#34;,&#34;adam_reg&#34;,&#34;adam_reg&#34;,&#34;adam_reg&#34;,&#34;adam_reg&#34;,&#34;arima_boost&#34;,&#34;arima_boost&#34;,&#34;arima_boost&#34;,&#34;arima_boost&#34;,&#34;arima_boost&#34;,&#34;arima_boost&#34;,&#34;arima_boost&#34;,&#34;arima_boost&#34;,&#34;arima_boost&#34;,&#34;arima_boost&#34;,&#34;arima_boost&#34;,&#34;arima_boost&#34;,&#34;arima_boost&#34;,&#34;arima_boost&#34;,&#34;arima_boost&#34;,&#34;arima_boost&#34;,&#34;arima_boost&#34;,&#34;arima_boost&#34;,&#34;arima_boost&#34;,&#34;arima_boost&#34;,&#34;arima_boost&#34;,&#34;arima_boost&#34;,&#34;arima_boost&#34;,&#34;arima_boost&#34;,&#34;arima_boost&#34;,&#34;arima_boost&#34;,&#34;arima_boost&#34;,&#34;arima_boost&#34;,&#34;arima_boost&#34;,&#34;arima_boost&#34;,&#34;arima_reg&#34;,&#34;arima_reg&#34;,&#34;arima_reg&#34;,&#34;arima_reg&#34;,&#34;arima_reg&#34;,&#34;arima_reg&#34;,&#34;arima_reg&#34;,&#34;arima_reg&#34;,&#34;arima_reg&#34;,&#34;arima_reg&#34;,&#34;arima_reg&#34;,&#34;arima_reg&#34;,&#34;arima_reg&#34;,&#34;arima_reg&#34;,&#34;bag_mars&#34;,&#34;bag_mars&#34;,&#34;bag_mars&#34;,&#34;bag_tree&#34;,&#34;bag_tree&#34;,&#34;bag_tree&#34;,&#34;bag_tree&#34;,&#34;bag_tree&#34;,&#34;bag_tree&#34;,&#34;bart&#34;,&#34;bart&#34;,&#34;bart&#34;,&#34;bart&#34;,&#34;boost_tree&#34;,&#34;boost_tree&#34;,&#34;boost_tree&#34;,&#34;boost_tree&#34;,&#34;boost_tree&#34;,&#34;boost_tree&#34;,&#34;boost_tree&#34;,&#34;boost_tree&#34;,&#34;boost_tree&#34;,&#34;boost_tree&#34;,&#34;boost_tree&#34;,&#34;boost_tree&#34;,&#34;boost_tree&#34;,&#34;boost_tree&#34;,&#34;boost_tree&#34;,&#34;boost_tree&#34;,&#34;boost_tree&#34;,&#34;boost_tree&#34;,&#34;C5_rules&#34;,&#34;C5_rules&#34;,&#34;cubist_rules&#34;,&#34;cubist_rules&#34;,&#34;cubist_rules&#34;,&#34;decision_tree&#34;,&#34;decision_tree&#34;,&#34;decision_tree&#34;,&#34;decision_tree&#34;,&#34;decision_tree&#34;,&#34;decision_tree&#34;,&#34;discrim_flexible&#34;,&#34;discrim_flexible&#34;,&#34;discrim_flexible&#34;,&#34;discrim_linear&#34;,&#34;discrim_linear&#34;,&#34;discrim_quad&#34;,&#34;discrim_regularized&#34;,&#34;discrim_regularized&#34;,&#34;exp_smoothing&#34;,&#34;exp_smoothing&#34;,&#34;exp_smoothing&#34;,&#34;exp_smoothing&#34;,&#34;exp_smoothing&#34;,&#34;exp_smoothing&#34;,&#34;exp_smoothing&#34;,&#34;exp_smoothing&#34;,&#34;exp_smoothing&#34;,&#34;exp_smoothing&#34;,&#34;exp_smoothing&#34;,&#34;exp_smoothing&#34;,&#34;exp_smoothing&#34;,&#34;exp_smoothing&#34;,&#34;exp_smoothing&#34;,&#34;exp_smoothing&#34;,&#34;exp_smoothing&#34;,&#34;gen_additive_mod&#34;,&#34;gen_additive_mod&#34;,&#34;linear_reg&#34;,&#34;linear_reg&#34;,&#34;linear_reg&#34;,&#34;linear_reg&#34;,&#34;linear_reg&#34;,&#34;linear_reg&#34;,&#34;linear_reg&#34;,&#34;linear_reg&#34;,&#34;linear_reg&#34;,&#34;linear_reg&#34;,&#34;linear_reg&#34;,&#34;logistic_reg&#34;,&#34;logistic_reg&#34;,&#34;logistic_reg&#34;,&#34;logistic_reg&#34;,&#34;logistic_reg&#34;,&#34;logistic_reg&#34;,&#34;logistic_reg&#34;,&#34;logistic_reg&#34;,&#34;logistic_reg&#34;,&#34;logistic_reg&#34;,&#34;logistic_reg&#34;,&#34;logistic_reg&#34;,&#34;logistic_reg&#34;,&#34;mars&#34;,&#34;mars&#34;,&#34;mars&#34;,&#34;mlp&#34;,&#34;mlp&#34;,&#34;mlp&#34;,&#34;mlp&#34;,&#34;mlp&#34;,&#34;mlp&#34;,&#34;mlp&#34;,&#34;mlp&#34;,&#34;mlp&#34;,&#34;mlp&#34;,&#34;mlp&#34;,&#34;mlp&#34;,&#34;mlp&#34;,&#34;mlp&#34;,&#34;mlp&#34;,&#34;mlp&#34;,&#34;mlp&#34;,&#34;multinom_reg&#34;,&#34;multinom_reg&#34;,&#34;multinom_reg&#34;,&#34;multinom_reg&#34;,&#34;multinom_reg&#34;,&#34;multinom_reg&#34;,&#34;multinom_reg&#34;,&#34;multinom_reg&#34;,&#34;multinom_reg&#34;,&#34;multinom_reg&#34;,&#34;multinom_reg&#34;,&#34;multinom_reg&#34;,&#34;naive_Bayes&#34;,&#34;naive_Bayes&#34;,&#34;naive_Bayes&#34;,&#34;naive_Bayes&#34;,&#34;naive_reg&#34;,&#34;naive_reg&#34;,&#34;naive_reg&#34;,&#34;naive_reg&#34;,&#34;nearest_neighbor&#34;,&#34;nearest_neighbor&#34;,&#34;nearest_neighbor&#34;,&#34;nnetar_reg&#34;,&#34;nnetar_reg&#34;,&#34;nnetar_reg&#34;,&#34;nnetar_reg&#34;,&#34;nnetar_reg&#34;,&#34;nnetar_reg&#34;,&#34;nnetar_reg&#34;,&#34;pls&#34;,&#34;pls&#34;,&#34;poisson_reg&#34;,&#34;poisson_reg&#34;,&#34;prophet_boost&#34;,&#34;prophet_boost&#34;,&#34;prophet_boost&#34;,&#34;prophet_boost&#34;,&#34;prophet_boost&#34;,&#34;prophet_boost&#34;,&#34;prophet_boost&#34;,&#34;prophet_boost&#34;,&#34;prophet_boost&#34;,&#34;prophet_boost&#34;,&#34;prophet_boost&#34;,&#34;prophet_boost&#34;,&#34;prophet_boost&#34;,&#34;prophet_boost&#34;,&#34;prophet_boost&#34;,&#34;prophet_boost&#34;,&#34;prophet_boost&#34;,&#34;prophet_boost&#34;,&#34;prophet_boost&#34;,&#34;prophet_boost&#34;,&#34;prophet_reg&#34;,&#34;prophet_reg&#34;,&#34;prophet_reg&#34;,&#34;prophet_reg&#34;,&#34;prophet_reg&#34;,&#34;prophet_reg&#34;,&#34;prophet_reg&#34;,&#34;prophet_reg&#34;,&#34;prophet_reg&#34;,&#34;prophet_reg&#34;,&#34;prophet_reg&#34;,&#34;prophet_reg&#34;,&#34;rand_forest&#34;,&#34;rand_forest&#34;,&#34;rand_forest&#34;,&#34;rand_forest&#34;,&#34;rand_forest&#34;,&#34;rand_forest&#34;,&#34;rand_forest&#34;,&#34;rand_forest&#34;,&#34;rand_forest&#34;,&#34;rule_fit&#34;,&#34;rule_fit&#34;,&#34;rule_fit&#34;,&#34;rule_fit&#34;,&#34;rule_fit&#34;,&#34;rule_fit&#34;,&#34;rule_fit&#34;,&#34;rule_fit&#34;,&#34;seasonal_reg&#34;,&#34;seasonal_reg&#34;,&#34;seasonal_reg&#34;,&#34;seasonal_reg&#34;,&#34;seasonal_reg&#34;,&#34;seasonal_reg&#34;,&#34;seasonal_reg&#34;,&#34;seasonal_reg&#34;,&#34;seasonal_reg&#34;,&#34;surv_reg&#34;,&#34;surv_reg&#34;,&#34;svm_linear&#34;,&#34;svm_linear&#34;,&#34;svm_linear&#34;,&#34;svm_linear&#34;,&#34;svm_poly&#34;,&#34;svm_poly&#34;,&#34;svm_poly&#34;,&#34;svm_poly&#34;,&#34;svm_rbf&#34;,&#34;svm_rbf&#34;,&#34;svm_rbf&#34;,&#34;svm_rbf&#34;,&#34;svm_rbf&#34;,&#34;temporal_hierarchy&#34;,&#34;temporal_hierarchy&#34;,&#34;temporal_hierarchy&#34;,&#34;window_reg&#34;,&#34;window_reg&#34;],[&#34;adam&#34;,&#34;adam&#34;,&#34;adam&#34;,&#34;adam&#34;,&#34;adam&#34;,&#34;adam&#34;,&#34;adam&#34;,&#34;adam&#34;,&#34;adam&#34;,&#34;adam&#34;,&#34;adam&#34;,&#34;adam&#34;,&#34;adam&#34;,&#34;adam&#34;,&#34;adam&#34;,&#34;adam&#34;,&#34;adam&#34;,&#34;auto_adam&#34;,&#34;auto_adam&#34;,&#34;auto_adam&#34;,&#34;auto_adam&#34;,&#34;auto_adam&#34;,&#34;auto_adam&#34;,&#34;auto_adam&#34;,&#34;auto_adam&#34;,&#34;auto_adam&#34;,&#34;auto_adam&#34;,&#34;auto_adam&#34;,&#34;auto_adam&#34;,&#34;auto_adam&#34;,&#34;auto_adam&#34;,&#34;auto_adam&#34;,&#34;auto_adam&#34;,&#34;auto_adam&#34;,&#34;auto_arima_xgboost&#34;,&#34;auto_arima_xgboost&#34;,&#34;auto_arima_xgboost&#34;,&#34;auto_arima_xgboost&#34;,&#34;auto_arima_xgboost&#34;,&#34;auto_arima_xgboost&#34;,&#34;auto_arima_xgboost&#34;,&#34;auto_arima_xgboost&#34;,&#34;auto_arima_xgboost&#34;,&#34;auto_arima_xgboost&#34;,&#34;auto_arima_xgboost&#34;,&#34;auto_arima_xgboost&#34;,&#34;auto_arima_xgboost&#34;,&#34;auto_arima_xgboost&#34;,&#34;auto_arima_xgboost&#34;,&#34;arima_xgboost&#34;,&#34;arima_xgboost&#34;,&#34;arima_xgboost&#34;,&#34;arima_xgboost&#34;,&#34;arima_xgboost&#34;,&#34;arima_xgboost&#34;,&#34;arima_xgboost&#34;,&#34;arima_xgboost&#34;,&#34;arima_xgboost&#34;,&#34;arima_xgboost&#34;,&#34;arima_xgboost&#34;,&#34;arima_xgboost&#34;,&#34;arima_xgboost&#34;,&#34;arima_xgboost&#34;,&#34;arima_xgboost&#34;,&#34;arima&#34;,&#34;arima&#34;,&#34;arima&#34;,&#34;arima&#34;,&#34;arima&#34;,&#34;arima&#34;,&#34;arima&#34;,&#34;auto_arima&#34;,&#34;auto_arima&#34;,&#34;auto_arima&#34;,&#34;auto_arima&#34;,&#34;auto_arima&#34;,&#34;auto_arima&#34;,&#34;auto_arima&#34;,&#34;earth&#34;,&#34;earth&#34;,&#34;earth&#34;,&#34;rpart&#34;,&#34;rpart&#34;,&#34;rpart&#34;,&#34;rpart&#34;,&#34;C5.0&#34;,&#34;C5.0&#34;,&#34;dbarts&#34;,&#34;dbarts&#34;,&#34;dbarts&#34;,&#34;dbarts&#34;,&#34;xgboost&#34;,&#34;xgboost&#34;,&#34;xgboost&#34;,&#34;xgboost&#34;,&#34;xgboost&#34;,&#34;xgboost&#34;,&#34;xgboost&#34;,&#34;xgboost&#34;,&#34;C5.0&#34;,&#34;C5.0&#34;,&#34;C5.0&#34;,&#34;spark&#34;,&#34;spark&#34;,&#34;spark&#34;,&#34;spark&#34;,&#34;spark&#34;,&#34;spark&#34;,&#34;spark&#34;,&#34;C5.0&#34;,&#34;C5.0&#34;,&#34;Cubist&#34;,&#34;Cubist&#34;,&#34;Cubist&#34;,&#34;rpart&#34;,&#34;rpart&#34;,&#34;rpart&#34;,&#34;C5.0&#34;,&#34;spark&#34;,&#34;spark&#34;,&#34;earth&#34;,&#34;earth&#34;,&#34;earth&#34;,&#34;mda&#34;,&#34;sparsediscrim&#34;,&#34;sparsediscrim&#34;,&#34;klaR&#34;,&#34;klaR&#34;,&#34;ets&#34;,&#34;ets&#34;,&#34;ets&#34;,&#34;ets&#34;,&#34;ets&#34;,&#34;ets&#34;,&#34;ets&#34;,&#34;ets&#34;,&#34;croston&#34;,&#34;smooth_es&#34;,&#34;smooth_es&#34;,&#34;smooth_es&#34;,&#34;smooth_es&#34;,&#34;smooth_es&#34;,&#34;smooth_es&#34;,&#34;smooth_es&#34;,&#34;smooth_es&#34;,&#34;mgcv&#34;,&#34;mgcv&#34;,&#34;glmnet&#34;,&#34;glmnet&#34;,&#34;spark&#34;,&#34;spark&#34;,&#34;keras&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;glmnet&#34;,&#34;glmnet&#34;,&#34;LiblineaR&#34;,&#34;LiblineaR&#34;,&#34;spark&#34;,&#34;spark&#34;,&#34;keras&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;earth&#34;,&#34;earth&#34;,&#34;earth&#34;,&#34;keras&#34;,&#34;keras&#34;,&#34;keras&#34;,&#34;keras&#34;,&#34;keras&#34;,&#34;nnet&#34;,&#34;nnet&#34;,&#34;nnet&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;glmnet&#34;,&#34;glmnet&#34;,&#34;spark&#34;,&#34;spark&#34;,&#34;keras&#34;,&#34;nnet&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;brulee&#34;,&#34;klaR&#34;,&#34;klaR&#34;,&#34;naivebayes&#34;,&#34;naivebayes&#34;,&#34;naive&#34;,&#34;naive&#34;,&#34;snaive&#34;,&#34;snaive&#34;,&#34;kknn&#34;,&#34;kknn&#34;,&#34;kknn&#34;,&#34;nnetar&#34;,&#34;nnetar&#34;,&#34;nnetar&#34;,&#34;nnetar&#34;,&#34;nnetar&#34;,&#34;nnetar&#34;,&#34;nnetar&#34;,&#34;mixOmics&#34;,&#34;mixOmics&#34;,&#34;glmnet&#34;,&#34;glmnet&#34;,&#34;prophet_xgboost&#34;,&#34;prophet_xgboost&#34;,&#34;prophet_xgboost&#34;,&#34;prophet_xgboost&#34;,&#34;prophet_xgboost&#34;,&#34;prophet_xgboost&#34;,&#34;prophet_xgboost&#34;,&#34;prophet_xgboost&#34;,&#34;prophet_xgboost&#34;,&#34;prophet_xgboost&#34;,&#34;prophet_xgboost&#34;,&#34;prophet_xgboost&#34;,&#34;prophet_xgboost&#34;,&#34;prophet_xgboost&#34;,&#34;prophet_xgboost&#34;,&#34;prophet_xgboost&#34;,&#34;prophet_xgboost&#34;,&#34;prophet_xgboost&#34;,&#34;prophet_xgboost&#34;,&#34;prophet_xgboost&#34;,&#34;prophet&#34;,&#34;prophet&#34;,&#34;prophet&#34;,&#34;prophet&#34;,&#34;prophet&#34;,&#34;prophet&#34;,&#34;prophet&#34;,&#34;prophet&#34;,&#34;prophet&#34;,&#34;prophet&#34;,&#34;prophet&#34;,&#34;prophet&#34;,&#34;ranger&#34;,&#34;ranger&#34;,&#34;ranger&#34;,&#34;randomForest&#34;,&#34;randomForest&#34;,&#34;randomForest&#34;,&#34;spark&#34;,&#34;spark&#34;,&#34;spark&#34;,&#34;xrf&#34;,&#34;xrf&#34;,&#34;xrf&#34;,&#34;xrf&#34;,&#34;xrf&#34;,&#34;xrf&#34;,&#34;xrf&#34;,&#34;xrf&#34;,&#34;tbats&#34;,&#34;tbats&#34;,&#34;tbats&#34;,&#34;stlm_ets&#34;,&#34;stlm_ets&#34;,&#34;stlm_ets&#34;,&#34;stlm_arima&#34;,&#34;stlm_arima&#34;,&#34;stlm_arima&#34;,&#34;flexsurv&#34;,&#34;survival&#34;,&#34;LiblineaR&#34;,&#34;LiblineaR&#34;,&#34;kernlab&#34;,&#34;kernlab&#34;,&#34;kernlab&#34;,&#34;kernlab&#34;,&#34;kernlab&#34;,&#34;kernlab&#34;,&#34;kernlab&#34;,&#34;kernlab&#34;,&#34;kernlab&#34;,&#34;liquidSVM&#34;,&#34;liquidSVM&#34;,&#34;thief&#34;,&#34;thief&#34;,&#34;thief&#34;,&#34;window_function&#34;,&#34;window_function&#34;],[&#34;ets_model&#34;,&#34;non_seasonal_ar&#34;,&#34;non_seasonal_differences&#34;,&#34;non_seasonal_ma&#34;,&#34;seasonal_ar&#34;,&#34;seasonal_differences&#34;,&#34;seasonal_ma&#34;,&#34;use_constant&#34;,&#34;regressors_treatment&#34;,&#34;outliers_treatment&#34;,&#34;outliers_ci&#34;,&#34;probability_model&#34;,&#34;distribution&#34;,&#34;loss&#34;,&#34;information_criteria&#34;,&#34;seasonal_period&#34;,&#34;select_order&#34;,&#34;ets_model&#34;,&#34;non_seasonal_ar&#34;,&#34;non_seasonal_differences&#34;,&#34;non_seasonal_ma&#34;,&#34;seasonal_ar&#34;,&#34;seasonal_differences&#34;,&#34;seasonal_ma&#34;,&#34;use_constant&#34;,&#34;regressors_treatment&#34;,&#34;outliers_treatment&#34;,&#34;outliers_ci&#34;,&#34;probability_model&#34;,&#34;distribution&#34;,&#34;loss&#34;,&#34;information_criteria&#34;,&#34;seasonal_period&#34;,&#34;select_order&#34;,&#34;seasonal_period&#34;,&#34;non_seasonal_ar&#34;,&#34;non_seasonal_differences&#34;,&#34;non_seasonal_ma&#34;,&#34;seasonal_ar&#34;,&#34;seasonal_differences&#34;,&#34;seasonal_ma&#34;,&#34;tree_depth&#34;,&#34;trees&#34;,&#34;learn_rate&#34;,&#34;mtry&#34;,&#34;min_n&#34;,&#34;loss_reduction&#34;,&#34;sample_size&#34;,&#34;stop_iter&#34;,&#34;seasonal_period&#34;,&#34;non_seasonal_ar&#34;,&#34;non_seasonal_differences&#34;,&#34;non_seasonal_ma&#34;,&#34;seasonal_ar&#34;,&#34;seasonal_differences&#34;,&#34;seasonal_ma&#34;,&#34;tree_depth&#34;,&#34;trees&#34;,&#34;learn_rate&#34;,&#34;mtry&#34;,&#34;min_n&#34;,&#34;loss_reduction&#34;,&#34;sample_size&#34;,&#34;stop_iter&#34;,&#34;seasonal_period&#34;,&#34;non_seasonal_ar&#34;,&#34;non_seasonal_differences&#34;,&#34;non_seasonal_ma&#34;,&#34;seasonal_ar&#34;,&#34;seasonal_differences&#34;,&#34;seasonal_ma&#34;,&#34;seasonal_period&#34;,&#34;non_seasonal_ar&#34;,&#34;non_seasonal_differences&#34;,&#34;non_seasonal_ma&#34;,&#34;seasonal_ar&#34;,&#34;seasonal_differences&#34;,&#34;seasonal_ma&#34;,&#34;prod_degree&#34;,&#34;prune_method&#34;,&#34;num_terms&#34;,&#34;class_cost&#34;,&#34;tree_depth&#34;,&#34;min_n&#34;,&#34;cost_complexity&#34;,&#34;class_cost&#34;,&#34;min_n&#34;,&#34;trees&#34;,&#34;prior_terminal_node_coef&#34;,&#34;prior_terminal_node_expo&#34;,&#34;prior_outcome_range&#34;,&#34;tree_depth&#34;,&#34;trees&#34;,&#34;learn_rate&#34;,&#34;mtry&#34;,&#34;min_n&#34;,&#34;loss_reduction&#34;,&#34;sample_size&#34;,&#34;stop_iter&#34;,&#34;trees&#34;,&#34;min_n&#34;,&#34;sample_size&#34;,&#34;tree_depth&#34;,&#34;trees&#34;,&#34;learn_rate&#34;,&#34;mtry&#34;,&#34;min_n&#34;,&#34;loss_reduction&#34;,&#34;sample_size&#34;,&#34;trees&#34;,&#34;min_n&#34;,&#34;committees&#34;,&#34;neighbors&#34;,&#34;max_rules&#34;,&#34;tree_depth&#34;,&#34;min_n&#34;,&#34;cost_complexity&#34;,&#34;min_n&#34;,&#34;tree_depth&#34;,&#34;min_n&#34;,&#34;num_terms&#34;,&#34;prod_degree&#34;,&#34;prune_method&#34;,&#34;penalty&#34;,&#34;regularization_method&#34;,&#34;regularization_method&#34;,&#34;frac_common_cov&#34;,&#34;frac_identity&#34;,&#34;seasonal_period&#34;,&#34;error&#34;,&#34;trend&#34;,&#34;season&#34;,&#34;damping&#34;,&#34;smooth_level&#34;,&#34;smooth_trend&#34;,&#34;smooth_seasonal&#34;,&#34;smooth_level&#34;,&#34;seasonal_period&#34;,&#34;error&#34;,&#34;trend&#34;,&#34;season&#34;,&#34;damping&#34;,&#34;smooth_level&#34;,&#34;smooth_trend&#34;,&#34;smooth_seasonal&#34;,&#34;select_features&#34;,&#34;adjust_deg_free&#34;,&#34;penalty&#34;,&#34;mixture&#34;,&#34;penalty&#34;,&#34;mixture&#34;,&#34;penalty&#34;,&#34;penalty&#34;,&#34;mixture&#34;,&#34;epochs&#34;,&#34;learn_rate&#34;,&#34;momentum&#34;,&#34;stop_iter&#34;,&#34;penalty&#34;,&#34;mixture&#34;,&#34;penalty&#34;,&#34;mixture&#34;,&#34;penalty&#34;,&#34;mixture&#34;,&#34;penalty&#34;,&#34;penalty&#34;,&#34;mixture&#34;,&#34;epochs&#34;,&#34;learn_rate&#34;,&#34;momentum&#34;,&#34;stop_iter&#34;,&#34;num_terms&#34;,&#34;prod_degree&#34;,&#34;prune_method&#34;,&#34;hidden_units&#34;,&#34;penalty&#34;,&#34;dropout&#34;,&#34;epochs&#34;,&#34;activation&#34;,&#34;hidden_units&#34;,&#34;penalty&#34;,&#34;epochs&#34;,&#34;hidden_units&#34;,&#34;penalty&#34;,&#34;mixture&#34;,&#34;epochs&#34;,&#34;dropout&#34;,&#34;learn_rate&#34;,&#34;momentum&#34;,&#34;stop_iter&#34;,&#34;activation&#34;,&#34;penalty&#34;,&#34;mixture&#34;,&#34;penalty&#34;,&#34;mixture&#34;,&#34;penalty&#34;,&#34;penalty&#34;,&#34;penalty&#34;,&#34;mixture&#34;,&#34;epochs&#34;,&#34;learn_rate&#34;,&#34;momentum&#34;,&#34;stop_iter&#34;,&#34;smoothness&#34;,&#34;Laplace&#34;,&#34;smoothness&#34;,&#34;Laplace&#34;,&#34;id&#34;,&#34;seasonal_period&#34;,&#34;id&#34;,&#34;seasonal_period&#34;,&#34;neighbors&#34;,&#34;weight_func&#34;,&#34;dist_power&#34;,&#34;seasonal_period&#34;,&#34;non_seasonal_ar&#34;,&#34;seasonal_ar&#34;,&#34;hidden_units&#34;,&#34;num_networks&#34;,&#34;epochs&#34;,&#34;penalty&#34;,&#34;predictor_prop&#34;,&#34;num_comp&#34;,&#34;penalty&#34;,&#34;mixture&#34;,&#34;growth&#34;,&#34;changepoint_num&#34;,&#34;changepoint_range&#34;,&#34;seasonality_yearly&#34;,&#34;seasonality_weekly&#34;,&#34;seasonality_daily&#34;,&#34;season&#34;,&#34;prior_scale_changepoints&#34;,&#34;prior_scale_seasonality&#34;,&#34;prior_scale_holidays&#34;,&#34;logistic_cap&#34;,&#34;logistic_floor&#34;,&#34;tree_depth&#34;,&#34;trees&#34;,&#34;learn_rate&#34;,&#34;mtry&#34;,&#34;min_n&#34;,&#34;loss_reduction&#34;,&#34;sample_size&#34;,&#34;stop_iter&#34;,&#34;growth&#34;,&#34;changepoint_num&#34;,&#34;changepoint_range&#34;,&#34;seasonality_yearly&#34;,&#34;seasonality_weekly&#34;,&#34;seasonality_daily&#34;,&#34;season&#34;,&#34;prior_scale_changepoints&#34;,&#34;prior_scale_seasonality&#34;,&#34;prior_scale_holidays&#34;,&#34;logistic_cap&#34;,&#34;logistic_floor&#34;,&#34;mtry&#34;,&#34;trees&#34;,&#34;min_n&#34;,&#34;mtry&#34;,&#34;trees&#34;,&#34;min_n&#34;,&#34;mtry&#34;,&#34;trees&#34;,&#34;min_n&#34;,&#34;tree_depth&#34;,&#34;trees&#34;,&#34;learn_rate&#34;,&#34;mtry&#34;,&#34;min_n&#34;,&#34;loss_reduction&#34;,&#34;sample_size&#34;,&#34;penalty&#34;,&#34;seasonal_period_1&#34;,&#34;seasonal_period_2&#34;,&#34;seasonal_period_3&#34;,&#34;seasonal_period_1&#34;,&#34;seasonal_period_2&#34;,&#34;seasonal_period_3&#34;,&#34;seasonal_period_1&#34;,&#34;seasonal_period_2&#34;,&#34;seasonal_period_3&#34;,&#34;dist&#34;,&#34;dist&#34;,&#34;cost&#34;,&#34;margin&#34;,&#34;cost&#34;,&#34;margin&#34;,&#34;cost&#34;,&#34;degree&#34;,&#34;scale_factor&#34;,&#34;margin&#34;,&#34;cost&#34;,&#34;rbf_sigma&#34;,&#34;margin&#34;,&#34;cost&#34;,&#34;rbf_sigma&#34;,&#34;seasonal_period&#34;,&#34;combination_method&#34;,&#34;use_model&#34;,&#34;id&#34;,&#34;window_size&#34;],[&#34;model&#34;,&#34;p&#34;,&#34;d&#34;,&#34;q&#34;,&#34;P&#34;,&#34;D&#34;,&#34;Q&#34;,&#34;constant&#34;,&#34;regressors&#34;,&#34;outliers&#34;,&#34;level&#34;,&#34;occurrence&#34;,&#34;distribution&#34;,&#34;loss&#34;,&#34;ic&#34;,&#34;period&#34;,&#34;select_order&#34;,&#34;model&#34;,&#34;p&#34;,&#34;d&#34;,&#34;q&#34;,&#34;P&#34;,&#34;D&#34;,&#34;Q&#34;,&#34;constant&#34;,&#34;regressors&#34;,&#34;outliers&#34;,&#34;level&#34;,&#34;occurrence&#34;,&#34;distribution&#34;,&#34;loss&#34;,&#34;ic&#34;,&#34;period&#34;,&#34;select_order&#34;,&#34;period&#34;,&#34;max.p&#34;,&#34;max.d&#34;,&#34;max.q&#34;,&#34;max.P&#34;,&#34;max.D&#34;,&#34;max.Q&#34;,&#34;max_depth&#34;,&#34;nrounds&#34;,&#34;eta&#34;,&#34;colsample_bynode&#34;,&#34;min_child_weight&#34;,&#34;gamma&#34;,&#34;subsample&#34;,&#34;early_stop&#34;,&#34;period&#34;,&#34;p&#34;,&#34;d&#34;,&#34;q&#34;,&#34;P&#34;,&#34;D&#34;,&#34;Q&#34;,&#34;max_depth&#34;,&#34;nrounds&#34;,&#34;eta&#34;,&#34;colsample_bynode&#34;,&#34;min_child_weight&#34;,&#34;gamma&#34;,&#34;subsample&#34;,&#34;early_stop&#34;,&#34;period&#34;,&#34;p&#34;,&#34;d&#34;,&#34;q&#34;,&#34;P&#34;,&#34;D&#34;,&#34;Q&#34;,&#34;period&#34;,&#34;max.p&#34;,&#34;max.d&#34;,&#34;max.q&#34;,&#34;max.P&#34;,&#34;max.D&#34;,&#34;max.Q&#34;,&#34;degree&#34;,&#34;pmethod&#34;,&#34;nprune&#34;,&#34;cost&#34;,&#34;maxdepth&#34;,&#34;minsplit&#34;,&#34;cp&#34;,&#34;cost&#34;,&#34;minCases&#34;,&#34;ntree&#34;,&#34;base&#34;,&#34;power&#34;,&#34;k&#34;,&#34;max_depth&#34;,&#34;nrounds&#34;,&#34;eta&#34;,&#34;colsample_bynode&#34;,&#34;min_child_weight&#34;,&#34;gamma&#34;,&#34;subsample&#34;,&#34;early_stop&#34;,&#34;trials&#34;,&#34;minCases&#34;,&#34;sample&#34;,&#34;max_depth&#34;,&#34;max_iter&#34;,&#34;step_size&#34;,&#34;feature_subset_strategy&#34;,&#34;min_instances_per_node&#34;,&#34;min_info_gain&#34;,&#34;subsampling_rate&#34;,&#34;trials&#34;,&#34;minCases&#34;,&#34;committees&#34;,&#34;neighbors&#34;,&#34;max_rules&#34;,&#34;maxdepth&#34;,&#34;minsplit&#34;,&#34;cp&#34;,&#34;minCases&#34;,&#34;max_depth&#34;,&#34;min_instances_per_node&#34;,&#34;nprune&#34;,&#34;degree&#34;,&#34;pmethod&#34;,&#34;lambda&#34;,&#34;method&#34;,&#34;method&#34;,&#34;lambda&#34;,&#34;gamma&#34;,&#34;period&#34;,&#34;error&#34;,&#34;trend&#34;,&#34;season&#34;,&#34;damping&#34;,&#34;alpha&#34;,&#34;beta&#34;,&#34;gamma&#34;,&#34;alpha&#34;,&#34;period&#34;,&#34;error&#34;,&#34;trend&#34;,&#34;season&#34;,&#34;damping&#34;,&#34;alpha&#34;,&#34;beta&#34;,&#34;gamma&#34;,&#34;select&#34;,&#34;gamma&#34;,&#34;lambda&#34;,&#34;alpha&#34;,&#34;reg_param&#34;,&#34;elastic_net_param&#34;,&#34;penalty&#34;,&#34;penalty&#34;,&#34;mixture&#34;,&#34;epochs&#34;,&#34;learn_rate&#34;,&#34;momentum&#34;,&#34;stop_iter&#34;,&#34;lambda&#34;,&#34;alpha&#34;,&#34;cost&#34;,&#34;type&#34;,&#34;reg_param&#34;,&#34;elastic_net_param&#34;,&#34;penalty&#34;,&#34;penalty&#34;,&#34;mixture&#34;,&#34;epochs&#34;,&#34;learn_rate&#34;,&#34;momentum&#34;,&#34;stop_iter&#34;,&#34;nprune&#34;,&#34;degree&#34;,&#34;pmethod&#34;,&#34;hidden_units&#34;,&#34;penalty&#34;,&#34;dropout&#34;,&#34;epochs&#34;,&#34;activation&#34;,&#34;size&#34;,&#34;decay&#34;,&#34;maxit&#34;,&#34;hidden_units&#34;,&#34;penalty&#34;,&#34;mixture&#34;,&#34;epochs&#34;,&#34;dropout&#34;,&#34;learn_rate&#34;,&#34;momentum&#34;,&#34;stop_iter&#34;,&#34;activation&#34;,&#34;lambda&#34;,&#34;alpha&#34;,&#34;reg_param&#34;,&#34;elastic_net_param&#34;,&#34;penalty&#34;,&#34;decay&#34;,&#34;penalty&#34;,&#34;mixture&#34;,&#34;epochs&#34;,&#34;learn_rate&#34;,&#34;momentum&#34;,&#34;stop_iter&#34;,&#34;adjust&#34;,&#34;fL&#34;,&#34;adjust&#34;,&#34;laplace&#34;,&#34;id&#34;,&#34;seasonal_period&#34;,&#34;id&#34;,&#34;seasonal_period&#34;,&#34;ks&#34;,&#34;kernel&#34;,&#34;distance&#34;,&#34;period&#34;,&#34;p&#34;,&#34;P&#34;,&#34;size&#34;,&#34;repeats&#34;,&#34;maxit&#34;,&#34;decay&#34;,&#34;predictor_prop&#34;,&#34;ncomp&#34;,&#34;lambda&#34;,&#34;alpha&#34;,&#34;growth&#34;,&#34;n.changepoints&#34;,&#34;changepoint.range&#34;,&#34;yearly.seasonality&#34;,&#34;weekly.seasonality&#34;,&#34;daily.seasonality&#34;,&#34;seasonality.mode&#34;,&#34;changepoint.prior.scale&#34;,&#34;seasonality.prior.scale&#34;,&#34;holidays.prior.scale&#34;,&#34;logistic_cap&#34;,&#34;logistic_floor&#34;,&#34;max_depth&#34;,&#34;nrounds&#34;,&#34;eta&#34;,&#34;colsample_bynode&#34;,&#34;min_child_weight&#34;,&#34;gamma&#34;,&#34;subsample&#34;,&#34;early_stop&#34;,&#34;growth&#34;,&#34;n.changepoints&#34;,&#34;changepoint.range&#34;,&#34;yearly.seasonality&#34;,&#34;weekly.seasonality&#34;,&#34;daily.seasonality&#34;,&#34;seasonality.mode&#34;,&#34;changepoint.prior.scale&#34;,&#34;seasonality.prior.scale&#34;,&#34;holidays.prior.scale&#34;,&#34;logistic_cap&#34;,&#34;logistic_floor&#34;,&#34;mtry&#34;,&#34;num.trees&#34;,&#34;min.node.size&#34;,&#34;mtry&#34;,&#34;ntree&#34;,&#34;nodesize&#34;,&#34;feature_subset_strategy&#34;,&#34;num_trees&#34;,&#34;min_instances_per_node&#34;,&#34;max_depth&#34;,&#34;nrounds&#34;,&#34;eta&#34;,&#34;colsample_bytree&#34;,&#34;min_child_weight&#34;,&#34;gamma&#34;,&#34;subsample&#34;,&#34;lambda&#34;,&#34;period_1&#34;,&#34;period_2&#34;,&#34;period_3&#34;,&#34;period_1&#34;,&#34;period_2&#34;,&#34;period_3&#34;,&#34;period_1&#34;,&#34;period_2&#34;,&#34;period_3&#34;,&#34;dist&#34;,&#34;dist&#34;,&#34;C&#34;,&#34;svr_eps&#34;,&#34;C&#34;,&#34;epsilon&#34;,&#34;C&#34;,&#34;degree&#34;,&#34;scale&#34;,&#34;epsilon&#34;,&#34;C&#34;,&#34;sigma&#34;,&#34;epsilon&#34;,&#34;lambdas&#34;,&#34;gammas&#34;,&#34;period&#34;,&#34;comb&#34;,&#34;usemodel&#34;,&#34;id&#34;,&#34;window_size&#34;]],&#34;container&#34;:&#34;&lt;table class=\&#34;cell-border stripe\&#34;&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;model type&lt;\/th&gt;\n      &lt;th&gt;engine&lt;\/th&gt;\n      &lt;th&gt;parsnip&lt;\/th&gt;\n      &lt;th&gt;original&lt;\/th&gt;\n    &lt;\/tr&gt;\n  &lt;\/thead&gt;\n&lt;\/table&gt;&#34;,&#34;options&#34;:{&#34;pageLength&#34;:5,&#34;columnDefs&#34;:[],&#34;order&#34;:[],&#34;autoWidth&#34;:false,&#34;orderClasses&#34;:false,&#34;orderCellsTop&#34;:true,&#34;lengthMenu&#34;:[5,10,25,50,100]}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
</description>
  </item>
  
<item>
  <title>Supervised Machine Learning for Text Analysis in R</title>
  <link>https://www.tidymodels.org/books/smltar/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/books/smltar/</guid>
  <description>&lt;p&gt;&lt;img src=&#34;cover.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;This book explains how to preprocess text data for modeling, train models, and evaluate model performance using tools from the tidyverse and tidymodels ecosystem. Models like these can be used to make predictions for new observations, to understand what natural language features or characteristics contribute to differences in the output, and more. If you are already familiar with the basics of predictive modeling, use the comprehensive, detailed examples in this book to extend your skills to the domain of natural language processing.&lt;/p&gt;
&lt;p&gt;This book provides practical guidance and directly applicable knowledge for data scientists and analysts who want to integrate unstructured text data into their modeling pipelines. Learn how to use text data for both regression and classification tasks, and how to apply more straightforward algorithms like regularized regression or support vector machines as well as deep learning approaches. Natural language must be dramatically transformed to be ready for computation, so we explore typical text preprocessing and feature engineering steps like tokenization and word embeddings from the ground up. These steps influence model results in ways we can measure, both in terms of model metrics and other tangible consequences such as how fair or appropriate model results are.&lt;/p&gt;
&lt;p&gt;An &lt;strong&gt;HTML version&lt;/strong&gt; of this text can be found at &lt;a href=&#34;https://smltar.com/&#34;&gt;&lt;code&gt;https://smltar.com/&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The data sets and R code are available in the GitHub repository &lt;a href=&#34;https://github.com/EmilHvitfeldt/smltar&#34;&gt;&lt;code&gt;https://github.com/EmilHvitfeldt/smltar&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The physical copies are sold by &lt;a href=&#34;https://amzn.to/3EwcEOK&#34;&gt;&lt;strong&gt;Amazon&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://www.routledge.com/Supervised-Machine-Learning-for-Text-Analysis-in-R/Hvitfeldt-Silge/p/book/9780367554194&#34;&gt;&lt;strong&gt;CRC Press&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
  </item>
  
<item>
  <title>Bootstrap resampling and tidy regression models</title>
  <link>https://www.tidymodels.org/learn/statistics/bootstrap/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/learn/statistics/bootstrap/</guid>
  <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This article only requires the tidymodels package.&lt;/p&gt;
&lt;p&gt;Combining fitted models in a tidy way is useful for performing bootstrapping or permutation tests. These approaches have been explored before, for instance by &lt;a href=&#34;https://rstudio-pubs-static.s3.amazonaws.com/19698_a4c472606e3c43e4b94720506e49bb7b.html&#34;&gt;Andrew MacDonald here&lt;/a&gt;, and &lt;a href=&#34;https://github.com/hadley/dplyr/issues/269&#34;&gt;Hadley has explored efficient support for bootstrapping&lt;/a&gt; as a potential enhancement to dplyr. The tidymodels package &lt;a href=&#34;https://broom.tidyverse.org/&#34;&gt;broom&lt;/a&gt; fits naturally with &lt;a href=&#34;https://dplyr.tidyverse.org/&#34;&gt;dplyr&lt;/a&gt; in performing these analyses.&lt;/p&gt;
&lt;p&gt;Bootstrapping consists of randomly sampling a data set with replacement, then performing the analysis individually on each bootstrapped replicate. The variation in the resulting estimate is then a reasonable approximation of the variance in our estimate.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say we want to fit a nonlinear model to the weight/mileage relationship in the &lt;code&gt;mtcars&lt;/code&gt; data set.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(tidymodels)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(mtcars, &lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(mpg, wt)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;geom_point&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/unnamed-chunk-1-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;We might use the method of nonlinear least squares (via the &lt;code&gt;nls()&lt;/code&gt; function) to fit a model.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nlsfit &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;nls&lt;/span&gt;(mpg &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; k &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt; wt &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; b, mtcars, start &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(k &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, b &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;summary&lt;/span&gt;(nlsfit)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Formula: mpg ~ k/wt + b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Parameters:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   Estimate Std. Error t value Pr(&amp;gt;|t|)    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; k    45.83       4.25   10.79  7.6e-12 ***&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; b     4.39       1.54    2.85   0.0077 ** &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ---&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Residual standard error: 2.77 on 30 degrees of freedom&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Number of iterations to convergence: 1 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Achieved convergence tolerance: 1.88e-08&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(mtcars, &lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(wt, mpg)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;geom_point&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;geom_line&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;predict&lt;/span&gt;(nlsfit)))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/unnamed-chunk-2-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;While this does provide a p-value and confidence intervals for the parameters, these are based on model assumptions that may not hold in real data. Bootstrapping is a popular method for providing confidence intervals and predictions that are more robust to the nature of the data.&lt;/p&gt;
&lt;h2 id=&#34;bootstrapping-models&#34;&gt;Bootstrapping models&lt;/h2&gt;
&lt;p&gt;We can use the &lt;code&gt;bootstraps()&lt;/code&gt; function in the rsample package to sample bootstrap replications. First, we construct 2000 bootstrap replicates of the data, each of which has been randomly sampled with replacement. The resulting object is an &lt;code&gt;rset&lt;/code&gt;, which is a data frame with a column of &lt;code&gt;rsplit&lt;/code&gt; objects.&lt;/p&gt;
&lt;p&gt;An &lt;code&gt;rsplit&lt;/code&gt; object has two main components: an analysis data set and an assessment data set, accessible via &lt;code&gt;analysis(rsplit)&lt;/code&gt; and &lt;code&gt;assessment(rsplit)&lt;/code&gt; respectively. For bootstrap samples, the analysis data set is the bootstrap sample itself, and the assessment data set consists of all the out-of-bag samples.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;27&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;boots &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;bootstraps&lt;/span&gt;(mtcars, times &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2000&lt;/span&gt;, apparent &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;boots
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # Bootstrap sampling with apparent sample &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 2,001 × 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    splits          id           &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;list&amp;gt;          &amp;lt;chr&amp;gt;        &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 &amp;lt;split [32/13]&amp;gt; Bootstrap0001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 &amp;lt;split [32/10]&amp;gt; Bootstrap0002&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 &amp;lt;split [32/13]&amp;gt; Bootstrap0003&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 &amp;lt;split [32/11]&amp;gt; Bootstrap0004&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 &amp;lt;split [32/9]&amp;gt;  Bootstrap0005&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 &amp;lt;split [32/10]&amp;gt; Bootstrap0006&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 &amp;lt;split [32/11]&amp;gt; Bootstrap0007&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 &amp;lt;split [32/13]&amp;gt; Bootstrap0008&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 &amp;lt;split [32/11]&amp;gt; Bootstrap0009&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 &amp;lt;split [32/11]&amp;gt; Bootstrap0010&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 1,991 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s create a helper function to fit an &lt;code&gt;nls()&lt;/code&gt; model on each bootstrap sample, and then use &lt;code&gt;purrr::map()&lt;/code&gt; to apply this function to all the bootstrap samples at once. Similarly, we create a column of tidy coefficient information by unnesting.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fit_nls_on_bootstrap &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(split) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;nls&lt;/span&gt;(mpg &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; k &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt; wt &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; b, &lt;span style=&#34;color:#00f&#34;&gt;analysis&lt;/span&gt;(split), start &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;list&lt;/span&gt;(k &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, b &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;boot_models &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  boots &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(model &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;(splits, fit_nls_on_bootstrap),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         coef_info &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;(model, tidy))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;boot_coefs &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  boot_models &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unnest&lt;/span&gt;(coef_info)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The unnested coefficient information contains a summary of each replication combined in a single data frame:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;boot_coefs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 4,002 × 8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    splits          id          model term  estimate std.error statistic  p.value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;list&amp;gt;          &amp;lt;chr&amp;gt;       &amp;lt;lis&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 &amp;lt;split [32/13]&amp;gt; Bootstrap0… &amp;lt;nls&amp;gt; k        42.1       4.05     10.4  1.91e-11&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 &amp;lt;split [32/13]&amp;gt; Bootstrap0… &amp;lt;nls&amp;gt; b         5.39      1.43      3.78 6.93e- 4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 &amp;lt;split [32/10]&amp;gt; Bootstrap0… &amp;lt;nls&amp;gt; k        49.9       5.66      8.82 7.82e-10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 &amp;lt;split [32/10]&amp;gt; Bootstrap0… &amp;lt;nls&amp;gt; b         3.73      1.92      1.94 6.13e- 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 &amp;lt;split [32/13]&amp;gt; Bootstrap0… &amp;lt;nls&amp;gt; k        37.8       2.68     14.1  9.01e-15&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 &amp;lt;split [32/13]&amp;gt; Bootstrap0… &amp;lt;nls&amp;gt; b         6.73      1.17      5.75 2.78e- 6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 &amp;lt;split [32/11]&amp;gt; Bootstrap0… &amp;lt;nls&amp;gt; k        45.6       4.45     10.2  2.70e-11&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 &amp;lt;split [32/11]&amp;gt; Bootstrap0… &amp;lt;nls&amp;gt; b         4.75      1.62      2.93 6.38e- 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 &amp;lt;split [32/9]&amp;gt;  Bootstrap0… &amp;lt;nls&amp;gt; k        43.6       4.63      9.41 1.85e-10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 &amp;lt;split [32/9]&amp;gt;  Bootstrap0… &amp;lt;nls&amp;gt; b         5.89      1.68      3.51 1.44e- 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 3,992 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;confidence-intervals&#34;&gt;Confidence intervals&lt;/h2&gt;
&lt;p&gt;We can then calculate confidence intervals (using what is called the &lt;a href=&#34;https://www.uvm.edu/~dhowell/StatPages/Randomization%20Tests/ResamplingWithR/BootstMeans/bootstrapping_means.html&#34;&gt;percentile method&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;percentile_intervals &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int_pctl&lt;/span&gt;(boot_models, coef_info)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;percentile_intervals
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 2 × 6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   term   .lower .estimate .upper .alpha .method   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;     &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 b      0.0475      4.12   7.31   0.05 percentile&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 k     37.6        46.7   59.8    0.05 percentile&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or we can use histograms to get a more detailed idea of the uncertainty in each estimate:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(boot_coefs, &lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(estimate)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_histogram&lt;/span&gt;(bins &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;30&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;facet_wrap&lt;/span&gt;( &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; term, scales &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;free&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_vline&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(xintercept &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; .lower), data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; percentile_intervals, col &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_vline&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(xintercept &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; .upper), data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; percentile_intervals, col &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/unnamed-chunk-6-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;The rsample package also has functions for &lt;a href=&#34;https://rsample.tidymodels.org/reference/int_pctl.html&#34;&gt;other types of confidence intervals&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;possible-model-fits&#34;&gt;Possible model fits&lt;/h2&gt;
&lt;p&gt;We can use &lt;code&gt;augment()&lt;/code&gt; to visualize the uncertainty in the fitted curve. Since there are so many bootstrap samples, we&amp;rsquo;ll only show a sample of the model fits in our visualization:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;boot_aug &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  boot_models &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;sample_n&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;200&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(augmented &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;(model, augment)) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unnest&lt;/span&gt;(augmented)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;boot_aug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 6,400 × 8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    splits          id            model  coef_info   mpg    wt .fitted .resid&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;list&amp;gt;          &amp;lt;chr&amp;gt;         &amp;lt;list&amp;gt; &amp;lt;list&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 &amp;lt;split [32/11]&amp;gt; Bootstrap1644 &amp;lt;nls&amp;gt;  &amp;lt;tibble&amp;gt;   16.4  4.07    15.6  0.829&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 &amp;lt;split [32/11]&amp;gt; Bootstrap1644 &amp;lt;nls&amp;gt;  &amp;lt;tibble&amp;gt;   19.7  2.77    21.9 -2.21 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 &amp;lt;split [32/11]&amp;gt; Bootstrap1644 &amp;lt;nls&amp;gt;  &amp;lt;tibble&amp;gt;   19.2  3.84    16.4  2.84 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 &amp;lt;split [32/11]&amp;gt; Bootstrap1644 &amp;lt;nls&amp;gt;  &amp;lt;tibble&amp;gt;   21.4  2.78    21.8 -0.437&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 &amp;lt;split [32/11]&amp;gt; Bootstrap1644 &amp;lt;nls&amp;gt;  &amp;lt;tibble&amp;gt;   26    2.14    27.8 -1.75 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 &amp;lt;split [32/11]&amp;gt; Bootstrap1644 &amp;lt;nls&amp;gt;  &amp;lt;tibble&amp;gt;   33.9  1.84    32.0  1.88 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 &amp;lt;split [32/11]&amp;gt; Bootstrap1644 &amp;lt;nls&amp;gt;  &amp;lt;tibble&amp;gt;   32.4  2.2     27.0  5.35 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 &amp;lt;split [32/11]&amp;gt; Bootstrap1644 &amp;lt;nls&amp;gt;  &amp;lt;tibble&amp;gt;   30.4  1.62    36.1 -5.70 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 &amp;lt;split [32/11]&amp;gt; Bootstrap1644 &amp;lt;nls&amp;gt;  &amp;lt;tibble&amp;gt;   21.5  2.46    24.4 -2.86 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 &amp;lt;split [32/11]&amp;gt; Bootstrap1644 &amp;lt;nls&amp;gt;  &amp;lt;tibble&amp;gt;   26    2.14    27.8 -1.75 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 6,390 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(boot_aug, &lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(wt, mpg)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_line&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; .fitted, group &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; id), alpha &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;.2&lt;/span&gt;, col &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_point&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/unnamed-chunk-8-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;With only a few small changes, we could easily perform bootstrapping with other kinds of predictive or hypothesis testing models, since the &lt;code&gt;tidy()&lt;/code&gt; and &lt;code&gt;augment()&lt;/code&gt; functions works for many statistical outputs. As another example, we could use &lt;code&gt;smooth.spline()&lt;/code&gt;, which fits a cubic smoothing spline to data:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fit_spline_on_bootstrap &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(split) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    data &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;analysis&lt;/span&gt;(split)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;smooth.spline&lt;/span&gt;(data&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;wt, data&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;mpg, df &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;boot_splines &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  boots &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;sample_n&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;200&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(spline &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;(splits, fit_spline_on_bootstrap),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         aug_train &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;(spline, augment))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;splines_aug &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  boot_splines &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unnest&lt;/span&gt;(aug_train)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(splines_aug, &lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(x, y)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_line&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; .fitted, group &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; id), alpha &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.2&lt;/span&gt;, col &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_point&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/unnamed-chunk-9-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;h2 id=&#34;session-information&#34;&gt;Session information&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#&amp;gt; ─ Session info ─────────────────────────────────────────────────────
#&amp;gt;  setting  value
#&amp;gt;  version  R version 4.1.2 (2021-11-01)
#&amp;gt;  os       macOS Monterey 12.3
#&amp;gt;  system   aarch64, darwin20
#&amp;gt;  ui       X11
#&amp;gt;  language (EN)
#&amp;gt;  collate  en_GB.UTF-8
#&amp;gt;  ctype    en_GB.UTF-8
#&amp;gt;  tz       Europe/London
#&amp;gt;  date     2022-04-11
#&amp;gt;  pandoc   2.14.0.3 @ /Applications/RStudio.app/Contents/MacOS/pandoc/ (via rmarkdown)
#&amp;gt; 
#&amp;gt; ─ Packages ─────────────────────────────────────────────────────────
#&amp;gt;  package    * version date (UTC) lib source
#&amp;gt;  broom      * 0.7.12  2022-01-28 [1] CRAN (R 4.1.1)
#&amp;gt;  dials      * 0.1.1   2022-04-06 [1] CRAN (R 4.1.2)
#&amp;gt;  dplyr      * 1.0.8   2022-02-08 [1] CRAN (R 4.1.2)
#&amp;gt;  ggplot2    * 3.3.5   2021-06-25 [1] CRAN (R 4.1.1)
#&amp;gt;  infer      * 1.0.0   2021-08-13 [1] CRAN (R 4.1.1)
#&amp;gt;  parsnip    * 0.2.1   2022-03-17 [1] CRAN (R 4.1.1)
#&amp;gt;  purrr      * 0.3.4   2020-04-17 [1] CRAN (R 4.1.0)
#&amp;gt;  recipes    * 0.2.0   2022-02-18 [1] CRAN (R 4.1.1)
#&amp;gt;  rlang        1.0.2   2022-03-04 [1] CRAN (R 4.1.1)
#&amp;gt;  rsample    * 0.1.1   2021-11-08 [1] CRAN (R 4.1.2)
#&amp;gt;  tibble     * 3.1.6   2021-11-07 [1] CRAN (R 4.1.1)
#&amp;gt;  tidymodels * 0.2.0   2022-03-19 [1] CRAN (R 4.1.1)
#&amp;gt;  tune       * 0.2.0   2022-03-19 [1] CRAN (R 4.1.2)
#&amp;gt;  workflows  * 0.2.6   2022-03-18 [1] CRAN (R 4.1.2)
#&amp;gt;  yardstick  * 0.0.9   2021-11-22 [1] CRAN (R 4.1.1)
#&amp;gt; 
#&amp;gt;  [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library
#&amp;gt; 
#&amp;gt; ────────────────────────────────────────────────────────────────────
&lt;/code&gt;&lt;/pre&gt;</description>
  </item>
  
<item>
  <title>Custom performance metrics</title>
  <link>https://www.tidymodels.org/learn/develop/metrics/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/learn/develop/metrics/</guid>
  <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;To use the code in this article, you will need to install the following packages: rlang and tidymodels.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://yardstick.tidymodels.org/&#34;&gt;yardstick&lt;/a&gt; package already includes a large number of metrics, but there&amp;rsquo;s obviously a chance that you might have a custom metric that hasn&amp;rsquo;t been implemented yet. In that case, you can use a few of the tools yardstick exposes to create custom metrics.&lt;/p&gt;
&lt;p&gt;Why create custom metrics? With the infrastructure yardstick provides, you get:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Standardization between your metric and other preexisting metrics&lt;/li&gt;
&lt;li&gt;Automatic error handling for types and lengths&lt;/li&gt;
&lt;li&gt;Automatic selection of binary / multiclass metric implementations&lt;/li&gt;
&lt;li&gt;Automatic &lt;code&gt;NA&lt;/code&gt; handling&lt;/li&gt;
&lt;li&gt;Support for grouped data frames&lt;/li&gt;
&lt;li&gt;Support for use alongside other metrics in &lt;code&gt;metric_set()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The implementation for metrics differ slightly depending on whether you are implementing a numeric, class, or class probability metric. Examples for numeric and classification metrics are given below. We would encourage you to look into the implementation of &lt;code&gt;roc_auc()&lt;/code&gt; after reading this vignette if you want to work on a class probability metric.&lt;/p&gt;
&lt;h2 id=&#34;numeric-example-mse&#34;&gt;Numeric example: MSE&lt;/h2&gt;
&lt;p&gt;Mean squared error (sometimes MSE or from here on, &lt;code&gt;mse()&lt;/code&gt;) is a numeric metric that measures the average of the squared errors. Numeric metrics are generally the simplest to create with yardstick, as they do not have multiclass implementations. The formula for &lt;code&gt;mse()&lt;/code&gt; is:&lt;/p&gt;
&lt;p&gt;$$ MSE = \frac{1}{N} \sum_{i=1}^{N} (truth_i - estimate_i) ^ 2 = mean( (truth - estimate) ^ 2) $$&lt;/p&gt;
&lt;p&gt;All metrics should have a data frame version, and a vector version. The data frame version here will be named &lt;code&gt;mse()&lt;/code&gt;, and the vector version will be &lt;code&gt;mse_vec()&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;vector-implementation&#34;&gt;Vector implementation&lt;/h3&gt;
&lt;p&gt;To start, create the vector version. Generally, all metrics have the  same arguments unless the metric requires an extra parameter (such as &lt;code&gt;beta&lt;/code&gt; in &lt;code&gt;f_meas()&lt;/code&gt;). To create the vector function, you need to do two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create an internal implementation function, &lt;code&gt;mse_impl()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Pass on that implementation function to &lt;code&gt;metric_vec_template()&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Below, &lt;code&gt;mse_impl()&lt;/code&gt; contains the actual implementation of the metric, and takes &lt;code&gt;truth&lt;/code&gt; and &lt;code&gt;estimate&lt;/code&gt; as arguments along with any metric specific arguments.&lt;/p&gt;
&lt;p&gt;The yardstick function &lt;code&gt;metric_vec_template()&lt;/code&gt; accepts the implementation function along with the other arguments to &lt;code&gt;mse_vec()&lt;/code&gt; and actually executes &lt;code&gt;mse_impl()&lt;/code&gt;. Additionally, it has a &lt;code&gt;cls&lt;/code&gt; argument to specify the allowed class type of &lt;code&gt;truth&lt;/code&gt; and &lt;code&gt;estimate&lt;/code&gt;. If the classes are the same, a single character class can be passed, and if they are different a character vector of length 2 can be supplied.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;metric_vec_template()&lt;/code&gt; helper handles the removal of &lt;code&gt;NA&lt;/code&gt; values in your metric, so your implementation function does not have to worry about them. It performs type checking using &lt;code&gt;cls&lt;/code&gt; and also checks that the &lt;code&gt;estimator&lt;/code&gt; is valid, the second of which is covered in the classification example. This way, all you have to worry about is the core implementation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(tidymodels)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mse_vec &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(truth, estimate, na_rm &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  mse_impl &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(truth, estimate) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;mean&lt;/span&gt;((truth &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; estimate) ^ &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;metric_vec_template&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    metric_impl &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; mse_impl,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    truth &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; truth, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    estimate &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; estimate,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    na_rm &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; na_rm,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cls &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;numeric&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At this point, you&amp;rsquo;ve created the vector version of the mean squared error metric.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;data&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;solubility_test&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;mse_vec&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  truth &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; solubility_test&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;solubility, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  estimate &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; solubility_test&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;prediction
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 0.521&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Intelligent error handling is immediately available.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;mse_vec&lt;/span&gt;(truth &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;apple&amp;#34;&lt;/span&gt;, estimate &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Error in `validate_class()`:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ! `truth` should be a numeric but a character was supplied.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;mse_vec&lt;/span&gt;(truth &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, estimate &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;factor&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;xyz&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Error in `validate_class()`:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ! `estimate` should be a numeric but a factor was supplied.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;NA&lt;/code&gt; values are removed if &lt;code&gt;na_rm = TRUE&lt;/code&gt; (the default). If &lt;code&gt;na_rm = FALSE&lt;/code&gt; and any &lt;code&gt;NA&lt;/code&gt; values are detected, then the metric automatically returns &lt;code&gt;NA&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# NA values removed&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;mse_vec&lt;/span&gt;(truth &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NA&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;.5&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;.4&lt;/span&gt;), estimate &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;.6&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;.5&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 0.01&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# NA returned&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;mse_vec&lt;/span&gt;(truth &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NA&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;.5&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;.4&lt;/span&gt;), estimate &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;.6&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;.5&lt;/span&gt;), na_rm &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] NA&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;data-frame-implementation&#34;&gt;Data frame implementation&lt;/h3&gt;
&lt;p&gt;The data frame version of the metric should be fairly simple. It is a generic function with a &lt;code&gt;data.frame&lt;/code&gt; method that calls the yardstick helper, &lt;code&gt;metric_summarizer()&lt;/code&gt;, and passes along the &lt;code&gt;mse_vec()&lt;/code&gt; function to it along with versions of &lt;code&gt;truth&lt;/code&gt; and &lt;code&gt;estimate&lt;/code&gt; that have been wrapped in &lt;code&gt;rlang::enquo()&lt;/code&gt; and then unquoted with &lt;code&gt;!!&lt;/code&gt; so that non-standard evaluation can be supported.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(rlang)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mse &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(data, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;UseMethod&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;mse&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mse &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;new_numeric_metric&lt;/span&gt;(mse, direction &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;minimize&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mse.data.frame &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(data, truth, estimate, na_rm &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;metric_summarizer&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    metric_nm &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;mse&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    metric_fn &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; mse_vec,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; data,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    truth &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;!!&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;enquo&lt;/span&gt;(truth),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    estimate &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;!!&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;enquo&lt;/span&gt;(estimate), 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    na_rm &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; na_rm,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And that&amp;rsquo;s it. The yardstick package handles the rest with an internal call to &lt;code&gt;summarise()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;mse&lt;/span&gt;(solubility_test, truth &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; solubility, estimate &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; prediction)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   .metric .estimator .estimate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 mse     standard       0.521&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Error handling&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;mse&lt;/span&gt;(solubility_test, truth &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; solubility, estimate &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;factor&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;xyz&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Error in `dplyr::summarise()`:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ! Problem while computing `.estimate = metric_fn(truth =&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   solubility, estimate = factor(&amp;#34;xyz&amp;#34;), na_rm = na_rm)`.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Caused by error in `validate_class()`:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ! `estimate` should be a numeric but a factor was supplied.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s test it out on a grouped data frame.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(dplyr)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1234&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;size &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;times &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# create 10 resamples&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;solubility_resampled &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;bind_rows&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;replicate&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    n &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; times,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    expr &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;sample_n&lt;/span&gt;(solubility_test, size, replace &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    simplify &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .id &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;resample&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;solubility_resampled &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;group_by&lt;/span&gt;(resample) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mse&lt;/span&gt;(solubility, prediction)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 10 × 4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    resample .metric .estimator .estimate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 1        mse     standard       0.512&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 10       mse     standard       0.454&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 2        mse     standard       0.513&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 3        mse     standard       0.414&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 4        mse     standard       0.543&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 5        mse     standard       0.456&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 6        mse     standard       0.652&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 7        mse     standard       0.642&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 8        mse     standard       0.404&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 9        mse     standard       0.479&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;class-example-miss-rate&#34;&gt;Class example: miss rate&lt;/h2&gt;
&lt;p&gt;Miss rate is another name for the false negative rate, and is a classification metric in the same family as &lt;code&gt;sens()&lt;/code&gt; and &lt;code&gt;spec()&lt;/code&gt;. It follows the formula:&lt;/p&gt;
&lt;p&gt;$$ miss_rate = \frac{FN}{FN + TP} $$&lt;/p&gt;
&lt;p&gt;This metric, like other classification metrics, is more easily computed when expressed as a confusion matrix. As you will see in the example, you can  achieve this with a call to &lt;code&gt;base::table(estimate, truth)&lt;/code&gt; which correctly puts the &amp;ldquo;correct&amp;rdquo; result in the columns of the confusion matrix.&lt;/p&gt;
&lt;p&gt;Classification metrics are more complicated than numeric ones because you have to think about extensions to the multiclass case. For now, let&amp;rsquo;s start with  the binary case.&lt;/p&gt;
&lt;h3 id=&#34;vector-implementation-1&#34;&gt;Vector implementation&lt;/h3&gt;
&lt;p&gt;The vector implementation for classification metrics initially has the same setup  as numeric metrics, but has an additional argument, &lt;code&gt;estimator&lt;/code&gt; that determines the type of estimator to use (binary or some kind of multiclass implementation or averaging). This argument is auto-selected for the user, so default it to  &lt;code&gt;NULL&lt;/code&gt;. Additionally, pass it along to &lt;code&gt;metric_vec_template()&lt;/code&gt; so that it can check the provided &lt;code&gt;estimator&lt;/code&gt; against the classes of &lt;code&gt;truth&lt;/code&gt; and &lt;code&gt;estimate&lt;/code&gt; to see if they are allowed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Logic for `event_level`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;event_col &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(xtab, event_level) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;identical&lt;/span&gt;(event_level, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;first&amp;#34;&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;colnames&lt;/span&gt;(xtab)[[1]]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } else {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;colnames&lt;/span&gt;(xtab)[[2]]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;miss_rate_vec &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(truth, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          estimate, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          estimator &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          na_rm &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          event_level &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;first&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  estimator &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;finalize_estimator&lt;/span&gt;(truth, estimator)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  miss_rate_impl &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(truth, estimate) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Create &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    xtab &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;table&lt;/span&gt;(estimate, truth)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    col &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;event_col&lt;/span&gt;(xtab, event_level)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    col2 &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;setdiff&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;colnames&lt;/span&gt;(xtab), col)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tp &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; xtab[col, col]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fn &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; xtab[col2, col]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fn &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt; (fn &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; tp)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;metric_vec_template&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    metric_impl &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; miss_rate_impl,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    truth &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; truth,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    estimate &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; estimate,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    na_rm &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; na_rm,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cls &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;factor&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    estimator &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; estimator,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Another change from the numeric metric is that a call to &lt;code&gt;finalize_estimator()&lt;/code&gt; is made. This is the infrastructure that auto-selects the type of estimator to use.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;data&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;two_class_example&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;miss_rate_vec&lt;/span&gt;(two_class_example&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;truth, two_class_example&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;predicted)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 0.12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What happens if you try and pass in a multiclass result?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;data&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;hpc_cv&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fold1 &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;filter&lt;/span&gt;(hpc_cv, Resample &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Fold01&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;miss_rate_vec&lt;/span&gt;(fold1&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;obs, fold1&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;pred)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;      F      M      L &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 0.0621 0.0000 0.0000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This isn&amp;rsquo;t great, as currently multiclass &lt;code&gt;miss_rate()&lt;/code&gt; isn&amp;rsquo;t supported and it would have been better to throw an error if the &lt;code&gt;estimator&lt;/code&gt; was not &lt;code&gt;&amp;quot;binary&amp;quot;&lt;/code&gt;. Currently, &lt;code&gt;finalize_estimator()&lt;/code&gt; uses its default implementation which selected &lt;code&gt;&amp;quot;macro&amp;quot;&lt;/code&gt; as the &lt;code&gt;estimator&lt;/code&gt; since &lt;code&gt;truth&lt;/code&gt; was a factor with more than 2 classes. When we implement multiclass averaging, this is what you want, but if your metric only works with a binary implementation (or has other specialized multiclass versions), you might want to guard against this.&lt;/p&gt;
&lt;p&gt;To fix this, a generic counterpart to &lt;code&gt;finalize_estimator()&lt;/code&gt;, called &lt;code&gt;finalize_estimator_internal()&lt;/code&gt;, exists that helps you restrict the input types. If you provide a method to &lt;code&gt;finalize_estimator_internal()&lt;/code&gt; where the method name is the same as your metric name, and then set the &lt;code&gt;metric_class&lt;/code&gt; argument in &lt;code&gt;finalize_estimator()&lt;/code&gt; to be the same thing, you can control how the auto-selection of the &lt;code&gt;estimator&lt;/code&gt; is handled.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t worry about the &lt;code&gt;metric_dispatcher&lt;/code&gt; argument. This is handled for you and just exists as a dummy argument to dispatch off of.&lt;/p&gt;
&lt;p&gt;It is also good practice to call &lt;code&gt;validate_estimator()&lt;/code&gt; which handles the case where a user passed in the estimator themselves. This validates that the supplied &lt;code&gt;estimator&lt;/code&gt; is one of the allowed types and error otherwise.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;finalize_estimator_internal.miss_rate &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(metric_dispatcher, x, estimator) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;validate_estimator&lt;/span&gt;(estimator, estimator_override &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;binary&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;is.null&lt;/span&gt;(estimator)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;(estimator)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lvls &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;levels&lt;/span&gt;(x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;length&lt;/span&gt;(lvls) &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;stop&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;A multiclass `truth` input was provided, but only `binary` is supported.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;binary&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;miss_rate_vec &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(truth, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          estimate, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          estimator &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          na_rm &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          event_level &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;first&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# calls finalize_estimator_internal() internally&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  estimator &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;finalize_estimator&lt;/span&gt;(truth, estimator, metric_class &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;miss_rate&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  miss_rate_impl &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(truth, estimate) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Create &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    xtab &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;table&lt;/span&gt;(estimate, truth)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    col &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;event_col&lt;/span&gt;(xtab, event_level)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    col2 &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;setdiff&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;colnames&lt;/span&gt;(xtab), col)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tp &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; xtab[col, col]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fn &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; xtab[col2, col]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fn &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt; (fn &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; tp)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;metric_vec_template&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    metric_impl &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; miss_rate_impl,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    truth &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; truth,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    estimate &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; estimate,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    na_rm &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; na_rm,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cls &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;factor&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    estimator &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; estimator,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Error thrown by our custom handler&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;miss_rate_vec&lt;/span&gt;(fold1&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;obs, fold1&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;pred)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Error in finalize_estimator_internal.miss_rate(metric_dispatcher, x, estimator): A multiclass `truth` input was provided, but only `binary` is supported.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Error thrown by validate_estimator()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;miss_rate_vec&lt;/span&gt;(fold1&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;obs, fold1&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;pred, estimator &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;macro&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Error in `validate_estimator()`:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ! `estimator` must be one of: &amp;#34;binary&amp;#34;. Not &amp;#34;macro&amp;#34;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;supporting-multiclass-miss-rate&#34;&gt;Supporting multiclass miss rate&lt;/h3&gt;
&lt;p&gt;Like many other classification metrics such as &lt;code&gt;precision()&lt;/code&gt; or &lt;code&gt;recall()&lt;/code&gt;, miss rate does not have a natural multiclass extension, but one can be created using methods such as macro, weighted macro, and micro averaging. If you have not, I encourage you to read &lt;code&gt;vignette(&amp;quot;multiclass&amp;quot;, &amp;quot;yardstick&amp;quot;)&lt;/code&gt; for more information about how these methods work.&lt;/p&gt;
&lt;p&gt;Generally, they require more effort to get right than the binary case, especially if you want to have a performant version. Luckily, a somewhat standard template is used in yardstick and can be used here as well.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s first remove the &amp;ldquo;binary&amp;rdquo; restriction we created earlier.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;rm&lt;/span&gt;(finalize_estimator_internal.miss_rate)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The main changes below are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The binary implementation is moved to &lt;code&gt;miss_rate_binary()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;miss_rate_estimator_impl()&lt;/code&gt; is a helper function for switching between binary and multiclass implementations. It also applies the weighting required for multiclass estimators. It is called from &lt;code&gt;miss_rate_impl()&lt;/code&gt; and also accepts the &lt;code&gt;estimator&lt;/code&gt; argument using R&amp;rsquo;s function scoping rules.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;miss_rate_multiclass()&lt;/code&gt; provides the implementation for the multiclass case. It calculates the true positive and false negative values as vectors with one value per class. For the macro case, it returns a vector of miss rate calculations, and for micro, it first sums the individual pieces and returns a single miss rate calculation. In the macro case, the vector is then weighted appropriately in &lt;code&gt;miss_rate_estimator_impl()&lt;/code&gt; depending on whether or not it was macro or  weighted macro.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;miss_rate_vec &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(truth, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          estimate, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          estimator &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          na_rm &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          event_level &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;first&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# calls finalize_estimator_internal() internally&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  estimator &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;finalize_estimator&lt;/span&gt;(truth, estimator, metric_class &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;miss_rate&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  miss_rate_impl &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(truth, estimate) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    xtab &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;table&lt;/span&gt;(estimate, truth)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Rather than implement the actual method here, we rely on&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# an *_estimator_impl() function that can handle binary&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# and multiclass cases&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;miss_rate_estimator_impl&lt;/span&gt;(xtab, estimator, event_level)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;metric_vec_template&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    metric_impl &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; miss_rate_impl,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    truth &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; truth,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    estimate &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; estimate,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    na_rm &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; na_rm,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cls &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;factor&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    estimator &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; estimator,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# This function switches between binary and multiclass implementations&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;miss_rate_estimator_impl &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(data, estimator, event_level) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt;(estimator &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;binary&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;miss_rate_binary&lt;/span&gt;(data, event_level)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } else {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Encapsulates the macro, macro weighted, and micro cases&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wt &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;get_weights&lt;/span&gt;(data, estimator)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    res &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;miss_rate_multiclass&lt;/span&gt;(data, estimator)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;weighted.mean&lt;/span&gt;(res, wt)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;miss_rate_binary &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(data, event_level) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  col &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;event_col&lt;/span&gt;(data, event_level)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  col2 &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;setdiff&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;colnames&lt;/span&gt;(data), col)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tp &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; data[col, col]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fn &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; data[col2, col]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fn &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt; (fn &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; tp)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;miss_rate_multiclass &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(data, estimator) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# We need tp and fn for all classes individually&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# we can get this by taking advantage of the fact&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# that tp + fn = colSums(data)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tp &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;diag&lt;/span&gt;(data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tpfn &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;colSums&lt;/span&gt;(data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fn &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; tpfn &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; tp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# If using a micro estimator, we sum the individual&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# pieces before performing the miss rate calculation&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if &lt;/span&gt;(estimator &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;micro&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tp &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;sum&lt;/span&gt;(tp)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fn &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;sum&lt;/span&gt;(fn)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# return the vector &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tp &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt; (tp &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; fn)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For the macro case, this separation of weighting from the core implementation might seem strange, but there is good reason for it. Some metrics are combinations of other metrics, and it is nice to be able to reuse code when calculating more complex metrics. For example, &lt;code&gt;f_meas()&lt;/code&gt; is a combination of &lt;code&gt;recall()&lt;/code&gt; and &lt;code&gt;precision()&lt;/code&gt;. When calculating a macro averaged &lt;code&gt;f_meas()&lt;/code&gt;, the weighting  must be applied 1 time, at the very end of the calculation. &lt;code&gt;recall_multiclass()&lt;/code&gt; and &lt;code&gt;precision_multiclass()&lt;/code&gt; are defined similarly to how &lt;code&gt;miss_rate_multiclass()&lt;/code&gt; is defined and returns the unweighted vector of calculations. This means we can directly use this in &lt;code&gt;f_meas()&lt;/code&gt;, and then weight everything once at the end of that calculation.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s try it out now:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# two class&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;miss_rate_vec&lt;/span&gt;(two_class_example&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;truth, two_class_example&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;predicted)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 0.12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# multiclass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;miss_rate_vec&lt;/span&gt;(fold1&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;obs, fold1&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;pred)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 0.548&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;data-frame-implementation-1&#34;&gt;Data frame implementation&lt;/h4&gt;
&lt;p&gt;Luckily, the data frame implementation is as simple as the numeric case, we just need to add an extra &lt;code&gt;estimator&lt;/code&gt; argument and pass that through.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;miss_rate &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(data, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;UseMethod&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;miss_rate&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;miss_rate &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;new_class_metric&lt;/span&gt;(miss_rate, direction &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;minimize&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;miss_rate.data.frame &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(data, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                 truth, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                 estimate, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                 estimator &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                 na_rm &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                 event_level &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;first&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                 &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;metric_summarizer&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    metric_nm &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;miss_rate&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    metric_fn &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; miss_rate_vec,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; data,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    truth &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;!!&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;enquo&lt;/span&gt;(truth),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    estimate &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;!!&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;enquo&lt;/span&gt;(estimate), 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    estimator &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; estimator,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    na_rm &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; na_rm,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    event_level &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; event_level,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Macro weighted automatically selected&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fold1 &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;miss_rate&lt;/span&gt;(obs, pred)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   .metric   .estimator .estimate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 miss_rate macro          0.548&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Switch to micro&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fold1 &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;miss_rate&lt;/span&gt;(obs, pred, estimator &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;micro&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   .metric   .estimator .estimate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 miss_rate micro          0.726&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Macro weighted by resample&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hpc_cv &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;group_by&lt;/span&gt;(Resample) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;miss_rate&lt;/span&gt;(obs, pred, estimator &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;macro_weighted&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 10 × 4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    Resample .metric   .estimator     .estimate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;              &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 Fold01   miss_rate macro_weighted     0.726&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 Fold02   miss_rate macro_weighted     0.712&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 Fold03   miss_rate macro_weighted     0.758&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 Fold04   miss_rate macro_weighted     0.712&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 Fold05   miss_rate macro_weighted     0.712&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 Fold06   miss_rate macro_weighted     0.697&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 Fold07   miss_rate macro_weighted     0.675&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 Fold08   miss_rate macro_weighted     0.721&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 Fold09   miss_rate macro_weighted     0.673&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 Fold10   miss_rate macro_weighted     0.699&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Error handling&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;miss_rate&lt;/span&gt;(hpc_cv, obs, VF)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Error in `dplyr::summarise()`:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ! Problem while computing `.estimate = metric_fn(truth = obs,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   estimate = VF, na_rm = na_rm, event_level = &amp;#34;first&amp;#34;)`.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Caused by error in `validate_class()`:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ! `estimate` should be a factor but a numeric was supplied.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;using-custom-metrics&#34;&gt;Using custom metrics&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;metric_set()&lt;/code&gt; function validates that all metric functions are of the same metric type by checking the class of the function. If any metrics are not of the right class, &lt;code&gt;metric_set()&lt;/code&gt; fails. By using &lt;code&gt;new_numeric_metric()&lt;/code&gt; and &lt;code&gt;new_class_metric()&lt;/code&gt; in the above custom metrics, they work out of the box without any additional adjustments.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;numeric_mets &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;metric_set&lt;/span&gt;(mse, rmse)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;numeric_mets&lt;/span&gt;(solubility_test, solubility, prediction)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 2 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   .metric .estimator .estimate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 mse     standard       0.521&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 rmse    standard       0.722&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;session-information&#34;&gt;Session information&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#&amp;gt; ─ Session info ─────────────────────────────────────────────────────
#&amp;gt;  setting  value
#&amp;gt;  version  R version 4.1.2 (2021-11-01)
#&amp;gt;  os       macOS Monterey 12.3
#&amp;gt;  system   aarch64, darwin20
#&amp;gt;  ui       X11
#&amp;gt;  language (EN)
#&amp;gt;  collate  en_GB.UTF-8
#&amp;gt;  ctype    en_GB.UTF-8
#&amp;gt;  tz       Europe/London
#&amp;gt;  date     2022-04-11
#&amp;gt;  pandoc   2.14.0.3 @ /Applications/RStudio.app/Contents/MacOS/pandoc/ (via rmarkdown)
#&amp;gt; 
#&amp;gt; ─ Packages ─────────────────────────────────────────────────────────
#&amp;gt;  package    * version date (UTC) lib source
#&amp;gt;  broom      * 0.7.12  2022-01-28 [1] CRAN (R 4.1.1)
#&amp;gt;  dials      * 0.1.1   2022-04-06 [1] CRAN (R 4.1.2)
#&amp;gt;  dplyr      * 1.0.8   2022-02-08 [1] CRAN (R 4.1.2)
#&amp;gt;  ggplot2    * 3.3.5   2021-06-25 [1] CRAN (R 4.1.1)
#&amp;gt;  infer      * 1.0.0   2021-08-13 [1] CRAN (R 4.1.1)
#&amp;gt;  parsnip    * 0.2.1   2022-03-17 [1] CRAN (R 4.1.1)
#&amp;gt;  purrr      * 0.3.4   2020-04-17 [1] CRAN (R 4.1.0)
#&amp;gt;  recipes    * 0.2.0   2022-02-18 [1] CRAN (R 4.1.1)
#&amp;gt;  rlang      * 1.0.2   2022-03-04 [1] CRAN (R 4.1.1)
#&amp;gt;  rsample    * 0.1.1   2021-11-08 [1] CRAN (R 4.1.2)
#&amp;gt;  tibble     * 3.1.6   2021-11-07 [1] CRAN (R 4.1.1)
#&amp;gt;  tidymodels * 0.2.0   2022-03-19 [1] CRAN (R 4.1.1)
#&amp;gt;  tune       * 0.2.0   2022-03-19 [1] CRAN (R 4.1.2)
#&amp;gt;  workflows  * 0.2.6   2022-03-18 [1] CRAN (R 4.1.2)
#&amp;gt;  yardstick  * 0.0.9   2021-11-22 [1] CRAN (R 4.1.1)
#&amp;gt; 
#&amp;gt;  [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library
#&amp;gt; 
#&amp;gt; ────────────────────────────────────────────────────────────────────
&lt;/code&gt;&lt;/pre&gt;</description>
  </item>
  
<item>
  <title>Evaluate your model with resampling</title>
  <link>https://www.tidymodels.org/start/resampling/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/start/resampling/</guid>
  <description>&lt;script src=&#34;https://www.tidymodels.org/start/resampling/index_files/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://www.tidymodels.org/start/resampling/index_files/lightable/lightable.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;h2 id=&#34;intro&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;So far, we have &lt;a href=&#34;https://www.tidymodels.org/start/models/&#34;&gt;built a model&lt;/a&gt; and &lt;a href=&#34;https://www.tidymodels.org/start/recipes/&#34;&gt;preprocessed data with a recipe&lt;/a&gt;. We also introduced &lt;a href=&#34;https://www.tidymodels.org/start/recipes/#fit-workflow&#34;&gt;workflows&lt;/a&gt; as a way to bundle a &lt;a href=&#34;https://parsnip.tidymodels.org/&#34;&gt;parsnip model&lt;/a&gt; and &lt;a href=&#34;https://recipes.tidymodels.org/&#34;&gt;recipe&lt;/a&gt; together. Once we have a model trained, we need a way to measure how well that model predicts new data. This tutorial explains how to characterize model performance based on &lt;strong&gt;resampling&lt;/strong&gt; statistics.&lt;/p&gt;
&lt;p&gt;To use code in this article,  you will need to install the following packages: modeldata, ranger, and tidymodels.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(tidymodels) &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# for the rsample package, along with the rest of tidymodels&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Helper packages&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(modeldata)  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# for the cells data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt; Alternatively, open an interactive version of this article in your browser: &lt;/p&gt;

&lt;a href=&#34;https://rstudio.cloud/project/2674862&#34;&gt;
  &lt;button class=&#34;test-drive-btn&#34;&gt;&lt;i class=&#34;fa fa-cloud&#34;&gt;&lt;/i&gt; Test Drive on RStudio Cloud&lt;/button&gt;
&lt;/a&gt;

&lt;h2 id=&#34;data&#34;&gt;The cell image data&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s use data from &lt;a href=&#34;http://www.biomedcentral.com/1471-2105/8/340&#34;&gt;Hill, LaPan, Li, and Haney (2007)&lt;/a&gt;, available in the &lt;a href=&#34;https://cran.r-project.org/web/packages/modeldata/index.html&#34;&gt;modeldata package&lt;/a&gt;, to predict cell image segmentation quality with resampling. To start, we load this data into R:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;data&lt;/span&gt;(cells, package &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;modeldata&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cells
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 2,019 × 58&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   case  class angle_ch_1 area_ch_1 avg_inten_ch_1 avg_inten_ch_2 avg_inten_ch_3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;fct&amp;gt; &amp;lt;fct&amp;gt;      &amp;lt;dbl&amp;gt;     &amp;lt;int&amp;gt;          &amp;lt;dbl&amp;gt;          &amp;lt;dbl&amp;gt;          &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 Test  PS        143.         185           15.7           4.95           9.55&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 Train PS        134.         819           31.9         207.            69.9 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 Train WS        107.         431           28.0         116.            63.9 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4 Train PS         69.2        298           19.5         102.            28.2 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5 Test  PS          2.89       285           24.3         112.            20.5 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 2,014 more rows, and 51 more variables: avg_inten_ch_4 &amp;lt;dbl&amp;gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; #   convex_hull_area_ratio_ch_1 &amp;lt;dbl&amp;gt;, convex_hull_perim_ratio_ch_1 &amp;lt;dbl&amp;gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; #   diff_inten_density_ch_1 &amp;lt;dbl&amp;gt;, diff_inten_density_ch_3 &amp;lt;dbl&amp;gt;, …&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have data for 2019 cells, with 58 variables. The main outcome variable of interest for us here is called &lt;code&gt;class&lt;/code&gt;, which you can see is a factor. But before we jump into predicting the &lt;code&gt;class&lt;/code&gt; variable, we need to understand it better. Below is a brief primer on cell image segmentation.&lt;/p&gt;
&lt;h3 id=&#34;predicting-image-segmentation-quality&#34;&gt;Predicting image segmentation quality&lt;/h3&gt;
&lt;p&gt;Some biologists conduct experiments on cells. In drug discovery, a particular type of cell can be treated with either a drug or control and then observed to see what the effect is (if any). A common approach for this kind of measurement is cell imaging. Different parts of the cells can be colored so that the locations of a cell can be determined.&lt;/p&gt;
&lt;p&gt;For example, in top panel of this image of five cells, the green color is meant to define the boundary of the cell (coloring something called the cytoskeleton) while the blue color defines the nucleus of the cell.&lt;/p&gt;
&lt;img src=&#34;img/cells.png&#34; width=&#34;70%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;
&lt;p&gt;Using these colors, the cells in an image can be &lt;em&gt;segmented&lt;/em&gt; so that we know which pixels belong to which cell. If this is done well, the cell can be measured in different ways that are important to the biology. Sometimes the shape of the cell matters and different mathematical tools are used to summarize characteristics like the size or &amp;ldquo;oblongness&amp;rdquo; of the cell.&lt;/p&gt;
&lt;p&gt;The bottom panel shows some segmentation results. Cells 1 and 5 are fairly well segmented. However, cells 2 to 4 are bunched up together because the segmentation was not very good. The consequence of bad segmentation is data contamination; when the biologist analyzes the shape or size of these cells, the data are inaccurate and could lead to the wrong conclusion.&lt;/p&gt;
&lt;p&gt;A cell-based experiment might involve millions of cells so it is unfeasible to visually assess them all. Instead, a subsample can be created and these cells can be manually labeled by experts as either poorly segmented (&lt;code&gt;PS&lt;/code&gt;) or well-segmented (&lt;code&gt;WS&lt;/code&gt;). If we can predict these labels accurately, the larger data set can be improved by filtering out the cells most likely to be poorly segmented.&lt;/p&gt;
&lt;h3 id=&#34;back-to-the-cells-data&#34;&gt;Back to the cells data&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;cells&lt;/code&gt; data has &lt;code&gt;class&lt;/code&gt; labels for 2019 cells — each cell is labeled as either poorly segmented (&lt;code&gt;PS&lt;/code&gt;) or well-segmented (&lt;code&gt;WS&lt;/code&gt;). Each also has a total of 56 predictors based on automated image analysis measurements. For example, &lt;code&gt;avg_inten_ch_1&lt;/code&gt; is the mean intensity of the data contained in the nucleus, &lt;code&gt;area_ch_1&lt;/code&gt; is the total size of the cell, and so on (some predictors are fairly arcane in nature).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cells
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 2,019 × 58&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   case  class angle_ch_1 area_ch_1 avg_inten_ch_1 avg_inten_ch_2 avg_inten_ch_3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;fct&amp;gt; &amp;lt;fct&amp;gt;      &amp;lt;dbl&amp;gt;     &amp;lt;int&amp;gt;          &amp;lt;dbl&amp;gt;          &amp;lt;dbl&amp;gt;          &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 Test  PS        143.         185           15.7           4.95           9.55&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 Train PS        134.         819           31.9         207.            69.9 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 Train WS        107.         431           28.0         116.            63.9 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4 Train PS         69.2        298           19.5         102.            28.2 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5 Test  PS          2.89       285           24.3         112.            20.5 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 2,014 more rows, and 51 more variables: avg_inten_ch_4 &amp;lt;dbl&amp;gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; #   convex_hull_area_ratio_ch_1 &amp;lt;dbl&amp;gt;, convex_hull_perim_ratio_ch_1 &amp;lt;dbl&amp;gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; #   diff_inten_density_ch_1 &amp;lt;dbl&amp;gt;, diff_inten_density_ch_3 &amp;lt;dbl&amp;gt;, …&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The rates of the classes are somewhat imbalanced; there are more poorly segmented cells than well-segmented cells:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cells &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;count&lt;/span&gt;(class) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(prop &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; n&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;sum&lt;/span&gt;(n))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 2 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   class     n  prop&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;fct&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 PS     1300 0.644&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 WS      719 0.356&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;data-split&#34;&gt;Data splitting&lt;/h2&gt;
&lt;p&gt;In our previous &lt;a href=&#34;https://www.tidymodels.org/start/recipes/#data-split&#34;&gt;&lt;em&gt;Preprocess your data with recipes&lt;/em&gt;&lt;/a&gt; article, we started by splitting our data. It is common when beginning a modeling project to &lt;a href=&#34;https://bookdown.org/max/FES/data-splitting.html&#34;&gt;separate the data set&lt;/a&gt; into two partitions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;em&gt;training set&lt;/em&gt; is used to estimate parameters, compare models and feature engineering techniques, tune models, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;em&gt;test set&lt;/em&gt; is held in reserve until the end of the project, at which point there should only be one or two models under serious consideration. It is used as an unbiased source for measuring final model performance.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are different ways to create these partitions of the data. The most common approach is to use a random sample. Suppose that one quarter of the data were reserved for the test set. Random sampling would randomly select 25% for the test set and use the remainder for the training set. We can use the &lt;a href=&#34;https://rsample.tidymodels.org/&#34;&gt;rsample&lt;/a&gt; package for this purpose.&lt;/p&gt;
&lt;p&gt;Since random sampling uses random numbers, it is important to set the random number seed. This ensures that the random numbers can be reproduced at a later time (if needed).&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;rsample::initial_split()&lt;/code&gt; takes the original data and saves the information on how to make the partitions. In the original analysis, the authors made their own training/test set and that information is contained in the column &lt;code&gt;case&lt;/code&gt;. To demonstrate how to make a split, we&amp;rsquo;ll remove this column before we make our own split:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;123&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cell_split &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;initial_split&lt;/span&gt;(cells &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;case), 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            strata &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; class)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we used the &lt;a href=&#34;https://rsample.tidymodels.org/reference/initial_split.html&#34;&gt;&lt;code&gt;strata&lt;/code&gt; argument&lt;/a&gt;, which conducts a stratified split. This ensures that, despite the imbalance we noticed in our &lt;code&gt;class&lt;/code&gt; variable, our training and test data sets will keep roughly the same proportions of poorly and well-segmented cells as in the original data. After the &lt;code&gt;initial_split&lt;/code&gt;, the &lt;code&gt;training()&lt;/code&gt; and &lt;code&gt;testing()&lt;/code&gt; functions return the actual data sets.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cell_train &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;training&lt;/span&gt;(cell_split)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cell_test  &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;testing&lt;/span&gt;(cell_split)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;nrow&lt;/span&gt;(cell_train)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 1514&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;nrow&lt;/span&gt;(cell_train)&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;nrow&lt;/span&gt;(cells)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 0.7498762&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# training set proportions by class&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cell_train &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;count&lt;/span&gt;(class) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(prop &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; n&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;sum&lt;/span&gt;(n))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 2 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   class     n  prop&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;fct&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 PS      975 0.644&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 WS      539 0.356&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# test set proportions by class&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cell_test &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;count&lt;/span&gt;(class) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(prop &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; n&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;sum&lt;/span&gt;(n))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 2 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   class     n  prop&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;fct&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 PS      325 0.644&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 WS      180 0.356&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The majority of the modeling work is then conducted on the training set data.&lt;/p&gt;
&lt;h2 id=&#34;modeling&#34;&gt;Modeling&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Random_forest&#34;&gt;Random forest models&lt;/a&gt; are &lt;a href=&#34;https://en.wikipedia.org/wiki/Ensemble_learning&#34;&gt;ensembles&lt;/a&gt; of &lt;a href=&#34;https://en.wikipedia.org/wiki/Decision_tree&#34;&gt;decision trees&lt;/a&gt;. A large number of decision tree models are created for the ensemble based on slightly different versions of the training set. When creating the individual decision trees, the fitting process encourages them to be as diverse as possible. The collection of trees are combined into the random forest model and, when a new sample is predicted, the votes from each tree are used to calculate the final predicted value for the new sample. For categorical outcome variables like &lt;code&gt;class&lt;/code&gt; in our &lt;code&gt;cells&lt;/code&gt; data example, the majority vote across all the trees in the random forest determines the predicted class for the new sample.&lt;/p&gt;
&lt;p&gt;One of the benefits of a random forest model is that it is very low maintenance;  it requires very little preprocessing of the data and the default parameters tend to give reasonable results. For that reason, we won&amp;rsquo;t create a recipe for the &lt;code&gt;cells&lt;/code&gt; data.&lt;/p&gt;
&lt;p&gt;At the same time, the number of trees in the ensemble should be large (in the thousands) and this makes the model moderately expensive to compute.&lt;/p&gt;
&lt;p&gt;To fit a random forest model on the training set, let&amp;rsquo;s use the &lt;a href=&#34;https://parsnip.tidymodels.org/&#34;&gt;parsnip&lt;/a&gt; package with the &lt;a href=&#34;https://cran.r-project.org/package=ranger&#34;&gt;ranger&lt;/a&gt; engine. We first define the model that we want to create:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rf_mod &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;rand_forest&lt;/span&gt;(trees &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1000&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;set_engine&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ranger&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;set_mode&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;classification&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Starting with this parsnip model object, the &lt;code&gt;fit()&lt;/code&gt; function can be used with a model formula. Since random forest models use random numbers, we again set the seed prior to computing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;234&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rf_fit &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rf_mod &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;fit&lt;/span&gt;(class &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; ., data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; cell_train)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rf_fit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; parsnip model object&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Ranger result&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Call:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  ranger::ranger(x = maybe_data_frame(x), y = y, num.trees = ~1000,      num.threads = 1, verbose = FALSE, seed = sample.int(10^5,          1), probability = TRUE) &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Type:                             Probability estimation &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Number of trees:                  1000 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Sample size:                      1514 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Number of independent variables:  56 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Mtry:                             7 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Target node size:                 10 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Variable importance mode:         none &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Splitrule:                        gini &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; OOB prediction error (Brier s.):  0.1189338&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This new &lt;code&gt;rf_fit&lt;/code&gt; object is our fitted model, trained on our training data set.&lt;/p&gt;
&lt;h2 id=&#34;performance&#34;&gt;Estimating performance&lt;/h2&gt;
&lt;p&gt;During a modeling project, we might create a variety of different models. To choose between them, we need to consider how well these models do, as measured by some performance statistics. In our example in this article, some options we could use are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the area under the Receiver Operating Characteristic (ROC) curve, and&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;overall classification accuracy.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The ROC curve uses the class probability estimates to give us a sense of performance across the entire set of potential probability cutoffs. Overall accuracy uses the hard class predictions to measure performance. The hard class predictions tell us whether our model predicted &lt;code&gt;PS&lt;/code&gt; or &lt;code&gt;WS&lt;/code&gt; for each cell. But, behind those predictions, the model is actually estimating a probability. A simple 50% probability cutoff is used to categorize a cell as poorly segmented.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://yardstick.tidymodels.org/&#34;&gt;yardstick package&lt;/a&gt; has functions for computing both of these measures called &lt;code&gt;roc_auc()&lt;/code&gt; and &lt;code&gt;accuracy()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;At first glance, it might seem like a good idea to use the training set data to compute these statistics. (This is actually a very bad idea.) Let&amp;rsquo;s see what happens if we try this. To evaluate performance based on the training set, we call the &lt;code&gt;predict()&lt;/code&gt; method to get both types of predictions (i.e. probabilities and hard class predictions).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rf_training_pred &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;predict&lt;/span&gt;(rf_fit, cell_train) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;bind_cols&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;predict&lt;/span&gt;(rf_fit, cell_train, type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;prob&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Add the true outcome data back in&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;bind_cols&lt;/span&gt;(cell_train &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(class))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using the yardstick functions, this model has spectacular results, so spectacular that you might be starting to get suspicious:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rf_training_pred &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;                &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# training set predictions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;roc_auc&lt;/span&gt;(truth &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; class, .pred_PS)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   .metric .estimator .estimate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 roc_auc binary          1.00&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rf_training_pred &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;                &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# training set predictions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;accuracy&lt;/span&gt;(truth &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; class, .pred_class)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   .metric  .estimator .estimate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 accuracy binary         0.991&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that we have this model with exceptional performance, we proceed to the test set. Unfortunately, we discover that, although our results aren&amp;rsquo;t bad, they are certainly worse than what we initially thought based on predicting the training set:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rf_testing_pred &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;predict&lt;/span&gt;(rf_fit, cell_test) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;bind_cols&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;predict&lt;/span&gt;(rf_fit, cell_test, type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;prob&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;bind_cols&lt;/span&gt;(cell_test &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(class))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rf_testing_pred &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;                   &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# test set predictions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;roc_auc&lt;/span&gt;(truth &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; class, .pred_PS)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   .metric .estimator .estimate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 roc_auc binary         0.891&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rf_testing_pred &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;                   &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# test set predictions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;accuracy&lt;/span&gt;(truth &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; class, .pred_class)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   .metric  .estimator .estimate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 accuracy binary         0.816&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;what-happened-here&#34;&gt;What happened here?&lt;/h3&gt;
&lt;p&gt;There are several reasons why training set statistics like the ones shown in this section can be unrealistically optimistic:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Models like random forests, neural networks, and other black-box methods can essentially memorize the training set. Re-predicting that same set should always result in nearly perfect results.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The training set does not have the capacity to be a good arbiter of performance. It is not an independent piece of information; predicting the training set can only reflect what the model already knows.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To understand that second point better, think about an analogy from teaching. Suppose you give a class a test, then give them the answers, then provide the same test. The student scores on the &lt;em&gt;second&lt;/em&gt; test do not accurately reflect what they know about the subject; these scores would probably be higher than their results on the first test.&lt;/p&gt;
&lt;h2 id=&#34;resampling&#34;&gt;Resampling to the rescue&lt;/h2&gt;
&lt;p&gt;Resampling methods, such as cross-validation and the bootstrap, are empirical simulation systems. They create a series of data sets similar to the training/testing split discussed previously; a subset of the data are used for creating the model and a different subset is used to measure performance. Resampling is always used with the &lt;em&gt;training set&lt;/em&gt;. This schematic from &lt;a href=&#34;https://bookdown.org/max/FES/resampling.html&#34;&gt;Kuhn and Johnson (2019)&lt;/a&gt; illustrates data usage for resampling methods:&lt;/p&gt;
&lt;img src=&#34;img/resampling.svg&#34; width=&#34;85%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;
&lt;p&gt;In the first level of this diagram, you see what happens when you use &lt;code&gt;rsample::initial_split()&lt;/code&gt;, which splits the original data into training and test sets. Then, the training set is chosen for resampling, and the test set is held out.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s use 10-fold cross-validation (CV) in this example. This method randomly allocates the 1514 cells in the training set to 10 groups of roughly equal size, called &amp;ldquo;folds&amp;rdquo;. For the first iteration of resampling, the first fold of about 151 cells are held out for the purpose of measuring performance. This is similar to a test set but, to avoid confusion, we call these data the &lt;em&gt;assessment set&lt;/em&gt; in the tidymodels framework.&lt;/p&gt;
&lt;p&gt;The other 90% of the data (about 1362 cells) are used to fit the model. Again, this sounds similar to a training set, so in tidymodels we call this data the &lt;em&gt;analysis set&lt;/em&gt;. This model, trained on the analysis set, is applied to the assessment set to generate predictions, and performance statistics are computed based on those predictions.&lt;/p&gt;
&lt;p&gt;In this example, 10-fold CV moves iteratively through the folds and leaves a different 10% out each time for model assessment. At the end of this process, there are 10 sets of performance statistics that were created on 10 data sets that were not used in the modeling process. For the cell example, this means 10 accuracies and 10 areas under the ROC curve. While 10 models were created, these are not used further; we do not keep the models themselves trained on these folds because their only purpose is calculating performance metrics.&lt;/p&gt;
&lt;p&gt;The final resampling estimates for the model are the &lt;strong&gt;averages&lt;/strong&gt; of the performance statistics replicates. For example, suppose for our data the results were:&lt;/p&gt;
&lt;table class=&#34;table&#34; style=&#34;width: auto !important; margin-left: auto; margin-right: auto;&#34;&gt;
 &lt;thead&gt;
  &lt;tr&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt; resample &lt;/th&gt;
   &lt;th style=&#34;text-align:right;&#34;&gt; accuracy &lt;/th&gt;
   &lt;th style=&#34;text-align:right;&#34;&gt; roc_auc &lt;/th&gt;
   &lt;th style=&#34;text-align:right;&#34;&gt; assessment size &lt;/th&gt;
  &lt;/tr&gt;
 &lt;/thead&gt;
&lt;tbody&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; Fold01 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 0.8289474 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 0.8937128 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 152 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; Fold02 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 0.7697368 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 0.8768989 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 152 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; Fold03 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 0.8552632 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 0.9017666 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 152 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; Fold04 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 0.8552632 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 0.8928076 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 152 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; Fold05 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 0.7947020 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 0.8816342 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 151 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; Fold06 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 0.8476821 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 0.9244306 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 151 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; Fold07 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 0.8145695 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 0.8960339 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 151 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; Fold08 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 0.8543046 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 0.9267677 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 151 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; Fold09 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 0.8543046 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 0.9231392 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 151 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; Fold10 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 0.8476821 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 0.9266917 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 151 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;From these resampling statistics, the final estimate of performance for this random forest model would be 0.904 for the area under the ROC curve and 0.832 for accuracy.&lt;/p&gt;
&lt;p&gt;These resampling statistics are an effective method for measuring model performance &lt;em&gt;without&lt;/em&gt; predicting the training set directly as a whole.&lt;/p&gt;
&lt;h2 id=&#34;fit-resamples&#34;&gt;Fit a model with resampling&lt;/h2&gt;
&lt;p&gt;To generate these results, the first step is to create a resampling object using rsample. There are &lt;a href=&#34;https://rsample.tidymodels.org/reference/index.html#section-resampling-methods&#34;&gt;several resampling methods&lt;/a&gt; implemented in rsample; cross-validation folds can be created using &lt;code&gt;vfold_cv()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;345&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;folds &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;vfold_cv&lt;/span&gt;(cell_train, v &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;folds
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; #  10-fold cross-validation &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 10 × 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    splits             id    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;list&amp;gt;             &amp;lt;chr&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 &amp;lt;split [1362/152]&amp;gt; Fold01&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 &amp;lt;split [1362/152]&amp;gt; Fold02&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 &amp;lt;split [1362/152]&amp;gt; Fold03&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 &amp;lt;split [1362/152]&amp;gt; Fold04&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 &amp;lt;split [1363/151]&amp;gt; Fold05&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 &amp;lt;split [1363/151]&amp;gt; Fold06&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 &amp;lt;split [1363/151]&amp;gt; Fold07&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 &amp;lt;split [1363/151]&amp;gt; Fold08&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 &amp;lt;split [1363/151]&amp;gt; Fold09&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 &amp;lt;split [1363/151]&amp;gt; Fold10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The list column for &lt;code&gt;splits&lt;/code&gt; contains the information on which rows belong in the analysis and assessment sets. There are functions that can be used to extract the individual resampled data called &lt;code&gt;analysis()&lt;/code&gt; and &lt;code&gt;assessment()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, the tune package contains high-level functions that can do the required computations to resample a model for the purpose of measuring performance. You have several options for building an object for resampling:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Resample a model specification preprocessed with a formula or &lt;a href=&#34;https://www.tidymodels.org/start/recipes/&#34;&gt;recipe&lt;/a&gt;, or&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Resample a &lt;a href=&#34;https://workflows.tidymodels.org/&#34;&gt;&lt;code&gt;workflow()&lt;/code&gt;&lt;/a&gt; that bundles together a model specification and formula/recipe.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For this example, let&amp;rsquo;s use a &lt;code&gt;workflow()&lt;/code&gt; that bundles together the random forest model and a formula, since we are not using a recipe. Whichever of these options you use, the syntax to &lt;code&gt;fit_resamples()&lt;/code&gt; is very similar to &lt;code&gt;fit()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rf_wf &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;workflow&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;add_model&lt;/span&gt;(rf_mod) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;add_formula&lt;/span&gt;(class &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; .)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;456&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rf_fit_rs &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rf_wf &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;fit_resamples&lt;/span&gt;(folds)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rf_fit_rs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # Resampling results&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # 10-fold cross-validation &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 10 × 4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    splits             id     .metrics         .notes          &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;list&amp;gt;             &amp;lt;chr&amp;gt;  &amp;lt;list&amp;gt;           &amp;lt;list&amp;gt;          &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 &amp;lt;split [1362/152]&amp;gt; Fold01 &amp;lt;tibble [2 × 4]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 &amp;lt;split [1362/152]&amp;gt; Fold02 &amp;lt;tibble [2 × 4]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 &amp;lt;split [1362/152]&amp;gt; Fold03 &amp;lt;tibble [2 × 4]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 &amp;lt;split [1362/152]&amp;gt; Fold04 &amp;lt;tibble [2 × 4]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 &amp;lt;split [1363/151]&amp;gt; Fold05 &amp;lt;tibble [2 × 4]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 &amp;lt;split [1363/151]&amp;gt; Fold06 &amp;lt;tibble [2 × 4]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 &amp;lt;split [1363/151]&amp;gt; Fold07 &amp;lt;tibble [2 × 4]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 &amp;lt;split [1363/151]&amp;gt; Fold08 &amp;lt;tibble [2 × 4]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 &amp;lt;split [1363/151]&amp;gt; Fold09 &amp;lt;tibble [2 × 4]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 &amp;lt;split [1363/151]&amp;gt; Fold10 &amp;lt;tibble [2 × 4]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The results are similar to the &lt;code&gt;folds&lt;/code&gt; results with some extra columns. The column &lt;code&gt;.metrics&lt;/code&gt; contains the performance statistics created from the 10 assessment sets. These can be manually unnested but the tune package contains a number of simple functions that can extract these data:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;collect_metrics&lt;/span&gt;(rf_fit_rs)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 2 × 6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   .metric  .estimator  mean     n std_err .config             &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;               &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 accuracy binary     0.832    10 0.00952 Preprocessor1_Model1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 roc_auc  binary     0.904    10 0.00610 Preprocessor1_Model1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Think about these values we now have for accuracy and AUC. These performance metrics are now more realistic (i.e. lower) than our ill-advised first attempt at computing performance metrics in the section above. If we wanted to try different model types for this data set, we could more confidently compare performance metrics computed using resampling to choose between models. Also, remember that at the end of our project, we return to our test set to estimate final model performance. We have looked at this once already before we started using resampling, but let&amp;rsquo;s remind ourselves of the results:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rf_testing_pred &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;                   &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# test set predictions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;roc_auc&lt;/span&gt;(truth &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; class, .pred_PS)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   .metric .estimator .estimate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 roc_auc binary         0.891&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rf_testing_pred &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;                   &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# test set predictions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;accuracy&lt;/span&gt;(truth &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; class, .pred_class)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   .metric  .estimator .estimate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 accuracy binary         0.816&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The performance metrics from the test set are much closer to the performance metrics computed using resampling than our first (&amp;ldquo;bad idea&amp;rdquo;) attempt. Resampling allows us to simulate how well our model will perform on new data, and the test set acts as the final, unbiased check for our model&amp;rsquo;s performance.&lt;/p&gt;
&lt;h2 id=&#34;session-information&#34;&gt;Session information&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#&amp;gt; ─ Session info ─────────────────────────────────────────────────────
#&amp;gt;  setting  value
#&amp;gt;  version  R version 4.1.1 (2021-08-10)
#&amp;gt;  os       macOS Monterey 12.2.1
#&amp;gt;  system   aarch64, darwin20
#&amp;gt;  ui       X11
#&amp;gt;  language (EN)
#&amp;gt;  collate  en_US.UTF-8
#&amp;gt;  ctype    en_US.UTF-8
#&amp;gt;  tz       America/Denver
#&amp;gt;  date     2022-03-23
#&amp;gt;  pandoc   2.17.1.1 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/ (via rmarkdown)
#&amp;gt; 
#&amp;gt; ─ Packages ─────────────────────────────────────────────────────────
#&amp;gt;  package    * version date (UTC) lib source
#&amp;gt;  broom      * 0.7.12  2022-01-28 [1] CRAN (R 4.1.1)
#&amp;gt;  dials      * 0.1.0   2022-01-31 [1] CRAN (R 4.1.1)
#&amp;gt;  dplyr      * 1.0.8   2022-02-08 [1] CRAN (R 4.1.1)
#&amp;gt;  ggplot2    * 3.3.5   2021-06-25 [1] CRAN (R 4.1.0)
#&amp;gt;  infer      * 1.0.0   2021-08-13 [1] CRAN (R 4.1.1)
#&amp;gt;  modeldata  * 0.1.1   2021-07-14 [1] CRAN (R 4.1.0)
#&amp;gt;  parsnip    * 0.2.1   2022-03-17 [1] CRAN (R 4.1.1)
#&amp;gt;  purrr      * 0.3.4   2020-04-17 [1] CRAN (R 4.1.0)
#&amp;gt;  ranger     * 0.13.1  2021-07-14 [1] CRAN (R 4.1.0)
#&amp;gt;  recipes    * 0.2.0   2022-02-18 [1] CRAN (R 4.1.1)
#&amp;gt;  rlang        1.0.2   2022-03-04 [1] CRAN (R 4.1.1)
#&amp;gt;  rsample    * 0.1.1   2021-11-08 [1] CRAN (R 4.1.1)
#&amp;gt;  tibble     * 3.1.6   2021-11-07 [1] CRAN (R 4.1.1)
#&amp;gt;  tidymodels * 0.2.0   2022-03-19 [1] CRAN (R 4.1.1)
#&amp;gt;  tune       * 0.2.0   2022-03-19 [1] CRAN (R 4.1.1)
#&amp;gt;  workflows  * 0.2.6   2022-03-18 [1] CRAN (R 4.1.1)
#&amp;gt;  yardstick  * 0.0.9   2021-11-22 [1] CRAN (R 4.1.1)
#&amp;gt; 
#&amp;gt;  [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library
#&amp;gt; 
#&amp;gt; ────────────────────────────────────────────────────────────────────
&lt;/code&gt;&lt;/pre&gt;</description>
  </item>
  
<item>
  <title>Feature Engineering &amp; Selection</title>
  <link>https://www.tidymodels.org/books/fes/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/books/fes/</guid>
  <description>&lt;p&gt;&lt;img src=&#34;cover.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;A primary goal of predictive modeling is to find a reliable and effective predictive relationship between an available set of features and an outcome. This book provides an extensive set of techniques for uncovering effective representations of the features for modeling the outcome and for finding an optimal subset of features to improve a model’s predictive performance.&lt;/p&gt;
&lt;p&gt;An &lt;strong&gt;HTML version&lt;/strong&gt; of this text can be found at &lt;a href=&#34;https://bookdown.org/max/FES&#34;&gt;&lt;code&gt;https://bookdown.org/max/FES&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The data sets and R code are available in the GitHub repository &lt;a href=&#34;https://github.com/topepo/FES&#34;&gt;&lt;code&gt;https://github.com/topepo/FES&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The physical copies are sold by &lt;a href=&#34;https://www.amazon.com/gp/product/1138079227/ref=as_li_tl?ie=UTF8&amp;amp;tag=apm0a-20&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;linkCode=as2&amp;amp;creativeASIN=1138079227&amp;amp;linkId=c801e78acfc3bc022dbed02af4851962&#34;&gt;&lt;strong&gt;Amazon&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://www.crcpress.com/Feature-Engineering-and-Selection-A-Practical-Approach-for-Predictive-Models/Kuhn-Johnson/p/book/9781138079229&#34;&gt;&lt;strong&gt;Taylor &amp;amp; Francis&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
  </item>
  
<item>
  <title>Iterative Bayesian optimization of a classification model</title>
  <link>https://www.tidymodels.org/learn/work/bayes-opt/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/learn/work/bayes-opt/</guid>
  <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;To use the code in this article, you will need to install the following packages: kernlab, modeldata, themis, and tidymodels.&lt;/p&gt;
&lt;p&gt;Many of the examples for model tuning focus on &lt;a href=&#34;https://www.tidymodels.org/learn/work/tune-svm/&#34;&gt;grid search&lt;/a&gt;. For that method, all the candidate tuning parameter combinations are defined prior to evaluation. Alternatively, &lt;em&gt;iterative search&lt;/em&gt; can be used to analyze the existing tuning parameter results and then &lt;em&gt;predict&lt;/em&gt; which tuning parameters to try next.&lt;/p&gt;
&lt;p&gt;There are a variety of methods for iterative search and the focus in this article is on &lt;em&gt;Bayesian optimization&lt;/em&gt;. For more information on this method, these resources might be helpful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://scholar.google.com/scholar?hl=en&amp;amp;as_sdt=0%2C7&amp;amp;q=Practical+Bayesian+Optimization+of+Machine+Learning+Algorithms&amp;amp;btnG=&#34;&gt;&lt;em&gt;Practical bayesian optimization of machine learning algorithms&lt;/em&gt;&lt;/a&gt; (2012). J Snoek, H Larochelle, and RP Adams. Advances in neural information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cs.toronto.edu/~rgrosse/courses/csc411_f18/tutorials/tut8_adams_slides.pdf&#34;&gt;&lt;em&gt;A Tutorial on Bayesian Optimization for Machine Learning&lt;/em&gt;&lt;/a&gt; (2018). R Adams.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.gaussianprocess.org/gpml/&#34;&gt;&lt;em&gt;Gaussian Processes for Machine Learning&lt;/em&gt;&lt;/a&gt; (2006). C E Rasmussen and C Williams.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://scholar.google.com/scholar?hl=en&amp;amp;as_sdt=0%2C7&amp;amp;q=%22Bayesian+Optimization%22&amp;amp;btnG=&#34;&gt;Other articles!&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cell-segmenting-revisited&#34;&gt;Cell segmenting revisited&lt;/h2&gt;
&lt;p&gt;To demonstrate this approach to tuning models, let&amp;rsquo;s return to the cell segmentation data from the &lt;a href=&#34;https://www.tidymodels.org/start/resampling/&#34;&gt;Getting Started&lt;/a&gt; article on resampling:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(tidymodels)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(modeldata)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Load data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;data&lt;/span&gt;(cells)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;2369&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tr_te_split &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;initial_split&lt;/span&gt;(cells &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;case), prop &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cell_train &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;training&lt;/span&gt;(tr_te_split)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cell_test  &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;testing&lt;/span&gt;(tr_te_split)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1697&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;folds &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;vfold_cv&lt;/span&gt;(cell_train, v &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;the-tuning-scheme&#34;&gt;The tuning scheme&lt;/h2&gt;
&lt;p&gt;Since the predictors are highly correlated, we can used a recipe to convert the original predictors to principal component scores. There is also slight class imbalance in these data; about 64% of the data are poorly segmented. To mitigate this, the data will be down-sampled at the end of the pre-processing so that the number of poorly and well segmented cells occur with equal frequency. We can use a recipe for all this pre-processing, but the number of principal components will need to be &lt;em&gt;tuned&lt;/em&gt; so that we have enough (but not too many) representations of the data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(themis)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cell_pre_proc &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;recipe&lt;/span&gt;(class &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; ., data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; cell_train) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_YeoJohnson&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;all_predictors&lt;/span&gt;()) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_normalize&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;all_predictors&lt;/span&gt;()) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_pca&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;all_predictors&lt;/span&gt;(), num_comp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tune&lt;/span&gt;()) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_downsample&lt;/span&gt;(class)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this analysis, we will use a support vector machine to model the data. Let&amp;rsquo;s use a radial basis function (RBF) kernel and tune its main parameter ($\sigma$). Additionally, the main SVM parameter, the cost value, also needs optimization.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;svm_mod &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;svm_rbf&lt;/span&gt;(mode &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;classification&amp;#34;&lt;/span&gt;, cost &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tune&lt;/span&gt;(), rbf_sigma &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tune&lt;/span&gt;()) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;set_engine&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;kernlab&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These two objects (the recipe and model) will be combined into a single object via the &lt;code&gt;workflow()&lt;/code&gt; function from the &lt;a href=&#34;https://workflows.tidymodels.org/&#34;&gt;workflows&lt;/a&gt; package; this object will be used in the optimization process.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;svm_wflow &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;workflow&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;add_model&lt;/span&gt;(svm_mod) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;add_recipe&lt;/span&gt;(cell_pre_proc)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From this object, we can derive information about what parameters are slated to be tuned. A parameter set is derived by:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;svm_set &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;extract_parameter_set_dials&lt;/span&gt;(svm_wflow)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;svm_set
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Collection of 3 parameters for tuning&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  identifier      type    object&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;        cost      cost nparam[+]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   rbf_sigma rbf_sigma nparam[+]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    num_comp  num_comp nparam[+]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The default range for the number of PCA components is rather small for this data set. A member of the parameter set can be modified using the &lt;code&gt;update()&lt;/code&gt; function. Let&amp;rsquo;s constrain the search to one to twenty components by updating the &lt;code&gt;num_comp&lt;/code&gt; parameter. Additionally, the lower bound of this parameter is set to zero which specifies that the original predictor set should also be evaluated (i.e., with no PCA step at all):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;svm_set &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  svm_set &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;update&lt;/span&gt;(num_comp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;num_comp&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;0L&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;20L&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;sequential-tuning&#34;&gt;Sequential tuning&lt;/h2&gt;
&lt;p&gt;Bayesian optimization is a sequential method that uses a model to predict new candidate parameters for assessment. When scoring potential parameter value, the mean and variance of performance are predicted. The strategy used to define how these two statistical quantities are used is defined by an &lt;em&gt;acquisition function&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For example, one approach for scoring new candidates is to use a confidence bound. Suppose accuracy is being optimized. For a metric that we want to maximize, a lower confidence bound can be used. The multiplier on the standard error (denoted as &lt;code&gt;\(\kappa\)&lt;/code&gt;) is a value that can be used to make trade-offs between &lt;strong&gt;exploration&lt;/strong&gt; and &lt;strong&gt;exploitation&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Exploration&lt;/strong&gt; means that the search will consider candidates in untested space.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Exploitation&lt;/strong&gt; focuses in areas where the previous best results occurred.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The variance predicted by the Bayesian model is mostly spatial variation; the value will be large for candidate values that are not close to values that have already been evaluated. If the standard error multiplier is high, the search process will be more likely to avoid areas without candidate values in the vicinity.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll use another acquisition function, &lt;em&gt;expected improvement&lt;/em&gt;, that determines which candidates are likely to be helpful relative to the current best results. This is the default acquisition function. More information on these functions can be found in the &lt;a href=&#34;https://tune.tidymodels.org/articles/acquisition_functions.html&#34;&gt;package vignette for acquisition functions&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;search_res &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  svm_wflow &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;tune_bayes&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resamples &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; folds,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# To use non-default parameter ranges&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    param_info &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; svm_set,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Generate five at semi-random to start&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    initial &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    iter &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;50&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# How to measure performance?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    metrics &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;metric_set&lt;/span&gt;(roc_auc),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    control &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;control_bayes&lt;/span&gt;(no_improve &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;30&lt;/span&gt;, verbose &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &amp;gt;  Generating a set of 5 initial parameter results&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Initialization complete&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Optimizing roc_auc using the expected improvement&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 1 ───────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8764 (@iter 0)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=0.00386, rbf_sigma=0.00513, num_comp=19&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ♥ Newest results:	roc_auc=0.8797 (+/-0.0108)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 2 ───────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8797 (@iter 1)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=0.245, rbf_sigma=0.00334, num_comp=2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.7966 (+/-0.0103)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 3 ───────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8797 (@iter 1)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=25.8, rbf_sigma=0.00543, num_comp=20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ♥ Newest results:	roc_auc=0.8881 (+/-0.00921)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 4 ───────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8881 (@iter 3)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=0.403, rbf_sigma=0.944, num_comp=20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.387 (+/-0.0833)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 5 ───────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8881 (@iter 3)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=0.0315, rbf_sigma=0.00228, num_comp=20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.8806 (+/-0.0114)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 6 ───────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8881 (@iter 3)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=24.8, rbf_sigma=0.0041, num_comp=17&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ♥ Newest results:	roc_auc=0.8882 (+/-0.00987)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 7 ───────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8882 (@iter 6)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=27.5, rbf_sigma=0.00924, num_comp=16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ♥ Newest results:	roc_auc=0.8883 (+/-0.0105)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 8 ───────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8883 (@iter 7)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=5.6, rbf_sigma=0.00774, num_comp=14&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ♥ Newest results:	roc_auc=0.8894 (+/-0.0109)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 9 ───────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8894 (@iter 8)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=6.12, rbf_sigma=0.0063, num_comp=17&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.885 (+/-0.0103)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 10 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8894 (@iter 8)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=16.6, rbf_sigma=0.00343, num_comp=19&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.8869 (+/-0.00985)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 11 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8894 (@iter 8)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=19.5, rbf_sigma=0.0082, num_comp=15&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ♥ Newest results:	roc_auc=0.8943 (+/-0.0101)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 12 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8943 (@iter 11)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=15.1, rbf_sigma=1.09e-10, num_comp=20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.3451 (+/-0.116)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 13 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8943 (@iter 11)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=7.19, rbf_sigma=0.00528, num_comp=15&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.8868 (+/-0.0107)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 14 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8943 (@iter 11)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=11.8, rbf_sigma=0.00143, num_comp=20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.8811 (+/-0.0112)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 15 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8943 (@iter 11)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=23.9, rbf_sigma=0.015, num_comp=15&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.8853 (+/-0.0123)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 16 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8943 (@iter 11)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=29.4, rbf_sigma=0.00841, num_comp=18&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.8823 (+/-0.0105)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 17 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8943 (@iter 11)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=0.00117, rbf_sigma=0.0112, num_comp=14&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.8771 (+/-0.0119)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 18 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8943 (@iter 11)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=16.7, rbf_sigma=0.0137, num_comp=10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ♥ Newest results:	roc_auc=0.9 (+/-0.00986)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 19 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.9 (@iter 18)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=31.9, rbf_sigma=0.0147, num_comp=8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.8985 (+/-0.0101)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 20 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.9 (@iter 18)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=8.72, rbf_sigma=0.0184, num_comp=9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ♥ Newest results:	roc_auc=0.9021 (+/-0.0101)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 21 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.9021 (@iter 20)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=17.4, rbf_sigma=0.0158, num_comp=10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.9005 (+/-0.0099)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 22 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.9021 (@iter 20)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=20.4, rbf_sigma=0.0214, num_comp=9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.9001 (+/-0.0102)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 23 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.9021 (@iter 20)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=13.8, rbf_sigma=0.0145, num_comp=9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.9018 (+/-0.0101)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 24 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.9021 (@iter 20)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=14.8, rbf_sigma=0.017, num_comp=9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ♥ Newest results:	roc_auc=0.9021 (+/-0.00998)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 25 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.9021 (@iter 24)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=17.2, rbf_sigma=0.0083, num_comp=10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.8986 (+/-0.00973)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 26 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.9021 (@iter 24)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=20, rbf_sigma=0.018, num_comp=9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.9011 (+/-0.0102)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 27 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.9021 (@iter 24)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=0.0185, rbf_sigma=0.0151, num_comp=9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.8774 (+/-0.0123)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 28 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.9021 (@iter 24)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=0.00426, rbf_sigma=0.0181, num_comp=20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.8841 (+/-0.0108)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 29 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.9021 (@iter 24)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=0.00102, rbf_sigma=0.00959, num_comp=20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.8832 (+/-0.011)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 30 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.9021 (@iter 24)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=0.983, rbf_sigma=0.0204, num_comp=10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.8917 (+/-0.0106)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 31 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.9021 (@iter 24)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=14.2, rbf_sigma=0.0104, num_comp=8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.8977 (+/-0.01)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 32 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.9021 (@iter 24)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=14.5, rbf_sigma=0.0114, num_comp=11&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.8971 (+/-0.00976)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 33 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.9021 (@iter 24)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=19.4, rbf_sigma=0.0126, num_comp=9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.9017 (+/-0.00997)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 34 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.9021 (@iter 24)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=11.8, rbf_sigma=0.0207, num_comp=9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.902 (+/-0.00981)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 35 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.9021 (@iter 24)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=12.6, rbf_sigma=0.0164, num_comp=8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.8987 (+/-0.0102)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 36 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.9021 (@iter 24)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=22.7, rbf_sigma=0.000423, num_comp=1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.7725 (+/-0.0106)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 37 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.9021 (@iter 24)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=9.21, rbf_sigma=0.0192, num_comp=9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.9017 (+/-0.00992)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 38 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.9021 (@iter 24)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=0.00227, rbf_sigma=0.0278, num_comp=15&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.8828 (+/-0.0113)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 39 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.9021 (@iter 24)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=0.0012, rbf_sigma=0.000867, num_comp=20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.3449 (+/-0.116)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 40 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.9021 (@iter 24)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=0.118, rbf_sigma=0.00525, num_comp=19&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.8806 (+/-0.0112)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 41 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.9021 (@iter 24)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=25.1, rbf_sigma=0.00223, num_comp=17&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.8811 (+/-0.0108)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 42 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.9021 (@iter 24)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=0.892, rbf_sigma=0.00268, num_comp=20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.8818 (+/-0.0116)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 43 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.9021 (@iter 24)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=0.0108, rbf_sigma=0.00733, num_comp=18&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.8756 (+/-0.0121)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 44 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.9021 (@iter 24)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=0.061, rbf_sigma=0.00356, num_comp=20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.881 (+/-0.0113)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 45 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.9021 (@iter 24)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=0.00135, rbf_sigma=0.0218, num_comp=2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.7966 (+/-0.0104)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 46 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.9021 (@iter 24)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=0.0476, rbf_sigma=0.0248, num_comp=17&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.8809 (+/-0.0113)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 47 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.9021 (@iter 24)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=0.00158, rbf_sigma=0.0689, num_comp=19&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.8784 (+/-0.0101)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 48 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.9021 (@iter 24)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=0.00171, rbf_sigma=0.0337, num_comp=19&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.8836 (+/-0.0104)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 49 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.9021 (@iter 24)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=29.2, rbf_sigma=0.000104, num_comp=15&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.875 (+/-0.0122)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 50 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.9021 (@iter 24)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i cost=30.2, rbf_sigma=4.34e-05, num_comp=2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.7965 (+/-0.0104)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The resulting tibble is a stacked set of rows of the rsample object with an additional column for the iteration number:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;search_res
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # Tuning results&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # 10-fold cross-validation &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 510 × 5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    splits             id     .metrics         .notes           .iter&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;list&amp;gt;             &amp;lt;chr&amp;gt;  &amp;lt;list&amp;gt;           &amp;lt;list&amp;gt;           &amp;lt;int&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 &amp;lt;split [1362/152]&amp;gt; Fold01 &amp;lt;tibble [5 × 7]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt;     0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 &amp;lt;split [1362/152]&amp;gt; Fold02 &amp;lt;tibble [5 × 7]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt;     0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 &amp;lt;split [1362/152]&amp;gt; Fold03 &amp;lt;tibble [5 × 7]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt;     0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 &amp;lt;split [1362/152]&amp;gt; Fold04 &amp;lt;tibble [5 × 7]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt;     0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 &amp;lt;split [1363/151]&amp;gt; Fold05 &amp;lt;tibble [5 × 7]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt;     0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 &amp;lt;split [1363/151]&amp;gt; Fold06 &amp;lt;tibble [5 × 7]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt;     0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 &amp;lt;split [1363/151]&amp;gt; Fold07 &amp;lt;tibble [5 × 7]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt;     0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 &amp;lt;split [1363/151]&amp;gt; Fold08 &amp;lt;tibble [5 × 7]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt;     0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 &amp;lt;split [1363/151]&amp;gt; Fold09 &amp;lt;tibble [5 × 7]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt;     0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 &amp;lt;split [1363/151]&amp;gt; Fold10 &amp;lt;tibble [5 × 7]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt;     0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 500 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As with grid search, we can summarize the results over resamples:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;estimates &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;collect_metrics&lt;/span&gt;(search_res) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;arrange&lt;/span&gt;(.iter)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;estimates
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 55 × 10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;        cost    rbf_sigma num_comp .metric .estimator  mean     n std_err .config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1  0.00207      1.56e-5       10 roc_auc binary     0.345    10 0.114   Prepro…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2  0.348        4.43e-2        1 roc_auc binary     0.773    10 0.0106  Prepro…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 15.5          1.28e-7       20 roc_auc binary     0.345    10 0.116   Prepro…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4  1.45         2.04e-3       15 roc_auc binary     0.876    10 0.0121  Prepro…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5  0.0304       6.41e-9        5 roc_auc binary     0.345    10 0.113   Prepro…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6  0.00386      5.13e-3       19 roc_auc binary     0.880    10 0.0108  Iter1  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7  0.245        3.34e-3        2 roc_auc binary     0.797    10 0.0103  Iter2  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 25.8          5.43e-3       20 roc_auc binary     0.888    10 0.00921 Iter3  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9  0.403        9.44e-1       20 roc_auc binary     0.387    10 0.0833  Iter4  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10  0.0315       2.28e-3       20 roc_auc binary     0.881    10 0.0114  Iter5  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 45 more rows, and 1 more variable: .iter &amp;lt;int&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The best performance of the initial set of candidate values was &lt;code&gt;AUC = 0.876 &lt;/code&gt;. The best results were achieved at iteration 24 with a corresponding AUC value of 0.902. The five best results are:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;show_best&lt;/span&gt;(search_res, metric &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;roc_auc&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 5 × 10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    cost rbf_sigma num_comp .metric .estimator  mean     n std_err .config .iter&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;int&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 14.8     0.0170        9 roc_auc binary     0.902    10 0.00998 Iter24     24&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2  8.72    0.0184        9 roc_auc binary     0.902    10 0.0101  Iter20     20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 11.8     0.0207        9 roc_auc binary     0.902    10 0.00981 Iter34     34&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4 13.8     0.0145        9 roc_auc binary     0.902    10 0.0101  Iter23     23&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5 19.4     0.0126        9 roc_auc binary     0.902    10 0.00997 Iter33     33&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A plot of the search iterations can be created via:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;autoplot&lt;/span&gt;(search_res, type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;performance&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/bo-plot-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;There are many parameter combinations have roughly equivalent results.&lt;/p&gt;
&lt;p&gt;How did the parameters change over iterations?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;autoplot&lt;/span&gt;(search_res, type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;labs&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Iterations&amp;#34;&lt;/span&gt;, y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/bo-param-plot-1.svg&#34; width=&#34;864&#34; /&gt;
&lt;h2 id=&#34;session-information&#34;&gt;Session information&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#&amp;gt; ─ Session info ─────────────────────────────────────────────────────
#&amp;gt;  setting  value
#&amp;gt;  version  R version 4.1.2 (2021-11-01)
#&amp;gt;  os       macOS Monterey 12.3
#&amp;gt;  system   aarch64, darwin20
#&amp;gt;  ui       X11
#&amp;gt;  language (EN)
#&amp;gt;  collate  en_GB.UTF-8
#&amp;gt;  ctype    en_GB.UTF-8
#&amp;gt;  tz       Europe/London
#&amp;gt;  date     2022-04-11
#&amp;gt;  pandoc   2.14.0.3 @ /Applications/RStudio.app/Contents/MacOS/pandoc/ (via rmarkdown)
#&amp;gt; 
#&amp;gt; ─ Packages ─────────────────────────────────────────────────────────
#&amp;gt;  package    * version date (UTC) lib source
#&amp;gt;  broom      * 0.7.12  2022-01-28 [1] CRAN (R 4.1.1)
#&amp;gt;  dials      * 0.1.1   2022-04-06 [1] CRAN (R 4.1.2)
#&amp;gt;  dplyr      * 1.0.8   2022-02-08 [1] CRAN (R 4.1.2)
#&amp;gt;  ggplot2    * 3.3.5   2021-06-25 [1] CRAN (R 4.1.1)
#&amp;gt;  infer      * 1.0.0   2021-08-13 [1] CRAN (R 4.1.1)
#&amp;gt;  kernlab    * 0.9-30  2022-04-02 [1] CRAN (R 4.1.2)
#&amp;gt;  modeldata  * 0.1.1   2021-07-14 [1] CRAN (R 4.1.2)
#&amp;gt;  parsnip    * 0.2.1   2022-03-17 [1] CRAN (R 4.1.1)
#&amp;gt;  purrr      * 0.3.4   2020-04-17 [1] CRAN (R 4.1.0)
#&amp;gt;  recipes    * 0.2.0   2022-02-18 [1] CRAN (R 4.1.1)
#&amp;gt;  rlang      * 1.0.2   2022-03-04 [1] CRAN (R 4.1.1)
#&amp;gt;  rsample    * 0.1.1   2021-11-08 [1] CRAN (R 4.1.2)
#&amp;gt;  themis     * 0.2.0   2022-03-30 [1] CRAN (R 4.1.1)
#&amp;gt;  tibble     * 3.1.6   2021-11-07 [1] CRAN (R 4.1.1)
#&amp;gt;  tidymodels * 0.2.0   2022-03-19 [1] CRAN (R 4.1.1)
#&amp;gt;  tune       * 0.2.0   2022-03-19 [1] CRAN (R 4.1.2)
#&amp;gt;  workflows  * 0.2.6   2022-03-18 [1] CRAN (R 4.1.2)
#&amp;gt;  yardstick  * 0.0.9   2021-11-22 [1] CRAN (R 4.1.1)
#&amp;gt; 
#&amp;gt;  [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library
#&amp;gt; 
#&amp;gt; ────────────────────────────────────────────────────────────────────
&lt;/code&gt;&lt;/pre&gt;</description>
  </item>
  
<item>
  <title>Search recipe steps</title>
  <link>https://www.tidymodels.org/find/recipes/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/find/recipes/</guid>
  <description>
&lt;script src=&#34;https://www.tidymodels.org/find/recipes/index_files/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://www.tidymodels.org/find/recipes/index_files/datatables-css/datatables-crosstalk.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://www.tidymodels.org/find/recipes/index_files/datatables-binding/datatables.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://www.tidymodels.org/find/recipes/index_files/jquery/jquery-3.6.0.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://www.tidymodels.org/find/recipes/index_files/dt-core/css/jquery.dataTables.min.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;link href=&#34;https://www.tidymodels.org/find/recipes/index_files/dt-core/css/jquery.dataTables.extra.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://www.tidymodels.org/find/recipes/index_files/dt-core/js/jquery.dataTables.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://www.tidymodels.org/find/recipes/index_files/nouislider/jquery.nouislider.min.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://www.tidymodels.org/find/recipes/index_files/nouislider/jquery.nouislider.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://www.tidymodels.org/find/recipes/index_files/selectize/selectize.bootstrap3.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://www.tidymodels.org/find/recipes/index_files/selectize/selectize.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://www.tidymodels.org/find/recipes/index_files/crosstalk/css/crosstalk.min.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://www.tidymodels.org/find/recipes/index_files/crosstalk/js/crosstalk.min.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;To learn about the recipes package, see &lt;a href=&#34;https://www.tidymodels.org/start/recipes/&#34;&gt;&lt;em&gt;Get Started: Preprocess your data with recipes&lt;/em&gt;&lt;/a&gt;. The table below allows you to search for recipe steps across tidymodels packages.&lt;/p&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:auto;&#34; class=&#34;datatables html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;filter&#34;:&#34;top&#34;,&#34;vertical&#34;:false,&#34;filterHTML&#34;:&#34;&lt;tr&gt;\n  &lt;td data-type=\&#34;character\&#34; style=\&#34;vertical-align: top;\&#34;&gt;\n    &lt;div class=\&#34;form-group has-feedback\&#34; style=\&#34;margin-bottom: auto;\&#34;&gt;\n      &lt;input type=\&#34;search\&#34; placeholder=\&#34;All\&#34; class=\&#34;form-control\&#34; style=\&#34;width: 100%;\&#34;/&gt;\n      &lt;span class=\&#34;glyphicon glyphicon-remove-circle form-control-feedback\&#34;&gt;&lt;\/span&gt;\n    &lt;\/div&gt;\n  &lt;\/td&gt;\n  &lt;td data-type=\&#34;character\&#34; style=\&#34;vertical-align: top;\&#34;&gt;\n    &lt;div class=\&#34;form-group has-feedback\&#34; style=\&#34;margin-bottom: auto;\&#34;&gt;\n      &lt;input type=\&#34;search\&#34; placeholder=\&#34;All\&#34; class=\&#34;form-control\&#34; style=\&#34;width: 100%;\&#34;/&gt;\n      &lt;span class=\&#34;glyphicon glyphicon-remove-circle form-control-feedback\&#34;&gt;&lt;\/span&gt;\n    &lt;\/div&gt;\n  &lt;\/td&gt;\n  &lt;td data-type=\&#34;factor\&#34; style=\&#34;vertical-align: top;\&#34;&gt;\n    &lt;div class=\&#34;form-group has-feedback\&#34; style=\&#34;margin-bottom: auto;\&#34;&gt;\n      &lt;input type=\&#34;search\&#34; placeholder=\&#34;All\&#34; class=\&#34;form-control\&#34; style=\&#34;width: 100%;\&#34;/&gt;\n      &lt;span class=\&#34;glyphicon glyphicon-remove-circle form-control-feedback\&#34;&gt;&lt;\/span&gt;\n    &lt;\/div&gt;\n    &lt;div style=\&#34;width: 100%; display: none;\&#34;&gt;\n      &lt;select multiple=\&#34;multiple\&#34; style=\&#34;width: 100%;\&#34; data-options=\&#34;[&amp;quot;embed&amp;quot;,&amp;quot;recipes&amp;quot;,&amp;quot;textrecipes&amp;quot;,&amp;quot;themis&amp;quot;,&amp;quot;timetk&amp;quot;]\&#34;&gt;&lt;\/select&gt;\n    &lt;\/div&gt;\n  &lt;\/td&gt;\n&lt;\/tr&gt;&#34;,&#34;data&#34;:[[&#34;Check Variable Class&#34;,&#34;Check if all Columns are Present&#34;,&#34;Check for Missing Values&#34;,&#34;check that newly created variable names don&#39;t overlap&#34;,&#34;Check for New Values&#34;,&#34;Check Range Consistency&#34;,&#34;Quantitatively check on variables&#34;,&#34;Apply Adaptive Synthetic Algorithm&#34;,&#34;Sort rows using dplyr&#34;,&#34;Impute via bagged trees&#34;,&#34;Create a Factors from A Dummy Variable&#34;,&#34;Box-Cox Transformation using Forecast Methods&#34;,&#34;Box-Cox Transformation for Non-Negative Data&#34;,&#34;B-Spline Basis Functions&#34;,&#34;Apply borderline-SMOTE Algorithm&#34;,&#34;Centering numeric data&#34;,&#34;Distances to Class Centroids&#34;,&#34;Clean Categorical Levels&#34;,&#34;Clean Variable Names&#34;,&#34;High Correlation Filter&#34;,&#34;Create Counts of Patterns using Regular Expressions&#34;,&#34;Cut a numeric variable into a factor&#34;,&#34;Date Feature Generator&#34;,&#34;Data Depths&#34;,&#34;Create a differenced predictor&#34;,&#34;Discretize Numeric Variables&#34;,&#34;Discretize numeric variables with CART&#34;,&#34;Discretize numeric variables with XgBoost&#34;,&#34;Down-Sample a Data Set Based on a Factor Variable&#34;,&#34;Down-Sample a Data Set Based on a Factor Variable&#34;,&#34;Create traditional dummy variables&#34;,&#34;Extract patterns from nominal data&#34;,&#34;Indicator Variables via Feature Hashing&#34;,&#34;Handle levels in multiple predictors together&#34;,&#34;Encoding Factors into Multiple Columns&#34;,&#34;Convert Factors to Strings&#34;,&#34;Dummy Variables Creation via Feature Hashing&#34;,&#34;Filter rows using dplyr&#34;,&#34;Missing Value Column Filter&#34;,&#34;Fourier Features for Modeling Seasonality&#34;,&#34;Distance between two locations&#34;,&#34;Add sin and cos terms for harmonic analysis&#34;,&#34;Holiday Feature Generator&#34;,&#34;Holiday Feature (Signature) Generator&#34;,&#34;Hyperbolic Transformations&#34;,&#34;ICA Signal Extraction&#34;,&#34;Impute via bagged trees&#34;,&#34;Impute via k-nearest neighbors&#34;,&#34;Impute numeric variables via a linear model&#34;,&#34;Impute numeric data below the threshold of measurement&#34;,&#34;Impute numeric data using the mean&#34;,&#34;Impute numeric data using the median&#34;,&#34;Impute nominal data using the most common value&#34;,&#34;Impute numeric data using a rolling window statistic&#34;,&#34;Create Missing Data Column Indicators&#34;,&#34;Convert values to predefined integers&#34;,&#34;Create Interaction Variables&#34;,&#34;Add intercept (or constant) column&#34;,&#34;Inverse Transformation&#34;,&#34;Inverse Logit Transformation&#34;,&#34;Isomap Embedding&#34;,&#34;Impute via k-nearest neighbors&#34;,&#34;Kernel PCA Signal Extraction&#34;,&#34;Polynomial Kernel PCA Signal Extraction&#34;,&#34;Radial Basis Function Kernel PCA Signal Extraction&#34;,&#34;Create a lagged predictor&#34;,&#34;Calculate LDA Dimension Estimates of Tokens&#34;,&#34;Lemmatization of Token Variables&#34;,&#34;Supervised Factor Conversions into Linear Functions using Bayesian Likelihood Encodings&#34;,&#34;Supervised Factor Conversions into Linear Functions using Likelihood Encodings&#34;,&#34;Supervised Factor Conversions into Linear Functions using Bayesian Likelihood Encodings&#34;,&#34;Linear Combination Filter&#34;,&#34;Logarithmic Transformation&#34;,&#34;Log Interval Transformation for Constrained Interval Forecasting&#34;,&#34;Logit Transformation&#34;,&#34;Impute numeric data below the threshold of measurement&#34;,&#34;Impute numeric data using the mean&#34;,&#34;Impute numeric data using the median&#34;,&#34;Impute nominal data using the most common value&#34;,&#34;Add new variables using dplyr&#34;,&#34;Mutate multiple columns using dplyr&#34;,&#34;Remove observations with missing values&#34;,&#34;Remove Points Near Other Classes&#34;,&#34;Generate n-grams From Token Variables&#34;,&#34;Non-Negative Matrix Factorization Signal Extraction&#34;,&#34;Non-Negative Matrix Factorization Signal Extraction with lasso Penalization&#34;,&#34;Center and scale numeric data&#34;,&#34;Simple Value Assignments for Novel Factor Levels&#34;,&#34;Natural Spline Basis Functions&#34;,&#34;Convert Numbers to Factors&#34;,&#34;Near-Zero Variance Filter&#34;,&#34;Convert Ordinal Factors to Numeric Scores&#34;,&#34;Collapse Some Categorical Levels&#34;,&#34;PCA Signal Extraction&#34;,&#34;Sparse PCA Signal Extraction&#34;,&#34;Sparse Bayesian PCA Signal Extraction&#34;,&#34;Percentile Transformation&#34;,&#34;Partial Least Squares Feature Extraction&#34;,&#34;Orthogonal Polynomial Basis Functions&#34;,&#34;Part of Speech Filtering of Token Variables&#34;,&#34;Create a Profiling Version of a Data Set&#34;,&#34;Scaling Numeric Data to a Specific Range&#34;,&#34;Ratio Variable Creation&#34;,&#34;Detect a regular expression&#34;,&#34;Relevel factors to a desired level&#34;,&#34;Apply (Smoothed) Rectified Linear Transformation&#34;,&#34;Rename variables by name using dplyr&#34;,&#34;Rename multiple columns using dplyr&#34;,&#34;General Variable Filter&#34;,&#34;Impute numeric data using a rolling window statistic&#34;,&#34;Apply ROSE Algorithm&#34;,&#34;Sample rows using dplyr&#34;,&#34;Scaling Numeric Data&#34;,&#34;Select variables using dplyr&#34;,&#34;Positional One-Hot encoding of Tokens&#34;,&#34;Shuffle Variables&#34;,&#34;Filter rows by position using dplyr&#34;,&#34;Slidify Rolling Window Transformation&#34;,&#34;Slidify Rolling Window Transformation (Augmented Version)&#34;,&#34;Smoothing Transformation using Loess&#34;,&#34;Apply SMOTE Algorithm&#34;,&#34;Apply SMOTENC algorithm&#34;,&#34;Spatial Sign Preprocessing&#34;,&#34;Square Root Transformation&#34;,&#34;Stemming of Token Variables&#34;,&#34;Filtering of Stop Words for Tokens Variables&#34;,&#34;Convert Strings to Factors&#34;,&#34;Normalization of Character Variables&#34;,&#34;Calculate Set of Text Features&#34;,&#34;Feature Hashing of Tokens&#34;,&#34;Term frequency of Tokens&#34;,&#34;Term Frequency-Inverse Document Frequency of Tokens&#34;,&#34;Time Series Feature (Signature) Generator&#34;,&#34;Filter Tokens Based on Term Frequency&#34;,&#34;Tokenization of Character Variables&#34;,&#34;BPE Tokenization of Character Variables&#34;,&#34;Sentencepiece Tokenization of Character Variables&#34;,&#34;Wordpiece Tokenization of Character Variables&#34;,&#34;Combine Multiple Token Variables Into One&#34;,&#34;Remove Tomek’s Links&#34;,&#34;Clean Outliers and Missing Data for Time Series&#34;,&#34;Missing Data Imputation for Time Series&#34;,&#34;Pad: Add rows to fill gaps and go from low to high frequency&#34;,&#34;Supervised and unsupervised uniform manifold approximation and projection (UMAP)&#34;,&#34;Assign missing categories to \&#34;unknown\&#34;&#34;,&#34;Convert Ordered Factors to Unordered Factors&#34;,&#34;Untokenization of Token Variables&#34;,&#34;Up-Sample a Data Set Based on a Factor Variable&#34;,&#34;Up-Sample a Data Set Based on a Factor Variable&#34;,&#34;Moving Window Functions&#34;,&#34;Weight of evidence transformation&#34;,&#34;Pretrained Word Embeddings of Tokens&#34;,&#34;Yeo-Johnson Transformation&#34;,&#34;Zero Variance Filter&#34;],[&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/check_class.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;check_class&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/check_cols.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;check_cols&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/check_missing.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;check_missing&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/check_name.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;check_name&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/check_new_values.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;check_new_values&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/check_range.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;check_range&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/check_type.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;check_type&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/step_adasyn.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_adasyn&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_arrange.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_arrange&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_impute_bag.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_bagimpute&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_bin2factor.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_bin2factor&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://business-science.github.io/timetk/reference/step_box_cox.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_box_cox&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_BoxCox.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_BoxCox&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_bs.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_bs&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/step_bsmote.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_bsmote&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_center.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_center&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_classdist.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_classdist&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_clean_levels.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_clean_levels&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_clean_names.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_clean_names&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_corr.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_corr&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_count.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_count&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_cut.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_cut&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_date.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_date&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_depth.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_depth&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://business-science.github.io/timetk/reference/step_diff.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_diff&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_discretize.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_discretize&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/step_discretize_cart.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_discretize_cart&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/step_discretize_xgb.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_discretize_xgb&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_downsample.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_downsample&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/step_downsample.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_downsample&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_dummy.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_dummy&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_dummy_extract.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_dummy_extract&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_dummy_hash.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_dummy_hash&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_dummy_multi_choice.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_dummy_multi_choice&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/step_embed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_embed&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_factor2string.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_factor2string&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/step_feature_hash.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_feature_hash&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_filter.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_filter&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_filter_missing.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_filter_missing&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://business-science.github.io/timetk/reference/step_fourier.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_fourier&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_geodist.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_geodist&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_harmonic.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_harmonic&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_holiday.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_holiday&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://business-science.github.io/timetk/reference/step_holiday_signature.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_holiday_signature&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_hyperbolic.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_hyperbolic&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_ica.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_ica&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_impute_bag.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_impute_bag&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_impute_knn.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_impute_knn&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_impute_linear.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_impute_linear&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_impute_lower.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_impute_lower&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_impute_mean.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_impute_mean&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_impute_median.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_impute_median&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_impute_mode.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_impute_mode&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_impute_roll.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_impute_roll&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_indicate_na.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_indicate_na&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_integer.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_integer&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_interact.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_interact&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_intercept.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_intercept&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_inverse.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_inverse&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_invlogit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_invlogit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_isomap.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_isomap&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_impute_knn.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_knnimpute&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_kpca.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_kpca&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_kpca_poly.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_kpca_poly&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_kpca_rbf.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_kpca_rbf&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_lag.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_lag&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_lda.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_lda&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_lemma.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_lemma&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/step_lencode_bayes.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_lencode_bayes&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/step_lencode_glm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_lencode_glm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/step_lencode_mixed.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_lencode_mixed&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_lincomb.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_lincomb&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_log.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_log&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://business-science.github.io/timetk/reference/step_log_interval.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_log_interval&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_logit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_logit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_impute_lower.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_lowerimpute&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_impute_mean.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_meanimpute&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_impute_median.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_medianimpute&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_impute_mode.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_modeimpute&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_mutate.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_mutate&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_mutate_at.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_mutate_at&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_naomit.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_naomit&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/step_nearmiss.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_nearmiss&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_ngram.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_ngram&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_nnmf.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_nnmf&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_nnmf_sparse.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_nnmf_sparse&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_normalize.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_normalize&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_novel.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_novel&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_ns.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_ns&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_num2factor.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_num2factor&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_nzv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_nzv&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_ordinalscore.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_ordinalscore&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_other.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_other&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_pca.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_pca&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/step_pca_sparse.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_pca_sparse&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/step_pca_sparse_bayes.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_pca_sparse_bayes&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_percentile.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_percentile&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_pls.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_pls&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_poly.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_poly&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_pos_filter.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_pos_filter&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_profile.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_profile&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_range.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_range&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_ratio.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_ratio&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_regex.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_regex&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_relevel.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_relevel&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_relu.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_relu&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_rename.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_rename&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_rename_at.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_rename_at&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_rm.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_rm&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_impute_roll.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_rollimpute&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/step_rose.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_rose&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_sample.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_sample&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_scale.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_scale&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_select.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_select&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_sequence_onehot.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_sequence_onehot&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_shuffle.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_shuffle&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_slice.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_slice&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://business-science.github.io/timetk/reference/step_slidify.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_slidify&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://business-science.github.io/timetk/reference/step_slidify_augment.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_slidify_augment&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://business-science.github.io/timetk/reference/step_smooth.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_smooth&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/step_smote.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_smote&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/step_smotenc.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_smotenc&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_spatialsign.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_spatialsign&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_sqrt.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_sqrt&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_stem.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_stem&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_stopwords.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_stopwords&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_string2factor.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_string2factor&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_text_normalization.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_text_normalization&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_textfeature.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_textfeature&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_texthash.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_texthash&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_tf.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_tf&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_tfidf.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_tfidf&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://business-science.github.io/timetk/reference/step_timeseries_signature.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_timeseries_signature&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_tokenfilter.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_tokenfilter&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_tokenize.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_tokenize&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_tokenize_bpe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_tokenize_bpe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_tokenize_sentencepiece.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_tokenize_sentencepiece&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_tokenize_wordpiece.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_tokenize_wordpiece&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_tokenmerge.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_tokenmerge&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/step_tomek.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_tomek&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://business-science.github.io/timetk/reference/step_ts_clean.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_ts_clean&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://business-science.github.io/timetk/reference/step_ts_impute.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_ts_impute&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://business-science.github.io/timetk/reference/step_ts_pad.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_ts_pad&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/step_umap.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_umap&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_unknown.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_unknown&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_unorder.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_unorder&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_untokenize.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_untokenize&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_upsample.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_upsample&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://themis.tidymodels.org/reference/step_upsample.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_upsample&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_window.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_window&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://embed.tidymodels.org/reference/step_woe.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_woe&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://textrecipes.tidymodels.org/reference/step_word_embeddings.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_word_embeddings&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_YeoJohnson.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_YeoJohnson&lt;\/tt&gt;&lt;\/a&gt;&#34;,&#34;&lt;a href=&#39;https://recipes.tidymodels.org/reference/step_zv.html&#39;  target=&#39;_blank&#39;&gt;&lt;tt&gt;step_zv&lt;\/tt&gt;&lt;\/a&gt;&#34;],[&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;themis&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;timetk&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;themis&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;timetk&#34;,&#34;recipes&#34;,&#34;embed&#34;,&#34;embed&#34;,&#34;recipes&#34;,&#34;themis&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;textrecipes&#34;,&#34;recipes&#34;,&#34;embed&#34;,&#34;recipes&#34;,&#34;embed&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;timetk&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;timetk&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;embed&#34;,&#34;embed&#34;,&#34;embed&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;timetk&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;themis&#34;,&#34;textrecipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;embed&#34;,&#34;embed&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;textrecipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;themis&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;textrecipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;timetk&#34;,&#34;timetk&#34;,&#34;timetk&#34;,&#34;themis&#34;,&#34;themis&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;recipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;timetk&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;textrecipes&#34;,&#34;themis&#34;,&#34;timetk&#34;,&#34;timetk&#34;,&#34;timetk&#34;,&#34;embed&#34;,&#34;recipes&#34;,&#34;recipes&#34;,&#34;textrecipes&#34;,&#34;recipes&#34;,&#34;themis&#34;,&#34;recipes&#34;,&#34;embed&#34;,&#34;textrecipes&#34;,&#34;recipes&#34;,&#34;recipes&#34;]],&#34;container&#34;:&#34;&lt;table class=\&#34;cell-border stripe\&#34;&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;title&lt;\/th&gt;\n      &lt;th&gt;topic&lt;\/th&gt;\n      &lt;th&gt;package&lt;\/th&gt;\n    &lt;\/tr&gt;\n  &lt;\/thead&gt;\n&lt;\/table&gt;&#34;,&#34;options&#34;:{&#34;pageLength&#34;:5,&#34;columnDefs&#34;:[],&#34;order&#34;:[],&#34;autoWidth&#34;:false,&#34;orderClasses&#34;:false,&#34;orderCellsTop&#34;:true,&#34;lengthMenu&#34;:[5,10,25,50,100]}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
</description>
  </item>
  
<item>
  <title>Subsampling for class imbalances</title>
  <link>https://www.tidymodels.org/learn/models/sub-sampling/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/learn/models/sub-sampling/</guid>
  <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;To use the code in this article, you will need to install the following packages: discrim, klaR, readr, ROSE, themis, and tidymodels.&lt;/p&gt;
&lt;p&gt;Subsampling a training set, either undersampling or oversampling the appropriate class or classes, can be a helpful approach to dealing with classification data where one or more classes occur very infrequently. In such a situation (without compensating for it), most models will overfit to the majority class and produce very good statistics for the class containing the frequently occurring classes while the minority classes have poor performance.&lt;/p&gt;
&lt;p&gt;This article describes subsampling for dealing with class imbalances. For better understanding, some knowledge of classification metrics like sensitivity, specificity, and receiver operating characteristic curves is required. See Section 3.2.2 in &lt;a href=&#34;https://bookdown.org/max/FES/measuring-performance.html&#34;&gt;Kuhn and Johnson (2019)&lt;/a&gt; for more information on these metrics.&lt;/p&gt;
&lt;h2 id=&#34;simulated-data&#34;&gt;Simulated data&lt;/h2&gt;
&lt;p&gt;Consider a two-class problem where the first class has a very low rate of occurrence. The data were simulated and can be imported into R using the code below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;imbal_data &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  readr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;read_csv&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;https://bit.ly/imbal_data&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(Class &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;factor&lt;/span&gt;(Class))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;dim&lt;/span&gt;(imbal_data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 1200   16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;table&lt;/span&gt;(imbal_data&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;Class)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Class1 Class2 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     60   1140&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If &amp;ldquo;Class1&amp;rdquo; is the event of interest, it is very likely that a classification model would be able to achieve very good &lt;em&gt;specificity&lt;/em&gt; since almost all of the data are of the second class. &lt;em&gt;Sensitivity&lt;/em&gt;, however, would likely be poor since the models will optimize accuracy (or other loss functions) by predicting everything to be the majority class.&lt;/p&gt;
&lt;p&gt;One result of class imbalance when there are two classes is that the default probability cutoff of 50% is inappropriate; a different cutoff that is more extreme might be able to achieve good performance.&lt;/p&gt;
&lt;h2 id=&#34;subsampling-the-data&#34;&gt;Subsampling the data&lt;/h2&gt;
&lt;p&gt;One way to alleviate this issue is to &lt;em&gt;subsample&lt;/em&gt; the data. There are a number of ways to do this but the most simple one is to &lt;em&gt;sample down&lt;/em&gt; (undersample) the majority class data until it occurs with the same frequency as the minority class. While it may seem counterintuitive, throwing out a large percentage of your data can be effective at producing a useful model that can recognize both the majority and minority classes. In some cases, this even means that the overall performance of the model is better (e.g. improved area under the ROC curve). However, subsampling almost always produces models that are &lt;em&gt;better calibrated&lt;/em&gt;, meaning that the distributions of the class probabilities are more well behaved. As a result, the default 50% cutoff is much more likely to produce better sensitivity and specificity values than they would otherwise.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s explore subsampling using &lt;code&gt;themis::step_rose()&lt;/code&gt; in a recipe for the simulated data. It uses the ROSE (random over sampling examples) method from &lt;a href=&#34;https://scholar.google.com/scholar?hl=en&amp;amp;q=%22training+and+assessing+classification+rules+with+imbalanced+data%22&#34;&gt;Menardi, G. and Torelli, N. (2014)&lt;/a&gt;. This is an example of an oversampling strategy, rather than undersampling.&lt;/p&gt;
&lt;p&gt;In terms of workflow:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is extremely important that subsampling occurs &lt;em&gt;inside of resampling&lt;/em&gt;. Otherwise, the resampling process can produce &lt;a href=&#34;https://topepo.github.io/caret/subsampling-for-class-imbalances.html#resampling&#34;&gt;poor estimates of model performance&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The subsampling process should only be applied to the analysis set. The assessment set should reflect the event rates seen &amp;ldquo;in the wild&amp;rdquo; and, for this reason, the &lt;code&gt;skip&lt;/code&gt; argument to &lt;code&gt;step_downsample()&lt;/code&gt; and other subsampling recipes steps has a default of &lt;code&gt;TRUE&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is a simple recipe implementing oversampling:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(tidymodels)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(themis)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;imbal_rec &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;recipe&lt;/span&gt;(Class &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; ., data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; imbal_data) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_rose&lt;/span&gt;(Class)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For a model, let&amp;rsquo;s use a &lt;a href=&#34;https://en.wikipedia.org/wiki/Quadratic_classifier#Quadratic_discriminant_analysis&#34;&gt;quadratic discriminant analysis&lt;/a&gt; (QDA) model. From the discrim package, this model can be specified using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(discrim)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;qda_mod &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;discrim_regularized&lt;/span&gt;(frac_common_cov &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, frac_identity &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;set_engine&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;klaR&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To keep these objects bound together, they can be combined in a &lt;a href=&#34;https://workflows.tidymodels.org/&#34;&gt;workflow&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;qda_rose_wflw &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;workflow&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;add_model&lt;/span&gt;(qda_mod) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;add_recipe&lt;/span&gt;(imbal_rec)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;qda_rose_wflw
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ══ Workflow ══════════════════════════════════════════════════════════&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Preprocessor: Recipe&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Model: discrim_regularized()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Preprocessor ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 Recipe Step&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; • step_rose()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Model ─────────────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Regularized Discriminant Model Specification (classification)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Main Arguments:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   frac_common_cov = 0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   frac_identity = 0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Computational engine: klaR&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;model-performance&#34;&gt;Model performance&lt;/h2&gt;
&lt;p&gt;Stratified, repeated 10-fold cross-validation is used to resample the model:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;5732&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cv_folds &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;vfold_cv&lt;/span&gt;(imbal_data, strata &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Class&amp;#34;&lt;/span&gt;, repeats &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To measure model performance, let&amp;rsquo;s use two metrics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The area under the &lt;a href=&#34;https://en.wikipedia.org/wiki/Receiver_operating_characteristic&#34;&gt;ROC curve&lt;/a&gt; is an overall assessment of performance across &lt;em&gt;all&lt;/em&gt; cutoffs. Values near one indicate very good results while values near 0.5 would imply that the model is very poor.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;J&lt;/em&gt; index (a.k.a. &lt;a href=&#34;https://en.wikipedia.org/wiki/Youden%27s_J_statistic&#34;&gt;Youden&amp;rsquo;s &lt;em&gt;J&lt;/em&gt;&lt;/a&gt; statistic) is &lt;code&gt;sensitivity + specificity - 1&lt;/code&gt;. Values near one are once again best.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If a model is poorly calibrated, the ROC curve value might not show diminished performance. However, the &lt;em&gt;J&lt;/em&gt; index would be lower for models with pathological distributions for the class probabilities. The yardstick package will be used to compute these metrics.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cls_metrics &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;metric_set&lt;/span&gt;(roc_auc, j_index)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, we train the models and generate the results using &lt;code&gt;tune::fit_resamples()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;2180&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;qda_rose_res &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;fit_resamples&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  qda_rose_wflw, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  resamples &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; cv_folds, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  metrics &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; cls_metrics
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;collect_metrics&lt;/span&gt;(qda_rose_res)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 2 × 6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   .metric .estimator  mean     n std_err .config             &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;               &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 j_index binary     0.790    50 0.0171  Preprocessor1_Model1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 roc_auc binary     0.951    50 0.00466 Preprocessor1_Model1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What do the results look like without using ROSE? We can create another workflow and fit the QDA model along the same resamples:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;qda_wflw &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;workflow&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;add_model&lt;/span&gt;(qda_mod) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;add_formula&lt;/span&gt;(Class &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; .)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;2180&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;qda_only_res &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;fit_resamples&lt;/span&gt;(qda_wflw, resamples &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; cv_folds, metrics &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; cls_metrics)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;collect_metrics&lt;/span&gt;(qda_only_res)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 2 × 6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   .metric .estimator  mean     n std_err .config             &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;               &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 j_index binary     0.250    50 0.0288  Preprocessor1_Model1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 roc_auc binary     0.953    50 0.00479 Preprocessor1_Model1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It looks like ROSE helped a lot, especially with the J-index. Class imbalance sampling methods tend to greatly improve metrics based on the hard class predictions (i.e., the categorical predictions) because the default cutoff tends to be a better balance of sensitivity and specificity.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s plot the metrics for each resample to see how the individual results changed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;no_sampling &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  qda_only_res &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;collect_metrics&lt;/span&gt;(summarize &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  dplyr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-.&lt;/span&gt;estimator) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(sampling &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;no_sampling&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;with_sampling &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  qda_rose_res &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;collect_metrics&lt;/span&gt;(summarize &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  dplyr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-.&lt;/span&gt;estimator) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(sampling &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;rose&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;bind_rows&lt;/span&gt;(no_sampling, with_sampling) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(label &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;paste&lt;/span&gt;(id2, id)) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; sampling, y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; .estimate, group &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; label)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_line&lt;/span&gt;(alpha &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;.4&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;facet_wrap&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; .metric, scales &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;free_y&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/merge-metrics-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;This visually demonstrates that the subsampling mostly affects metrics that use the hard class predictions.&lt;/p&gt;
&lt;h2 id=&#34;session-information&#34;&gt;Session information&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#&amp;gt; ─ Session info ─────────────────────────────────────────────────────
#&amp;gt;  setting  value
#&amp;gt;  version  R version 4.1.2 (2021-11-01)
#&amp;gt;  os       macOS Monterey 12.3
#&amp;gt;  system   aarch64, darwin20
#&amp;gt;  ui       X11
#&amp;gt;  language (EN)
#&amp;gt;  collate  en_GB.UTF-8
#&amp;gt;  ctype    en_GB.UTF-8
#&amp;gt;  tz       Europe/London
#&amp;gt;  date     2022-04-11
#&amp;gt;  pandoc   2.14.0.3 @ /Applications/RStudio.app/Contents/MacOS/pandoc/ (via rmarkdown)
#&amp;gt; 
#&amp;gt; ─ Packages ─────────────────────────────────────────────────────────
#&amp;gt;  package    * version date (UTC) lib source
#&amp;gt;  broom      * 0.7.12  2022-01-28 [1] CRAN (R 4.1.1)
#&amp;gt;  dials      * 0.1.1   2022-04-06 [1] CRAN (R 4.1.2)
#&amp;gt;  discrim    * 0.2.0   2022-03-09 [1] CRAN (R 4.1.1)
#&amp;gt;  dplyr      * 1.0.8   2022-02-08 [1] CRAN (R 4.1.2)
#&amp;gt;  ggplot2    * 3.3.5   2021-06-25 [1] CRAN (R 4.1.1)
#&amp;gt;  infer      * 1.0.0   2021-08-13 [1] CRAN (R 4.1.1)
#&amp;gt;  klaR       * 1.7-0   2022-03-10 [1] CRAN (R 4.1.1)
#&amp;gt;  parsnip    * 0.2.1   2022-03-17 [1] CRAN (R 4.1.1)
#&amp;gt;  purrr      * 0.3.4   2020-04-17 [1] CRAN (R 4.1.0)
#&amp;gt;  readr      * 2.1.2   2022-01-30 [1] CRAN (R 4.1.1)
#&amp;gt;  recipes    * 0.2.0   2022-02-18 [1] CRAN (R 4.1.1)
#&amp;gt;  rlang        1.0.2   2022-03-04 [1] CRAN (R 4.1.1)
#&amp;gt;  ROSE       * 0.0-4   2021-06-14 [1] CRAN (R 4.1.2)
#&amp;gt;  rsample    * 0.1.1   2021-11-08 [1] CRAN (R 4.1.2)
#&amp;gt;  themis     * 0.2.0   2022-03-30 [1] CRAN (R 4.1.1)
#&amp;gt;  tibble     * 3.1.6   2021-11-07 [1] CRAN (R 4.1.1)
#&amp;gt;  tidymodels * 0.2.0   2022-03-19 [1] CRAN (R 4.1.1)
#&amp;gt;  tune       * 0.2.0   2022-03-19 [1] CRAN (R 4.1.2)
#&amp;gt;  workflows  * 0.2.6   2022-03-18 [1] CRAN (R 4.1.2)
#&amp;gt;  yardstick  * 0.0.9   2021-11-22 [1] CRAN (R 4.1.1)
#&amp;gt; 
#&amp;gt;  [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library
#&amp;gt; 
#&amp;gt; ────────────────────────────────────────────────────────────────────
&lt;/code&gt;&lt;/pre&gt;</description>
  </item>
  
<item>
  <title>How to create a tuning parameter function</title>
  <link>https://www.tidymodels.org/learn/develop/parameters/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/learn/develop/parameters/</guid>
  <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;To use the code in this article, you will need to install the following packages: dials and scales.&lt;/p&gt;
&lt;p&gt;Some models and recipe steps contain parameters that dials does not know about. You can construct new quantitative and qualitative parameters using &lt;code&gt;new_quant_param()&lt;/code&gt; or &lt;code&gt;new_qual_param()&lt;/code&gt;, respectively.  This article is a guide to creating new parameters.&lt;/p&gt;
&lt;h2 id=&#34;quantitative-parameters&#34;&gt;Quantitative parameters&lt;/h2&gt;
&lt;p&gt;As an example, let&amp;rsquo;s consider the multivariate adaptive regression spline (&lt;a href=&#34;https://en.wikipedia.org/wiki/Multivariate_adaptive_regression_spline&#34;&gt;MARS&lt;/a&gt;) model, which creates nonlinear features from predictors and adds them to a linear regression models. The earth package is an excellent implementation of this method.&lt;/p&gt;
&lt;p&gt;MARS creates an initial set of features and then prunes them back to an appropriate size. This can be done automatically by &lt;code&gt;earth::earth()&lt;/code&gt; or the number of final terms can be set by the user. The parsnip function &lt;code&gt;mars()&lt;/code&gt; has a parameter called &lt;code&gt;num_terms&lt;/code&gt; that defines this.&lt;/p&gt;
&lt;p&gt;What if we want to create a parameter for the number of &lt;em&gt;initial terms&lt;/em&gt; included in the model. There is no argument in &lt;code&gt;parsnip::mars()&lt;/code&gt; for this but we will make one now. The argument name in &lt;code&gt;earth::earth()&lt;/code&gt; is &lt;code&gt;nk&lt;/code&gt;, which is not very descriptive. Our parameter will be called &lt;code&gt;num_initial_terms&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We use the &lt;code&gt;new_quant_param()&lt;/code&gt; function since this is a numeric parameter. The main two arguments to a numeric parameter function are &lt;code&gt;range&lt;/code&gt; and &lt;code&gt;trans&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;range&lt;/code&gt; specifies the possible values of the parameter. For our example, a minimal value might be one or two. What is the upper limit? The default in the earth package is&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;min&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;200&lt;/span&gt;, &lt;span style=&#34;color:#00f&#34;&gt;max&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;ncol&lt;/span&gt;(x))) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;where &lt;code&gt;x&lt;/code&gt; is the predictor matrix. We often put in values that are either sensible defaults or are minimal enough to work for the majority of data sets. For now, let&amp;rsquo;s specify an upper limit of 10 but this will be discussed more in the next section.&lt;/p&gt;
&lt;p&gt;The other argument is &lt;code&gt;trans&lt;/code&gt;, which represents a transformation that should be applied to the parameter values when working with them. For example, many regularization methods have a &lt;code&gt;penalty&lt;/code&gt; parameter that tends to range between zero and some upper bound (let&amp;rsquo;s say 1). The effect of going from a penalty value of 0.01 to 0.1 is much more impactful than going from 0.9 to 1.0. In such a case, it might make sense to work with this parameter in transformed units (such as the log, in this example). If new parameter values are generated at random, it helps if they are uniformly simulated in the transformed units and then converted back to the original units.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;trans&lt;/code&gt; parameter accepts a transformation object from the scales package. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(scales)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;lsf.str&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;package:scales&amp;#34;&lt;/span&gt;, pattern &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;_trans$&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; asn_trans : function ()  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; atanh_trans : function ()  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; boxcox_trans : function (p, offset = 0)  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; date_trans : function ()  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; exp_trans : function (base = exp(1))  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; hms_trans : function ()  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; identity_trans : function ()  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; log_trans : function (base = exp(1))  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; log10_trans : function ()  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; log1p_trans : function ()  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; log2_trans : function ()  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; logit_trans : function ()  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; modulus_trans : function (p, offset = 1)  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; probability_trans : function (distribution, ...)  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; probit_trans : function ()  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; pseudo_log_trans : function (sigma = 1, base = exp(1))  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; reciprocal_trans : function ()  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; reverse_trans : function ()  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; sqrt_trans : function ()  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; time_trans : function (tz = NULL)  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; yj_trans : function (p)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scales&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;log10_trans&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Transformer:  log-10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A value of &lt;code&gt;NULL&lt;/code&gt; means that no transformation should be used.&lt;/p&gt;
&lt;p&gt;A quantitative parameter function should have these two arguments and, in the function body, a call &lt;code&gt;new_quant_param()&lt;/code&gt;. There are a few arguments to this function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(tidymodels)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;args&lt;/span&gt;(new_quant_param)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; function (type = c(&amp;#34;double&amp;#34;, &amp;#34;integer&amp;#34;), range, inclusive, default = unknown(), &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     trans = NULL, values = NULL, label = NULL, finalize = NULL) &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; NULL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Possible types are double precision and integers. The value of &lt;code&gt;type&lt;/code&gt; should agree with the values of &lt;code&gt;range&lt;/code&gt; in the function definition.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It&amp;rsquo;s OK for our tuning to include the minimum or maximum, so we&amp;rsquo;ll use &lt;code&gt;c(TRUE, TRUE)&lt;/code&gt; for &lt;code&gt;inclusive&lt;/code&gt;.  If the value cannot include one end of the range, set one or both of these values to &lt;code&gt;FALSE&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;label&lt;/code&gt; should be a named character string where the name is the parameter name and the value represents what will be printed automatically.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;finalize&lt;/code&gt; is an argument that can set parts of the range. This is discussed more below.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;rsquo;s an example of a basic quantitative parameter object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;num_initial_terms &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(range &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1L&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;10L&lt;/span&gt;), trans &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;new_quant_param&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;integer&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    range &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; range,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    inclusive &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    trans &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; trans,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    label &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(num_initial_terms &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;# Initial MARS Terms&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    finalize &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;num_initial_terms&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # Initial MARS Terms (quantitative)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Range: [1, 10]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Sample from the parameter:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;4832856&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;num_initial_terms&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;value_sample&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1]  6  4  9 10  4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;finalizing-parameters&#34;&gt;Finalizing parameters&lt;/h3&gt;
&lt;p&gt;It might be the case that the range of the parameter is unknown. For example, parameters that are related to the number of columns in a data set cannot be exactly specified in the absence of data. In those cases, a placeholder of &lt;code&gt;unknown()&lt;/code&gt; can be added. This will force the user to &amp;ldquo;finalize&amp;rdquo; the parameter object for their particular data set. Let&amp;rsquo;s redefine our function with an &lt;code&gt;unknown()&lt;/code&gt; value:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;num_initial_terms &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(range &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1L&lt;/span&gt;, &lt;span style=&#34;color:#00f&#34;&gt;unknown&lt;/span&gt;()), trans &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;new_quant_param&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;integer&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    range &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; range,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    inclusive &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    trans &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; trans,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    label &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(num_initial_terms &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;# Initial MARS Terms&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    finalize &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;num_initial_terms&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # Initial MARS Terms (quantitative)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Range: [1, ?]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Can we sample? &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;num_initial_terms&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;value_sample&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Error in `range_validate()`:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ! Cannot validate ranges when they contains 1+ unknown values.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;finalize&lt;/code&gt; argument of &lt;code&gt;num_initial_terms()&lt;/code&gt; can take a function that uses data to set the range. For example, the package already includes a few functions for finalization:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;lsf.str&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;package:dials&amp;#34;&lt;/span&gt;, pattern &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;^get_&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; get_batch_sizes : function (object, x, frac = c(1/10, 1/3), ...)  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; get_log_p : function (object, x, ...)  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; get_n : function (object, x, log_vals = FALSE, ...)  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; get_n_frac : function (object, x, log_vals = FALSE, frac = 1/3, ...)  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; get_n_frac_range : function (object, x, log_vals = FALSE, frac = c(1/10, 5/10), ...)  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; get_p : function (object, x, log_vals = FALSE, ...)  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; get_rbf_range : function (object, x, seed = sample.int(10^5, 1), ...)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These functions generally take a data frame of predictors (in an argument called &lt;code&gt;x&lt;/code&gt;) and add the range of the parameter object. Using the formula in the earth package, we might use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;get_initial_mars_terms &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(object, x) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  upper_bound &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;min&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;200&lt;/span&gt;, &lt;span style=&#34;color:#00f&#34;&gt;max&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;ncol&lt;/span&gt;(x))) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  upper_bound &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;as.integer&lt;/span&gt;(upper_bound)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  bounds &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;range_get&lt;/span&gt;(object)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  bounds&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;upper &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; upper_bound
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;range_set&lt;/span&gt;(object, bounds)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Use the mtcars are the finalize the upper bound: &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;num_initial_terms&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;get_initial_mars_terms&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; mtcars[, &lt;span style=&#34;color:#666&#34;&gt;-1&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # Initial MARS Terms (quantitative)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Range: [1, 21]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once we add this function to the object, the general &lt;code&gt;finalize()&lt;/code&gt; method can be used:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;num_initial_terms &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(range &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1L&lt;/span&gt;, &lt;span style=&#34;color:#00f&#34;&gt;unknown&lt;/span&gt;()), trans &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;new_quant_param&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;integer&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    range &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; range,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    inclusive &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    trans &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; trans,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    label &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(num_initial_terms &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;# Initial MARS Terms&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    finalize &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; get_initial_mars_terms
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;num_initial_terms&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;finalize&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; mtcars[, &lt;span style=&#34;color:#666&#34;&gt;-1&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # Initial MARS Terms (quantitative)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Range: [1, 21]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;qualitative-parameters&#34;&gt;Qualitative parameters&lt;/h2&gt;
&lt;p&gt;Now let&amp;rsquo;s look at an example of a qualitative parameter. If a model includes a data aggregation step, we want to allow users to tune how our parameters are aggregated.  For example, in embedding methods, possible values might be &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;mean&lt;/code&gt;, &lt;code&gt;sum&lt;/code&gt;, or to not aggregate at all (&amp;ldquo;none&amp;rdquo;). Since these cannot be put on a numeric scale, they are possible values of a qualitative parameter. We&amp;rsquo;ll take &amp;ldquo;character&amp;rdquo; input (not &amp;ldquo;logical&amp;rdquo;), and we must specify the allowed values. By default we won&amp;rsquo;t aggregate.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aggregation &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(values &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;min&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;max&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;mean&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;sum&amp;#34;&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;new_qual_param&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;character&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    values &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; values,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# By default, the first value is selected as default. We&amp;#39;ll specify that to&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# make it clear.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    default &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    label &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(aggregation &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Aggregation Method&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Within the dials package, the convention is to have the values contained in a separate vector whose name starts with &lt;code&gt;values_&lt;/code&gt;. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;values_aggregation &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;min&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;max&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;mean&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;sum&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aggregation &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(values &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; values_aggregation) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;new_qual_param&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;character&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    values &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; values,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# By default, the first value is selected as default. We&amp;#39;ll specify that to&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# make it clear.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    default &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    label &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(aggregation &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Aggregation Method&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This step may not make sense if you are using the function in a script and not keeping it within a package.&lt;/p&gt;
&lt;p&gt;We can use our &lt;code&gt;aggregation&lt;/code&gt; parameters with dials functions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;aggregation&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Aggregation Method  (qualitative)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5 possible value include:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &amp;#39;none&amp;#39;, &amp;#39;min&amp;#39;, &amp;#39;max&amp;#39;, &amp;#39;mean&amp;#39; and &amp;#39;sum&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;aggregation&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;value_sample&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;min&amp;#34;  &amp;#34;sum&amp;#34;  &amp;#34;mean&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;session-information&#34;&gt;Session information&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#&amp;gt; ─ Session info ─────────────────────────────────────────────────────
#&amp;gt;  setting  value
#&amp;gt;  version  R version 4.1.2 (2021-11-01)
#&amp;gt;  os       macOS Monterey 12.3
#&amp;gt;  system   aarch64, darwin20
#&amp;gt;  ui       X11
#&amp;gt;  language (EN)
#&amp;gt;  collate  en_GB.UTF-8
#&amp;gt;  ctype    en_GB.UTF-8
#&amp;gt;  tz       Europe/London
#&amp;gt;  date     2022-04-11
#&amp;gt;  pandoc   2.14.0.3 @ /Applications/RStudio.app/Contents/MacOS/pandoc/ (via rmarkdown)
#&amp;gt; 
#&amp;gt; ─ Packages ─────────────────────────────────────────────────────────
#&amp;gt;  package    * version date (UTC) lib source
#&amp;gt;  broom      * 0.7.12  2022-01-28 [1] CRAN (R 4.1.1)
#&amp;gt;  dials      * 0.1.1   2022-04-06 [1] CRAN (R 4.1.2)
#&amp;gt;  dplyr      * 1.0.8   2022-02-08 [1] CRAN (R 4.1.2)
#&amp;gt;  ggplot2    * 3.3.5   2021-06-25 [1] CRAN (R 4.1.1)
#&amp;gt;  infer      * 1.0.0   2021-08-13 [1] CRAN (R 4.1.1)
#&amp;gt;  parsnip    * 0.2.1   2022-03-17 [1] CRAN (R 4.1.1)
#&amp;gt;  purrr      * 0.3.4   2020-04-17 [1] CRAN (R 4.1.0)
#&amp;gt;  recipes    * 0.2.0   2022-02-18 [1] CRAN (R 4.1.1)
#&amp;gt;  rlang        1.0.2   2022-03-04 [1] CRAN (R 4.1.1)
#&amp;gt;  rsample    * 0.1.1   2021-11-08 [1] CRAN (R 4.1.2)
#&amp;gt;  scales     * 1.1.1   2020-05-11 [1] CRAN (R 4.1.2)
#&amp;gt;  tibble     * 3.1.6   2021-11-07 [1] CRAN (R 4.1.1)
#&amp;gt;  tidymodels * 0.2.0   2022-03-19 [1] CRAN (R 4.1.1)
#&amp;gt;  tune       * 0.2.0   2022-03-19 [1] CRAN (R 4.1.2)
#&amp;gt;  workflows  * 0.2.6   2022-03-18 [1] CRAN (R 4.1.2)
#&amp;gt;  yardstick  * 0.0.9   2021-11-22 [1] CRAN (R 4.1.1)
#&amp;gt; 
#&amp;gt;  [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library
#&amp;gt; 
#&amp;gt; ────────────────────────────────────────────────────────────────────
&lt;/code&gt;&lt;/pre&gt;</description>
  </item>
  
<item>
  <title>Hypothesis testing using resampling and tidy data</title>
  <link>https://www.tidymodels.org/learn/statistics/infer/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/learn/statistics/infer/</guid>
  <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This article only requires the tidymodels package.&lt;/p&gt;
&lt;p&gt;The tidymodels package &lt;a href=&#34;https://infer.tidymodels.org/&#34;&gt;infer&lt;/a&gt; implements an expressive grammar to perform statistical inference that coheres with the &lt;code&gt;tidyverse&lt;/code&gt; design framework. Rather than providing methods for specific statistical tests, this package consolidates the principles that are shared among common hypothesis tests into a set of 4 main verbs (functions), supplemented with many utilities to visualize and extract information from their outputs.&lt;/p&gt;
&lt;p&gt;Regardless of which hypothesis test we&amp;rsquo;re using, we&amp;rsquo;re still asking the same kind of question:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Is the effect or difference in our observed data real, or due to chance?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To answer this question, we start by assuming that the observed data came from some world where &amp;ldquo;nothing is going on&amp;rdquo; (i.e. the observed effect was simply due to random chance), and call this assumption our &lt;strong&gt;null hypothesis&lt;/strong&gt;. (In reality, we might not believe in the null hypothesis at all; the null hypothesis is in opposition to the &lt;strong&gt;alternate hypothesis&lt;/strong&gt;, which supposes that the effect present in the observed data is actually due to the fact that &amp;ldquo;something is going on.&amp;rdquo;) We then calculate a &lt;strong&gt;test statistic&lt;/strong&gt; from our data that describes the observed effect. We can use this test statistic to calculate a &lt;strong&gt;p-value&lt;/strong&gt;, giving the probability that our observed data could come about if the null hypothesis was true. If this probability is below some pre-defined &lt;strong&gt;significance level&lt;/strong&gt; &lt;code&gt;alpha&lt;/code&gt;, then we can reject our null hypothesis.&lt;/p&gt;
&lt;p&gt;If you are new to hypothesis testing, take a look at&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://moderndive.com/9-hypothesis-testing.html#understanding-ht&#34;&gt;Section 9.2 of &lt;em&gt;Statistical Inference via Data Science&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The American Statistical Association&amp;rsquo;s recent &lt;a href=&#34;https://doi.org/10.1080/00031305.2016.1154108&#34;&gt;statement on p-values&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The workflow of this package is designed around these ideas. Starting from some data set,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;specify()&lt;/code&gt; allows you to specify the variable, or relationship between variables, that you&amp;rsquo;re interested in,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hypothesize()&lt;/code&gt; allows you to declare the null hypothesis,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;generate()&lt;/code&gt; allows you to generate data reflecting the null hypothesis, and&lt;/li&gt;
&lt;li&gt;&lt;code&gt;calculate()&lt;/code&gt; allows you to calculate a distribution of statistics from the generated data to form the null distribution.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Throughout this vignette, we make use of &lt;code&gt;gss&lt;/code&gt;, a data set available in infer containing a sample of 500 observations of 11 variables from the &lt;em&gt;General Social Survey&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(tidymodels) &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Includes the infer package&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# load in the data set&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;data&lt;/span&gt;(gss)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# take a look at its structure&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dplyr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;glimpse&lt;/span&gt;(gss)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Rows: 500&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Columns: 11&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ year    &amp;lt;dbl&amp;gt; 2014, 1994, 1998, 1996, 1994, 1996, 1990, 2016, 2000, 1998, 20…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ age     &amp;lt;dbl&amp;gt; 36, 34, 24, 42, 31, 32, 48, 36, 30, 33, 21, 30, 38, 49, 25, 56…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ sex     &amp;lt;fct&amp;gt; male, female, male, male, male, female, female, female, female…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ college &amp;lt;fct&amp;gt; degree, no degree, degree, no degree, degree, no degree, no de…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ partyid &amp;lt;fct&amp;gt; ind, rep, ind, ind, rep, rep, dem, ind, rep, dem, dem, ind, de…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ hompop  &amp;lt;dbl&amp;gt; 3, 4, 1, 4, 2, 4, 2, 1, 5, 2, 4, 3, 4, 4, 2, 2, 3, 2, 1, 2, 5,…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ hours   &amp;lt;dbl&amp;gt; 50, 31, 40, 40, 40, 53, 32, 20, 40, 40, 23, 52, 38, 72, 48, 40…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ income  &amp;lt;ord&amp;gt; $25000 or more, $20000 - 24999, $25000 or more, $25000 or more…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ class   &amp;lt;fct&amp;gt; middle class, working class, working class, working class, mid…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ finrela &amp;lt;fct&amp;gt; below average, below average, below average, above average, ab…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ weight  &amp;lt;dbl&amp;gt; 0.896, 1.083, 0.550, 1.086, 1.083, 1.086, 1.063, 0.478, 1.099,…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Each row is an individual survey response, containing some basic demographic information on the respondent as well as some additional variables. See &lt;code&gt;?gss&lt;/code&gt; for more information on the variables included and their source. Note that this data (and our examples on it) are for demonstration purposes only, and will not necessarily provide accurate estimates unless weighted properly. For these examples, let&amp;rsquo;s suppose that this data set is a representative sample of a population we want to learn about: American adults.&lt;/p&gt;
&lt;h2 id=&#34;specify-variables&#34;&gt;Specify variables&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;specify()&lt;/code&gt; function can be used to specify which of the variables in the data set you&amp;rsquo;re interested in. If you&amp;rsquo;re only interested in, say, the &lt;code&gt;age&lt;/code&gt; of the respondents, you might write:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gss &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;specify&lt;/span&gt;(response &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; age)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Response: age (numeric)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 500 × 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;      age&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1    36&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2    34&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3    24&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4    42&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5    31&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6    32&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7    48&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8    36&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9    30&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10    33&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 490 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On the front end, the output of &lt;code&gt;specify()&lt;/code&gt; just looks like it selects off the columns in the dataframe that you&amp;rsquo;ve specified. What do we see if we check the class of this object, though?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gss &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;specify&lt;/span&gt;(response &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; age) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;class&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;infer&amp;#34;      &amp;#34;tbl_df&amp;#34;     &amp;#34;tbl&amp;#34;        &amp;#34;data.frame&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can see that the infer class has been appended on top of the dataframe classes; this new class stores some extra metadata.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re interested in two variables (&lt;code&gt;age&lt;/code&gt; and &lt;code&gt;partyid&lt;/code&gt;, for example) you can &lt;code&gt;specify()&lt;/code&gt; their relationship in one of two (equivalent) ways:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# as a formula&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gss &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;specify&lt;/span&gt;(age &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; partyid)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Response: age (numeric)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Explanatory: partyid (factor)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 500 × 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;      age partyid&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1    36 ind    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2    34 rep    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3    24 ind    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4    42 ind    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5    31 rep    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6    32 rep    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7    48 dem    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8    36 ind    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9    30 rep    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10    33 dem    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 490 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# with the named arguments&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gss &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;specify&lt;/span&gt;(response &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; age, explanatory &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; partyid)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Response: age (numeric)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Explanatory: partyid (factor)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 500 × 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;      age partyid&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1    36 ind    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2    34 rep    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3    24 ind    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4    42 ind    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5    31 rep    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6    32 rep    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7    48 dem    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8    36 ind    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9    30 rep    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10    33 dem    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 490 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you&amp;rsquo;re doing inference on one proportion or a difference in proportions, you will need to use the &lt;code&gt;success&lt;/code&gt; argument to specify which level of your &lt;code&gt;response&lt;/code&gt; variable is a success. For instance, if you&amp;rsquo;re interested in the proportion of the population with a college degree, you might use the following code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# specifying for inference on proportions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gss &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;specify&lt;/span&gt;(response &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; college, success &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;degree&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Response: college (factor)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 500 × 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    college  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;fct&amp;gt;    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 degree   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 no degree&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 degree   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 no degree&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 degree   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 no degree&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 no degree&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 degree   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 degree   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 no degree&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 490 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;declare-the-hypothesis&#34;&gt;Declare the hypothesis&lt;/h2&gt;
&lt;p&gt;The next step in the infer pipeline is often to declare a null hypothesis using &lt;code&gt;hypothesize()&lt;/code&gt;. The first step is to supply one of &amp;ldquo;independence&amp;rdquo; or &amp;ldquo;point&amp;rdquo; to the &lt;code&gt;null&lt;/code&gt; argument. If your null hypothesis assumes independence between two variables, then this is all you need to supply to &lt;code&gt;hypothesize()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gss &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;specify&lt;/span&gt;(college &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; partyid, success &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;degree&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;hypothesize&lt;/span&gt;(null &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;independence&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Response: college (factor)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Explanatory: partyid (factor)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Null Hypothesis: independence&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 500 × 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    college   partyid&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;fct&amp;gt;     &amp;lt;fct&amp;gt;  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 degree    ind    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 no degree rep    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 degree    ind    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 no degree ind    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 degree    rep    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 no degree rep    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 no degree dem    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 degree    ind    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 degree    rep    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 no degree dem    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 490 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you&amp;rsquo;re doing inference on a point estimate, you will also need to provide one of &lt;code&gt;p&lt;/code&gt; (the true proportion of successes, between 0 and 1), &lt;code&gt;mu&lt;/code&gt; (the true mean), &lt;code&gt;med&lt;/code&gt; (the true median), or &lt;code&gt;sigma&lt;/code&gt; (the true standard deviation). For instance, if the null hypothesis is that the mean number of hours worked per week in our population is 40, we would write:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gss &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;specify&lt;/span&gt;(response &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; hours) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;hypothesize&lt;/span&gt;(null &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;point&amp;#34;&lt;/span&gt;, mu &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;40&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Response: hours (numeric)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Null Hypothesis: point&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 500 × 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    hours&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1    50&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2    31&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3    40&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4    40&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5    40&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6    53&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7    32&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8    20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9    40&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10    40&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 490 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Again, from the front-end, the dataframe outputted from &lt;code&gt;hypothesize()&lt;/code&gt; looks almost exactly the same as it did when it came out of &lt;code&gt;specify()&lt;/code&gt;, but infer now &amp;ldquo;knows&amp;rdquo; your null hypothesis.&lt;/p&gt;
&lt;h2 id=&#34;generate-the-distribution&#34;&gt;Generate the distribution&lt;/h2&gt;
&lt;p&gt;Once we&amp;rsquo;ve asserted our null hypothesis using &lt;code&gt;hypothesize()&lt;/code&gt;, we can construct a null distribution based on this hypothesis. We can do this using one of several methods, supplied in the &lt;code&gt;type&lt;/code&gt; argument:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bootstrap&lt;/code&gt;: A bootstrap sample will be drawn for each replicate, where a sample of size equal to the input sample size is drawn (with replacement) from the input sample data.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;permute&lt;/code&gt;: For each replicate, each input value will be randomly reassigned (without replacement) to a new output value in the sample.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;simulate&lt;/code&gt;: A value will be sampled from a theoretical distribution with parameters specified in &lt;code&gt;hypothesize()&lt;/code&gt; for each replicate. (This option is currently only applicable for testing point estimates.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Continuing on with our example above, about the average number of hours worked a week, we might write:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gss &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;specify&lt;/span&gt;(response &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; hours) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;hypothesize&lt;/span&gt;(null &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;point&amp;#34;&lt;/span&gt;, mu &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;40&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;generate&lt;/span&gt;(reps &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5000&lt;/span&gt;, type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;bootstrap&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Response: hours (numeric)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Null Hypothesis: point&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 2,500,000 × 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # Groups:   replicate [5,000]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    replicate hours&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;        &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1         1  46.6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2         1  38.6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3         1  38.6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4         1  38.6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5         1  68.6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6         1  38.6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7         1  55.6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8         1  37.6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9         1  43.6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10         1  58.6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 2,499,990 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above example, we take 5000 bootstrap samples to form our null distribution.&lt;/p&gt;
&lt;p&gt;To generate a null distribution for the independence of two variables, we could also randomly reshuffle the pairings of explanatory and response variables to break any existing association. For instance, to generate 5000 replicates that can be used to create a null distribution under the assumption that political party affiliation is not affected by age:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gss &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;specify&lt;/span&gt;(partyid &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; age) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;hypothesize&lt;/span&gt;(null &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;independence&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;generate&lt;/span&gt;(reps &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5000&lt;/span&gt;, type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;permute&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Response: partyid (factor)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Explanatory: age (numeric)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Null Hypothesis: independence&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 2,500,000 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # Groups:   replicate [5,000]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    partyid   age replicate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;fct&amp;gt;   &amp;lt;dbl&amp;gt;     &amp;lt;int&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 dem        36         1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 ind        34         1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 ind        24         1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 other      42         1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 rep        31         1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 dem        32         1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 rep        48         1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 rep        36         1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 dem        30         1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 other      33         1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 2,499,990 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;calculate-statistics&#34;&gt;Calculate statistics&lt;/h2&gt;
&lt;p&gt;Depending on whether you&amp;rsquo;re carrying out computation-based inference or theory-based inference, you will either supply &lt;code&gt;calculate()&lt;/code&gt; with the output of &lt;code&gt;generate()&lt;/code&gt; or &lt;code&gt;hypothesize()&lt;/code&gt;, respectively. The function, for one, takes in a &lt;code&gt;stat&lt;/code&gt; argument, which is currently one of &lt;code&gt;&amp;quot;mean&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;median&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;sum&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;sd&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;prop&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;count&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;diff in means&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;diff in medians&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;diff in props&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;Chisq&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;F&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;t&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;z&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;slope&amp;quot;&lt;/code&gt;, or &lt;code&gt;&amp;quot;correlation&amp;quot;&lt;/code&gt;. For example, continuing our example above to calculate the null distribution of mean hours worked per week:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gss &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;specify&lt;/span&gt;(response &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; hours) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;hypothesize&lt;/span&gt;(null &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;point&amp;#34;&lt;/span&gt;, mu &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;40&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;generate&lt;/span&gt;(reps &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5000&lt;/span&gt;, type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;bootstrap&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;calculate&lt;/span&gt;(stat &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;mean&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Response: hours (numeric)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Null Hypothesis: point&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 5,000 × 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    replicate  stat&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;        &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1         1  39.3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2         2  40.3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3         3  40.2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4         4  40.1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5         5  40.2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6         6  40.4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7         7  39.8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8         8  40.3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9         9  38.7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10        10  39.7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 4,990 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The output of &lt;code&gt;calculate()&lt;/code&gt; here shows us the sample statistic (in this case, the mean) for each of our 1000 replicates. If you&amp;rsquo;re carrying out inference on differences in means, medians, or proportions, or &lt;code&gt;&amp;quot;t&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;z&amp;quot;&lt;/code&gt; statistics, you will need to supply an &lt;code&gt;order&lt;/code&gt; argument, giving the order in which the explanatory variables should be subtracted. For instance, to find the difference in mean age of those that have a college degree and those that don&amp;rsquo;t, we might write:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gss &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;specify&lt;/span&gt;(age &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; college) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;hypothesize&lt;/span&gt;(null &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;independence&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;generate&lt;/span&gt;(reps &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5000&lt;/span&gt;, type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;permute&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;calculate&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;diff in means&amp;#34;&lt;/span&gt;, order &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;degree&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;no degree&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Response: age (numeric)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Explanatory: college (factor)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Null Hypothesis: independence&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 5,000 × 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    replicate    stat&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;        &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1         1  0.174 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2         2  0.0239&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3         3  0.932 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4         4 -0.461 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5         5 -2.30  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6         6  0.200 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7         7 -1.02  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8         8 -0.884 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9         9 -0.999 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10        10 -0.523 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 4,990 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;other-utilities&#34;&gt;Other utilities&lt;/h2&gt;
&lt;p&gt;The infer package also offers several utilities to extract meaning out of summary statistics and null distributions; the package provides functions to visualize where a statistic is relative to a distribution (with &lt;code&gt;visualize()&lt;/code&gt;), calculate p-values (with &lt;code&gt;get_p_value()&lt;/code&gt;), and calculate confidence intervals (with &lt;code&gt;get_confidence_interval()&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;To illustrate, we&amp;rsquo;ll go back to the example of determining whether the mean number of hours worked per week is 40 hours.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# find the point estimate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;point_estimate &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; gss &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;specify&lt;/span&gt;(response &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; hours) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;calculate&lt;/span&gt;(stat &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;mean&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# generate a null distribution&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;null_dist &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; gss &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;specify&lt;/span&gt;(response &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; hours) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;hypothesize&lt;/span&gt;(null &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;point&amp;#34;&lt;/span&gt;, mu &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;40&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;generate&lt;/span&gt;(reps &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5000&lt;/span&gt;, type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;bootstrap&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;calculate&lt;/span&gt;(stat &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;mean&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(Notice the warning: &lt;code&gt;Removed 1244 rows containing missing values.&lt;/code&gt; This would be worth noting if you were actually carrying out this hypothesis test.)&lt;/p&gt;
&lt;p&gt;Our point estimate 41.382 seems &lt;em&gt;pretty&lt;/em&gt; close to 40, but a little bit different. We might wonder if this difference is just due to random chance, or if the mean number of hours worked per week in the population really isn&amp;rsquo;t 40.&lt;/p&gt;
&lt;p&gt;We could initially just visualize the null distribution.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;null_dist &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;visualize&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/visualize-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;Where does our sample&amp;rsquo;s observed statistic lie on this distribution? We can use the &lt;code&gt;obs_stat&lt;/code&gt; argument to specify this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;null_dist &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;visualize&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;shade_p_value&lt;/span&gt;(obs_stat &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; point_estimate, direction &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;two_sided&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/visualize2-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;Notice that infer has also shaded the regions of the null distribution that are as (or more) extreme than our observed statistic. (Also, note that we now use the &lt;code&gt;+&lt;/code&gt; operator to apply the &lt;code&gt;shade_p_value()&lt;/code&gt; function. This is because &lt;code&gt;visualize()&lt;/code&gt; outputs a plot object from ggplot2 instead of a dataframe, and the &lt;code&gt;+&lt;/code&gt; operator is needed to add the p-value layer to the plot object.) The red bar looks like it&amp;rsquo;s slightly far out on the right tail of the null distribution, so observing a sample mean of 41.382 hours would be somewhat unlikely if the mean was actually 40 hours. How unlikely, though?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# get a two-tailed p-value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p_value &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; null_dist &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;get_p_value&lt;/span&gt;(obs_stat &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; point_estimate, direction &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;two_sided&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p_value
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 × 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   p_value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1  0.0384&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It looks like the p-value is 0.038, which is pretty small&amp;mdash;if the true mean number of hours worked per week was actually 40, the probability of our sample mean being this far (1.382 hours) from 40 would be 0.038. This may or may not be statistically significantly different, depending on the significance level &lt;code&gt;alpha&lt;/code&gt; you decided on &lt;em&gt;before&lt;/em&gt; you ran this analysis. If you had set &lt;code&gt;alpha = .05&lt;/code&gt;, then this difference would be statistically significant, but if you had set &lt;code&gt;alpha = .01&lt;/code&gt;, then it would not be.&lt;/p&gt;
&lt;p&gt;To get a confidence interval around our estimate, we can write:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# start with the null distribution&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;null_dist &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# calculate the confidence interval around the point estimate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;get_confidence_interval&lt;/span&gt;(point_estimate &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; point_estimate,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# at the 95% confidence level&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          level &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;.95&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# using the standard error&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;se&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 × 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   lower_ci upper_ci&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;      &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     40.1     42.7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see, 40 hours per week is not contained in this interval, which aligns with our previous conclusion that this finding is significant at the confidence level &lt;code&gt;alpha = .05&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;theoretical-methods&#34;&gt;Theoretical methods&lt;/h2&gt;
&lt;p&gt;The infer package also provides functionality to use theoretical methods for &lt;code&gt;&amp;quot;Chisq&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;F&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;t&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;z&amp;quot;&lt;/code&gt; distributions.&lt;/p&gt;
&lt;p&gt;Generally, to find a null distribution using theory-based methods, use the same code that you would use to find the observed statistic elsewhere, replacing calls to &lt;code&gt;calculate()&lt;/code&gt; with &lt;code&gt;assume()&lt;/code&gt;. For example, to calculate the observed &lt;code&gt;&amp;quot;t&amp;quot;&lt;/code&gt; statistic (a standardized mean):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# calculate an observed t statistic&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;obs_t &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; gss &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;specify&lt;/span&gt;(response &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; hours) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;hypothesize&lt;/span&gt;(null &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;point&amp;#34;&lt;/span&gt;, mu &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;40&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;calculate&lt;/span&gt;(stat &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;t&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, to define a theoretical &lt;code&gt;&amp;quot;t&amp;quot;&lt;/code&gt; distribution, we could write:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# switch out `calculate()` with `assume()` to define a distribution&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;t_dist &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; gss &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;specify&lt;/span&gt;(response &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; hours) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;assume&lt;/span&gt;(distribution &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;t&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From here, the theoretical distribution interfaces in the same way that simulation-based null distributions do. For example, to interface with p-values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# visualize the theoretical null distribution&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;visualize&lt;/span&gt;(t_dist) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;shade_p_value&lt;/span&gt;(obs_stat &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; obs_t, direction &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;greater&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/viz_t_dist-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# more exactly, calculate the p-value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;get_p_value&lt;/span&gt;(t_dist, obs_t, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;greater&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 × 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   p_value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1  0.0188&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Confidence intervals lie on the scale of the data rather than on the standardized scale of the theoretical distribution, so be sure to use the unstandardized observed statistic when working with confidence intervals.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# calculate the point estimate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;obs_mean &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; gss &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;specify&lt;/span&gt;(response &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; hours) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;calculate&lt;/span&gt;(stat &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;mean&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# find the theory-based confidence interval&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;theor_ci &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;get_confidence_interval&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; t_dist,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    level &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;.95&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    point_estimate &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; obs_mean
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;theor_ci
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 × 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   lower_ci upper_ci&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;      &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     40.1     42.7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When visualized, the &lt;code&gt;&amp;quot;t&amp;quot;&lt;/code&gt; distribution will be recentered and rescaled to align with the scale of the observed data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# visualize the theoretical sampling distribution&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;visualize&lt;/span&gt;(t_dist) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;shade_confidence_interval&lt;/span&gt;(theor_ci)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/viz_t_ci-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;h2 id=&#34;multiple-regression&#34;&gt;Multiple regression&lt;/h2&gt;
&lt;p&gt;To accommodate randomization-based inference with multiple explanatory variables, the package implements an alternative workflow based on model fitting. Rather than &lt;code&gt;calculate()&lt;/code&gt;ing statistics from resampled data, this side of the package allows you to &lt;code&gt;fit()&lt;/code&gt; linear models on data resampled according to the null hypothesis, supplying model coefficients for each explanatory variable. For the most part, you can just switch out &lt;code&gt;calculate()&lt;/code&gt; for &lt;code&gt;fit()&lt;/code&gt; in your &lt;code&gt;calculate()&lt;/code&gt;-based workflows.&lt;/p&gt;
&lt;p&gt;As an example, suppose that we want to fit &lt;code&gt;hours&lt;/code&gt; worked per week using the respondent &lt;code&gt;age&lt;/code&gt; and &lt;code&gt;college&lt;/code&gt; completion status. We could first begin by fitting a linear model to the observed data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;observed_fit &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; gss &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;specify&lt;/span&gt;(hours &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; age &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; college) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;fit&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, to generate null distributions for each of these terms, we can fit 1000 models to resamples of the &lt;code&gt;gss&lt;/code&gt; dataset, where the response &lt;code&gt;hours&lt;/code&gt; is permuted in each. Note that this code is the same as the above except for the addition of the &lt;code&gt;hypothesize()&lt;/code&gt; and &lt;code&gt;generate()&lt;/code&gt; step.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;null_fits &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; gss &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;specify&lt;/span&gt;(hours &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; age &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; college) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;hypothesize&lt;/span&gt;(null &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;independence&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;generate&lt;/span&gt;(reps &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1000&lt;/span&gt;, type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;permute&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;fit&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;null_fits
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 3,000 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # Groups:   replicate [1,000]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    replicate term          estimate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;        &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;            &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1         1 intercept      41.6   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2         1 age            -0.0122&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3         1 collegedegree   0.880 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4         2 intercept      37.6   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5         2 age             0.0976&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6         2 collegedegree  -0.501 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7         3 intercept      41.3   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8         3 age             0.0187&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9         3 collegedegree  -2.00  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10         4 intercept      39.3   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 2,990 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To permute variables other than the response variable, the &lt;code&gt;variables&lt;/code&gt; argument to &lt;code&gt;generate()&lt;/code&gt; allows you to choose columns from the data to permute. Note that any derived effects that depend on these columns (e.g., interaction effects) will also be affected.&lt;/p&gt;
&lt;p&gt;Beyond this point, observed fits and distributions from null fits interface exactly like analogous outputs from &lt;code&gt;calculate()&lt;/code&gt;. For instance, we can use the following code to calculate a 95% confidence interval from these objects.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;get_confidence_interval&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  null_fits, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  point_estimate &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; observed_fit, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  level &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;.95&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 3 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   term          lower_ci upper_ci&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;            &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 age            -0.0932   0.0982&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 collegedegree  -2.59     2.65  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 intercept      37.3     45.4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or, we can shade p-values for each of these observed regression coefficients from the observed data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;visualize&lt;/span&gt;(null_fits) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;shade_p_value&lt;/span&gt;(observed_fit, direction &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;both&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/viz_null_fits-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;That&amp;rsquo;s it! This vignette covers most all of the key functionality of infer. See &lt;code&gt;help(package = &amp;quot;infer&amp;quot;)&lt;/code&gt; for a full list of functions and vignettes.&lt;/p&gt;
&lt;h2 id=&#34;session-information&#34;&gt;Session information&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#&amp;gt; ─ Session info ─────────────────────────────────────────────────────
#&amp;gt;  setting  value
#&amp;gt;  version  R version 4.2.0 (2022-04-22)
#&amp;gt;  os       macOS Monterey 12.3.1
#&amp;gt;  system   aarch64, darwin20
#&amp;gt;  ui       X11
#&amp;gt;  language (EN)
#&amp;gt;  collate  en_US.UTF-8
#&amp;gt;  ctype    en_US.UTF-8
#&amp;gt;  tz       America/New_York
#&amp;gt;  date     2022-05-23
#&amp;gt;  pandoc   2.17.1.1 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/ (via rmarkdown)
#&amp;gt; 
#&amp;gt; ─ Packages ─────────────────────────────────────────────────────────
#&amp;gt;  package    * version date (UTC) lib source
#&amp;gt;  broom      * 0.8.0   2022-04-13 [1] CRAN (R 4.2.0)
#&amp;gt;  dials      * 0.1.1   2022-04-06 [1] CRAN (R 4.2.0)
#&amp;gt;  dplyr      * 1.0.9   2022-04-28 [1] CRAN (R 4.2.0)
#&amp;gt;  ggplot2    * 3.3.6   2022-05-03 [1] CRAN (R 4.2.0)
#&amp;gt;  infer      * 1.0.0   2021-08-13 [1] CRAN (R 4.2.0)
#&amp;gt;  parsnip    * 0.2.1   2022-03-17 [1] CRAN (R 4.2.0)
#&amp;gt;  purrr      * 0.3.4   2020-04-17 [1] CRAN (R 4.2.0)
#&amp;gt;  recipes    * 0.2.0   2022-02-18 [1] CRAN (R 4.2.0)
#&amp;gt;  rlang        1.0.2   2022-03-04 [1] CRAN (R 4.2.0)
#&amp;gt;  rsample    * 0.1.1   2021-11-08 [1] CRAN (R 4.2.0)
#&amp;gt;  tibble     * 3.1.7   2022-05-03 [1] CRAN (R 4.2.0)
#&amp;gt;  tidymodels * 0.2.0   2022-03-19 [1] CRAN (R 4.2.0)
#&amp;gt;  tune       * 0.2.0   2022-03-19 [1] CRAN (R 4.2.0)
#&amp;gt;  workflows  * 0.2.6   2022-03-18 [1] CRAN (R 4.2.0)
#&amp;gt;  yardstick  * 0.0.9   2021-11-22 [1] CRAN (R 4.2.0)
#&amp;gt; 
#&amp;gt;  [1] /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library
#&amp;gt; 
#&amp;gt; ────────────────────────────────────────────────────────────────────
&lt;/code&gt;&lt;/pre&gt;</description>
  </item>
  
<item>
  <title>Modeling time series with tidy resampling</title>
  <link>https://www.tidymodels.org/learn/models/time-series/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/learn/models/time-series/</guid>
  <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;To use the code in this article, you will need to install the following packages: forecast, sweep, tidymodels, timetk, and zoo.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;&lt;a href=&#34;https://www.business-science.io/code-tools/2017/10/25/demo_week_sweep.html&#34;&gt;Demo Week: Tidy Forecasting with sweep&lt;/a&gt;&amp;rdquo; is an excellent article that uses tidy methods with time series. This article uses their analysis with rsample to find performance estimates for future observations using &lt;a href=&#34;https://robjhyndman.com/hyndsight/crossvalidation/&#34;&gt;rolling forecast origin resampling&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;example-data&#34;&gt;Example data&lt;/h2&gt;
&lt;p&gt;The data for this article are sales of alcoholic beverages originally from &lt;a href=&#34;https://fred.stlouisfed.org/series/S4248SM144NCEN&#34;&gt;the Federal Reserve Bank of St. Louis website&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(tidymodels)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(modeldata)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;data&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;drinks&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;glimpse&lt;/span&gt;(drinks)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Rows: 309&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Columns: 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ date           &amp;lt;date&amp;gt; 1992-01-01, 1992-02-01, 1992-03-01, 1992-04-01, 1992-0…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ S4248SM144NCEN &amp;lt;dbl&amp;gt; 3459, 3458, 4002, 4564, 4221, 4529, 4466, 4137, 4126, 4…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Each row represents one month of sales (in millions of US dollars).&lt;/p&gt;
&lt;h2 id=&#34;time-series-resampling&#34;&gt;Time series resampling&lt;/h2&gt;
&lt;p&gt;Suppose that we need predictions for one year ahead and our model should use the most recent data from the last 20 years. To set up this resampling scheme:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;roll_rs &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;rolling_origin&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  drinks, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  initial &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;20&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  assess &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cumulative &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;nrow&lt;/span&gt;(roll_rs)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 58&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;roll_rs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # Rolling origin forecast resampling &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 58 × 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    splits           id     &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;list&amp;gt;           &amp;lt;chr&amp;gt;  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 &amp;lt;split [240/12]&amp;gt; Slice01&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 &amp;lt;split [240/12]&amp;gt; Slice02&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 &amp;lt;split [240/12]&amp;gt; Slice03&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 &amp;lt;split [240/12]&amp;gt; Slice04&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 &amp;lt;split [240/12]&amp;gt; Slice05&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 &amp;lt;split [240/12]&amp;gt; Slice06&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 &amp;lt;split [240/12]&amp;gt; Slice07&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 &amp;lt;split [240/12]&amp;gt; Slice08&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 &amp;lt;split [240/12]&amp;gt; Slice09&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 &amp;lt;split [240/12]&amp;gt; Slice10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 48 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Each &lt;code&gt;split&lt;/code&gt; element contains the information about that resample:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;roll_rs&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;splits[[1]]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &amp;lt;Analysis/Assess/Total&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &amp;lt;240/12/309&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For plotting, let&amp;rsquo;s index each split by the first day of the assessment set:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;get_date &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(x) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;min&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;assessment&lt;/span&gt;(x)&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;date)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;start_date &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;(roll_rs&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;splits, get_date)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;roll_rs&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;start_date &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;do.call&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;, start_date)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;head&lt;/span&gt;(roll_rs&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;start_date)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;2012-01-01&amp;#34; &amp;#34;2012-02-01&amp;#34; &amp;#34;2012-03-01&amp;#34; &amp;#34;2012-04-01&amp;#34; &amp;#34;2012-05-01&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [6] &amp;#34;2012-06-01&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This resampling scheme has 58 splits of the data so that there will be 58 ARIMA models that are fit. To create the models, we use the &lt;code&gt;auto.arima()&lt;/code&gt; function from the forecast package. The rsample functions &lt;code&gt;analysis()&lt;/code&gt; and &lt;code&gt;assessment()&lt;/code&gt; return a data frame, so another step converts the data to a &lt;code&gt;ts&lt;/code&gt; object called &lt;code&gt;mod_dat&lt;/code&gt; using a function in the timetk package.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(forecast)  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# for `auto.arima`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(timetk)    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# for `tk_ts`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(zoo)       &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# for `as.yearmon`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fit_model &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(x, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# suggested by Matt Dancho:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  x &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;analysis&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Since the first day changes over resamples, adjust it&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# based on the first date value in the data frame &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;tk_ts&lt;/span&gt;(start &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; .$date[[1]] &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;as.yearmon&lt;/span&gt;(), 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          frequency &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          silent &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;auto.arima&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Save each model in a new column:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;roll_rs&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;arima &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;(roll_rs&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;splits, fit_model)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# For example:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;roll_rs&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;arima[[1]]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Series: . &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ARIMA(4,1,1)(0,1,2)[12] &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Coefficients:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;          ar1     ar2    ar3     ar4     ma1    sma1    sma2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       -0.185  -0.024  0.358  -0.152  -0.831  -0.193  -0.324&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; s.e.   0.147   0.166  0.144   0.081   0.138   0.067   0.064&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; sigma^2 = 72198:  log likelihood = -1591&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; AIC=3198   AICc=3199   BIC=3226&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(There are some warnings produced by these regarding extra columns in the data that can be ignored.)&lt;/p&gt;
&lt;h2 id=&#34;model-performance&#34;&gt;Model performance&lt;/h2&gt;
&lt;p&gt;Using the model fits, let&amp;rsquo;s measure performance in two ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Interpolation&lt;/em&gt; error will measure how well the model fits to the data that were used to create the model. This is most likely optimistic since no holdout method is used.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Extrapolation&lt;/em&gt; or &lt;em&gt;forecast&lt;/em&gt; error evaluates the performance of the model on the data from the following year (that were not used in the model fit).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In each case, the mean absolute percent error (MAPE) is the statistic used to characterize the model fits. The interpolation error can be computed from the &lt;code&gt;Arima&lt;/code&gt; object. To make things easy, let&amp;rsquo;s use the sweep package&amp;rsquo;s &lt;code&gt;sw_glance()&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(sweep)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;roll_rs&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;interpolation &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map_dbl&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  roll_rs&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;arima,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(x) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;sw_glance&lt;/span&gt;(x)[[&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;MAPE&amp;#34;&lt;/span&gt;]]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;summary&lt;/span&gt;(roll_rs&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;interpolation)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    2.84    2.92    2.95    2.95    2.97    3.13&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For the extrapolation error, the model and split objects are required. Using these:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;get_extrap &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(split, mod) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  n &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;nrow&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;assessment&lt;/span&gt;(split))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Get assessment data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  pred_dat &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;assessment&lt;/span&gt;(split) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      pred &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;as.vector&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;forecast&lt;/span&gt;(mod, h &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; n)&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;mean),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      pct_error &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; ( S4248SM144NCEN &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; pred ) &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt; S4248SM144NCEN &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mean&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;abs&lt;/span&gt;(pred_dat&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;pct_error))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;roll_rs&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;extrapolation &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;map2_dbl&lt;/span&gt;(roll_rs&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;splits, roll_rs&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;arima, get_extrap)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;summary&lt;/span&gt;(roll_rs&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;extrapolation)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    2.37    3.23    3.63    3.65    4.11    5.45&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What do these error estimates look like over time?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;roll_rs &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(interpolation, extrapolation, start_date) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;pivot_longer&lt;/span&gt;(cols &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;matches&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ation&amp;#34;&lt;/span&gt;), names_to &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;error&amp;#34;&lt;/span&gt;, values_to &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;MAPE&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; start_date, y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; MAPE, col &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; error)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_point&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_line&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/plot-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;It is likely that the interpolation error is an underestimate to some degree, as mentioned above.&lt;/p&gt;
&lt;p&gt;It is also worth noting that &lt;code&gt;rolling_origin()&lt;/code&gt; can be used over calendar periods, rather than just over a fixed window size. This is especially useful for irregular series where a fixed window size might not make sense because of missing data points, or because of calendar features like different months having a different number of days.&lt;/p&gt;
&lt;p&gt;The example below demonstrates this idea by splitting &lt;code&gt;drinks&lt;/code&gt; into a nested set of 26 years, and rolling over years rather than months. Note that the end result accomplishes a different task than the original example; in this new case, each slice moves forward an entire year, rather than just one month.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# The idea is to nest by the period to roll over,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# which in this case is the year.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;roll_rs_annual &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; drinks &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(year &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;as.POSIXlt&lt;/span&gt;(date)&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;year &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1900&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;nest&lt;/span&gt;(data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(date, S4248SM144NCEN)) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;rolling_origin&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    initial &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;20&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    assess &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cumulative &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;analysis&lt;/span&gt;(roll_rs_annual&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;splits[[1]])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 20 × 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     year data             &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;list&amp;gt;           &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1  1992 &amp;lt;tibble [12 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2  1993 &amp;lt;tibble [12 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3  1994 &amp;lt;tibble [12 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4  1995 &amp;lt;tibble [12 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5  1996 &amp;lt;tibble [12 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6  1997 &amp;lt;tibble [12 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7  1998 &amp;lt;tibble [12 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8  1999 &amp;lt;tibble [12 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9  2000 &amp;lt;tibble [12 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10  2001 &amp;lt;tibble [12 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 11  2002 &amp;lt;tibble [12 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 12  2003 &amp;lt;tibble [12 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 13  2004 &amp;lt;tibble [12 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 14  2005 &amp;lt;tibble [12 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 15  2006 &amp;lt;tibble [12 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 16  2007 &amp;lt;tibble [12 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 17  2008 &amp;lt;tibble [12 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 18  2009 &amp;lt;tibble [12 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 19  2010 &amp;lt;tibble [12 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 20  2011 &amp;lt;tibble [12 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The workflow to access these calendar slices is to use &lt;code&gt;bind_rows()&lt;/code&gt; to join
each analysis set together.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  roll_rs_annual,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  extracted_slice &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;(splits, &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;bind_rows&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;analysis&lt;/span&gt;(.x)&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;data))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # Rolling origin forecast resampling &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 6 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   splits         id     extracted_slice   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;list&amp;gt;         &amp;lt;chr&amp;gt;  &amp;lt;list&amp;gt;            &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 &amp;lt;split [20/1]&amp;gt; Slice1 &amp;lt;tibble [240 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 &amp;lt;split [20/1]&amp;gt; Slice2 &amp;lt;tibble [240 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 &amp;lt;split [20/1]&amp;gt; Slice3 &amp;lt;tibble [240 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4 &amp;lt;split [20/1]&amp;gt; Slice4 &amp;lt;tibble [240 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5 &amp;lt;split [20/1]&amp;gt; Slice5 &amp;lt;tibble [240 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 6 &amp;lt;split [20/1]&amp;gt; Slice6 &amp;lt;tibble [240 × 2]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;session-information&#34;&gt;Session information&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#&amp;gt; ─ Session info ─────────────────────────────────────────────────────
#&amp;gt;  setting  value
#&amp;gt;  version  R version 4.1.2 (2021-11-01)
#&amp;gt;  os       macOS Monterey 12.3
#&amp;gt;  system   aarch64, darwin20
#&amp;gt;  ui       X11
#&amp;gt;  language (EN)
#&amp;gt;  collate  en_GB.UTF-8
#&amp;gt;  ctype    en_GB.UTF-8
#&amp;gt;  tz       Europe/London
#&amp;gt;  date     2022-04-11
#&amp;gt;  pandoc   2.14.0.3 @ /Applications/RStudio.app/Contents/MacOS/pandoc/ (via rmarkdown)
#&amp;gt; 
#&amp;gt; ─ Packages ─────────────────────────────────────────────────────────
#&amp;gt;  package    * version date (UTC) lib source
#&amp;gt;  broom      * 0.7.12  2022-01-28 [1] CRAN (R 4.1.1)
#&amp;gt;  dials      * 0.1.1   2022-04-06 [1] CRAN (R 4.1.2)
#&amp;gt;  dplyr      * 1.0.8   2022-02-08 [1] CRAN (R 4.1.2)
#&amp;gt;  forecast   * 8.16    2022-01-10 [1] CRAN (R 4.1.2)
#&amp;gt;  ggplot2    * 3.3.5   2021-06-25 [1] CRAN (R 4.1.1)
#&amp;gt;  infer      * 1.0.0   2021-08-13 [1] CRAN (R 4.1.1)
#&amp;gt;  parsnip    * 0.2.1   2022-03-17 [1] CRAN (R 4.1.1)
#&amp;gt;  purrr      * 0.3.4   2020-04-17 [1] CRAN (R 4.1.0)
#&amp;gt;  recipes    * 0.2.0   2022-02-18 [1] CRAN (R 4.1.1)
#&amp;gt;  rlang        1.0.2   2022-03-04 [1] CRAN (R 4.1.1)
#&amp;gt;  rsample    * 0.1.1   2021-11-08 [1] CRAN (R 4.1.2)
#&amp;gt;  sweep      * 0.2.3   2020-07-10 [1] CRAN (R 4.1.2)
#&amp;gt;  tibble     * 3.1.6   2021-11-07 [1] CRAN (R 4.1.1)
#&amp;gt;  tidymodels * 0.2.0   2022-03-19 [1] CRAN (R 4.1.1)
#&amp;gt;  timetk     * 2.8.0   2022-04-07 [1] CRAN (R 4.1.2)
#&amp;gt;  tune       * 0.2.0   2022-03-19 [1] CRAN (R 4.1.2)
#&amp;gt;  workflows  * 0.2.6   2022-03-18 [1] CRAN (R 4.1.2)
#&amp;gt;  yardstick  * 0.0.9   2021-11-22 [1] CRAN (R 4.1.1)
#&amp;gt;  zoo        * 1.8-9   2021-03-09 [1] CRAN (R 4.1.2)
#&amp;gt; 
#&amp;gt;  [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library
#&amp;gt; 
#&amp;gt; ────────────────────────────────────────────────────────────────────
&lt;/code&gt;&lt;/pre&gt;</description>
  </item>
  
<item>
  <title>Text Mining with R</title>
  <link>https://www.tidymodels.org/books/tidytext/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/books/tidytext/</guid>
  <description>&lt;p&gt;&lt;img src=&#34;cover.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;This practical book provides an introduction to text mining using tidy data principles in R, focusing on exploratory data analysis for text. Using tidy data principles can make text mining task easier and more effective; in this book, learn how to manipulate, summarize, and visualize characteristics of text using these methods and R packages from the tidy tool ecosystem.&lt;/p&gt;
&lt;p&gt;An &lt;strong&gt;HTML version&lt;/strong&gt; of this text can be found at &lt;a href=&#34;https://www.tidytextmining.com/&#34;&gt;&lt;code&gt;https://www.tidytextmining.com/&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The data sets and R code are available in the GitHub repository &lt;a href=&#34;https://github.com/dgrtwo/tidy-text-mining&#34;&gt;&lt;code&gt;https://github.com/dgrtwo/tidy-text-mining&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The physical copies are sold by &lt;a href=&#34;http://amzn.to/2tZkmxG&#34;&gt;&lt;strong&gt;Amazon&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;http://www.jdoqocy.com/click-4428796-11290546?url=http%3A%2F%2Fshop.oreilly.com%2Fproduct%2F0636920067153.do%3Fcmp%3Daf-strata-books-video-product_cj_0636920067153_%25zp&amp;amp;cjsku=0636920067153&#34;&gt;&lt;strong&gt;O’Reilly&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
  </item>
  
<item>
  <title>Tune model parameters</title>
  <link>https://www.tidymodels.org/start/tuning/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/start/tuning/</guid>
  <description>&lt;h2 id=&#34;intro&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Some model parameters cannot be learned directly from a data set during model training; these kinds of parameters are called &lt;strong&gt;hyperparameters&lt;/strong&gt;. Some examples of hyperparameters include the number of predictors that are sampled at splits in a tree-based model (we call this &lt;code&gt;mtry&lt;/code&gt; in tidymodels) or the learning rate in a boosted tree model (we call this &lt;code&gt;learn_rate&lt;/code&gt;). Instead of learning these kinds of hyperparameters during model training, we can &lt;em&gt;estimate&lt;/em&gt; the best values for these values by training many models on resampled data sets and exploring how well all these models perform. This process is called &lt;strong&gt;tuning&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;To use code in this article,  you will need to install the following packages: rpart, rpart.plot, tidymodels, and vip.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(tidymodels)  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# for the tune package, along with the rest of tidymodels&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Helper packages&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(rpart.plot)  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# for visualizing a decision tree&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(vip)         &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# for variable importance plots&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt; Alternatively, open an interactive version of this article in your browser: &lt;/p&gt;

&lt;a href=&#34;https://rstudio.cloud/project/2674862&#34;&gt;
  &lt;button class=&#34;test-drive-btn&#34;&gt;&lt;i class=&#34;fa fa-cloud&#34;&gt;&lt;/i&gt; Test Drive on RStudio Cloud&lt;/button&gt;
&lt;/a&gt;

&lt;h2 id=&#34;data&#34;&gt;The cell image data, revisited&lt;/h2&gt;
&lt;p&gt;In our previous &lt;a href=&#34;https://www.tidymodels.org/start/resampling/&#34;&gt;&lt;em&gt;Evaluate your model with resampling&lt;/em&gt;&lt;/a&gt; article, we introduced a data set of images of cells that were labeled by experts as well-segmented (&lt;code&gt;WS&lt;/code&gt;) or poorly segmented (&lt;code&gt;PS&lt;/code&gt;). We trained a &lt;a href=&#34;https://www.tidymodels.org/start/resampling/#modeling&#34;&gt;random forest model&lt;/a&gt; to predict which images are segmented well vs. poorly, so that a biologist could filter out poorly segmented cell images in their analysis. We used &lt;a href=&#34;https://www.tidymodels.org/start/resampling/#resampling&#34;&gt;resampling&lt;/a&gt; to estimate the performance of our model on this data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;data&lt;/span&gt;(cells, package &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;modeldata&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cells
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 2,019 × 58&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   case  class angle_ch_1 area_ch_1 avg_inten_ch_1 avg_inten_ch_2 avg_inten_ch_3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;fct&amp;gt; &amp;lt;fct&amp;gt;      &amp;lt;dbl&amp;gt;     &amp;lt;int&amp;gt;          &amp;lt;dbl&amp;gt;          &amp;lt;dbl&amp;gt;          &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 Test  PS        143.         185           15.7           4.95           9.55&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 Train PS        134.         819           31.9         207.            69.9 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 Train WS        107.         431           28.0         116.            63.9 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4 Train PS         69.2        298           19.5         102.            28.2 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5 Test  PS          2.89       285           24.3         112.            20.5 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 2,014 more rows, and 51 more variables: avg_inten_ch_4 &amp;lt;dbl&amp;gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; #   convex_hull_area_ratio_ch_1 &amp;lt;dbl&amp;gt;, convex_hull_perim_ratio_ch_1 &amp;lt;dbl&amp;gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; #   diff_inten_density_ch_1 &amp;lt;dbl&amp;gt;, diff_inten_density_ch_3 &amp;lt;dbl&amp;gt;, …&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;why-tune&#34;&gt;Predicting image segmentation, but better&lt;/h2&gt;
&lt;p&gt;Random forest models are a tree-based ensemble method, and typically perform well with &lt;a href=&#34;https://bradleyboehmke.github.io/HOML/random-forest.html#out-of-the-box-performance&#34;&gt;default hyperparameters&lt;/a&gt;. However, the accuracy of some other tree-based models, such as &lt;a href=&#34;https://en.wikipedia.org/wiki/Gradient_boosting#Gradient_tree_boosting&#34;&gt;boosted tree models&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/Decision_tree&#34;&gt;decision tree models&lt;/a&gt;, can be sensitive to the values of hyperparameters. In this article, we will train a &lt;strong&gt;decision tree&lt;/strong&gt; model. There are several hyperparameters for decision tree models that can be tuned for better performance. Let&amp;rsquo;s explore:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the complexity parameter (which we call &lt;code&gt;cost_complexity&lt;/code&gt; in tidymodels) for the tree, and&lt;/li&gt;
&lt;li&gt;the maximum &lt;code&gt;tree_depth&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tuning these hyperparameters can improve model performance because decision tree models are prone to &lt;a href=&#34;https://bookdown.org/max/FES/important-concepts.html#overfitting&#34;&gt;overfitting&lt;/a&gt;. This happens because single tree models tend to fit the training data &lt;em&gt;too well&lt;/em&gt; — so well, in fact, that they over-learn patterns present in the training data that end up being detrimental when predicting new data.&lt;/p&gt;
&lt;p&gt;We will tune the model hyperparameters to avoid overfitting. Tuning the value of &lt;code&gt;cost_complexity&lt;/code&gt; helps by &lt;a href=&#34;https://bradleyboehmke.github.io/HOML/DT.html#pruning&#34;&gt;pruning&lt;/a&gt; back our tree. It adds a cost, or penalty, to error rates of more complex trees; a cost closer to zero decreases the number tree nodes pruned and is more likely to result in an overfit tree. However, a high cost increases the number of tree nodes pruned and can result in the opposite problem—an underfit tree. Tuning &lt;code&gt;tree_depth&lt;/code&gt;, on the other hand, helps by &lt;a href=&#34;https://bradleyboehmke.github.io/HOML/DT.html#early-stopping&#34;&gt;stopping&lt;/a&gt;  our tree from growing after it reaches a certain depth. We want to tune these hyperparameters to find what those two values should be for our model to do the best job predicting image segmentation.&lt;/p&gt;
&lt;p&gt;Before we start the tuning process, we split our data into training and testing sets, just like when we trained the model with one default set of hyperparameters. As &lt;a href=&#34;https://www.tidymodels.org/start/resampling/&#34;&gt;before&lt;/a&gt;, we can use &lt;code&gt;strata = class&lt;/code&gt; if we want our training and testing sets to be created using stratified sampling so that both have the same proportion of both kinds of segmentation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;123&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cell_split &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;initial_split&lt;/span&gt;(cells &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;case), 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            strata &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; class)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cell_train &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;training&lt;/span&gt;(cell_split)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cell_test  &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;testing&lt;/span&gt;(cell_split)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We use the training data for tuning the model.&lt;/p&gt;
&lt;h2 id=&#34;tuning&#34;&gt;Tuning hyperparameters&lt;/h2&gt;
&lt;p&gt;Let’s start with the parsnip package, using a &lt;a href=&#34;https://parsnip.tidymodels.org/reference/decision_tree.html&#34;&gt;&lt;code&gt;decision_tree()&lt;/code&gt;&lt;/a&gt; model with the &lt;a href=&#34;https://cran.r-project.org/web/packages/rpart/index.html&#34;&gt;rpart&lt;/a&gt; engine. To tune the decision tree hyperparameters &lt;code&gt;cost_complexity&lt;/code&gt; and &lt;code&gt;tree_depth&lt;/code&gt;, we create a model specification that identifies which hyperparameters we plan to tune.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tune_spec &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;decision_tree&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cost_complexity &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tune&lt;/span&gt;(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tree_depth &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tune&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;set_engine&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;rpart&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;set_mode&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;classification&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tune_spec
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Decision Tree Model Specification (classification)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Main Arguments:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   cost_complexity = tune()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   tree_depth = tune()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Computational engine: rpart&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Think of &lt;code&gt;tune()&lt;/code&gt; here as a placeholder. After the tuning process, we will select a single numeric value for each of these hyperparameters. For now, we specify our parsnip model object and identify the hyperparameters we will &lt;code&gt;tune()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can&amp;rsquo;t train this specification on a single data set (such as the entire training set) and learn what the hyperparameter values should be, but we &lt;em&gt;can&lt;/em&gt; train many models using resampled data and see which models turn out best. We can create a regular grid of values to try using some convenience functions for each hyperparameter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tree_grid &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;grid_regular&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;cost_complexity&lt;/span&gt;(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          &lt;span style=&#34;color:#00f&#34;&gt;tree_depth&lt;/span&gt;(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          levels &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The function &lt;a href=&#34;https://dials.tidymodels.org/reference/grid_regular.html&#34;&gt;&lt;code&gt;grid_regular()&lt;/code&gt;&lt;/a&gt; is from the &lt;a href=&#34;https://dials.tidymodels.org/&#34;&gt;dials&lt;/a&gt; package. It chooses sensible values to try for each hyperparameter; here, we asked for 5 of each. Since we have two to tune, &lt;code&gt;grid_regular()&lt;/code&gt; returns 5 &lt;code&gt;\(\times\)&lt;/code&gt; 5 = 25 different possible tuning combinations to try in a tidy tibble format.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tree_grid
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 25 × 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    cost_complexity tree_depth&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;              &amp;lt;dbl&amp;gt;      &amp;lt;int&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1    0.0000000001          1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2    0.0000000178          1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3    0.00000316            1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4    0.000562              1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5    0.1                   1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6    0.0000000001          4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7    0.0000000178          4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8    0.00000316            4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9    0.000562              4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10    0.1                   4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 15 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, you can see all 5 values of &lt;code&gt;cost_complexity&lt;/code&gt; ranging up to 0.1. These values get repeated for each of the 5 values of &lt;code&gt;tree_depth&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tree_grid &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;count&lt;/span&gt;(tree_depth)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 5 × 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   tree_depth     n&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;        &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1          1     5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2          4     5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3          8     5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4         11     5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5         15     5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Armed with our grid filled with 25 candidate decision tree models, let&amp;rsquo;s create &lt;a href=&#34;https://www.tidymodels.org/start/resampling/&#34;&gt;cross-validation folds&lt;/a&gt; for tuning:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;234&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cell_folds &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;vfold_cv&lt;/span&gt;(cell_train)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Tuning in tidymodels requires a resampled object created with the &lt;a href=&#34;https://rsample.tidymodels.org/&#34;&gt;rsample&lt;/a&gt; package.&lt;/p&gt;
&lt;h2 id=&#34;tune-grid&#34;&gt;Model tuning with a grid&lt;/h2&gt;
&lt;p&gt;We are ready to tune! Let&amp;rsquo;s use &lt;a href=&#34;https://tune.tidymodels.org/reference/tune_grid.html&#34;&gt;&lt;code&gt;tune_grid()&lt;/code&gt;&lt;/a&gt; to fit models at all the different values we chose for each tuned hyperparameter. There are several options for building the object for tuning:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tune a model specification along with a recipe or model, or&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tune a &lt;a href=&#34;https://workflows.tidymodels.org/&#34;&gt;&lt;code&gt;workflow()&lt;/code&gt;&lt;/a&gt; that bundles together a model specification and a recipe or model preprocessor.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here we use a &lt;code&gt;workflow()&lt;/code&gt; with a straightforward formula; if this model required more involved data preprocessing, we could use &lt;code&gt;add_recipe()&lt;/code&gt; instead of &lt;code&gt;add_formula()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;345&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tree_wf &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;workflow&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;add_model&lt;/span&gt;(tune_spec) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;add_formula&lt;/span&gt;(class &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; .)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tree_res &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tree_wf &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;tune_grid&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resamples &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; cell_folds,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    grid &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; tree_grid
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tree_res
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # Tuning results&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # 10-fold cross-validation &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 10 × 4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    splits             id     .metrics          .notes          &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;list&amp;gt;             &amp;lt;chr&amp;gt;  &amp;lt;list&amp;gt;            &amp;lt;list&amp;gt;          &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 &amp;lt;split [1362/152]&amp;gt; Fold01 &amp;lt;tibble [50 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 &amp;lt;split [1362/152]&amp;gt; Fold02 &amp;lt;tibble [50 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 &amp;lt;split [1362/152]&amp;gt; Fold03 &amp;lt;tibble [50 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 &amp;lt;split [1362/152]&amp;gt; Fold04 &amp;lt;tibble [50 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 &amp;lt;split [1363/151]&amp;gt; Fold05 &amp;lt;tibble [50 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 &amp;lt;split [1363/151]&amp;gt; Fold06 &amp;lt;tibble [50 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 &amp;lt;split [1363/151]&amp;gt; Fold07 &amp;lt;tibble [50 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 &amp;lt;split [1363/151]&amp;gt; Fold08 &amp;lt;tibble [50 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 &amp;lt;split [1363/151]&amp;gt; Fold09 &amp;lt;tibble [50 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 &amp;lt;split [1363/151]&amp;gt; Fold10 &amp;lt;tibble [50 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once we have our tuning results, we can both explore them through visualization and then select the best result. The function &lt;code&gt;collect_metrics()&lt;/code&gt; gives us a tidy tibble with all the results. We had 25 candidate models and two metrics, &lt;code&gt;accuracy&lt;/code&gt; and &lt;code&gt;roc_auc&lt;/code&gt;, and we get a row for each &lt;code&gt;.metric&lt;/code&gt; and model.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tree_res &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;collect_metrics&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 50 × 8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    cost_complexity tree_depth .metric  .estimator  mean     n std_err .config   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;              &amp;lt;dbl&amp;gt;      &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;     &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1    0.0000000001          1 accuracy binary     0.732    10  0.0148 Preproces…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2    0.0000000001          1 roc_auc  binary     0.777    10  0.0107 Preproces…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3    0.0000000178          1 accuracy binary     0.732    10  0.0148 Preproces…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4    0.0000000178          1 roc_auc  binary     0.777    10  0.0107 Preproces…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5    0.00000316            1 accuracy binary     0.732    10  0.0148 Preproces…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6    0.00000316            1 roc_auc  binary     0.777    10  0.0107 Preproces…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7    0.000562              1 accuracy binary     0.732    10  0.0148 Preproces…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8    0.000562              1 roc_auc  binary     0.777    10  0.0107 Preproces…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9    0.1                   1 accuracy binary     0.732    10  0.0148 Preproces…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10    0.1                   1 roc_auc  binary     0.777    10  0.0107 Preproces…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 40 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We might get more out of plotting these results:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tree_res &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;collect_metrics&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(tree_depth &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;factor&lt;/span&gt;(tree_depth)) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(cost_complexity, mean, color &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; tree_depth)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_line&lt;/span&gt;(size &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1.5&lt;/span&gt;, alpha &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.6&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_point&lt;/span&gt;(size &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;facet_wrap&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; .metric, scales &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;free&amp;#34;&lt;/span&gt;, nrow &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;scale_x_log10&lt;/span&gt;(labels &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; scales&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;label_number&lt;/span&gt;()) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;scale_color_viridis_d&lt;/span&gt;(option &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;plasma&amp;#34;&lt;/span&gt;, begin &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;.9&lt;/span&gt;, end &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/best-tree-1.svg&#34; width=&#34;768&#34; /&gt;
&lt;p&gt;We can see that our &amp;ldquo;stubbiest&amp;rdquo; tree, with a depth of 1, is the worst model according to both metrics and across all candidate values of &lt;code&gt;cost_complexity&lt;/code&gt;. Our deepest tree, with a depth of 15, did better. However, the best tree seems to be between these values with a tree depth of 4. The &lt;a href=&#34;https://tune.tidymodels.org/reference/show_best.html&#34;&gt;&lt;code&gt;show_best()&lt;/code&gt;&lt;/a&gt; function shows us the top 5 candidate models by default:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tree_res &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;show_best&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;accuracy&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 5 × 8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   cost_complexity tree_depth .metric  .estimator  mean     n std_err .config    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;             &amp;lt;dbl&amp;gt;      &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;      &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1    0.0000000001          4 accuracy binary     0.807    10  0.0119 Preprocess…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2    0.0000000178          4 accuracy binary     0.807    10  0.0119 Preprocess…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3    0.00000316            4 accuracy binary     0.807    10  0.0119 Preprocess…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4    0.000562              4 accuracy binary     0.807    10  0.0119 Preprocess…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5    0.1                   4 accuracy binary     0.786    10  0.0124 Preprocess…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can also use the &lt;a href=&#34;https://tune.tidymodels.org/reference/show_best.html&#34;&gt;&lt;code&gt;select_best()&lt;/code&gt;&lt;/a&gt; function to pull out the single set of hyperparameter values for our best decision tree model:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;best_tree &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; tree_res &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;select_best&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;accuracy&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;best_tree
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   cost_complexity tree_depth .config              &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;             &amp;lt;dbl&amp;gt;      &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;                &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1    0.0000000001          4 Preprocessor1_Model06&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These are the values for &lt;code&gt;tree_depth&lt;/code&gt; and &lt;code&gt;cost_complexity&lt;/code&gt; that maximize accuracy in this data set of cell images.&lt;/p&gt;
&lt;h2 id=&#34;final-model&#34;&gt;Finalizing our model&lt;/h2&gt;
&lt;p&gt;We can update (or &amp;ldquo;finalize&amp;rdquo;) our workflow object &lt;code&gt;tree_wf&lt;/code&gt; with the values from &lt;code&gt;select_best()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;final_wf &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tree_wf &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;finalize_workflow&lt;/span&gt;(best_tree)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;final_wf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ══ Workflow ══════════════════════════════════════════════════════════&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Preprocessor: Formula&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Model: decision_tree()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Preprocessor ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; class ~ .&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Model ─────────────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Decision Tree Model Specification (classification)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Main Arguments:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   cost_complexity = 1e-10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   tree_depth = 4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Computational engine: rpart&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our tuning is done!&lt;/p&gt;
&lt;h3 id=&#34;the-last-fit&#34;&gt;The last fit&lt;/h3&gt;
&lt;p&gt;Finally, let&amp;rsquo;s fit this final model to the training data and use our test data to estimate the model performance we expect to see with new data. We can use the function &lt;a href=&#34;https://tune.tidymodels.org/reference/last_fit.html&#34;&gt;&lt;code&gt;last_fit()&lt;/code&gt;&lt;/a&gt; with our finalized model; this function &lt;em&gt;fits&lt;/em&gt; the finalized model on the full training data set and &lt;em&gt;evaluates&lt;/em&gt; the finalized model on the testing data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;final_fit &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  final_wf &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;last_fit&lt;/span&gt;(cell_split) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;final_fit &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;collect_metrics&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 2 × 4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   .metric  .estimator .estimate .config             &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;               &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 accuracy binary         0.802 Preprocessor1_Model1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 roc_auc  binary         0.840 Preprocessor1_Model1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;final_fit &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;collect_predictions&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;roc_curve&lt;/span&gt;(class, .pred_PS) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;autoplot&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/last-fit-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;The performance metrics from the test set indicate that we did not overfit during our tuning procedure.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;final_fit&lt;/code&gt; object contains a finalized, fitted workflow that you can use for predicting on new data or further understanding the results. You may want to extract this object, using &lt;a href=&#34;https://tune.tidymodels.org/reference/extract-tune.html&#34;&gt;one of the &lt;code&gt;extract_&lt;/code&gt; helper functions&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;final_tree &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;extract_workflow&lt;/span&gt;(final_fit)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;final_tree
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ══ Workflow [trained] ════════════════════════════════════════════════&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Preprocessor: Formula&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Model: decision_tree()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Preprocessor ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; class ~ .&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Model ─────────────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; n= 1514 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; node), split, n, loss, yval, (yprob)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       * denotes terminal node&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1) root 1514 539 PS (0.64398943 0.35601057)  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    2) total_inten_ch_2&amp;lt; 41732.5 642  33 PS (0.94859813 0.05140187)  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;      4) shape_p_2_a_ch_1&amp;gt;=1.251801 631  27 PS (0.95721078 0.04278922) *&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;      5) shape_p_2_a_ch_1&amp;lt; 1.251801 11   5 WS (0.45454545 0.54545455) *&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    3) total_inten_ch_2&amp;gt;=41732.5 872 366 WS (0.41972477 0.58027523)  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;      6) fiber_width_ch_1&amp;lt; 11.37318 406 160 PS (0.60591133 0.39408867)  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       12) avg_inten_ch_1&amp;lt; 145.4883 293  85 PS (0.70989761 0.29010239) *&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       13) avg_inten_ch_1&amp;gt;=145.4883 113  38 WS (0.33628319 0.66371681)  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;         26) total_inten_ch_3&amp;gt;=57919.5 33  10 PS (0.69696970 0.30303030) *&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;         27) total_inten_ch_3&amp;lt; 57919.5 80  15 WS (0.18750000 0.81250000) *&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;      7) fiber_width_ch_1&amp;gt;=11.37318 466 120 WS (0.25751073 0.74248927)  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       14) eq_ellipse_oblate_vol_ch_1&amp;gt;=1673.942 30   8 PS (0.73333333 0.26666667)  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;         28) var_inten_ch_3&amp;gt;=41.10858 20   2 PS (0.90000000 0.10000000) *&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;         29) var_inten_ch_3&amp;lt; 41.10858 10   4 WS (0.40000000 0.60000000) *&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       15) eq_ellipse_oblate_vol_ch_1&amp;lt; 1673.942 436  98 WS (0.22477064 0.77522936) *&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can create a visualization of the decision tree using another helper function to extract the underlying engine-specific fit.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;final_tree &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;extract_fit_engine&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;rpart.plot&lt;/span&gt;(roundint &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/rpart-plot-1.svg&#34; width=&#34;768&#34; /&gt;
&lt;p&gt;Perhaps we would also like to understand what variables are important in this final model. We can use the &lt;a href=&#34;https://koalaverse.github.io/vip/&#34;&gt;vip&lt;/a&gt; package to estimate variable importance &lt;a href=&#34;https://koalaverse.github.io/vip/reference/vi_model.html#details&#34;&gt;based on the model&amp;rsquo;s structure&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(vip)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;final_tree &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;extract_fit_parsnip&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;vip&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/vip-1.svg&#34; width=&#34;576&#34; /&gt;
&lt;p&gt;These are the automated image analysis measurements that are the most important in driving segmentation quality predictions.&lt;/p&gt;
&lt;p&gt;We leave it to the reader to explore whether you can tune a different decision tree hyperparameter. You can explore the &lt;a href=&#34;https://www.tidymodels.org/find/parsnip/#models&#34;&gt;reference docs&lt;/a&gt;, or use the &lt;code&gt;args()&lt;/code&gt; function to see which parsnip object arguments are available:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;args&lt;/span&gt;(decision_tree)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; function (mode = &amp;#34;unknown&amp;#34;, engine = &amp;#34;rpart&amp;#34;, cost_complexity = NULL, &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     tree_depth = NULL, min_n = NULL) &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; NULL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You could tune the other hyperparameter we didn&amp;rsquo;t use here, &lt;code&gt;min_n&lt;/code&gt;, which sets the minimum &lt;code&gt;n&lt;/code&gt; to split at any node. This is another early stopping method for decision trees that can help prevent overfitting. Use this &lt;a href=&#34;https://www.tidymodels.org/find/parsnip/#model-args&#34;&gt;searchable table&lt;/a&gt; to find the original argument for &lt;code&gt;min_n&lt;/code&gt; in the rpart package (&lt;a href=&#34;https://stat.ethz.ch/R-manual/R-devel/library/rpart/html/rpart.control.html&#34;&gt;hint&lt;/a&gt;). See whether you can tune a different combination of hyperparameters and/or values to improve a tree&amp;rsquo;s ability to predict cell segmentation quality.&lt;/p&gt;
&lt;h2 id=&#34;session-information&#34;&gt;Session information&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#&amp;gt; ─ Session info ─────────────────────────────────────────────────────
#&amp;gt;  setting  value
#&amp;gt;  version  R version 4.1.1 (2021-08-10)
#&amp;gt;  os       macOS Monterey 12.2.1
#&amp;gt;  system   aarch64, darwin20
#&amp;gt;  ui       X11
#&amp;gt;  language (EN)
#&amp;gt;  collate  en_US.UTF-8
#&amp;gt;  ctype    en_US.UTF-8
#&amp;gt;  tz       America/Denver
#&amp;gt;  date     2022-03-23
#&amp;gt;  pandoc   2.17.1.1 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/ (via rmarkdown)
#&amp;gt; 
#&amp;gt; ─ Packages ─────────────────────────────────────────────────────────
#&amp;gt;  package    * version date (UTC) lib source
#&amp;gt;  broom      * 0.7.12  2022-01-28 [1] CRAN (R 4.1.1)
#&amp;gt;  dials      * 0.1.0   2022-01-31 [1] CRAN (R 4.1.1)
#&amp;gt;  dplyr      * 1.0.8   2022-02-08 [1] CRAN (R 4.1.1)
#&amp;gt;  ggplot2    * 3.3.5   2021-06-25 [1] CRAN (R 4.1.0)
#&amp;gt;  infer      * 1.0.0   2021-08-13 [1] CRAN (R 4.1.1)
#&amp;gt;  parsnip    * 0.2.1   2022-03-17 [1] CRAN (R 4.1.1)
#&amp;gt;  purrr      * 0.3.4   2020-04-17 [1] CRAN (R 4.1.0)
#&amp;gt;  recipes    * 0.2.0   2022-02-18 [1] CRAN (R 4.1.1)
#&amp;gt;  rlang        1.0.2   2022-03-04 [1] CRAN (R 4.1.1)
#&amp;gt;  rpart      * 4.1.16  2022-01-24 [1] CRAN (R 4.1.1)
#&amp;gt;  rpart.plot * 3.1.0   2021-07-24 [1] CRAN (R 4.1.0)
#&amp;gt;  rsample    * 0.1.1   2021-11-08 [1] CRAN (R 4.1.1)
#&amp;gt;  tibble     * 3.1.6   2021-11-07 [1] CRAN (R 4.1.1)
#&amp;gt;  tidymodels * 0.2.0   2022-03-19 [1] CRAN (R 4.1.1)
#&amp;gt;  tune       * 0.2.0   2022-03-19 [1] CRAN (R 4.1.1)
#&amp;gt;  vip        * 0.3.2   2020-12-17 [1] CRAN (R 4.1.0)
#&amp;gt;  workflows  * 0.2.6   2022-03-18 [1] CRAN (R 4.1.1)
#&amp;gt;  yardstick  * 0.0.9   2021-11-22 [1] CRAN (R 4.1.1)
#&amp;gt; 
#&amp;gt;  [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library
#&amp;gt; 
#&amp;gt; ────────────────────────────────────────────────────────────────────
&lt;/code&gt;&lt;/pre&gt;</description>
  </item>
  
<item>
  <title>Tuning text models</title>
  <link>https://www.tidymodels.org/learn/work/tune-text/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/learn/work/tune-text/</guid>
  <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;To use the code in this article, you will need to install the following packages: stopwords, textfeatures, textrecipes, and tidymodels.&lt;/p&gt;
&lt;p&gt;This article demonstrates an advanced example for training and tuning models for text data. Text data must be processed and transformed to a numeric representation to be ready for computation in modeling; in tidymodels, we use a recipe for this preprocessing. This article also shows how to extract information from each model fit during tuning to use later on.&lt;/p&gt;
&lt;h2 id=&#34;text-as-data&#34;&gt;Text as data&lt;/h2&gt;
&lt;p&gt;The text data we&amp;rsquo;ll use in this article are from Amazon:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This dataset consists of reviews of fine foods from amazon. The data span a period of more than 10 years, including all ~500,000 reviews up to October 2012. Reviews include product and user information, ratings, and a plaintext review.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This article uses a small subset of the total reviews &lt;a href=&#34;https://snap.stanford.edu/data/web-FineFoods.html&#34;&gt;available at the original source&lt;/a&gt;. We sampled a single review from 5,000 random products and allocated 80% of these data to the training set, with the remaining 1,000 reviews held out for the test set.&lt;/p&gt;
&lt;p&gt;There is a column for the product, a column for the text of the review, and a factor column for the outcome variable. The outcome is whether the reviewer gave the product a five-star rating or not.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(tidymodels)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;data&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;small_fine_foods&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;training_data
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 4,000 x 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    product    review                                                       score&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;                                                        &amp;lt;fct&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 B000J0LSBG &amp;#34;this stuff is  not stuffing  its  not good at all  save yo… other&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 B000EYLDYE &amp;#34;I absolutely LOVE this dried fruit.  LOVE IT.  Whenever I … great&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 B0026LIO9A &amp;#34;GREAT DEAL, CONVENIENT TOO.  Much cheaper than WalMart and… great&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 B00473P8SK &amp;#34;Great flavor, we go through a ton of this sauce! I discove… great&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 B001SAWTNM &amp;#34;This is excellent salsa/hot sauce, but you can get it for … great&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 B000FAG90U &amp;#34;Again, this is the best dogfood out there.  One suggestion… great&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 B006BXTCEK &amp;#34;The box I received was filled with teas, hot chocolates, a… other&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 B002GWH5OY &amp;#34;This is delicious coffee which compares favorably with muc… great&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 B003R0MFYY &amp;#34;Don&amp;#39;t let these little tiny cans fool you.  They pack a lo… great&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 B001EO5ZXI &amp;#34;One of the nicest, smoothest cup of chai I&amp;#39;ve made. Nice m… great&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 3,990 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our modeling goal is to create modeling features from the text of the reviews to predict whether the review was five-star or not.&lt;/p&gt;
&lt;h2 id=&#34;inputs-for-the-search&#34;&gt;Inputs for the search&lt;/h2&gt;
&lt;p&gt;Text, perhaps more so than tabular data we often deal with, must be heavily processed to be used as predictor data for modeling. There are multiple ways to process and prepare text for modeling; let&amp;rsquo;s add several steps together to create different kinds of features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create an initial set of count-based features, such as the number of words, spaces, lower- or uppercase characters, URLs, and so on; we can use the &lt;a href=&#34;https://github.com/mkearney/textfeatures&#34;&gt;textfeatures&lt;/a&gt; package for this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://smltar.com/tokenization.html&#34;&gt;Tokenize&lt;/a&gt; the text (i.e. break the text into smaller components such as words).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove stop words such as &amp;ldquo;the&amp;rdquo;, &amp;ldquo;an&amp;rdquo;, &amp;ldquo;of&amp;rdquo;, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://smltar.com/stemming.html&#34;&gt;Stem&lt;/a&gt; tokens to a common root where possible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Convert tokens to dummy variables via a &lt;a href=&#34;https://bookdown.org/max/FES/encoding-predictors-with-many-categories.html&#34;&gt;signed, binary hash function&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optionally transform non-token features (the count-based features like number of lowercase characters) to a more symmetric state using a &lt;a href=&#34;https://bookdown.org/max/FES/numeric-one-to-one.html&#34;&gt;Yeo-Johnson transformation&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove predictors with a single distinct value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Center and scale all predictors.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note&#34;&gt;&lt;p&gt;We will end up with two kinds of features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dummy/indicator variables for the count-based features like number of digits or punctuation characters&lt;/li&gt;
&lt;li&gt;hash features for the tokens like &amp;ldquo;salsa&amp;rdquo; or &amp;ldquo;delicious&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Some of these preprocessing steps (such as stemming) may or may not be good ideas but a full discussion of their effects is beyond the scope of this article. In this preprocessing approach, the main tuning parameter is the number of hashing features to use.&lt;/p&gt;
&lt;p&gt;Before we start building our preprocessing recipe, we need some helper objects. For example, for the Yeo-Johnson transformation, we need to know the set of count-based text features:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(textfeatures)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;basics &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;names&lt;/span&gt;(textfeatures&lt;span style=&#34;color:#666&#34;&gt;:::&lt;/span&gt;count_functions)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;head&lt;/span&gt;(basics)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] &amp;#34;n_words&amp;#34;    &amp;#34;n_uq_words&amp;#34; &amp;#34;n_charS&amp;#34;    &amp;#34;n_uq_charS&amp;#34; &amp;#34;n_digits&amp;#34;  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [6] &amp;#34;n_hashtags&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Also, the implementation of feature hashes does not produce the binary values we need. This small function will help convert the scores to values of -1, 0, or 1:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;binary_hash &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(x) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  x &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;ifelse&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;-1&lt;/span&gt;, x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  x &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;ifelse&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, let&amp;rsquo;s put this all together in one recipe:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(textrecipes)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pre_proc &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;recipe&lt;/span&gt;(score &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; product &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; review, data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; training_data) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Do not use the product ID as a predictor&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;update_role&lt;/span&gt;(product, new_role &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Make a copy of the raw text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_mutate&lt;/span&gt;(review_raw &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; review) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Compute the initial features. This removes the `review_raw` column&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_textfeature&lt;/span&gt;(review_raw) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Make the feature names shorter&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_rename_at&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;starts_with&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;textfeature_&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fn &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;gsub&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;textfeature_review_raw_&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, .)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_tokenize&lt;/span&gt;(review)  &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_stopwords&lt;/span&gt;(review) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_stem&lt;/span&gt;(review) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Here is where the tuning parameter is declared&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_texthash&lt;/span&gt;(review, signed &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;, num_terms &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tune&lt;/span&gt;()) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Simplify these names&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_rename_at&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;starts_with&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;review_hash&amp;#34;&lt;/span&gt;), fn &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;gsub&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;review_&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, .)) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Convert the features from counts to values of -1, 0, or 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_mutate_at&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;starts_with&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;hash&amp;#34;&lt;/span&gt;), fn &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; binary_hash) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Transform the initial feature set&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_YeoJohnson&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;one_of&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;!!&lt;/span&gt;basics)) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_zv&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;all_predictors&lt;/span&gt;()) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_normalize&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;all_predictors&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;warning&#34;&gt;Note that, when objects from the global environment are used, they are injected into the step objects via &lt;code&gt;!!&lt;/code&gt;. For some parallel processing technologies, these objects may not be found by the worker processes.&lt;/div&gt;
&lt;p&gt;The preprocessing recipe is long and complex (often typical for working with text data) but the model we&amp;rsquo;ll use is more straightforward. Let&amp;rsquo;s stick with a regularized logistic regression model:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lr_mod &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;logistic_reg&lt;/span&gt;(penalty &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tune&lt;/span&gt;(), mixture &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tune&lt;/span&gt;()) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;set_engine&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;glmnet&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are three tuning parameters for this data analysis:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;num_terms&lt;/code&gt;, the number of feature hash variables to create&lt;/li&gt;
&lt;li&gt;&lt;code&gt;penalty&lt;/code&gt;, the amount of regularization for the model&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mixture&lt;/code&gt;, the proportion of L1 regularization&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;resampling&#34;&gt;Resampling&lt;/h2&gt;
&lt;p&gt;There are enough data here so that 10-fold resampling would hold out 400 reviews at a time to estimate performance. Performance estimates using this many observations have sufficiently low noise to measure and tune models.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;8935&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;folds &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;vfold_cv&lt;/span&gt;(training_data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;folds
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; #  10-fold cross-validation &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 10 x 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    splits             id    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;list&amp;gt;             &amp;lt;chr&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 &amp;lt;split [3.6K/400]&amp;gt; Fold01&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 &amp;lt;split [3.6K/400]&amp;gt; Fold02&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 &amp;lt;split [3.6K/400]&amp;gt; Fold03&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 &amp;lt;split [3.6K/400]&amp;gt; Fold04&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 &amp;lt;split [3.6K/400]&amp;gt; Fold05&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 &amp;lt;split [3.6K/400]&amp;gt; Fold06&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 &amp;lt;split [3.6K/400]&amp;gt; Fold07&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 &amp;lt;split [3.6K/400]&amp;gt; Fold08&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 &amp;lt;split [3.6K/400]&amp;gt; Fold09&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 &amp;lt;split [3.6K/400]&amp;gt; Fold10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;grid-search&#34;&gt;Grid search&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s begin our tuning with &lt;a href=&#34;https://www.tidymodels.org/learn/work/tune-svm/&#34;&gt;grid search&lt;/a&gt; and a regular grid. For glmnet models, evaluating penalty values is fairly cheap because of the use of the &lt;a href=&#34;https://tune.tidymodels.org/articles/extras/optimizations.html#sub-model-speed-ups-1&#34;&gt;&amp;ldquo;submodel-trick&amp;rdquo;&lt;/a&gt;. The grid will use 20 penalty values, 5 mixture values, and 3 values for the number of hash features.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;five_star_grid &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;crossing&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    penalty &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;^seq&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-3&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, length &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;20&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mixture &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;0.01&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0.25&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0.50&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0.75&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    num_terms &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;^c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;five_star_grid
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 300 x 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    penalty mixture num_terms&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;      &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1   0.001    0.01       256&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2   0.001    0.01      1024&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3   0.001    0.01      4096&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4   0.001    0.25       256&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5   0.001    0.25      1024&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6   0.001    0.25      4096&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7   0.001    0.5        256&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8   0.001    0.5       1024&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9   0.001    0.5       4096&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10   0.001    0.75       256&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 290 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that, for each resample, the (computationally expensive) text preprocessing recipe is only prepped 6 times. This increases the efficiency of the analysis by avoiding redundant work.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s save information on the number of predictors by penalty value for each glmnet model. This can help us understand how many features were used across the penalty values. Use an extraction function to do this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;glmnet_vars &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(x) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# `x` will be a workflow object&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  mod &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;extract_model&lt;/span&gt;(x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# `df` is the number of model terms for each penalty value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;tibble&lt;/span&gt;(penalty &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; mod&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;lambda, num_vars &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; mod&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;df)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ctrl &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;control_grid&lt;/span&gt;(extract &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; glmnet_vars, verbose &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, let&amp;rsquo;s run the grid search:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;roc_scores &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;metric_set&lt;/span&gt;(roc_auc)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1559&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;five_star_glmnet &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;tune_grid&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lr_mod, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pre_proc, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resamples &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; folds, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    grid &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; five_star_grid, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    metrics &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; roc_scores, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    control &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; ctrl
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;five_star_glmnet
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # Tuning results&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # 10-fold cross-validation &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 10 x 5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    splits             id     .metrics          .notes          .extracts        &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;list&amp;gt;             &amp;lt;chr&amp;gt;  &amp;lt;list&amp;gt;            &amp;lt;list&amp;gt;          &amp;lt;list&amp;gt;           &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 &amp;lt;split [3.6K/400]&amp;gt; Fold01 &amp;lt;tibble [300 × 7… &amp;lt;tibble [0 × 1… &amp;lt;tibble [300 × 5…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 &amp;lt;split [3.6K/400]&amp;gt; Fold02 &amp;lt;tibble [300 × 7… &amp;lt;tibble [0 × 1… &amp;lt;tibble [300 × 5…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 &amp;lt;split [3.6K/400]&amp;gt; Fold03 &amp;lt;tibble [300 × 7… &amp;lt;tibble [0 × 1… &amp;lt;tibble [300 × 5…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 &amp;lt;split [3.6K/400]&amp;gt; Fold04 &amp;lt;tibble [300 × 7… &amp;lt;tibble [0 × 1… &amp;lt;tibble [300 × 5…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 &amp;lt;split [3.6K/400]&amp;gt; Fold05 &amp;lt;tibble [300 × 7… &amp;lt;tibble [0 × 1… &amp;lt;tibble [300 × 5…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 &amp;lt;split [3.6K/400]&amp;gt; Fold06 &amp;lt;tibble [300 × 7… &amp;lt;tibble [0 × 1… &amp;lt;tibble [300 × 5…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 &amp;lt;split [3.6K/400]&amp;gt; Fold07 &amp;lt;tibble [300 × 7… &amp;lt;tibble [0 × 1… &amp;lt;tibble [300 × 5…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 &amp;lt;split [3.6K/400]&amp;gt; Fold08 &amp;lt;tibble [300 × 7… &amp;lt;tibble [0 × 1… &amp;lt;tibble [300 × 5…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 &amp;lt;split [3.6K/400]&amp;gt; Fold09 &amp;lt;tibble [300 × 7… &amp;lt;tibble [0 × 1… &amp;lt;tibble [300 × 5…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 &amp;lt;split [3.6K/400]&amp;gt; Fold10 &amp;lt;tibble [300 × 7… &amp;lt;tibble [0 × 1… &amp;lt;tibble [300 × 5…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This took a while to complete! What do the results look like? Let&amp;rsquo;s get the resampling estimates of the area under the ROC curve for each tuning parameter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grid_roc &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;collect_metrics&lt;/span&gt;(five_star_glmnet) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;arrange&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;desc&lt;/span&gt;(mean))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grid_roc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 300 x 9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    penalty mixture num_terms .metric .estimator  mean     n std_err .config     &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;      &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;       &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 0.695      0.01      4096 roc_auc binary     0.818    10 0.00739 Preprocesso…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 0.483      0.01      4096 roc_auc binary     0.818    10 0.00776 Preprocesso…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 0.0379     0.25      4096 roc_auc binary     0.816    10 0.00753 Preprocesso…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 0.336      0.01      4096 roc_auc binary     0.815    10 0.00822 Preprocesso…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 0.0183     0.5       4096 roc_auc binary     0.814    10 0.00776 Preprocesso…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 0.0127     0.75      4096 roc_auc binary     0.814    10 0.00781 Preprocesso…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 0.00886    1         4096 roc_auc binary     0.813    10 0.00794 Preprocesso…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 0.0264     0.25      4096 roc_auc binary     0.813    10 0.00790 Preprocesso…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 1          0.01      4096 roc_auc binary     0.812    10 0.00764 Preprocesso…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 0.234      0.01      4096 roc_auc binary     0.811    10 0.00838 Preprocesso…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 290 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The best results have a fairly high penalty value and focus on the ridge penalty (i.e. no feature selection via the lasso&amp;rsquo;s L1 penalty). The best solutions also use the largest number of hashing features.&lt;/p&gt;
&lt;p&gt;What is the relationship between performance and the tuning parameters?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;autoplot&lt;/span&gt;(five_star_glmnet, metric &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;roc_auc&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/grid-plot-1.svg&#34; width=&#34;960&#34; /&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We can definitely see that performance improves with the number of features included. In this article, we&amp;rsquo;ve used a small sample of the overall data set available. When more data are used, an even larger feature set is optimal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The profiles with larger mixture values (greater than 0.01) have steep drop-offs in performance. What&amp;rsquo;s that about? Those are cases where the lasso penalty is removing too many (and perhaps all) features from the model.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The panel with at least 4096 features shows that there are several parameter combinations that have about the same performance; there isn&amp;rsquo;t much difference between the best performance for the different mixture values. A case could be made that we should choose a &lt;em&gt;larger&lt;/em&gt; mixture value and a &lt;em&gt;smaller&lt;/em&gt; penalty to select a simpler model that contains fewer predictors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If more experimentation were conducted, a larger set of features (more than 4096) should also be considered.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We&amp;rsquo;ll come back to the extracted glmnet components at the end of this article.&lt;/p&gt;
&lt;h2 id=&#34;directed-search&#34;&gt;Directed search&lt;/h2&gt;
&lt;p&gt;What if we had started with Bayesian optimization? Would a good set of conditions have been found more efficiently?&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s pretend that we haven&amp;rsquo;t seen the grid search results. We&amp;rsquo;ll initialize the Gaussian process model with five tuning parameter combinations chosen with a space-filling design.&lt;/p&gt;
&lt;p&gt;It might be good to use a custom &lt;code&gt;dials&lt;/code&gt; object for the number of hash terms. The default object, &lt;code&gt;num_terms()&lt;/code&gt;, uses a linear range and tries to set the upper bound of the parameter using the data. Instead, let&amp;rsquo;s create a parameter set, change the scale to be &lt;code&gt;log2&lt;/code&gt;, and define the same range as was used in grid search.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hash_range &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;num_terms&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;), trans &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;log2_trans&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hash_range
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # Model Terms (quantitative)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Transformer:  log-2 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Range (transformed scale): [8, 12]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To use this, we have to merge the recipe and &lt;code&gt;parsnip&lt;/code&gt; model object into a workflow:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;five_star_wflow &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;workflow&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;add_recipe&lt;/span&gt;(pre_proc) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;add_model&lt;/span&gt;(lr_mod)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then we can extract and manipulate the corresponding parameter set:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;five_star_set &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  five_star_wflow &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;parameters&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;update&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    num_terms &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; hash_range, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    penalty &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;penalty&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-3&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;)),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mixture &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;mixture&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;0.05&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;1.00&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is passed to the search function via the &lt;code&gt;param_info&lt;/code&gt; argument.&lt;/p&gt;
&lt;p&gt;The initial rounds of search can be biased more towards exploration of the parameter space (as opposed to staying near the current best results). If expected improvement is used as the acquisition function, the trade-off value can be slowly moved from exploration to exploitation over iterations (see the tune vignette on &lt;a href=&#34;https://tune.tidymodels.org/articles/acquisition_functions.html&#34;&gt;acquisition functions&lt;/a&gt; for more details). The tune package has a built-in function called &lt;code&gt;expo_decay()&lt;/code&gt; that can help accomplish this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;trade_off_decay &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(iter) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;expo_decay&lt;/span&gt;(iter, start_val &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;.01&lt;/span&gt;, limit_val &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, slope &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using these values, let&amp;rsquo;s run the search:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;five_star_search &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;tune_bayes&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    five_star_wflow, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resamples &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; folds,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    param_info &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; five_star_set,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    initial &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    iter &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;30&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    metrics &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; roc_scores,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    objective &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;exp_improve&lt;/span&gt;(trade_off_decay),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    control &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;control_bayes&lt;/span&gt;(verbose &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &amp;gt;  Generating a set of 5 initial parameter results&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Initialization complete&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Optimizing roc_auc using the expected improvement with variable trade-off&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; values.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 1 ───────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.7559 (@iter 0)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Trade-off value: 0.01&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i penalty=0.00251, mixture=0.0528, num_terms=260&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.7475 (+/-0.0102)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 2 ───────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.7559 (@iter 0)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Trade-off value: 0.007788&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i penalty=0.00389, mixture=0.616, num_terms=489&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ♥ Newest results:	roc_auc=0.7753 (+/-0.009)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 3 ───────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.7753 (@iter 2)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Trade-off value: 0.006065&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i penalty=0.00101, mixture=0.463, num_terms=517&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.7456 (+/-0.0107)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 4 ───────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.7753 (@iter 2)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Trade-off value: 0.004724&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i penalty=0.00112, mixture=0.807, num_terms=4072&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.7703 (+/-0.00716)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 5 ───────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.7753 (@iter 2)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Trade-off value: 0.003679&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i penalty=0.00343, mixture=0.523, num_terms=4038&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.7751 (+/-0.00694)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 6 ───────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.7753 (@iter 2)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Trade-off value: 0.002865&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i penalty=0.00306, mixture=0.989, num_terms=1251&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ♥ Newest results:	roc_auc=0.7859 (+/-0.00933)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 7 ───────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.7859 (@iter 6)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Trade-off value: 0.002231&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i penalty=0.0174, mixture=0.991, num_terms=2349&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ♥ Newest results:	roc_auc=0.7981 (+/-0.0078)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 8 ───────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.7981 (@iter 7)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Trade-off value: 0.001738&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i penalty=0.011, mixture=0.999, num_terms=1832&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ♥ Newest results:	roc_auc=0.8022 (+/-0.00809)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 9 ───────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8022 (@iter 8)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Trade-off value: 0.001353&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i penalty=0.00632, mixture=0.943, num_terms=2806&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ♥ Newest results:	roc_auc=0.8035 (+/-0.0047)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 10 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8035 (@iter 9)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Trade-off value: 0.001054&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i penalty=0.00701, mixture=0.969, num_terms=3717&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.8034 (+/-0.0061)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 11 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8035 (@iter 9)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Trade-off value: 0.0008208&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i penalty=0.00554, mixture=0.99, num_terms=3414&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.8028 (+/-0.00628)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 12 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8035 (@iter 9)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Trade-off value: 0.0006393&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i penalty=0.0137, mixture=0.987, num_terms=3233&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ♥ Newest results:	roc_auc=0.8162 (+/-0.00823)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 13 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8162 (@iter 12)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Trade-off value: 0.0004979&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i penalty=0.0136, mixture=0.967, num_terms=290&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.7445 (+/-0.00702)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 14 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8162 (@iter 12)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Trade-off value: 0.0003877&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i penalty=0.0143, mixture=0.921, num_terms=4085&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.814 (+/-0.00775)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 15 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8162 (@iter 12)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Trade-off value: 0.000302&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i penalty=0.013, mixture=0.973, num_terms=3974&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.8099 (+/-0.00471)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 16 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8162 (@iter 12)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Trade-off value: 0.0002352&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i penalty=0.0148, mixture=0.0565, num_terms=3023&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.7757 (+/-0.00876)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 17 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8162 (@iter 12)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Trade-off value: 0.0001832&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i penalty=0.0139, mixture=0.992, num_terms=3427&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.8021 (+/-0.00829)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 18 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8162 (@iter 12)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Trade-off value: 0.0001426&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i penalty=0.152, mixture=0.0898, num_terms=3286&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ♥ Newest results:	roc_auc=0.8206 (+/-0.00922)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 19 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8206 (@iter 18)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Trade-off value: 0.0001111&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i penalty=0.0978, mixture=0.121, num_terms=3755&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ♥ Newest results:	roc_auc=0.8206 (+/-0.00836)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 20 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8206 (@iter 19)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Trade-off value: 8.652e-05&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i penalty=0.575, mixture=0.156, num_terms=366&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 21 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8206 (@iter 19)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Trade-off value: 6.738e-05&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i penalty=0.0705, mixture=0.108, num_terms=2883&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ♥ Newest results:	roc_auc=0.8314 (+/-0.00731)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 22 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8314 (@iter 21)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Trade-off value: 5.248e-05&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i penalty=0.00145, mixture=0.654, num_terms=2857&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.7585 (+/-0.0102)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 23 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8314 (@iter 21)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Trade-off value: 4.087e-05&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i penalty=0.0633, mixture=0.26, num_terms=297&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.7461 (+/-0.00837)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 24 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8314 (@iter 21)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Trade-off value: 3.183e-05&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i penalty=0.00393, mixture=0.421, num_terms=257&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.7489 (+/-0.00842)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 25 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8314 (@iter 21)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Trade-off value: 2.479e-05&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i penalty=0.0129, mixture=0.16, num_terms=2730&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.7876 (+/-0.00503)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 26 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8314 (@iter 21)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Trade-off value: 1.93e-05&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i penalty=0.0659, mixture=0.0836, num_terms=3179&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.8094 (+/-0.00417)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 27 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8314 (@iter 21)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Trade-off value: 1.503e-05&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i penalty=0.181, mixture=0.13, num_terms=2383&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.7755 (+/-0.0098)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 28 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8314 (@iter 21)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Trade-off value: 1.171e-05&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i penalty=0.257, mixture=0.622, num_terms=3937&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 29 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8314 (@iter 21)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Trade-off value: 9.119e-06&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i penalty=0.0122, mixture=0.103, num_terms=744&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.7777 (+/-0.00696)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Iteration 30 ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Current best:		roc_auc=0.8314 (@iter 21)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Gaussian process model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Generating 5000 candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Predicted candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Trade-off value: 7.102e-06&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i penalty=0.00135, mixture=0.0737, num_terms=3215&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ✓ Estimating performance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ⓧ Newest results:	roc_auc=0.726 (+/-0.0066)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;five_star_search
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # Tuning results&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # 10-fold cross-validation &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 310 x 5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    splits             id     .metrics         .notes           .iter&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;list&amp;gt;             &amp;lt;chr&amp;gt;  &amp;lt;list&amp;gt;           &amp;lt;list&amp;gt;           &amp;lt;int&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 &amp;lt;split [3.6K/400]&amp;gt; Fold01 &amp;lt;tibble [5 × 7]&amp;gt; &amp;lt;tibble [0 × 1]&amp;gt;     0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 &amp;lt;split [3.6K/400]&amp;gt; Fold02 &amp;lt;tibble [5 × 7]&amp;gt; &amp;lt;tibble [0 × 1]&amp;gt;     0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 &amp;lt;split [3.6K/400]&amp;gt; Fold03 &amp;lt;tibble [5 × 7]&amp;gt; &amp;lt;tibble [0 × 1]&amp;gt;     0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 &amp;lt;split [3.6K/400]&amp;gt; Fold04 &amp;lt;tibble [5 × 7]&amp;gt; &amp;lt;tibble [0 × 1]&amp;gt;     0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 &amp;lt;split [3.6K/400]&amp;gt; Fold05 &amp;lt;tibble [5 × 7]&amp;gt; &amp;lt;tibble [0 × 1]&amp;gt;     0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 &amp;lt;split [3.6K/400]&amp;gt; Fold06 &amp;lt;tibble [5 × 7]&amp;gt; &amp;lt;tibble [0 × 1]&amp;gt;     0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 &amp;lt;split [3.6K/400]&amp;gt; Fold07 &amp;lt;tibble [5 × 7]&amp;gt; &amp;lt;tibble [0 × 1]&amp;gt;     0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 &amp;lt;split [3.6K/400]&amp;gt; Fold08 &amp;lt;tibble [5 × 7]&amp;gt; &amp;lt;tibble [0 × 1]&amp;gt;     0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 &amp;lt;split [3.6K/400]&amp;gt; Fold09 &amp;lt;tibble [5 × 7]&amp;gt; &amp;lt;tibble [0 × 1]&amp;gt;     0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 &amp;lt;split [3.6K/400]&amp;gt; Fold10 &amp;lt;tibble [5 × 7]&amp;gt; &amp;lt;tibble [0 × 1]&amp;gt;     0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 300 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These results show some improvement over the initial set. One issue is that so many settings are sub-optimal (as shown in the plot above for grid search) so there are poor results periodically. There are regions where the penalty parameter becomes too large and all of the predictors are removed from the model. These regions are also dependent on the number of terms. There is a fairly narrow ridge (sorry, pun intended!) where good performance can be achieved. Using more iterations would probably result in the search finding better results.
Let&amp;rsquo;s look at a plot of model performance versus the search iterations:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;autoplot&lt;/span&gt;(five_star_search, type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;performance&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/iter-plot-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;div class=&#34;note&#34;&gt;What would we do if we knew about the grid search results and wanted to try directed, iterative search? We would restrict the range for the number of hash features to be larger (especially with more data). We might also restrict the penalty and mixture parameters to have a lower upper bound.&lt;/div&gt;
&lt;h2 id=&#34;extracted-results&#34;&gt;Extracted results&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s return to the grid search results and examine the results of our &lt;code&gt;extract&lt;/code&gt; function. For each &lt;em&gt;fitted model&lt;/em&gt;, a tibble was saved that contains the relationship between the number of predictors and the penalty value. Let&amp;rsquo;s look at these results for the best model:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;params &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;select_best&lt;/span&gt;(five_star_glmnet, metric &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;roc_auc&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;params
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 x 4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   penalty mixture num_terms .config               &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;                 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1   0.695    0.01      4096 Preprocessor3_Model019&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Recall that we saved the glmnet results in a tibble. The column &lt;code&gt;five_star_glmnet$.extracts&lt;/code&gt; is a list of tibbles. As an example, the first element of the list is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;five_star_glmnet&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;.extracts[[1]]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 300 x 5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    num_terms penalty mixture .extracts          .config               &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;        &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;list&amp;gt;             &amp;lt;chr&amp;gt;                 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1       256       1    0.01 &amp;lt;tibble [100 × 2]&amp;gt; Preprocessor1_Model001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2       256       1    0.01 &amp;lt;tibble [100 × 2]&amp;gt; Preprocessor1_Model002&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3       256       1    0.01 &amp;lt;tibble [100 × 2]&amp;gt; Preprocessor1_Model003&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4       256       1    0.01 &amp;lt;tibble [100 × 2]&amp;gt; Preprocessor1_Model004&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5       256       1    0.01 &amp;lt;tibble [100 × 2]&amp;gt; Preprocessor1_Model005&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6       256       1    0.01 &amp;lt;tibble [100 × 2]&amp;gt; Preprocessor1_Model006&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7       256       1    0.01 &amp;lt;tibble [100 × 2]&amp;gt; Preprocessor1_Model007&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8       256       1    0.01 &amp;lt;tibble [100 × 2]&amp;gt; Preprocessor1_Model008&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9       256       1    0.01 &amp;lt;tibble [100 × 2]&amp;gt; Preprocessor1_Model009&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10       256       1    0.01 &amp;lt;tibble [100 × 2]&amp;gt; Preprocessor1_Model010&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 290 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;More nested tibbles! Let&amp;rsquo;s &lt;code&gt;unnest()&lt;/code&gt; the &lt;code&gt;five_star_glmnet$.extracts&lt;/code&gt; column:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(tidyr)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;extracted &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  five_star_glmnet &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  dplyr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(id, .extracts) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unnest&lt;/span&gt;(cols &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; .extracts)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;extracted
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 3,000 x 6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    id     num_terms penalty mixture .extracts          .config               &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;list&amp;gt;             &amp;lt;chr&amp;gt;                 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 Fold01       256       1    0.01 &amp;lt;tibble [100 × 2]&amp;gt; Preprocessor1_Model001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 Fold01       256       1    0.01 &amp;lt;tibble [100 × 2]&amp;gt; Preprocessor1_Model002&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 Fold01       256       1    0.01 &amp;lt;tibble [100 × 2]&amp;gt; Preprocessor1_Model003&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 Fold01       256       1    0.01 &amp;lt;tibble [100 × 2]&amp;gt; Preprocessor1_Model004&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 Fold01       256       1    0.01 &amp;lt;tibble [100 × 2]&amp;gt; Preprocessor1_Model005&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 Fold01       256       1    0.01 &amp;lt;tibble [100 × 2]&amp;gt; Preprocessor1_Model006&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 Fold01       256       1    0.01 &amp;lt;tibble [100 × 2]&amp;gt; Preprocessor1_Model007&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 Fold01       256       1    0.01 &amp;lt;tibble [100 × 2]&amp;gt; Preprocessor1_Model008&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 Fold01       256       1    0.01 &amp;lt;tibble [100 × 2]&amp;gt; Preprocessor1_Model009&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 Fold01       256       1    0.01 &amp;lt;tibble [100 × 2]&amp;gt; Preprocessor1_Model010&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 2,990 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;One thing to realize here is that &lt;code&gt;tune_grid()&lt;/code&gt; &lt;a href=&#34;https://tune.tidymodels.org/articles/extras/optimizations.html&#34;&gt;may not fit all of the models&lt;/a&gt; that are evaluated. In this case, for each value of &lt;code&gt;mixture&lt;/code&gt; and &lt;code&gt;num_terms&lt;/code&gt;, the model is fit over &lt;em&gt;all&lt;/em&gt; penalty values (this is a feature of this particular model and is not generally true for other engines). To select the best parameter set, we can exclude the &lt;code&gt;penalty&lt;/code&gt; column in &lt;code&gt;extracted&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;extracted &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  extracted &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  dplyr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;penalty) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;inner_join&lt;/span&gt;(params, by &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;num_terms&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;mixture&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Now remove it from the final results&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  dplyr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;penalty)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;extracted
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 200 x 6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    id     num_terms mixture .extracts       .config.x          .config.y        &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;list&amp;gt;          &amp;lt;chr&amp;gt;              &amp;lt;chr&amp;gt;            &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 Fold01      4096    0.01 &amp;lt;tibble [100 ×… Preprocessor3_Mod… Preprocessor3_Mo…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 Fold01      4096    0.01 &amp;lt;tibble [100 ×… Preprocessor3_Mod… Preprocessor3_Mo…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 Fold01      4096    0.01 &amp;lt;tibble [100 ×… Preprocessor3_Mod… Preprocessor3_Mo…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 Fold01      4096    0.01 &amp;lt;tibble [100 ×… Preprocessor3_Mod… Preprocessor3_Mo…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 Fold01      4096    0.01 &amp;lt;tibble [100 ×… Preprocessor3_Mod… Preprocessor3_Mo…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 Fold01      4096    0.01 &amp;lt;tibble [100 ×… Preprocessor3_Mod… Preprocessor3_Mo…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 Fold01      4096    0.01 &amp;lt;tibble [100 ×… Preprocessor3_Mod… Preprocessor3_Mo…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 Fold01      4096    0.01 &amp;lt;tibble [100 ×… Preprocessor3_Mod… Preprocessor3_Mo…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 Fold01      4096    0.01 &amp;lt;tibble [100 ×… Preprocessor3_Mod… Preprocessor3_Mo…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 Fold01      4096    0.01 &amp;lt;tibble [100 ×… Preprocessor3_Mod… Preprocessor3_Mo…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 190 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can get at the results that we want using another &lt;code&gt;unnest()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;extracted &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  extracted &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unnest&lt;/span&gt;(col &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; .extracts) &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# &amp;lt;- these contain a `penalty` column&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;extracted
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 20,000 x 7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    id     num_terms mixture penalty num_vars .config.x         .config.y        &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;             &amp;lt;chr&amp;gt;            &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 Fold01      4096    0.01    9.01        0 Preprocessor3_Mo… Preprocessor3_Mo…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 Fold01      4096    0.01    8.60        1 Preprocessor3_Mo… Preprocessor3_Mo…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 Fold01      4096    0.01    8.21        2 Preprocessor3_Mo… Preprocessor3_Mo…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 Fold01      4096    0.01    7.84        2 Preprocessor3_Mo… Preprocessor3_Mo…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 Fold01      4096    0.01    7.48        3 Preprocessor3_Mo… Preprocessor3_Mo…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 Fold01      4096    0.01    7.14        3 Preprocessor3_Mo… Preprocessor3_Mo…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 Fold01      4096    0.01    6.82        4 Preprocessor3_Mo… Preprocessor3_Mo…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 Fold01      4096    0.01    6.51        6 Preprocessor3_Mo… Preprocessor3_Mo…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 Fold01      4096    0.01    6.21        7 Preprocessor3_Mo… Preprocessor3_Mo…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 Fold01      4096    0.01    5.93        7 Preprocessor3_Mo… Preprocessor3_Mo…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 19,990 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s look at a plot of these results (per resample):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(extracted, &lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; penalty, y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; num_vars)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_line&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(group &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; id, col &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; id), alpha &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;.5&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;ylab&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Number of retained predictors&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;scale_x_log10&lt;/span&gt;()  &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;ggtitle&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;paste&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;mixture = &amp;#34;&lt;/span&gt;, params&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;mixture, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;and&amp;#34;&lt;/span&gt;, params&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;num_terms, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;features&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;theme&lt;/span&gt;(legend.position &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/var-plot-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;These results might help guide the choice of the &lt;code&gt;penalty&lt;/code&gt; range if more optimization was conducted.&lt;/p&gt;
&lt;h2 id=&#34;session-information&#34;&gt;Session information&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#&amp;gt; ─ Session info ───────────────────────────────────────────────────────────────
#&amp;gt;  setting  value                       
#&amp;gt;  version  R version 4.0.3 (2020-10-10)
#&amp;gt;  os       macOS Mojave 10.14.6        
#&amp;gt;  system   x86_64, darwin17.0          
#&amp;gt;  ui       X11                         
#&amp;gt;  language (EN)                        
#&amp;gt;  collate  en_US.UTF-8                 
#&amp;gt;  ctype    en_US.UTF-8                 
#&amp;gt;  tz       America/Denver              
#&amp;gt;  date     2020-12-07                  
#&amp;gt; 
#&amp;gt; ─ Packages ───────────────────────────────────────────────────────────────────
#&amp;gt;  package      * version date       lib source        
#&amp;gt;  broom        * 0.7.2   2020-10-20 [1] CRAN (R 4.0.2)
#&amp;gt;  dials        * 0.0.9   2020-09-16 [1] CRAN (R 4.0.2)
#&amp;gt;  dplyr        * 1.0.2   2020-08-18 [1] CRAN (R 4.0.2)
#&amp;gt;  ggplot2      * 3.3.2   2020-06-19 [1] CRAN (R 4.0.0)
#&amp;gt;  infer        * 0.5.3   2020-07-14 [1] CRAN (R 4.0.0)
#&amp;gt;  parsnip      * 0.1.4   2020-10-27 [1] CRAN (R 4.0.2)
#&amp;gt;  purrr        * 0.3.4   2020-04-17 [1] CRAN (R 4.0.0)
#&amp;gt;  recipes      * 0.1.15  2020-11-11 [1] CRAN (R 4.0.2)
#&amp;gt;  rlang        * 0.4.9   2020-11-26 [1] CRAN (R 4.0.2)
#&amp;gt;  rsample      * 0.0.8   2020-09-23 [1] CRAN (R 4.0.2)
#&amp;gt;  stopwords    * 2.0     2020-04-14 [1] CRAN (R 4.0.0)
#&amp;gt;  textfeatures * 0.3.3   2019-09-03 [1] CRAN (R 4.0.2)
#&amp;gt;  textrecipes  * 0.4.0   2020-11-12 [1] CRAN (R 4.0.2)
#&amp;gt;  tibble       * 3.0.4   2020-10-12 [1] CRAN (R 4.0.2)
#&amp;gt;  tidymodels   * 0.1.2   2020-11-22 [1] CRAN (R 4.0.2)
#&amp;gt;  tune         * 0.1.2   2020-11-17 [1] CRAN (R 4.0.3)
#&amp;gt;  workflows    * 0.2.1   2020-10-08 [1] CRAN (R 4.0.2)
#&amp;gt;  yardstick    * 0.0.7   2020-07-13 [1] CRAN (R 4.0.2)
#&amp;gt; 
#&amp;gt; [1] /Library/Frameworks/R.framework/Versions/4.0/Resources/library
&lt;/code&gt;&lt;/pre&gt;</description>
  </item>
  
<item>
  <title>A predictive modeling case study</title>
  <link>https://www.tidymodels.org/start/case-study/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/start/case-study/</guid>
  <description>&lt;h2 id=&#34;intro&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Each of the four previous &lt;a href=&#34;https://www.tidymodels.org/start/&#34;&gt;&lt;em&gt;Get Started&lt;/em&gt;&lt;/a&gt; articles has focused on a single task related to modeling. Along the way, we also introduced core packages in the tidymodels ecosystem and some of the key functions you&amp;rsquo;ll need to start working with models. In this final case study, we will use all of the previous articles as a foundation to build a predictive model from beginning to end with data on hotel stays.&lt;/p&gt;
&lt;img src=&#34;img/hotel.jpg&#34; width=&#34;90%&#34; /&gt;
&lt;p&gt;To use code in this article,  you will need to install the following packages: glmnet, ranger, readr, tidymodels, and vip.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(tidymodels)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Helper packages&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(readr)       &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# for importing data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(vip)         &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# for variable importance plots&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt; Alternatively, open an interactive version of this article in your browser: &lt;/p&gt;

&lt;a href=&#34;https://rstudio.cloud/project/2674862&#34;&gt;
  &lt;button class=&#34;test-drive-btn&#34;&gt;&lt;i class=&#34;fa fa-cloud&#34;&gt;&lt;/i&gt; Test Drive on RStudio Cloud&lt;/button&gt;
&lt;/a&gt;

&lt;h2 id=&#34;data&#34;&gt;The Hotel Bookings Data&lt;/h2&gt;
&lt;p&gt;Let’s use hotel bookings data from &lt;a href=&#34;https://doi.org/10.1016/j.dib.2018.11.126&#34;&gt;Antonio, Almeida, and Nunes (2019)&lt;/a&gt; to predict which hotel stays included children and/or babies, based on the other characteristics of the stays such as which hotel the guests stay at, how much they pay, etc. This was also a &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/tree/master/data/2020/2020-02-11&#34;&gt;&lt;code&gt;#TidyTuesday&lt;/code&gt;&lt;/a&gt; dataset with a &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/tree/master/data/2020/2020-02-11#data-dictionary&#34;&gt;data dictionary&lt;/a&gt; you may want to look over to learn more about the variables. We&amp;rsquo;ll use a slightly &lt;a href=&#34;https://gist.github.com/topepo/05a74916c343e57a71c51d6bc32a21ce&#34;&gt;edited version of the dataset&lt;/a&gt; for this case study.&lt;/p&gt;
&lt;p&gt;To start, let&amp;rsquo;s read our hotel data into R, which we&amp;rsquo;ll do by providing &lt;a href=&#34;https://readr.tidyverse.org/reference/read_delim.html&#34;&gt;&lt;code&gt;readr::read_csv()&lt;/code&gt;&lt;/a&gt; with a url where our CSV data is located (&amp;quot;&lt;a href=&#34;https://tidymodels.org/start/case-study/hotels.csv&#34;&gt;https://tidymodels.org/start/case-study/hotels.csv&lt;/a&gt;&amp;quot;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(tidymodels)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(readr)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hotels &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;read_csv&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;https://tidymodels.org/start/case-study/hotels.csv&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;across&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;where&lt;/span&gt;(is.character), as.factor))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;dim&lt;/span&gt;(hotels)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 50000    23&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the original paper, the &lt;a href=&#34;https://doi.org/10.1016/j.dib.2018.11.126&#34;&gt;authors&lt;/a&gt; caution that the distribution of many variables (such as number of adults/children, room type, meals bought, country of origin of the guests, and so forth) is different for hotel stays that were canceled versus not canceled. This makes sense because much of that information is gathered (or gathered again more accurately) when guests check in for their stay, so canceled bookings are likely to have more missing data than non-canceled bookings, and/or to have different characteristics when data is not missing. Given this, it is unlikely that we can reliably detect meaningful differences between guests who cancel their bookings and those who do not with this dataset. To build our models here, we have already filtered the data to include only the bookings that did not cancel, so we&amp;rsquo;ll be analyzing &lt;em&gt;hotel stays&lt;/em&gt; only.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;glimpse&lt;/span&gt;(hotels)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Rows: 50,000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Columns: 23&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ hotel                          &amp;lt;fct&amp;gt; City_Hotel, City_Hotel, Resort_Hotel, R…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ lead_time                      &amp;lt;dbl&amp;gt; 217, 2, 95, 143, 136, 67, 47, 56, 80, 6…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ stays_in_weekend_nights        &amp;lt;dbl&amp;gt; 1, 0, 2, 2, 1, 2, 0, 0, 0, 2, 1, 0, 1, …&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ stays_in_week_nights           &amp;lt;dbl&amp;gt; 3, 1, 5, 6, 4, 2, 2, 3, 4, 2, 2, 1, 2, …&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ adults                         &amp;lt;dbl&amp;gt; 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 1, 2, …&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ children                       &amp;lt;fct&amp;gt; none, none, none, none, none, none, chi…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ meal                           &amp;lt;fct&amp;gt; BB, BB, BB, HB, HB, SC, BB, BB, BB, BB,…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ country                        &amp;lt;fct&amp;gt; DEU, PRT, GBR, ROU, PRT, GBR, ESP, ESP,…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ market_segment                 &amp;lt;fct&amp;gt; Offline_TA/TO, Direct, Online_TA, Onlin…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ distribution_channel           &amp;lt;fct&amp;gt; TA/TO, Direct, TA/TO, TA/TO, Direct, TA…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ is_repeated_guest              &amp;lt;dbl&amp;gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ previous_cancellations         &amp;lt;dbl&amp;gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ previous_bookings_not_canceled &amp;lt;dbl&amp;gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ reserved_room_type             &amp;lt;fct&amp;gt; A, D, A, A, F, A, C, B, D, A, A, D, A, …&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ assigned_room_type             &amp;lt;fct&amp;gt; A, K, A, A, F, A, C, A, D, A, D, D, A, …&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ booking_changes                &amp;lt;dbl&amp;gt; 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ deposit_type                   &amp;lt;fct&amp;gt; No_Deposit, No_Deposit, No_Deposit, No_…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ days_in_waiting_list           &amp;lt;dbl&amp;gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ customer_type                  &amp;lt;fct&amp;gt; Transient-Party, Transient, Transient, …&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ average_daily_rate             &amp;lt;dbl&amp;gt; 80.75, 170.00, 8.00, 81.00, 157.60, 49.…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ required_car_parking_spaces    &amp;lt;fct&amp;gt; none, none, none, none, none, none, non…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ total_of_special_requests      &amp;lt;dbl&amp;gt; 1, 3, 2, 1, 4, 1, 1, 1, 1, 1, 0, 1, 0, …&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; $ arrival_date                   &amp;lt;date&amp;gt; 2016-09-01, 2017-08-25, 2016-11-19, 20…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We will build a model to predict which actual hotel stays included children and/or babies, and which did not. Our outcome variable &lt;code&gt;children&lt;/code&gt; is a factor variable with two levels:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hotels &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;count&lt;/span&gt;(children) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(prop &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; n&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;sum&lt;/span&gt;(n))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 2 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   children     n   prop&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;fct&amp;gt;    &amp;lt;int&amp;gt;  &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 children  4038 0.0808&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 none     45962 0.919&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can see that children were only in 8.1% of the reservations. This type of class imbalance can often wreak havoc on an analysis. While there are several methods for combating this issue using &lt;a href=&#34;https://www.tidymodels.org/find/recipes/&#34;&gt;recipes&lt;/a&gt; (search for steps to &lt;code&gt;upsample&lt;/code&gt; or &lt;code&gt;downsample&lt;/code&gt;) or other more specialized packages like &lt;a href=&#34;https://themis.tidymodels.org/&#34;&gt;themis&lt;/a&gt;, the analyses shown below analyze the data as-is.&lt;/p&gt;
&lt;h2 id=&#34;data-split&#34;&gt;Data Splitting &amp;amp; Resampling&lt;/h2&gt;
&lt;p&gt;For a data splitting strategy, let&amp;rsquo;s reserve 25% of the stays to the test set. As in our &lt;a href=&#34;https://www.tidymodels.org/start/resampling/#data-split&#34;&gt;&lt;em&gt;Evaluate your model with resampling&lt;/em&gt;&lt;/a&gt; article, we know our outcome variable &lt;code&gt;children&lt;/code&gt; is pretty imbalanced so we&amp;rsquo;ll use a stratified random sample:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;123&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;splits      &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;initial_split&lt;/span&gt;(hotels, strata &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; children)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hotel_other &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;training&lt;/span&gt;(splits)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hotel_test  &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;testing&lt;/span&gt;(splits)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# training set proportions by children&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hotel_other &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;count&lt;/span&gt;(children) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(prop &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; n&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;sum&lt;/span&gt;(n))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 2 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   children     n   prop&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;fct&amp;gt;    &amp;lt;int&amp;gt;  &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 children  3027 0.0807&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 none     34473 0.919&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# test set proportions by children&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hotel_test  &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;count&lt;/span&gt;(children) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(prop &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; n&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;sum&lt;/span&gt;(n))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 2 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   children     n   prop&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;fct&amp;gt;    &amp;lt;int&amp;gt;  &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 children  1011 0.0809&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 none     11489 0.919&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In our articles so far, we&amp;rsquo;ve relied on 10-fold cross-validation as the primary resampling method using &lt;a href=&#34;https://rsample.tidymodels.org/reference/vfold_cv.html&#34;&gt;&lt;code&gt;rsample::vfold_cv()&lt;/code&gt;&lt;/a&gt;. This has created 10 different resamples of the training set (which we further split into &lt;em&gt;analysis&lt;/em&gt; and &lt;em&gt;assessment&lt;/em&gt; sets), producing 10 different performance metrics that we then aggregated.&lt;/p&gt;
&lt;p&gt;For this case study, rather than using multiple iterations of resampling, let&amp;rsquo;s create a single resample called a &lt;em&gt;validation set&lt;/em&gt;. In tidymodels, a validation set is treated as a single iteration of resampling. This will be a split from the 37,500 stays that were not used for testing, which we called &lt;code&gt;hotel_other&lt;/code&gt;. This split creates two new datasets:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the set held out for the purpose of measuring performance, called the &lt;em&gt;validation set&lt;/em&gt;, and&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the remaining data used to fit the model, called the &lt;em&gt;training set&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;img/validation-split.svg&#34; width=&#34;50%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;
&lt;p&gt;We&amp;rsquo;ll use the &lt;code&gt;validation_split()&lt;/code&gt; function to allocate 20% of the &lt;code&gt;hotel_other&lt;/code&gt; stays to the &lt;em&gt;validation set&lt;/em&gt; and 30,000 stays to the &lt;em&gt;training set&lt;/em&gt;. This means that our model performance metrics will be computed on a single set of 7,500 hotel stays. This is fairly large, so the amount of data should provide enough precision to be a reliable indicator for how well each model predicts the outcome with a single iteration of resampling.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;234&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;val_set &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;validation_split&lt;/span&gt;(hotel_other, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            strata &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; children, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            prop &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.80&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;val_set
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # Validation Set Split (0.8/0.2)  using stratification &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 × 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   splits               id        &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;list&amp;gt;               &amp;lt;chr&amp;gt;     &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 &amp;lt;split [30000/7500]&amp;gt; validation&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This function, like &lt;code&gt;initial_split()&lt;/code&gt;, has the same &lt;code&gt;strata&lt;/code&gt; argument, which uses stratified sampling to create the resample. This means that we&amp;rsquo;ll have roughly the same proportions of hotel stays with and without children in our new validation and training sets, as compared to the original &lt;code&gt;hotel_other&lt;/code&gt; proportions.&lt;/p&gt;
&lt;h2 id=&#34;first-model&#34;&gt;A first model: penalized logistic regression&lt;/h2&gt;
&lt;p&gt;Since our outcome variable &lt;code&gt;children&lt;/code&gt; is categorical, logistic regression would be a good first model to start. Let&amp;rsquo;s use a model that can perform feature selection during training. The &lt;a href=&#34;https://cran.r-project.org/web/packages/glmnet/index.html&#34;&gt;glmnet&lt;/a&gt; R package fits a generalized linear model via penalized maximum likelihood. This method of estimating the logistic regression slope parameters uses a &lt;em&gt;penalty&lt;/em&gt; on the process so that less relevant predictors are driven towards a value of zero. One of the glmnet penalization methods, called the &lt;a href=&#34;https://en.wikipedia.org/wiki/Lasso_(statistics)&#34;&gt;lasso method&lt;/a&gt;, can actually set the predictor slopes to zero if a large enough penalty is used.&lt;/p&gt;
&lt;h3 id=&#34;build-the-model&#34;&gt;Build the model&lt;/h3&gt;
&lt;p&gt;To specify a penalized logistic regression model that uses a feature selection penalty, let&amp;rsquo;s use the parsnip package with the &lt;a href=&#34;https://www.tidymodels.org/find/parsnip/&#34;&gt;glmnet engine&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lr_mod &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;logistic_reg&lt;/span&gt;(penalty &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tune&lt;/span&gt;(), mixture &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;set_engine&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;glmnet&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ll set the &lt;code&gt;penalty&lt;/code&gt; argument to &lt;code&gt;tune()&lt;/code&gt; as a placeholder for now. This is a model hyperparameter that we will &lt;a href=&#34;https://www.tidymodels.org/start/tuning/&#34;&gt;tune&lt;/a&gt; to find the best value for making predictions with our data. Setting &lt;code&gt;mixture&lt;/code&gt; to a value of one means that the glmnet model will potentially remove irrelevant predictors and choose a simpler model.&lt;/p&gt;
&lt;h3 id=&#34;create-the-recipe&#34;&gt;Create the recipe&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s create a &lt;a href=&#34;https://www.tidymodels.org/start/recipes/&#34;&gt;recipe&lt;/a&gt; to define the preprocessing steps we need to prepare our hotel stays data for this model. It might make sense to create a set of date-based predictors that reflect important components related to the arrival date. We have already introduced a &lt;a href=&#34;https://www.tidymodels.org/start/recipes/#features&#34;&gt;number of useful recipe steps&lt;/a&gt; for creating features from dates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;step_date()&lt;/code&gt; creates predictors for the year, month, and day of the week.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;step_holiday()&lt;/code&gt; generates a set of indicator variables for specific holidays. Although we don&amp;rsquo;t know where these two hotels are located, we do know that the countries for origin for most stays are based in Europe.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;step_rm()&lt;/code&gt; removes variables; here we&amp;rsquo;ll use it to remove the original date variable since we no longer want it in the model.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally, all categorical predictors (e.g., &lt;code&gt;distribution_channel&lt;/code&gt;, &lt;code&gt;hotel&lt;/code&gt;, &amp;hellip;) should be converted to dummy variables, and all numeric predictors need to be centered and scaled.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;step_dummy()&lt;/code&gt; converts characters or factors (i.e., nominal variables) into one or more numeric binary model terms for the levels of the original data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;step_zv()&lt;/code&gt; removes indicator variables that only contain a single unique value (e.g. all zeros). This is important because, for penalized models, the predictors should be centered and scaled.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;step_normalize()&lt;/code&gt; centers and scales numeric variables.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Putting all these steps together into a recipe for a penalized logistic regression model, we have:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;holidays &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;AllSouls&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;AshWednesday&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ChristmasEve&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Easter&amp;#34;&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ChristmasDay&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;GoodFriday&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;NewYearsDay&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;PalmSunday&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lr_recipe &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;recipe&lt;/span&gt;(children &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; ., data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; hotel_other) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_date&lt;/span&gt;(arrival_date) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_holiday&lt;/span&gt;(arrival_date, holidays &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; holidays) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_rm&lt;/span&gt;(arrival_date) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_dummy&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;all_nominal_predictors&lt;/span&gt;()) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_zv&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;all_predictors&lt;/span&gt;()) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_normalize&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;all_predictors&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;create-the-workflow&#34;&gt;Create the workflow&lt;/h3&gt;
&lt;p&gt;As we introduced in &lt;a href=&#34;https://www.tidymodels.org/start/recipes/#fit-workflow&#34;&gt;&lt;em&gt;Preprocess your data with recipes&lt;/em&gt;&lt;/a&gt;, let&amp;rsquo;s bundle the model and recipe into a single &lt;code&gt;workflow()&lt;/code&gt; object to make management of the R objects easier:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lr_workflow &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;workflow&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;add_model&lt;/span&gt;(lr_mod) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;add_recipe&lt;/span&gt;(lr_recipe)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;create-the-grid-for-tuning&#34;&gt;Create the grid for tuning&lt;/h3&gt;
&lt;p&gt;Before we fit this model, we need to set up a grid of &lt;code&gt;penalty&lt;/code&gt; values to tune. In our &lt;a href=&#34;https://www.tidymodels.org/start/tuning/&#34;&gt;&lt;em&gt;Tune model parameters&lt;/em&gt;&lt;/a&gt; article, we used &lt;a href=&#34;start/tuning/#tune-grid&#34;&gt;&lt;code&gt;dials::grid_regular()&lt;/code&gt;&lt;/a&gt; to create an expanded grid based on a combination of two hyperparameters. Since we have only one hyperparameter to tune here, we can set the grid up manually using a one-column tibble with 30 candidate values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lr_reg_grid &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tibble&lt;/span&gt;(penalty &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;^seq&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-4&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;-1&lt;/span&gt;, length.out &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;30&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lr_reg_grid &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;top_n&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-5&lt;/span&gt;) &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# lowest penalty values&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Selecting by penalty&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 5 × 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    penalty&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;      &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 0.0001  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 0.000127&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 0.000161&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4 0.000204&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5 0.000259&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lr_reg_grid &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;top_n&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;)  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# highest penalty values&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Selecting by penalty&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 5 × 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   penalty&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1  0.0386&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2  0.0489&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3  0.0621&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4  0.0788&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5  0.1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;train-and-tune-the-model&#34;&gt;Train and tune the model&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s use &lt;code&gt;tune::tune_grid()&lt;/code&gt; to train these 30 penalized logistic regression models. We&amp;rsquo;ll also save the validation set predictions (via the call to &lt;code&gt;control_grid()&lt;/code&gt;) so that diagnostic information can be available after the model fit. The area under the ROC curve will be used to quantify how well the model performs across a continuum of event thresholds (recall that the event rate—the proportion of stays including children— is very low for these data).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lr_res &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lr_workflow &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;tune_grid&lt;/span&gt;(val_set,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            grid &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; lr_reg_grid,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            control &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;control_grid&lt;/span&gt;(save_pred &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            metrics &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;metric_set&lt;/span&gt;(roc_auc))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It might be easier to visualize the validation set metrics by plotting the area under the ROC curve against the range of penalty values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lr_plot &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lr_res &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;collect_metrics&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; penalty, y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; mean)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_point&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_line&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;ylab&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Area under the ROC Curve&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;scale_x_log10&lt;/span&gt;(labels &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; scales&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;label_number&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lr_plot 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/logistic-results-1.svg&#34; width=&#34;576&#34; /&gt;
&lt;p&gt;This plots shows us that model performance is generally better at the smaller penalty values. This suggests that the majority of the predictors are important to the model. We also see a steep drop in the area under the ROC curve towards the highest penalty values. This happens because a large enough penalty will remove &lt;em&gt;all&lt;/em&gt; predictors from the model, and not surprisingly predictive accuracy plummets with no predictors in the model (recall that an ROC AUC value of 0.50 means that the model does no better than chance at predicting the correct class).&lt;/p&gt;
&lt;p&gt;Our model performance seems to plateau at the smaller penalty values, so going by the &lt;code&gt;roc_auc&lt;/code&gt; metric alone could lead us to multiple options for the &amp;ldquo;best&amp;rdquo; value for this hyperparameter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top_models &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lr_res &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;show_best&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;roc_auc&amp;#34;&lt;/span&gt;, n &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;15&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;arrange&lt;/span&gt;(penalty) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top_models
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 15 × 7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     penalty .metric .estimator  mean     n std_err .config              &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;                &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 0.000127 roc_auc binary     0.872     1      NA Preprocessor1_Model02&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 0.000161 roc_auc binary     0.872     1      NA Preprocessor1_Model03&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 0.000204 roc_auc binary     0.873     1      NA Preprocessor1_Model04&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 0.000259 roc_auc binary     0.873     1      NA Preprocessor1_Model05&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 0.000329 roc_auc binary     0.874     1      NA Preprocessor1_Model06&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 0.000418 roc_auc binary     0.874     1      NA Preprocessor1_Model07&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 0.000530 roc_auc binary     0.875     1      NA Preprocessor1_Model08&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 0.000672 roc_auc binary     0.875     1      NA Preprocessor1_Model09&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 0.000853 roc_auc binary     0.876     1      NA Preprocessor1_Model10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 0.00108  roc_auc binary     0.876     1      NA Preprocessor1_Model11&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 11 0.00137  roc_auc binary     0.876     1      NA Preprocessor1_Model12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 12 0.00174  roc_auc binary     0.876     1      NA Preprocessor1_Model13&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 13 0.00221  roc_auc binary     0.876     1      NA Preprocessor1_Model14&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 14 0.00281  roc_auc binary     0.875     1      NA Preprocessor1_Model15&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 15 0.00356  roc_auc binary     0.873     1      NA Preprocessor1_Model16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Every candidate model in this tibble likely includes more predictor variables than the model in the row below it. If we used &lt;code&gt;select_best()&lt;/code&gt;, it would return candidate model 11 with a penalty value of 0.00137, shown with the dotted line below.&lt;/p&gt;
&lt;img src=&#34;figs/lr-plot-lines-1.svg&#34; width=&#34;576&#34; /&gt;
&lt;p&gt;However, we may want to choose a penalty value further along the x-axis, closer to where we start to see the decline in model performance. For example, candidate model 12 with a penalty value of 0.00174 has effectively the same performance as the numerically best model, but might eliminate more predictors. This penalty value is marked by the solid line above. In general, fewer irrelevant predictors is better. If performance is about the same, we&amp;rsquo;d prefer to choose a higher penalty value.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s select this value and visualize the validation set ROC curve:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lr_best &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lr_res &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;collect_metrics&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;arrange&lt;/span&gt;(penalty) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;slice&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lr_best
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 × 7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   penalty .metric .estimator  mean     n std_err .config              &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;                &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 0.00137 roc_auc binary     0.876     1      NA Preprocessor1_Model12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lr_auc &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lr_res &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;collect_predictions&lt;/span&gt;(parameters &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; lr_best) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;roc_curve&lt;/span&gt;(children, .pred_children) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(model &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Logistic Regression&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;autoplot&lt;/span&gt;(lr_auc)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/logistic-roc-curve-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;The level of performance generated by this logistic regression model is good, but not groundbreaking. Perhaps the linear nature of the prediction equation is too limiting for this data set. As a next step, we might consider a highly non-linear model generated using a tree-based ensemble method.&lt;/p&gt;
&lt;h2 id=&#34;second-model&#34;&gt;A second model: tree-based ensemble&lt;/h2&gt;
&lt;p&gt;An effective and low-maintenance modeling technique is a &lt;em&gt;random forest&lt;/em&gt;. This model was also used in our &lt;a href=&#34;https://www.tidymodels.org/start/resampling/&#34;&gt;&lt;em&gt;Evaluate your model with resampling&lt;/em&gt;&lt;/a&gt; article. Compared to logistic regression, a random forest model is more flexible. A random forest is an &lt;em&gt;ensemble model&lt;/em&gt; typically made up of thousands of decision trees, where each individual tree sees a slightly different version of the training data and learns a sequence of splitting rules to predict new data. Each tree is non-linear, and aggregating across trees makes random forests also non-linear but more robust and stable compared to individual trees. Tree-based models like random forests require very little preprocessing and can effectively handle many types of predictors (sparse, skewed, continuous, categorical, etc.).&lt;/p&gt;
&lt;h3 id=&#34;build-the-model-and-improve-training-time&#34;&gt;Build the model and improve training time&lt;/h3&gt;
&lt;p&gt;Although the default hyperparameters for random forests tend to give reasonable results, we&amp;rsquo;ll plan to tune two hyperparameters that we think could improve performance. Unfortunately, random forest models can be computationally expensive to train and to tune. The computations required for model tuning can usually be easily parallelized to improve training time. The tune package can do &lt;a href=&#34;https://tune.tidymodels.org/articles/extras/optimizations.html#parallel-processing&#34;&gt;parallel processing&lt;/a&gt; for you, and allows users to use multiple cores or separate machines to fit models.&lt;/p&gt;
&lt;p&gt;But, here we are using a single validation set, so parallelization isn&amp;rsquo;t an option using the tune package. For this specific case study, a good alternative is provided by the engine itself. The ranger package offers a built-in way to compute individual random forest models in parallel. To do this, we need to know the the number of cores we have to work with. We can use the parallel package to query the number of cores on your own computer to understand how much parallelization you can do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cores &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; parallel&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;detectCores&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cores
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have 10 cores to work with. We can pass this information to the ranger engine when we set up our parsnip &lt;code&gt;rand_forest()&lt;/code&gt; model. To enable parallel processing, we can pass engine-specific arguments like &lt;code&gt;num.threads&lt;/code&gt; to ranger when we set the engine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rf_mod &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;rand_forest&lt;/span&gt;(mtry &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tune&lt;/span&gt;(), min_n &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tune&lt;/span&gt;(), trees &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1000&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;set_engine&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ranger&amp;#34;&lt;/span&gt;, num.threads &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; cores) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;set_mode&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;classification&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This works well in this modeling context, but it bears repeating: if you use any other resampling method, let tune do the parallel processing for you — we typically do not recommend relying on the modeling engine (like we did here) to do this.&lt;/p&gt;
&lt;p&gt;In this model, we used &lt;code&gt;tune()&lt;/code&gt; as a placeholder for the &lt;code&gt;mtry&lt;/code&gt; and &lt;code&gt;min_n&lt;/code&gt; argument values, because these are our two hyperparameters that we will &lt;a href=&#34;https://www.tidymodels.org/start/tuning/&#34;&gt;tune&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;create-the-recipe-and-workflow&#34;&gt;Create the recipe and workflow&lt;/h3&gt;
&lt;p&gt;Unlike penalized logistic regression models, random forest models do not require &lt;a href=&#34;https://bookdown.org/max/FES/categorical-trees.html&#34;&gt;dummy&lt;/a&gt; or normalized predictor variables. Nevertheless, we want to do some feature engineering again with our &lt;code&gt;arrival_date&lt;/code&gt; variable. As before, the date predictor is engineered so that the random forest model does not need to work hard to tease these potential patterns from the data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rf_recipe &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;recipe&lt;/span&gt;(children &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; ., data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; hotel_other) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_date&lt;/span&gt;(arrival_date) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_holiday&lt;/span&gt;(arrival_date) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_rm&lt;/span&gt;(arrival_date) 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Adding this recipe to our parsnip model gives us a new workflow for predicting whether a hotel stay included children and/or babies as guests with a random forest:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rf_workflow &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;workflow&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;add_model&lt;/span&gt;(rf_mod) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;add_recipe&lt;/span&gt;(rf_recipe)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;train-and-tune-the-model-1&#34;&gt;Train and tune the model&lt;/h3&gt;
&lt;p&gt;When we set up our parsnip model, we chose two hyperparameters for tuning:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rf_mod
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Random Forest Model Specification (classification)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Main Arguments:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   mtry = tune()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   trees = 1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   min_n = tune()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Engine-Specific Arguments:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   num.threads = cores&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Computational engine: ranger&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# show what will be tuned&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;extract_parameter_set_dials&lt;/span&gt;(rf_mod)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Collection of 2 parameters for tuning&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  identifier  type    object&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;        mtry  mtry nparam[?]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       min_n min_n nparam[+]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Model parameters needing finalization:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    # Randomly Selected Predictors (&amp;#39;mtry&amp;#39;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; See `?dials::finalize` or `?dials::update.parameters` for more information.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;mtry&lt;/code&gt; hyperparameter sets the number of predictor variables that each node in the decision tree &amp;ldquo;sees&amp;rdquo; and can learn about, so it can range from 1 to the total number of features present; when &lt;code&gt;mtry&lt;/code&gt; = all possible features, the model is the same as bagging decision trees. The &lt;code&gt;min_n&lt;/code&gt; hyperparameter sets the minimum &lt;code&gt;n&lt;/code&gt; to split at any node.&lt;/p&gt;
&lt;p&gt;We will use a space-filling design to tune, with 25 candidate models:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;345&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rf_res &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rf_workflow &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;tune_grid&lt;/span&gt;(val_set,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            grid &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;25&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            control &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;control_grid&lt;/span&gt;(save_pred &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            metrics &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;metric_set&lt;/span&gt;(roc_auc))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; i Creating pre-processing data to finalize unknown parameter: mtry&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The message printed above &lt;em&gt;&amp;ldquo;Creating pre-processing data to finalize unknown parameter: mtry&amp;rdquo;&lt;/em&gt; is related to the size of the data set. Since &lt;code&gt;mtry&lt;/code&gt; depends on the number of predictors in the data set, &lt;code&gt;tune_grid()&lt;/code&gt; determines the upper bound for &lt;code&gt;mtry&lt;/code&gt; once it receives the data.&lt;/p&gt;
&lt;p&gt;Here are our top 5 random forest models, out of the 25 candidates:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rf_res &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;show_best&lt;/span&gt;(metric &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;roc_auc&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 5 × 8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    mtry min_n .metric .estimator  mean     n std_err .config              &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;                &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     8     7 roc_auc binary     0.926     1      NA Preprocessor1_Model13&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2    12     7 roc_auc binary     0.926     1      NA Preprocessor1_Model01&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3    13     4 roc_auc binary     0.925     1      NA Preprocessor1_Model05&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4     9    12 roc_auc binary     0.924     1      NA Preprocessor1_Model19&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5     6    18 roc_auc binary     0.924     1      NA Preprocessor1_Model24&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Right away, we see that these values for area under the ROC look more promising than our top model using penalized logistic regression, which yielded an ROC AUC of 0.876.&lt;/p&gt;
&lt;p&gt;Plotting the results of the tuning process highlights that both &lt;code&gt;mtry&lt;/code&gt; (number of predictors at each node) and &lt;code&gt;min_n&lt;/code&gt; (minimum number of data points required to keep splitting) should be fairly small to optimize performance. However, the range of the y-axis indicates that the model is very robust to the choice of these parameter values — all but one of the ROC AUC values are greater than 0.90.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;autoplot&lt;/span&gt;(rf_res)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/rf-results-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;Let&amp;rsquo;s select the best model according to the ROC AUC metric. Our final tuning parameter values are:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rf_best &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rf_res &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;select_best&lt;/span&gt;(metric &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;roc_auc&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rf_best
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    mtry min_n .config              &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;                &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     8     7 Preprocessor1_Model13&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To calculate the data needed to plot the ROC curve, we use &lt;code&gt;collect_predictions()&lt;/code&gt;. This is only possible after tuning with &lt;code&gt;control_grid(save_pred = TRUE)&lt;/code&gt;. In the output, you can see the two columns that hold our class probabilities for predicting hotel stays including and not including children.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rf_res &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;collect_predictions&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 187,500 × 8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   id         .pred_children .pred_none  .row  mtry min_n children .config       &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;               &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;fct&amp;gt;    &amp;lt;chr&amp;gt;         &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 validation         0.152       0.848    13    12     7 none     Preprocessor1…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 validation         0.0302      0.970    20    12     7 none     Preprocessor1…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 validation         0.513       0.487    22    12     7 children Preprocessor1…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4 validation         0.0103      0.990    23    12     7 none     Preprocessor1…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5 validation         0.0111      0.989    31    12     7 none     Preprocessor1…&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 187,495 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To filter the predictions for only our best random forest model, we can use the &lt;code&gt;parameters&lt;/code&gt; argument and pass it our tibble with the best hyperparameter values from tuning, which we called &lt;code&gt;rf_best&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rf_auc &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rf_res &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;collect_predictions&lt;/span&gt;(parameters &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; rf_best) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;roc_curve&lt;/span&gt;(children, .pred_children) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(model &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Random Forest&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, we can compare the validation set ROC curves for our top penalized logistic regression model and random forest model:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;bind_rows&lt;/span&gt;(rf_auc, lr_auc) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; specificity, y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; sensitivity, col &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; model)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_path&lt;/span&gt;(lwd &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1.5&lt;/span&gt;, alpha &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.8&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_abline&lt;/span&gt;(lty &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;coord_equal&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;scale_color_viridis_d&lt;/span&gt;(option &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;plasma&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;.6&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/rf-lr-roc-curve-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;The random forest is uniformly better across event probability thresholds.&lt;/p&gt;
&lt;h2 id=&#34;last-fit&#34;&gt;The last fit&lt;/h2&gt;
&lt;p&gt;Our goal was to predict which hotel stays included children and/or babies. The random forest model clearly performed better than the penalized logistic regression model, and would be our best bet for predicting hotel stays with and without children. After selecting our best model and hyperparameter values, our last step is to fit the final model on all the rows of data not originally held out for testing (both the training and the validation sets combined), and then evaluate the model performance one last time with the held-out test set.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll start by building our parsnip model object again from scratch. We take our best hyperparameter values from our random forest model. When we set the engine, we add a new argument: &lt;code&gt;importance = &amp;quot;impurity&amp;quot;&lt;/code&gt;. This will provide &lt;em&gt;variable importance&lt;/em&gt; scores for this last model, which gives some insight into which predictors drive model performance.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# the last model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;last_rf_mod &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;rand_forest&lt;/span&gt;(mtry &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;, min_n &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;, trees &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1000&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;set_engine&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ranger&amp;#34;&lt;/span&gt;, num.threads &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; cores, importance &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;impurity&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;set_mode&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;classification&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# the last workflow&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;last_rf_workflow &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rf_workflow &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;update_model&lt;/span&gt;(last_rf_mod)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# the last fit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;345&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;last_rf_fit &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  last_rf_workflow &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;last_fit&lt;/span&gt;(splits)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;last_rf_fit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # Resampling results&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # Manual resampling &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 × 6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   splits                id             .metrics .notes   .predictions .workflow &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;list&amp;gt;                &amp;lt;chr&amp;gt;          &amp;lt;list&amp;gt;   &amp;lt;list&amp;gt;   &amp;lt;list&amp;gt;       &amp;lt;list&amp;gt;    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 &amp;lt;split [37500/12500]&amp;gt; train/test sp… &amp;lt;tibble&amp;gt; &amp;lt;tibble&amp;gt; &amp;lt;tibble&amp;gt;     &amp;lt;workflow&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This fitted workflow contains &lt;em&gt;everything&lt;/em&gt;, including our final metrics based on the test set. So, how did this model do on the test set? Was the validation set a good estimate of future performance?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;last_rf_fit &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;collect_metrics&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 2 × 4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   .metric  .estimator .estimate .config             &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;               &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 accuracy binary         0.946 Preprocessor1_Model1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 roc_auc  binary         0.923 Preprocessor1_Model1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This ROC AUC value is pretty close to what we saw when we tuned the random forest model with the validation set, which is good news. That means that our estimate of how well our model would perform with new data was not too far off from how well our model actually performed with the unseen test data.&lt;/p&gt;
&lt;p&gt;We can access those variable importance scores via the &lt;code&gt;.workflow&lt;/code&gt; column. We can &lt;a href=&#34;https://tune.tidymodels.org/reference/extract-tune.html&#34;&gt;extract out the fit&lt;/a&gt; from the workflow object, and then use the vip package to visualize the variable importance scores for the top 20 features:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;last_rf_fit &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;extract_fit_parsnip&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;vip&lt;/span&gt;(num_features &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;20&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/rf-importance-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;The most important predictors in whether a hotel stay had children or not were the daily cost for the room, the type of room reserved, the time between the creation of the reservation and the arrival date, and the type of room that was ultimately assigned.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s generate our last ROC curve to visualize. Since the event we are predicting is the first level in the &lt;code&gt;children&lt;/code&gt; factor (&amp;ldquo;children&amp;rdquo;), we provide &lt;code&gt;roc_curve()&lt;/code&gt; with the &lt;a href=&#34;https://yardstick.tidymodels.org/reference/roc_curve.html#relevant-level&#34;&gt;relevant class probability&lt;/a&gt; &lt;code&gt;.pred_children&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;last_rf_fit &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;collect_predictions&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;roc_curve&lt;/span&gt;(children, .pred_children) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;autoplot&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/test-set-roc-curve-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;Based on these results, the validation set and test set performance statistics are very close, so we would have pretty high confidence that our random forest model with the selected hyperparameters would perform well when predicting new data.&lt;/p&gt;
&lt;h2 id=&#34;next&#34;&gt;Where to next?&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;ve made it to the end of this series of &lt;a href=&#34;https://www.tidymodels.org/start/&#34;&gt;&lt;em&gt;Get Started&lt;/em&gt;&lt;/a&gt; articles, we hope you feel ready to learn more! You now know the core tidymodels packages and how they fit together. After you are comfortable with the basics we introduced in this series, you can &lt;a href=&#34;https://www.tidymodels.org/learn/&#34;&gt;learn how to go farther&lt;/a&gt; with tidymodels in your modeling and machine learning projects.&lt;/p&gt;
&lt;p&gt;Here are some more ideas for where to go next:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Study up on statistics and modeling with our comprehensive &lt;a href=&#34;https://www.tidymodels.org/books/&#34;&gt;books&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dig deeper into the &lt;a href=&#34;https://www.tidymodels.org/packages/&#34;&gt;package documentation sites&lt;/a&gt; to find functions that meet your modeling needs. Use the &lt;a href=&#34;https://www.tidymodels.org/find/&#34;&gt;searchable tables&lt;/a&gt; to explore what is possible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep up with the latest about tidymodels packages at the &lt;a href=&#34;https://www.tidyverse.org/tags/tidymodels/&#34;&gt;tidyverse blog&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find ways to ask for &lt;a href=&#34;https://www.tidymodels.org/help/&#34;&gt;help&lt;/a&gt; and &lt;a href=&#34;https://www.tidymodels.org/contribute&#34;&gt;contribute to tidymodels&lt;/a&gt; to help others.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;centerhappy-modelingcenter&#34;&gt;&lt;center&gt;Happy modeling!&lt;/center&gt;&lt;/h3&gt;
&lt;h2 id=&#34;session-information&#34;&gt;Session information&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#&amp;gt; ─ Session info ─────────────────────────────────────────────────────
#&amp;gt;  setting  value
#&amp;gt;  version  R version 4.1.2 (2021-11-01)
#&amp;gt;  os       macOS Monterey 12.3.1
#&amp;gt;  system   aarch64, darwin20
#&amp;gt;  ui       X11
#&amp;gt;  language (EN)
#&amp;gt;  collate  en_GB.UTF-8
#&amp;gt;  ctype    en_GB.UTF-8
#&amp;gt;  tz       Europe/London
#&amp;gt;  date     2022-04-28
#&amp;gt;  pandoc   2.18 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown)
#&amp;gt; 
#&amp;gt; ─ Packages ─────────────────────────────────────────────────────────
#&amp;gt;  package    * version date (UTC) lib source
#&amp;gt;  broom      * 0.8.0   2022-04-13 [1] CRAN (R 4.1.1)
#&amp;gt;  dials      * 0.1.1   2022-04-06 [1] CRAN (R 4.1.2)
#&amp;gt;  dplyr      * 1.0.8   2022-02-08 [1] CRAN (R 4.1.2)
#&amp;gt;  ggplot2    * 3.3.5   2021-06-25 [1] CRAN (R 4.1.1)
#&amp;gt;  infer      * 1.0.0   2021-08-13 [1] CRAN (R 4.1.1)
#&amp;gt;  parsnip    * 0.2.1   2022-03-17 [1] CRAN (R 4.1.1)
#&amp;gt;  purrr      * 0.3.4   2020-04-17 [1] CRAN (R 4.1.0)
#&amp;gt;  ranger       0.13.1  2021-07-14 [1] CRAN (R 4.1.2)
#&amp;gt;  readr      * 2.1.2   2022-01-30 [1] CRAN (R 4.1.1)
#&amp;gt;  recipes    * 0.2.0   2022-02-18 [1] CRAN (R 4.1.1)
#&amp;gt;  rlang        1.0.2   2022-03-04 [1] CRAN (R 4.1.1)
#&amp;gt;  rsample    * 0.1.1   2021-11-08 [1] CRAN (R 4.1.2)
#&amp;gt;  tibble     * 3.1.6   2021-11-07 [1] CRAN (R 4.1.1)
#&amp;gt;  tidymodels * 0.2.0   2022-03-19 [1] CRAN (R 4.1.1)
#&amp;gt;  tune       * 0.2.0   2022-03-19 [1] CRAN (R 4.1.2)
#&amp;gt;  vip        * 0.3.2   2020-12-17 [1] CRAN (R 4.1.2)
#&amp;gt;  workflows  * 0.2.6   2022-03-18 [1] CRAN (R 4.1.2)
#&amp;gt;  yardstick  * 0.0.9   2021-11-22 [1] CRAN (R 4.1.1)
#&amp;gt; 
#&amp;gt;  [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library
#&amp;gt; 
#&amp;gt; ────────────────────────────────────────────────────────────────────
&lt;/code&gt;&lt;/pre&gt;</description>
  </item>
  
<item>
  <title>Create your own broom tidier methods</title>
  <link>https://www.tidymodels.org/learn/develop/broom/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/learn/develop/broom/</guid>
  <description>&lt;script src=&#34;https://www.tidymodels.org/learn/develop/broom/index_files/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://www.tidymodels.org/learn/develop/broom/index_files/lightable/lightable.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://www.tidymodels.org/learn/develop/broom/index_files/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://www.tidymodels.org/learn/develop/broom/index_files/lightable/lightable.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;To use the code in this article, you will need to install the following packages: generics, tidymodels, tidyverse, and usethis.&lt;/p&gt;
&lt;p&gt;The broom package provides tools to summarize key information about models in tidy &lt;code&gt;tibble()&lt;/code&gt;s. The package provides three verbs, or &amp;ldquo;tidiers,&amp;rdquo; to help make model objects easier to work with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tidy()&lt;/code&gt; summarizes information about model components&lt;/li&gt;
&lt;li&gt;&lt;code&gt;glance()&lt;/code&gt; reports information about the entire model&lt;/li&gt;
&lt;li&gt;&lt;code&gt;augment()&lt;/code&gt; adds information about observations to a dataset&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each of the three verbs above are &lt;em&gt;generic&lt;/em&gt;, in that they do not define a procedure to tidy a given model object, but instead redirect to the relevant &lt;em&gt;method&lt;/em&gt; implemented to tidy a specific type of model object. The broom package provides methods for model objects from over 100 modeling packages along with nearly all of the model objects in the stats package that comes with base R. However, for maintainability purposes, the broom package authors now ask that requests for new methods be first directed to the parent package (i.e. the package that supplies the model object) rather than to broom. New methods will generally only be integrated into broom in the case that the requester has already asked the maintainers of the model-owning package to implement tidier methods in the parent package.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;d like to make implementing external tidier methods as painless as possible. The general process for doing so is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;re-export the tidier generics&lt;/li&gt;
&lt;li&gt;implement tidying methods&lt;/li&gt;
&lt;li&gt;document the new methods&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this article, we&amp;rsquo;ll walk through each of the above steps in detail, giving examples and pointing out helpful functions when possible.&lt;/p&gt;
&lt;h2 id=&#34;re-export-the-tidier-generics&#34;&gt;Re-export the tidier generics&lt;/h2&gt;
&lt;p&gt;The first step is to re-export the generic functions for &lt;code&gt;tidy()&lt;/code&gt;, &lt;code&gt;glance()&lt;/code&gt;, and/or &lt;code&gt;augment()&lt;/code&gt;. You could do so from &lt;code&gt;broom&lt;/code&gt; itself, but we&amp;rsquo;ve provided an alternative, much lighter dependency called &lt;code&gt;generics&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First you&amp;rsquo;ll need to add the &lt;a href=&#34;https://github.com/r-lib/generics&#34;&gt;generics&lt;/a&gt; package to &lt;code&gt;Imports&lt;/code&gt;. We recommend using the &lt;a href=&#34;https://github.com/r-lib/usethis&#34;&gt;usethis&lt;/a&gt; package for this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;usethis&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;use_package&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;generics&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Imports&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, you&amp;rsquo;ll need to re-export the appropriate tidying methods. If you plan to implement a &lt;code&gt;glance()&lt;/code&gt; method, for example, you can re-export the &lt;code&gt;glance()&lt;/code&gt; generic by adding the following somewhere inside the &lt;code&gt;/R&lt;/code&gt; folder of your package:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39; @importFrom generics glance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39; @export&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;generics&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;glance
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Oftentimes it doesn&amp;rsquo;t make sense to define one or more of these methods for a particular model. In this case, only implement the methods that do make sense.&lt;/p&gt;
&lt;div class=&#34;warning&#34;&gt;Please do not define &lt;code&gt;tidy()&lt;/code&gt;, &lt;code&gt;glance()&lt;/code&gt;, or &lt;code&gt;augment()&lt;/code&gt; generics in your package. This will result in namespace conflicts whenever your package is used along other packages that also export tidying methods.&lt;/div&gt;
&lt;h2 id=&#34;implement-tidying-methods&#34;&gt;Implement tidying methods&lt;/h2&gt;
&lt;p&gt;You&amp;rsquo;ll now need to implement specific tidying methods for each of the generics you&amp;rsquo;ve re-exported in the above step. For each of &lt;code&gt;tidy()&lt;/code&gt;, &lt;code&gt;glance()&lt;/code&gt;, and &lt;code&gt;augment()&lt;/code&gt;, we&amp;rsquo;ll walk through the big picture, an example, and helpful resources.&lt;/p&gt;
&lt;p&gt;In this article, we&amp;rsquo;ll use the base R dataset &lt;code&gt;trees&lt;/code&gt;, giving the tree girth (in inches), height (in feet), and volume (in cubic feet), to fit an example linear model using the base R &lt;code&gt;lm()&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# load in the trees dataset&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;data&lt;/span&gt;(trees)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# take a look!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;str&lt;/span&gt;(trees)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &amp;#39;data.frame&amp;#39;:	31 obs. of  3 variables:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  $ Girth : num  8.3 8.6 8.8 10.5 10.7 10.8 11 11 11.1 11.2 ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  $ Height: num  70 65 63 72 81 83 66 75 80 75 ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  $ Volume: num  10.3 10.3 10.2 16.4 18.8 19.7 15.6 18.2 22.6 19.9 ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# fit the timber volume as a function of girth and height&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;trees_model &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;lm&lt;/span&gt;(Volume &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; Girth &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; Height, data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; trees)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s take a look at the &lt;code&gt;summary()&lt;/code&gt; of our &lt;code&gt;trees_model&lt;/code&gt; fit.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;summary&lt;/span&gt;(trees_model)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Call:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; lm(formula = Volume ~ Girth + Height, data = trees)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Residuals:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    Min     1Q Median     3Q    Max &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; -6.406 -2.649 -0.288  2.200  8.485 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Coefficients:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;             Estimate Std. Error t value Pr(&amp;gt;|t|)    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; (Intercept)  -57.988      8.638   -6.71  2.7e-07 ***&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Girth          4.708      0.264   17.82  &amp;lt; 2e-16 ***&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Height         0.339      0.130    2.61    0.014 *  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ---&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Residual standard error: 3.88 on 28 degrees of freedom&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Multiple R-squared:  0.948,	Adjusted R-squared:  0.944 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; F-statistic:  255 on 2 and 28 DF,  p-value: &amp;lt;2e-16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This output gives some summary statistics on the residuals (which would be described more fully in an &lt;code&gt;augment()&lt;/code&gt; output), model coefficients (which, in this case, make up the &lt;code&gt;tidy()&lt;/code&gt; output), and some model-level summarizations such as RSE, &lt;code&gt;\(R^2\)&lt;/code&gt;, etc. (which make up the &lt;code&gt;glance()&lt;/code&gt; output.)&lt;/p&gt;
&lt;h3 id=&#34;implementing-the-tidy-method&#34;&gt;Implementing the &lt;code&gt;tidy()&lt;/code&gt; method&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;tidy(x, ...)&lt;/code&gt; method will return a tibble where each row contains information about a component of the model. The &lt;code&gt;x&lt;/code&gt; input is a model object, and the dots (&lt;code&gt;...&lt;/code&gt;) are an optional argument to supply additional information to any calls inside your method. New &lt;code&gt;tidy()&lt;/code&gt; methods can take additional arguments, but &lt;em&gt;must&lt;/em&gt; include the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;...&lt;/code&gt; arguments to be compatible with the generic function. (For a glossary of currently acceptable additional arguments, see &lt;a href=&#34;#glossary&#34;&gt;the end of this article&lt;/a&gt;.)  Examples of model components include regression coefficients (for regression models), clusters (for classification/clustering models), etc. These &lt;code&gt;tidy()&lt;/code&gt; methods are useful for inspecting model details and creating custom model visualizations.&lt;/p&gt;
&lt;p&gt;Returning to the example of our linear model on timber volume, we&amp;rsquo;d like to extract information on the model components. In this example, the components are the regression coefficients. After taking a look at the model object and its &lt;code&gt;summary()&lt;/code&gt;, you might notice that you can extract the regression coefficients as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;summary&lt;/span&gt;(trees_model)&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;coefficients
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;             Estimate Std. Error t value Pr(&amp;gt;|t|)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; (Intercept)  -57.988      8.638   -6.71 2.75e-07&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Girth          4.708      0.264   17.82 8.22e-17&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Height         0.339      0.130    2.61 1.45e-02&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This object contains the model coefficients as a table, where the information giving which coefficient is being described in each row is given in the row names. Converting to a tibble where the row names are contained in a column, you might write:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;trees_model_tidy &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;summary&lt;/span&gt;(trees_model)&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;coefficients &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;as_tibble&lt;/span&gt;(rownames &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;term&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;trees_model_tidy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 3 × 5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   term        Estimate `Std. Error` `t value` `Pr(&amp;gt;|t|)`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 (Intercept)  -58.0          8.64      -6.71   2.75e- 7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 Girth          4.71         0.264     17.8    8.22e-17&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 Height         0.339        0.130      2.61   1.45e- 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The broom package standardizes common column names used to describe coefficients. In this case, the column names are:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;colnames&lt;/span&gt;(trees_model_tidy) &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;term&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;estimate&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;std.error&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;statistic&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;p.value&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A glossary giving the currently acceptable column names outputted by &lt;code&gt;tidy()&lt;/code&gt; methods can be found &lt;a href=&#34;#glossary&#34;&gt;at the end of this article&lt;/a&gt;. As a rule of thumb, column names resulting from &lt;code&gt;tidy()&lt;/code&gt; methods should be all lowercase and contain only alphanumerics or periods (though there are plenty of exceptions).&lt;/p&gt;
&lt;p&gt;Finally, it is common for &lt;code&gt;tidy()&lt;/code&gt; methods to include an option to calculate confidence/credible intervals for each component based on the model, when possible. In this example, the &lt;code&gt;confint()&lt;/code&gt; function can be used to calculate confidence intervals from a model object resulting from &lt;code&gt;lm()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;confint&lt;/span&gt;(trees_model)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;                2.5 %  97.5 %&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; (Intercept) -75.6823 -40.293&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Girth         4.1668   5.249&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Height        0.0726   0.606&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With these considerations in mind, a reasonable &lt;code&gt;tidy()&lt;/code&gt; method for &lt;code&gt;lm()&lt;/code&gt; might look something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tidy.lm &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(x, conf.int &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;, conf.level &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.95&lt;/span&gt;, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  result &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;summary&lt;/span&gt;(x)&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;coefficients &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tibble&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;as_tibble&lt;/span&gt;(rownames &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;term&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dplyr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;rename&lt;/span&gt;(estimate &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; Estimate,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  std.error &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; `Std. Error`,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  statistic &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; `t value`,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  p.value &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;`Pr&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;|&lt;/span&gt;t&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;)`)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if &lt;/span&gt;(conf.int) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ci &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;confint&lt;/span&gt;(x, level &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; conf.level)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    result &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; dplyr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;left_join&lt;/span&gt;(result, ci, by &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;term&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  result
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;note&#34;&gt;If you&amp;rsquo;re interested, the actual &lt;code&gt;tidy.lm()&lt;/code&gt; source can be found &lt;a href=&#34;https://github.com/tidymodels/broom/blob/master/R/stats-lm-tidiers.R&#34;&gt;here&lt;/a&gt;! It&amp;rsquo;s not too different from the version above except for some argument checking and additional columns.&lt;/div&gt;
&lt;p&gt;With this method exported, then, if a user calls &lt;code&gt;tidy(fit)&lt;/code&gt;, where &lt;code&gt;fit&lt;/code&gt; is an output from &lt;code&gt;lm()&lt;/code&gt;, the &lt;code&gt;tidy()&lt;/code&gt; generic would &amp;ldquo;redirect&amp;rdquo; the call to the &lt;code&gt;tidy.lm()&lt;/code&gt; function above.&lt;/p&gt;
&lt;p&gt;Some things to keep in mind while writing your &lt;code&gt;tidy()&lt;/code&gt; method:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sometimes a model will have several different types of components. For example, in mixed models, there is different information associated with fixed effects and random effects. Since this information doesn&amp;rsquo;t have the same interpretation, it doesn&amp;rsquo;t make sense to summarize the fixed and random effects in the same table. In cases like this you should add an argument that allows the user to specify which type of information they want. For example, you might implement an interface along the lines of:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;mixed_model&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;tidy&lt;/span&gt;(model, effects &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;fixed&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;tidy&lt;/span&gt;(model, effects &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;random&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;How are missing values encoded in the model object and its &lt;code&gt;summary()&lt;/code&gt;? Ensure that rows are included even when the associated model component is missing or rank deficient.&lt;/li&gt;
&lt;li&gt;Are there other measures specific to each component that could reasonably be expected to be included in their summarizations? Some common arguments to &lt;code&gt;tidy()&lt;/code&gt; methods include:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;conf.int&lt;/code&gt;: A logical indicating whether or not to calculate confidence/credible intervals. This should default to &lt;code&gt;FALSE&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;conf.level&lt;/code&gt;: The confidence level to use for the interval when &lt;code&gt;conf.int = TRUE&lt;/code&gt;. Typically defaults to &lt;code&gt;.95&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exponentiate&lt;/code&gt;: A logical indicating whether or not model terms should be presented on an exponential scale (typical for logistic regression).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;implementing-the-glance-method&#34;&gt;Implementing the &lt;code&gt;glance()&lt;/code&gt; method&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;glance()&lt;/code&gt; returns a one-row tibble providing model-level summarizations (e.g. goodness of fit measures and related statistics). This is useful to check for model misspecification and to compare many models. Again, the &lt;code&gt;x&lt;/code&gt; input is a model object, and the &lt;code&gt;...&lt;/code&gt; is an optional argument to supply additional information to any calls inside your method. New &lt;code&gt;glance()&lt;/code&gt; methods can also take additional arguments and &lt;em&gt;must&lt;/em&gt; include the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;...&lt;/code&gt; arguments. (For a glossary of currently acceptable additional arguments, see &lt;a href=&#34;#glossary&#34;&gt;the end of this article&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Returning to the &lt;code&gt;trees_model&lt;/code&gt; example, we could pull out the &lt;code&gt;\(R^2\)&lt;/code&gt; value with the following code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;summary&lt;/span&gt;(trees_model)&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;r.squared
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 0.948&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Similarly, for the adjusted &lt;code&gt;\(R^2\)&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;summary&lt;/span&gt;(trees_model)&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;adj.r.squared
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 0.944&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Unfortunately, for many model objects, the extraction of model-level information is largely a manual process. You will likely need to build a &lt;code&gt;tibble()&lt;/code&gt; element-by-element by subsetting the &lt;code&gt;summary()&lt;/code&gt; object repeatedly. The &lt;code&gt;with()&lt;/code&gt; function, however, can help make this process a bit less tedious by evaluating expressions inside of the &lt;code&gt;summary(trees_model)&lt;/code&gt; environment. To grab those those same two model elements from above using &lt;code&gt;with()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;with&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;summary&lt;/span&gt;(trees_model),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     tibble&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;tibble&lt;/span&gt;(r.squared &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; r.squared,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    adj.r.squared &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; adj.r.squared))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 × 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   r.squared adj.r.squared&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1     0.948         0.944&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A reasonable &lt;code&gt;glance()&lt;/code&gt; method for &lt;code&gt;lm()&lt;/code&gt;, then, might look something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;glance.lm &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(x, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;with&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;summary&lt;/span&gt;(x),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tibble&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;tibble&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      r.squared &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; r.squared,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      adj.r.squared &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; adj.r.squared,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      sigma &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; sigma,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      statistic &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; fstatistic[&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      p.value &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;pf&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        fstatistic[&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        fstatistic[&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;numdf&amp;#34;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        fstatistic[&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;dendf&amp;#34;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        lower.tail &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      df &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; fstatistic[&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;numdf&amp;#34;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      logLik &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;as.numeric&lt;/span&gt;(stats&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;logLik&lt;/span&gt;(x)),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      AIC &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; stats&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;AIC&lt;/span&gt;(x),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      BIC &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; stats&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;BIC&lt;/span&gt;(x),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      deviance &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; stats&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;deviance&lt;/span&gt;(x),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      df.residual &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;df.residual&lt;/span&gt;(x),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      nobs &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; stats&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;nobs&lt;/span&gt;(x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;note&#34;&gt;This is the actual definition of &lt;code&gt;glance.lm()&lt;/code&gt; provided by broom!&lt;/div&gt;
&lt;p&gt;Some things to keep in mind while writing &lt;code&gt;glance()&lt;/code&gt; methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Output should not include the name of the modeling function or any arguments given to the modeling function.&lt;/li&gt;
&lt;li&gt;In some cases, you may wish to provide model-level diagnostics not returned by the original object. For example, the above &lt;code&gt;glance.lm()&lt;/code&gt; calculates &lt;code&gt;AIC&lt;/code&gt; and &lt;code&gt;BIC&lt;/code&gt; from the model fit. If these are easy to compute, feel free to add them. However, tidier methods are generally not an appropriate place to implement complex or time consuming calculations.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;glance&lt;/code&gt; method should always return the same columns in the same order when given an object of a given model class. If a summary metric (such as &lt;code&gt;AIC&lt;/code&gt;) is not defined in certain circumstances, use &lt;code&gt;NA&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;implementing-the-augment-method&#34;&gt;Implementing the &lt;code&gt;augment()&lt;/code&gt; method&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;augment()&lt;/code&gt; methods add columns to a dataset containing information such as fitted values, residuals or cluster assignments. All columns added to a dataset have a &lt;code&gt;.&lt;/code&gt; prefix to prevent existing columns from being overwritten. (Currently acceptable column names are given in &lt;a href=&#34;#glossary&#34;&gt;the glossary&lt;/a&gt;.) The &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;...&lt;/code&gt; arguments share their meaning with the two functions described above. &lt;code&gt;augment&lt;/code&gt; methods also optionally accept a &lt;code&gt;data&lt;/code&gt; argument that is a &lt;code&gt;data.frame&lt;/code&gt; (or &lt;code&gt;tibble&lt;/code&gt;) to add observation-level information to, returning a &lt;code&gt;tibble&lt;/code&gt; object with the same number of rows as &lt;code&gt;data&lt;/code&gt;. Many &lt;code&gt;augment()&lt;/code&gt; methods also accept a &lt;code&gt;newdata&lt;/code&gt; argument, following the same conventions as the &lt;code&gt;data&lt;/code&gt; argument, except with the underlying assumption that the model has not &amp;ldquo;seen&amp;rdquo; the data yet. As a result, &lt;code&gt;newdata&lt;/code&gt; arguments need not contain the response columns in &lt;code&gt;data&lt;/code&gt;. Only one of &lt;code&gt;data&lt;/code&gt; or &lt;code&gt;newdata&lt;/code&gt; should be supplied. A full glossary of acceptable arguments to &lt;code&gt;augment()&lt;/code&gt; methods can be found at &lt;a href=&#34;#glossary&#34;&gt;the end of this article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If a &lt;code&gt;data&lt;/code&gt; argument is not specified, &lt;code&gt;augment()&lt;/code&gt; should try to reconstruct the original data as much as possible from the model object. This may not always be possible, and often it will not be possible to recover columns not used by the model.&lt;/p&gt;
&lt;p&gt;With this is mind, we can look back to our &lt;code&gt;trees_model&lt;/code&gt; example. For one, the &lt;code&gt;model&lt;/code&gt; element inside of the &lt;code&gt;trees_model&lt;/code&gt; object will allow us to recover the original data:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;trees_model&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;model
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    Volume Girth Height&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1    10.3   8.3     70&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2    10.3   8.6     65&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3    10.2   8.8     63&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4    16.4  10.5     72&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5    18.8  10.7     81&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 6    19.7  10.8     83&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 7    15.6  11.0     66&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 8    18.2  11.0     75&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 9    22.6  11.1     80&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10   19.9  11.2     75&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 11   24.2  11.3     79&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 12   21.0  11.4     76&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 13   21.4  11.4     76&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 14   21.3  11.7     69&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 15   19.1  12.0     75&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 16   22.2  12.9     74&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 17   33.8  12.9     85&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 18   27.4  13.3     86&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 19   25.7  13.7     71&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 20   24.9  13.8     64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 21   34.5  14.0     78&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 22   31.7  14.2     80&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 23   36.3  14.5     74&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 24   38.3  16.0     72&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 25   42.6  16.3     77&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 26   55.4  17.3     81&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 27   55.7  17.5     82&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 28   58.3  17.9     80&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 29   51.5  18.0     80&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 30   51.0  18.0     80&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 31   77.0  20.6     87&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Similarly, the fitted values and residuals can be accessed with the following code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;head&lt;/span&gt;(trees_model&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;fitted.values)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     1     2     3     4     5     6 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4.84  4.55  4.82 15.87 19.87 21.02&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;head&lt;/span&gt;(trees_model&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;residuals)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;      1      2      3      4      5      6 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5.462  5.746  5.383  0.526 -1.069 -1.318&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As with &lt;code&gt;glance()&lt;/code&gt; methods, it&amp;rsquo;s fine (and encouraged!) to include common metrics associated with observations if they are not computationally intensive to compute. A common metric associated with linear models, for example, is the standard error of fitted values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;se.fit &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;predict&lt;/span&gt;(trees_model, newdata &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; trees, se.fit &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;se.fit &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unname&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;head&lt;/span&gt;(se.fit)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 1.321 1.489 1.633 0.944 1.348 1.532&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Thus, a reasonable &lt;code&gt;augment()&lt;/code&gt; method for &lt;code&gt;lm&lt;/code&gt; might look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;augment.lm &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(x, data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;model, newdata &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;is.null&lt;/span&gt;(newdata)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dplyr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;bind_cols&lt;/span&gt;(tibble&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;as_tibble&lt;/span&gt;(data),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     tibble&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;tibble&lt;/span&gt;(.fitted &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;fitted.values,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    .se.fit &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;predict&lt;/span&gt;(x, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                      newdata &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; data, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                      se.fit &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;se.fit,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                   .resid &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;  x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;residuals))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } else {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    predictions &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;predict&lt;/span&gt;(x, newdata &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; newdata, se.fit &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dplyr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;bind_cols&lt;/span&gt;(tibble&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;as_tibble&lt;/span&gt;(newdata),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     tibble&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;tibble&lt;/span&gt;(.fitted &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; predictions&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;fit,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    .se.fit &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; predictions&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;se.fit))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Some other things to keep in mind while writing &lt;code&gt;augment()&lt;/code&gt; methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;newdata&lt;/code&gt; argument should default to &lt;code&gt;NULL&lt;/code&gt;. Users should only ever specify one of &lt;code&gt;data&lt;/code&gt; or &lt;code&gt;newdata&lt;/code&gt;. Providing both &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;newdata&lt;/code&gt; should result in an error. The &lt;code&gt;newdata&lt;/code&gt; argument should accept both &lt;code&gt;data.frame&lt;/code&gt;s and &lt;code&gt;tibble&lt;/code&gt;s.&lt;/li&gt;
&lt;li&gt;Data given to the &lt;code&gt;data&lt;/code&gt; argument must have both the original predictors and the original response. Data given to the &lt;code&gt;newdata&lt;/code&gt; argument only needs to have the original predictors. This is important because there may be important information associated with training data that is not associated with test data. This means that the &lt;code&gt;original_data&lt;/code&gt; object in &lt;code&gt;augment(model, data = original_data)&lt;/code&gt; should provide &lt;code&gt;.fitted&lt;/code&gt; and &lt;code&gt;.resid&lt;/code&gt; columns (in most cases), whereas &lt;code&gt;test_data&lt;/code&gt; in &lt;code&gt;augment(model, data = test_data)&lt;/code&gt; only needs a &lt;code&gt;.fitted&lt;/code&gt; column, even if the response is present in &lt;code&gt;test_data&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the &lt;code&gt;data&lt;/code&gt; or &lt;code&gt;newdata&lt;/code&gt; is specified as a &lt;code&gt;data.frame&lt;/code&gt; with rownames, &lt;code&gt;augment&lt;/code&gt; should return them in a column called &lt;code&gt;.rownames&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;For observations where no fitted values or summaries are available (where there&amp;rsquo;s missing data, for example), return &lt;code&gt;NA&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The &lt;code&gt;augment()&lt;/code&gt; method should always return as many rows as were in &lt;code&gt;data&lt;/code&gt; or &lt;code&gt;newdata&lt;/code&gt;&lt;/em&gt;, depending on which is supplied&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note&#34;&gt;The recommended interface and functionality for &lt;code&gt;augment()&lt;/code&gt; methods may change soon.&lt;/div&gt;
&lt;h2 id=&#34;document-the-new-methods&#34;&gt;Document the new methods&lt;/h2&gt;
&lt;p&gt;The only remaining step is to integrate the new methods into the parent package! To do so, just drop the methods into a &lt;code&gt;.R&lt;/code&gt; file inside of the &lt;code&gt;/R&lt;/code&gt; folder and document them using roxygen2. If you&amp;rsquo;re unfamiliar with the process of documenting objects, you can read more about it &lt;a href=&#34;http://r-pkgs.had.co.nz/man.html&#34;&gt;here&lt;/a&gt;. Here&amp;rsquo;s an example of how our &lt;code&gt;tidy.lm()&lt;/code&gt; method might be documented:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39; Tidy a(n) lm object&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39; @param x A `lm` object.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39; @param conf.int Logical indicating whether or not to include &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39;   a confidence interval in the tidied output. Defaults to FALSE.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39; @param conf.level The confidence level to use for the confidence &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39;   interval if conf.int = TRUE. Must be strictly greater than 0 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39;   and less than 1. Defaults to 0.95, which corresponds to a &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39;   95 percent confidence interval.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39; @param ... Unused, included for generic consistency only.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39; @return A tidy [tibble::tibble()] summarizing component-level&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39;   information about the model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39; @examples&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39; # load the trees dataset&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39; data(trees)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39; # fit a linear model on timber volume&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39; trees_model &amp;lt;- lm(Volume ~ Girth + Height, data = trees)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39; # summarize model coefficients in a tidy tibble!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39; tidy(trees_model)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;#39; @export&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tidy.lm &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(x, conf.int &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;, conf.level &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.95&lt;/span&gt;, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# ... the rest of the function definition goes here!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once you&amp;rsquo;ve documented each of your new methods and executed &lt;code&gt;devtools::document()&lt;/code&gt;, you&amp;rsquo;re done! Congrats on implementing your own broom tidier methods for a new model object!&lt;/p&gt;
&lt;h2 id=&#34;glossary&#34;&gt;Glossaries: argument and column names&lt;/h2&gt;
&lt;p&gt;Tidier methods have a standardized set of acceptable argument and output column names. The currently acceptable argument names by tidier method are:&lt;/p&gt;
&lt;table class=&#34;table&#34; style=&#34;width: auto !important; margin-left: auto; margin-right: auto;&#34;&gt;
 &lt;thead&gt;
  &lt;tr&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt; Method &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt; Argument &lt;/th&gt;
  &lt;/tr&gt;
 &lt;/thead&gt;
&lt;tbody&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; alpha &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; boot_se &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; by_class &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; col.names &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; component &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; conf.int &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; conf.level &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; conf.method &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; conf.type &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; diagonal &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; droppars &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; effects &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; ess &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; estimate.method &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; exponentiate &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; fe &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; include_studies &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; instruments &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; intervals &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; matrix &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; measure &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; na.rm &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; object &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; p.values &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; par_type &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; parameters &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; parametric &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; pars &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; prob &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; region &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; return_zeros &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; rhat &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; robust &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; scales &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; se.type &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; strata &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; test &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; trim &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; upper &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; deviance &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; diagnostics &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; looic &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; mcmc &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; test &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; x &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; data &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; interval &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; newdata &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; se_fit &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; type.predict &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; type.residuals &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; weights &lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The currently acceptable column names by tidier method are:&lt;/p&gt;
&lt;table class=&#34;table&#34; style=&#34;width: auto !important; margin-left: auto; margin-right: auto;&#34;&gt;
 &lt;thead&gt;
  &lt;tr&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt; Method &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt; Column &lt;/th&gt;
  &lt;/tr&gt;
 &lt;/thead&gt;
&lt;tbody&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; acf &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; adj.p.value &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; alternative &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; at.value &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; at.variable &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; atmean &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; autocorrelation &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; bias &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; ci.width &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; class &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; cluster &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; coef.type &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; column1 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; column2 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; comp &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; comparison &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; component &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; conf.high &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; conf.low &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; contrast &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; cumulative &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; cutoff &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; delta &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; den.df &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; denominator &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; dev.ratio &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; df &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; distance &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; estimate &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; estimate1 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; estimate2 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; event &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; exp &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; expected &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; fpr &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; freq &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; GCV &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; group &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; group1 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; group2 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; index &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; item1 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; item2 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; kendall_score &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; lag &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; lambda &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; letters &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; lhs &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; logLik &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; mcmc.error &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; mean &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; meansq &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; method &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; n &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; N &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; n.censor &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; n.event &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; n.risk &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; null.value &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; num.df &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; nzero &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; obs &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; op &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; outcome &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; p &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; p.value &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; p.value.Sargan &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; p.value.weakinst &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; p.value.Wu.Hausman &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; parameter &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; PC &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; percent &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; power &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; proportion &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; pyears &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; response &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; rhs &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; robust.se &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; row &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; scale &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; sd &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; series &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; sig.level &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; size &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; spec &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; state &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; statistic &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; statistic.Sargan &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; statistic.weakinst &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; statistic.Wu.Hausman &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; std_estimate &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; std.all &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; std.dev &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; std.error &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; std.lv &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; std.nox &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; step &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; strata &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; stratum &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; study &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; sumsq &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tau &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; term &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; time &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tpr &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; type &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; uniqueness &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; value &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; var_kendall_score &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; variable &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; variance &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; withinss &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; y.level &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; y.value &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tidy &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; z &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; adj.r.squared &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; agfi &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; AIC &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; AICc &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; alpha &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; alternative &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; autocorrelation &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; avg.silhouette.width &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; betweenss &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; BIC &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; cfi &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; chi.squared &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; chisq &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; cochran.qe &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; cochran.qm &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; conf.high &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; conf.low &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; converged &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; convergence &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; crit &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; cv.crit &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; den.df &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; deviance &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; df &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; df.null &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; df.residual &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; dw.original &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; dw.transformed &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; edf &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; estimator &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; events &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; finTol &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; function.count &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; G &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; g.squared &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; gamma &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; gradient.count &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; H &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; h.squared &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; hypvol &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; i.squared &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; independence &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; isConv &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; iter &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; iterations &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; kHKB &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; kLW &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; lag.order &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; lambda &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; lambda.1se &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; lambda.min &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; lambdaGCV &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; logLik &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; max.cluster.size &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; max.hazard &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; max.time &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; maxit &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; MCMC.burnin &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; MCMC.interval &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; MCMC.samplesize &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; measure &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; median &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; method &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; min.hazard &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; min.time &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; missing_method &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; model &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; n &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; n.clusters &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; n.factors &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; n.max &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; n.start &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; nevent &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; nexcluded &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; ngroups &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; nobs &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; norig &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; npar &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; npasses &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; null.deviance &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; nulldev &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; num.df &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; number.interaction &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; offtable &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; p.value &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; p.value.cochran.qe &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; p.value.cochran.qm &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; p.value.original &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; p.value.Sargan &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; p.value.transformed &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; p.value.weak.instr &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; p.value.Wu.Hausman &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; parameter &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; pen.crit &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; power &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; power.reached &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; pseudo.r.squared &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; r.squared &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; records &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; residual.deviance &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; rho &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; rho2 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; rho20 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; rmean &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; rmean.std.error &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; rmsea &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; rmsea.conf.high &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; rscore &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; score &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; sigma &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; sigma2_j &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; spar &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; srmr &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; statistic &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; statistic.Sargan &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; statistic.weak.instr &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; statistic.Wu.Hausman &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tau &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tau.squared &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tau.squared.se &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; theta &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; timepoints &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tli &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; tot.withinss &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; total &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; total.variance &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; totss &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; value &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; glance &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; within.r.squared &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .class &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .cluster &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .cochran.qe.loo &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .col.prop &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .conf.high &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .conf.low &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .cooksd &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .cov.ratio &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .cred.high &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .cred.low &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .dffits &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .expected &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .fitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .fitted_j_0 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .fitted_j_1 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .hat &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .lower &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .moderator &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .moderator.level &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .observed &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .probability &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .prop &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .remainder &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .resid &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .resid_j_0 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .resid_j_1 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .row.prop &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .rownames &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .se.fit &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .seasadj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .seasonal &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .sigma &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .std.resid &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .tau &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .tau.squared.loo &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .trend &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .uncertainty &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .upper &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; augment &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; .weight &lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/alexpghayes/modeltests&#34;&gt;alexpghayes/modeltests&lt;/a&gt; package provides unit testing infrastructure to check your new tidier methods. Please file an issue there to request new arguments/columns to be added to the glossaries!&lt;/p&gt;
&lt;h2 id=&#34;session-information&#34;&gt;Session information&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#&amp;gt; ─ Session info ─────────────────────────────────────────────────────
#&amp;gt;  setting  value
#&amp;gt;  version  R version 4.1.2 (2021-11-01)
#&amp;gt;  os       macOS Monterey 12.3
#&amp;gt;  system   aarch64, darwin20
#&amp;gt;  ui       X11
#&amp;gt;  language (EN)
#&amp;gt;  collate  en_GB.UTF-8
#&amp;gt;  ctype    en_GB.UTF-8
#&amp;gt;  tz       Europe/London
#&amp;gt;  date     2022-04-11
#&amp;gt;  pandoc   2.14.0.3 @ /Applications/RStudio.app/Contents/MacOS/pandoc/ (via rmarkdown)
#&amp;gt; 
#&amp;gt; ─ Packages ─────────────────────────────────────────────────────────
#&amp;gt;  package    * version date (UTC) lib source
#&amp;gt;  broom      * 0.7.12  2022-01-28 [1] CRAN (R 4.1.1)
#&amp;gt;  dials      * 0.1.1   2022-04-06 [1] CRAN (R 4.1.2)
#&amp;gt;  dplyr      * 1.0.8   2022-02-08 [1] CRAN (R 4.1.2)
#&amp;gt;  generics   * 0.1.2   2022-01-31 [1] CRAN (R 4.1.1)
#&amp;gt;  ggplot2    * 3.3.5   2021-06-25 [1] CRAN (R 4.1.1)
#&amp;gt;  infer      * 1.0.0   2021-08-13 [1] CRAN (R 4.1.1)
#&amp;gt;  parsnip    * 0.2.1   2022-03-17 [1] CRAN (R 4.1.1)
#&amp;gt;  purrr      * 0.3.4   2020-04-17 [1] CRAN (R 4.1.0)
#&amp;gt;  recipes    * 0.2.0   2022-02-18 [1] CRAN (R 4.1.1)
#&amp;gt;  rlang        1.0.2   2022-03-04 [1] CRAN (R 4.1.1)
#&amp;gt;  rsample    * 0.1.1   2021-11-08 [1] CRAN (R 4.1.2)
#&amp;gt;  tibble     * 3.1.6   2021-11-07 [1] CRAN (R 4.1.1)
#&amp;gt;  tidymodels * 0.2.0   2022-03-19 [1] CRAN (R 4.1.1)
#&amp;gt;  tidyverse  * 1.3.1   2021-04-15 [1] CRAN (R 4.1.0)
#&amp;gt;  tune       * 0.2.0   2022-03-19 [1] CRAN (R 4.1.2)
#&amp;gt;  workflows  * 0.2.6   2022-03-18 [1] CRAN (R 4.1.2)
#&amp;gt;  yardstick  * 0.0.9   2021-11-22 [1] CRAN (R 4.1.1)
#&amp;gt; 
#&amp;gt;  [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library
#&amp;gt; 
#&amp;gt; ────────────────────────────────────────────────────────────────────
&lt;/code&gt;&lt;/pre&gt;</description>
  </item>
  
<item>
  <title>Creating case weights based on time</title>
  <link>https://www.tidymodels.org/learn/work/case-weights/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/learn/work/case-weights/</guid>
  <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;To use the code in this article, you will need to install the following packages: tidymodels.&lt;/p&gt;
&lt;p&gt;This article demonstrates how to create and use importance weights in a predictive model. Using importance weights is a way to have our model care more about some observations than others.&lt;/p&gt;
&lt;h2 id=&#34;example-data&#34;&gt;Example Data&lt;/h2&gt;
&lt;p&gt;To demonstrate we will use the Chicago data from the modeldata package.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(tidymodels)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;data&lt;/span&gt;(Chicago)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Chicago &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; Chicago &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(ridership, date, &lt;span style=&#34;color:#00f&#34;&gt;one_of&lt;/span&gt;(stations))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From &lt;code&gt;?Chicago&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;These data are from Kuhn and Johnson (2020) and contain an abbreviated training set for modeling the number of people (in thousands) who enter the Clark and Lake L station.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The date column corresponds to the current date. The columns with station names (Austin through California) are a sample of the columns used in the original analysis (for filesize reasons). These are 14 day lag variables (i.e. date - 14 days). There are columns related to weather and sports team schedules.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For simplicity, we have limited our view to the date and station variables.&lt;/p&gt;
&lt;h2 id=&#34;creating-weights&#34;&gt;Creating weights&lt;/h2&gt;
&lt;p&gt;This data set contains daily information from 2001-01-22 to 2016-08-28. We will pretend that it is January 1st, 2016 and we want to predict the ridership for the remainder of 2016 using the date and station variables as predictors. Without any weighting, all the previous observations would have the same influence on the model. This may not be ideal since some observations appear a long time ago and not be as representative of the future as more recent observations.&lt;/p&gt;
&lt;p&gt;We could just use recent observations to fit the model, ensuring that the training data stays as close to the testing data as possible. While a tempting idea, it would throw out a lot of informative data. Instead let us assign a weight to each observation, related to how long ago the observation was taken. This way we are not completely throwing away any observation; we are only giving less weight to data farther in the past.&lt;/p&gt;
&lt;p&gt;We need to decide on a way to calculate the case weights. The main thing constraint is that the weight cannot be negative, and it would be nice if today was weighted as 1. So we need a function that is 1 when &lt;code&gt;x = 0&lt;/code&gt; and decreasing otherwise. There are many kinds of functions like that, and we will be using this exponential decay function&lt;/p&gt;
&lt;p&gt;$$ weight = base ^ x $$&lt;/p&gt;
&lt;p&gt;where &lt;code&gt;base&lt;/code&gt; is some constant and &lt;code&gt;x&lt;/code&gt; is the number of days. To make sure that we select a reasonable &lt;code&gt;base&lt;/code&gt;, we need to do some manual testing, starting with looking at how old the oldest observation is.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;difftime&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;2016-01-01&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#00f&#34;&gt;min&lt;/span&gt;(Chicago&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;date))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Time difference of 5457 days&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using this information we can visualize the weight curve, to see if we like the value of &lt;code&gt;base&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tibble_days &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tibble&lt;/span&gt;(days &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;5457&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tibble_days &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(days)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_function&lt;/span&gt;(fun &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.99&lt;/span&gt; ^ .x)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/unnamed-chunk-3-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;setting &lt;code&gt;base&lt;/code&gt; to 0.99 appears to be down weighted too much. Any observation more than a year old would have no influence.&lt;/p&gt;
&lt;p&gt;Let us try a few more values to find&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;map_dfr&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;0.99&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0.999&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0.9999&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; tibble_days &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(base &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;factor&lt;/span&gt;(.x), value &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; .x ^ days)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(days, value, group &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; base, color &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; base)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_line&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/unnamed-chunk-4-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;From this, we could pick something around 0.999 since it gives a better balance. Let&amp;rsquo;s create a small function to help us encode this weight.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;weights_from_dates &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(x, ref) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if_else&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    condition &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;=&lt;/span&gt; ref,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    true &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;,     &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# &amp;lt;- Notice that I&amp;#39;m setting any future weight to 1.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    false &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.999&lt;/span&gt; ^ &lt;span style=&#34;color:#00f&#34;&gt;as.numeric&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;difftime&lt;/span&gt;(ref, x, units &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;days&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We then modify &lt;code&gt;Chicago&lt;/code&gt; to add a weight column, explicitly making it an importance weight with &lt;code&gt;importance_weight()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Chicago &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; Chicago &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(weight &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;weights_from_dates&lt;/span&gt;(date, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;2016-01-01&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         weight &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;importance_weights&lt;/span&gt;(weight))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This approach to creating importance weights from dates is not limited to cases where we have daily observations. You are free to create similar weights if you have gaps or repeated observations within the same day. Likewise, you don&amp;rsquo;t need to use days as the unit. Seconds, weeks, or years could be used as well.&lt;/p&gt;
&lt;h2 id=&#34;modeling&#34;&gt;Modeling&lt;/h2&gt;
&lt;p&gt;We start by splitting up our data into a training and testing set based on the day &lt;code&gt;&amp;quot;2016-01-01&amp;quot;&lt;/code&gt;. We added weights to the data set before splitting it so each set has weights.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Chicago_train &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; Chicago &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;filter&lt;/span&gt;(date &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;2016-01-01&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Chicago_test &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; Chicago &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;filter&lt;/span&gt;(date &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;2016-01-01&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, we are going to create a recipe. The weights won&amp;rsquo;t have any influence on the preprocessing since none of these operations are supervised and we are using importance weights.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;base_recipe &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;recipe&lt;/span&gt;(ridership &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; ., data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; Chicago_train) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Create date features&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_date&lt;/span&gt;(date) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_holiday&lt;/span&gt;(date, keep_original_cols &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Remove any columns with a single unique value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_zv&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;all_predictors&lt;/span&gt;()) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Normalize all the numerical features&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_normalize&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;all_numeric_predictors&lt;/span&gt;()) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Perform PCA to reduce the correlation bet the stations&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_pca&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;all_numeric_predictors&lt;/span&gt;(), threshold &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.95&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next we need to build the rest of the workflow. We use a linear regression specification&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lm_spec &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;linear_reg&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;set_engine&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;lm&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and we add these together in the workflow. To activate the case weights, we use the &lt;code&gt;add_case_weights()&lt;/code&gt; function to specify the name of the case weights being used.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lm_wflow &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;workflow&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;add_case_weights&lt;/span&gt;(weight) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;add_recipe&lt;/span&gt;(base_recipe) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;add_model&lt;/span&gt;(lm_spec)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lm_wflow
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ══ Workflow ══════════════════════════════════════════════════════════&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Preprocessor: Recipe&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Model: linear_reg()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Preprocessor ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5 Recipe Steps&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; • step_date()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; • step_holiday()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; • step_zv()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; • step_normalize()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; • step_pca()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Case Weights ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; weight&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Model ─────────────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Linear Regression Model Specification (regression)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Computational engine: lm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With all that done we can fit the workflow with the usual syntax:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lm_fit &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;fit&lt;/span&gt;(lm_wflow, data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; Chicago_train)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lm_fit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ══ Workflow [trained] ════════════════════════════════════════════════&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Preprocessor: Recipe&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Model: linear_reg()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Preprocessor ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5 Recipe Steps&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; • step_date()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; • step_holiday()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; • step_zv()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; • step_normalize()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; • step_pca()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Case Weights ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; weight&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Model ─────────────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Call:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; stats::lm(formula = ..y ~ ., data = data, weights = weights)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Coefficients:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   (Intercept)    date_dowMon    date_dowTue    date_dowWed    date_dowThu  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       1.76260       13.30765       14.68903       14.62018       14.38231  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   date_dowFri    date_dowSat  date_monthFeb  date_monthMar  date_monthApr  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;      13.69543        1.22823        0.36434        1.34823        1.40990  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; date_monthMay  date_monthJun  date_monthJul  date_monthAug  date_monthSep  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       1.18819        2.59830        2.21972        2.40700        1.93206  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; date_monthOct  date_monthNov  date_monthDec            PC1            PC2  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       2.65555        0.90901       -0.00475        0.07301       -1.59102  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;           PC3            PC4            PC5  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       0.60839       -0.20531       -0.69601&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;session-information&#34;&gt;Session information&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#&amp;gt; ─ Session info ─────────────────────────────────────────────────────
#&amp;gt;  setting  value
#&amp;gt;  version  R version 4.2.0 (2022-04-22)
#&amp;gt;  os       macOS Big Sur/Monterey 10.16
#&amp;gt;  system   x86_64, darwin17.0
#&amp;gt;  ui       X11
#&amp;gt;  language (EN)
#&amp;gt;  collate  en_US.UTF-8
#&amp;gt;  ctype    en_US.UTF-8
#&amp;gt;  tz       America/New_York
#&amp;gt;  date     2022-07-19
#&amp;gt;  pandoc   2.18 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown)
#&amp;gt; 
#&amp;gt; ─ Packages ─────────────────────────────────────────────────────────
#&amp;gt;  package    * version date (UTC) lib source
#&amp;gt;  broom      * 1.0.0   2022-07-01 [1] CRAN (R 4.2.0)
#&amp;gt;  dials      * 1.0.0   2022-06-14 [1] CRAN (R 4.2.0)
#&amp;gt;  dplyr      * 1.0.9   2022-04-28 [1] CRAN (R 4.2.0)
#&amp;gt;  ggplot2    * 3.3.6   2022-05-03 [1] CRAN (R 4.2.0)
#&amp;gt;  infer      * 1.0.2   2022-06-10 [1] CRAN (R 4.2.0)
#&amp;gt;  parsnip    * 1.0.0   2022-06-16 [1] CRAN (R 4.2.0)
#&amp;gt;  purrr      * 0.3.4   2020-04-17 [1] CRAN (R 4.2.0)
#&amp;gt;  recipes    * 1.0.1   2022-07-07 [1] CRAN (R 4.2.0)
#&amp;gt;  rlang        1.0.3   2022-06-27 [1] CRAN (R 4.2.0)
#&amp;gt;  rsample    * 1.0.0   2022-06-24 [1] CRAN (R 4.2.0)
#&amp;gt;  tibble     * 3.1.7   2022-05-03 [1] CRAN (R 4.2.0)
#&amp;gt;  tidymodels * 1.0.0   2022-07-13 [1] CRAN (R 4.2.0)
#&amp;gt;  tune       * 1.0.0   2022-07-07 [1] CRAN (R 4.2.0)
#&amp;gt;  workflows  * 1.0.0   2022-07-05 [1] CRAN (R 4.2.0)
#&amp;gt;  yardstick  * 1.0.0   2022-06-06 [1] CRAN (R 4.2.0)
#&amp;gt; 
#&amp;gt;  [1] /Library/Frameworks/R.framework/Versions/4.2/Resources/library
#&amp;gt; 
#&amp;gt; ────────────────────────────────────────────────────────────────────
&lt;/code&gt;&lt;/pre&gt;</description>
  </item>
  
<item>
  <title>Multi-scale model assessment with spatialsample</title>
  <link>https://www.tidymodels.org/learn/work/multi-scale/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/learn/work/multi-scale/</guid>
  <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;To use the code in this article, you will need to install the following packages: spatialsample and tidymodels.&lt;/p&gt;
&lt;p&gt;Modeling spatially structured data is complicated. In addition to the usual difficulty of statistical modeling, models of spatially structured data may have spatial structure in their errors, with different regions being more or less well-described by a given model. This also means that it can be hard to tell how well your model performs when its predictions are aggregated to different scales, which is common when models fit to data from point measurements (for instance, the sale prices of individual homes) are used to try and estimate quantities over an entire area (the average value of all homes in a city or state). If model accuracy is only investigated at individual aggregation scales, such as when accuracy is only assessed for the original point measurements or across the entire study area as a whole, then local differences in accuracy might be &amp;ldquo;smoothed out&amp;rdquo; accidentally resulting in an inaccurate picture of model performance.&lt;/p&gt;
&lt;p&gt;For this reason, researchers (most notably, &lt;a href=&#34;https://www.nrs.fs.fed.us/pubs/jrnl/2010/nrs_2010_riemann_001.pdf&#34;&gt;Riemann et al. (2010)&lt;/a&gt;) have suggested assessing models at multiple scales of spatial aggregation to ensure cross-scale differences in model accuracy are identified and reported. This is not the same thing as &lt;a href=&#34;https://www.tidymodels.org/start/tuning/&#34;&gt;tuning a model&lt;/a&gt;, where we&amp;rsquo;re looking to select the best hyperparameters for our final model fit; instead, we want to assess how that final model performs when its predictions are aggregated to multiple scales. This post walks through how to do that using the &lt;a href=&#34;https://spatialsample.tidymodels.org/&#34;&gt;spatialsample&lt;/a&gt; package.&lt;/p&gt;
&lt;h2 id=&#34;multi-scale-assessment&#34;&gt;Multi-scale Assessment&lt;/h2&gt;
&lt;p&gt;Because Riemann et al. were working with data from the US Forest Inventory and Analysis (FIA) program, we&amp;rsquo;re going to do the same. However, because our main goal is to show how spatialsample can support this type of analysis, we won&amp;rsquo;t spend a ton of time worrying about any of the quirks of FIA data or on feature engineering. Instead, we&amp;rsquo;re going to use a simple linear model to see if we can predict how much aboveground biomass (&amp;ldquo;AGB&amp;rdquo;; all the non-root woody bits of trees) there is in a forest based on how many trees there are. We&amp;rsquo;ll use all the FIA field data from New York State, USA.&lt;/p&gt;
&lt;p&gt;Because we&amp;rsquo;re mostly interested in assessing our models, let&amp;rsquo;s not focus on how exactly to download and wrangle the FIA data. If you&amp;rsquo;re curious, the code is in a hidden chunk here:&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Pre-processing code&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(dplyr)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Download the FIA database for New York over the internet,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# and unzip it into our local directory&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# This updates annually, which means that this post likely won&amp;#39;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# generate the exact same results after 2022&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;httr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;GET&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;https://apps.fs.usda.gov/fia/datamart/Databases/SQLite_FIADB_NY.zip&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  httr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;write_disk&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;SQLite_FIADB_NY.zip&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;unzip&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;SQLite_FIADB_NY.zip&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# We&amp;#39;re going to work with the database through dplyr&amp;#39;s database connections&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# But first, we need to create a DBI connection to the database and&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# load out tables:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;con &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; DBI&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;dbConnect&lt;/span&gt;(RSQLite&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;SQLite&lt;/span&gt;(), dbname &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;FIADB_NY.db&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;trees &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tbl&lt;/span&gt;(con, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;TREE&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plots &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tbl&lt;/span&gt;(con, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;PLOT&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# The FIA database has every measurement ever collected by the program;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# we&amp;#39;ll filter to only the most recent survey for each of the plots.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Plots are measured on a rolling 7 year basis, so we&amp;#39;ll also cut out any&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# plots which might not be remeasured anymore with a call to filter()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plots &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; plots &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;group_by&lt;/span&gt;(PLOT) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;filter&lt;/span&gt;(INVYR &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;max&lt;/span&gt;(INVYR, na.rm &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;)) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;ungroup&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;filter&lt;/span&gt;(INVYR &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2009&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;collect&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;copy_to&lt;/span&gt;(con, plots, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;newest_plots&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;newest_plots &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tbl&lt;/span&gt;(con, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;newest_plots&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Now we&amp;#39;ll use a filtering join to select only trees measured in the most&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# recent sample at each plot&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# We&amp;#39;ll also count how many trees were at each plot,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# sum up their AGB, &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# and save out a few other useful columns like latitude and longitude&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plot_measurements &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; trees &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;right_join&lt;/span&gt;(newest_plots, by &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;INVYR&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;PLOT&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;group_by&lt;/span&gt;(PLOT) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;summarise&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    yr &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;mean&lt;/span&gt;(INVYR, na.rm &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    plot &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;mean&lt;/span&gt;(PLOT, na.rm &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lat &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;mean&lt;/span&gt;(LAT, na.rm &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    long &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;mean&lt;/span&gt;(LON, na.rm &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    n_trees &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;n&lt;/span&gt;(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    agb &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;sum&lt;/span&gt;(DRYBIO_AG, na.rm &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;collect&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Because of how we joined, `n_trees` is always at least 1 -- &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# even if there are 0 trees&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    n_trees &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;ifelse&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;is.na&lt;/span&gt;(agb) &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt; n_trees &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, n_trees),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    agb &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;ifelse&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;is.na&lt;/span&gt;(agb), &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, agb)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DBI&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;dbDisconnect&lt;/span&gt;(con)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;readr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;write_csv&lt;/span&gt;(plot_measurements, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;plots.csv&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;p&gt;With that pre-processing done, it&amp;rsquo;s time to load our data and turn it into an sf object. We&amp;rsquo;re going to reproject our data to use a coordinate reference system that the US government tends to use for national data products, like the FIA:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(sf)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;invisible&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;sf_proj_network&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plot_measurements &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  readr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;read_csv&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;https://www.tidymodels.org/learn/work/multi-scale/plots.csv&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;st_as_sf&lt;/span&gt;(coords &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;long&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;lat&amp;#34;&lt;/span&gt;), crs &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4326&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;st_transform&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;5070&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is what we&amp;rsquo;re going to resample. We want to assess our model&amp;rsquo;s performance at multiple scales, following the approach in Riemann et al. That means we need to do the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Block our study area using multiple sets of regular hexagons of different sizes, and assign our data to the hexagon it falls into within each set.&lt;/li&gt;
&lt;li&gt;Perform leave-one-block-out cross-validation with each of those sets, fitting our model to &lt;code&gt;n - 1&lt;/code&gt; of the &lt;code&gt;n&lt;/code&gt; hexagons we&amp;rsquo;ve created and assessing it on the hold-out hexagon.&lt;/li&gt;
&lt;li&gt;Calculate model accuracy for each size based on the aggregated predictions for each of those held-out hexes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So to get started, we need to block our study area. We can do this using the &lt;code&gt;spatial_block_cv()&lt;/code&gt; function from spatialsample. We&amp;rsquo;ll generate ten different sets of hexagon tiles, using &lt;code&gt;cellsize&lt;/code&gt; arguments of between 10,000 and 100,000 meters. The code to do that, and to store all of our resamples in a single tibble, looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;123&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(dplyr)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(spatialsample)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cellsize &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;seq&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;create_resample &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(cellsize) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;spatial_block_cv&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    plot_measurements,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    v &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Inf&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cellsize &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; cellsize,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    square &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;riemann_resamples &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tibble&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cellsize &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; cellsize,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  resamples &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; purrr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;(cellsize, create_resample)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Two things to highlight about this code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cellsize&lt;/code&gt; is in meters because our coordinate reference system is in meters. This argument represents the length of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Apothem&#34;&gt;apothem&lt;/a&gt;, from the center of each polygon to the middle of the side.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v&lt;/code&gt; is &lt;code&gt;Inf&lt;/code&gt; because we want to perform leave-one-block-out cross-validation, but we don&amp;rsquo;t know how many blocks there will be before they&amp;rsquo;re created. This is the supported way to do leave-one-X-out cross-validation in spatialsample &amp;gt; 0.2.0 (another option is to set &lt;code&gt;v = NULL&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we want, we can visualize a few of our resamples, to get a sense of what our tiling looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;autoplot&lt;/span&gt;(riemann_resamples&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;resamples[[9]])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/unnamed-chunk-4-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;autoplot&lt;/span&gt;(riemann_resamples&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;resamples[[10]])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/unnamed-chunk-5-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;And that&amp;rsquo;s step 1 of the process completed! Now we need to move on to step 2, and actually fit models to each of these resamples. As a heads-up, this is a &lt;em&gt;lot&lt;/em&gt; of models, and so is going to take a while:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;riemann_resamples&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;resamples &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; purrr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;map_dbl&lt;/span&gt;(nrow) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;sum&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] 2600&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Linear regression was invented around 1805, long before the Analytical Engine was a twinkle in Babbage&amp;rsquo;s eye. Whenever you get frustrated at how long it takes to fit many models, it&amp;rsquo;s nice to take a step back and recognize that we&amp;rsquo;re asking our poor, overworked computers to fit roughly as many models as were used in the first ~100 years of the technique&amp;rsquo;s life.&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s load the rest of the tidymodels packages, then use them to define a workflow (from the workflows package), specifying the formula and model that we want to fit to each resample:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(tidymodels)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lm_workflow &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;workflow&lt;/span&gt;(agb &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; n_trees, &lt;span style=&#34;color:#00f&#34;&gt;linear_reg&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, we&amp;rsquo;ll actually apply that workflow a few thousand times! Now as we said at the start, we aren&amp;rsquo;t looking to tune our models using these resamples. Instead, we&amp;rsquo;re looking to see how well our point predictions do at estimating AGB across larger areas. As such, we don&amp;rsquo;t really care about calculating model metrics for each hexagon, and we&amp;rsquo;ll set our code to only calculate a single metric (root-mean-squared error, or RMSE) to save a little bit of time. We&amp;rsquo;ll also use the &lt;code&gt;control_resamples()&lt;/code&gt; function with &lt;code&gt;save_pred = TRUE&lt;/code&gt; to make sure we keep the predictions we&amp;rsquo;re making across each resample. We can add these predictions as a new column to our resamples using the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;riemann_resamples &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; riemann_resamples &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resampled_outputs &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; purrr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      resamples, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      fit_resamples,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      object &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; lm_workflow,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      metrics &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;metric_set&lt;/span&gt;(rmse),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      control &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;control_resamples&lt;/span&gt;(save_pred &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;riemann_resamples&lt;/code&gt; object now includes both our original resamples as well as the predictions generated from each run of the model. We can use the following code to &amp;ldquo;unnest&amp;rdquo; our predictions and estimate both the average &amp;ldquo;true&amp;rdquo; AGB and our average prediction at each hexagon:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;riemann_metrics &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; riemann_resamples &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(cellsize, resampled_outputs) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unnest&lt;/span&gt;(resampled_outputs) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;transmute&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cellsize &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; cellsize,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mean_agb  &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; purrr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;map_dbl&lt;/span&gt;(.predictions, &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(x) &lt;span style=&#34;color:#00f&#34;&gt;mean&lt;/span&gt;(x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;agb)),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mean_pred &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; purrr&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;map_dbl&lt;/span&gt;(.predictions, &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(x) &lt;span style=&#34;color:#00f&#34;&gt;mean&lt;/span&gt;(x&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;.pred))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;head&lt;/span&gt;(riemann_metrics)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 6 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   cellsize mean_agb mean_pred&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;      &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1    10000    5930.     7161.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2    10000    6265.     7020.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3    10000   11766.     7673.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4    10000   28067.    21806.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5    10000   13132.    17911.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 6    10000       0      6287.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that we&amp;rsquo;ve got our &amp;ldquo;true&amp;rdquo; and estimated AGB for each hexagon, all that&amp;rsquo;s left is for us to calculate our model accuracy metrics for each aggregation scale we investigated. We can use functions from yardstick to quickly calculate our root-mean-squared error (RMSE) and mean absolute error (MAE) for each cell size we investigated:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;riemann_metrics &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; riemann_metrics &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;group_by&lt;/span&gt;(cellsize) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;summarize&lt;/span&gt;(rmse &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;rmse_vec&lt;/span&gt;(mean_agb, mean_pred),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            mae  &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mae_vec&lt;/span&gt;(mean_agb, mean_pred))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And just like that, we&amp;rsquo;ve got a multi-scale assessment of our model&amp;rsquo;s accuracy! To repeat a point from earlier, we aren&amp;rsquo;t using this as a way to tune our model. Instead, we can use our results to investigate and report how well our model does at different levels of aggregation. For instance, while it appears that both RMSE and MAE improve as we aggregate our predictions to larger and larger hexagons, some scales have a much larger difference between the two metrics than others. This hints that, at those specific scales, a few individual hexagons are large outliers driving RMSE higher, which might indicate that our model isn&amp;rsquo;t performing well in a few specific locations:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(ggplot2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;riemann_metrics &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;pivot_longer&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;cellsize) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(cellsize, value, color &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; name)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_line&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_point&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;theme_minimal&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/unnamed-chunk-11-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;p&gt;Riemann, R., Wilston, B. T., Lister, A., and Parks, S. 2010. An effective assessment protocol for continuous geospatial datasets of forest characteristics using USFS Forest Inventory and Analysis (FIA) data. Remote Sensing of Environment, 114, pp. 2337-2353. doi: 10.1016/j.rse.2010.05.010.&lt;/p&gt;
&lt;h2 id=&#34;session-information&#34;&gt;Session information&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#&amp;gt; ─ Session info ─────────────────────────────────────────────────────
#&amp;gt;  setting  value
#&amp;gt;  version  R version 4.2.1 (2022-06-23)
#&amp;gt;  os       Ubuntu 20.04.4 LTS
#&amp;gt;  system   x86_64, linux-gnu
#&amp;gt;  ui       X11
#&amp;gt;  language (EN)
#&amp;gt;  collate  en_US.UTF-8
#&amp;gt;  ctype    en_US.UTF-8
#&amp;gt;  tz       America/New_York
#&amp;gt;  date     2022-07-06
#&amp;gt;  pandoc   2.17.1.1 @ /usr/lib/rstudio/bin/quarto/bin/ (via rmarkdown)
#&amp;gt; 
#&amp;gt; ─ Packages ─────────────────────────────────────────────────────────
#&amp;gt;  package       * version date (UTC) lib source
#&amp;gt;  broom         * 0.8.0   2022-04-13 [1] CRAN (R 4.2.0)
#&amp;gt;  dials         * 1.0.0   2022-06-14 [1] CRAN (R 4.2.1)
#&amp;gt;  dplyr         * 1.0.9   2022-04-28 [1] CRAN (R 4.2.0)
#&amp;gt;  ggplot2       * 3.3.6   2022-05-03 [1] CRAN (R 4.2.0)
#&amp;gt;  infer         * 1.0.2   2022-06-10 [1] CRAN (R 4.2.0)
#&amp;gt;  parsnip       * 1.0.0   2022-06-16 [1] CRAN (R 4.2.1)
#&amp;gt;  purrr         * 0.3.4   2020-04-17 [1] CRAN (R 4.2.0)
#&amp;gt;  recipes       * 0.2.0   2022-02-18 [1] CRAN (R 4.2.0)
#&amp;gt;  rlang           1.0.3   2022-06-27 [1] CRAN (R 4.2.1)
#&amp;gt;  rsample       * 1.0.0   2022-06-24 [1] CRAN (R 4.2.1)
#&amp;gt;  spatialsample * 0.2.0   2022-06-17 [1] CRAN (R 4.2.1)
#&amp;gt;  tibble        * 3.1.7   2022-05-03 [1] CRAN (R 4.2.0)
#&amp;gt;  tidymodels    * 0.2.0   2022-03-19 [1] CRAN (R 4.2.1)
#&amp;gt;  tune          * 0.2.0   2022-03-19 [1] CRAN (R 4.2.1)
#&amp;gt;  workflows     * 0.2.6   2022-03-18 [1] CRAN (R 4.2.1)
#&amp;gt;  yardstick     * 1.0.0   2022-06-06 [1] CRAN (R 4.2.1)
#&amp;gt; 
#&amp;gt;  [1] /home/mikemahoney218/R/x86_64-pc-linux-gnu-library/4.2
#&amp;gt;  [2] /usr/local/lib/R/site-library
#&amp;gt;  [3] /usr/lib/R/site-library
#&amp;gt;  [4] /usr/lib/R/library
#&amp;gt; 
#&amp;gt; ────────────────────────────────────────────────────────────────────
&lt;/code&gt;&lt;/pre&gt;</description>
  </item>
  
<item>
  <title>Statistical analysis of contingency tables</title>
  <link>https://www.tidymodels.org/learn/statistics/xtabs/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/learn/statistics/xtabs/</guid>
  <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This article only requires that you have the tidymodels package installed.&lt;/p&gt;
&lt;p&gt;In this vignette, we&amp;rsquo;ll walk through conducting a &lt;code&gt;\(\chi^2\)&lt;/code&gt; (chi-squared) test of independence and a chi-squared goodness of fit test using infer. We&amp;rsquo;ll start out with a chi-squared test of independence, which can be used to test the association between two categorical variables. Then, we&amp;rsquo;ll move on to a chi-squared goodness of fit test, which tests how well the distribution of one categorical variable can be approximated by some theoretical distribution.&lt;/p&gt;
&lt;p&gt;Throughout this vignette, we&amp;rsquo;ll make use of the &lt;code&gt;ad_data&lt;/code&gt; data set (available in the modeldata package, which is part of tidymodels). This data set is related to cognitive impairment in 333 patients from &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3079734/&#34;&gt;Craig-Schapiro &lt;em&gt;et al&lt;/em&gt; (2011)&lt;/a&gt;. See &lt;code&gt;?ad_data&lt;/code&gt; for more information on the variables included and their source. One of the main research questions in these data were how a person&amp;rsquo;s genetics related to the Apolipoprotein E gene affect their cognitive skills. The data shows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(tidymodels) &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Includes the infer package&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;data&lt;/span&gt;(ad_data, package &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;modeldata&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ad_data &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(Genotype, Class)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 333 × 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    Genotype Class   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;fct&amp;gt;    &amp;lt;fct&amp;gt;   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 E3E3     Control &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 E3E4     Control &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 E3E4     Control &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 E3E4     Control &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 E3E3     Control &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 E4E4     Impaired&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 E2E3     Control &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 E2E3     Control &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 E3E3     Control &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 E2E3     Impaired&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 323 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The three main genetic variants are called E2, E3, and E4. The values in &lt;code&gt;Genotype&lt;/code&gt; represent the genetic makeup of patients based on what they inherited from their parents (i.e, a value of &amp;ldquo;E2E4&amp;rdquo; means E2 from one parent and E4 from the other).&lt;/p&gt;
&lt;h2 id=&#34;test-of-independence&#34;&gt;Test of independence&lt;/h2&gt;
&lt;p&gt;To carry out a chi-squared test of independence, we&amp;rsquo;ll examine the association between their cognitive ability (impaired and healthy) and the genetic makeup. This is what the relationship looks like in the sample data:&lt;/p&gt;
&lt;img src=&#34;figs/plot-indep-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;If there were no relationship, we would expect to see the purple bars reaching to the same length, regardless of cognitive ability. Are the differences we see here, though, just due to random noise?&lt;/p&gt;
&lt;p&gt;First, to calculate the observed statistic, we can use &lt;code&gt;specify()&lt;/code&gt; and &lt;code&gt;calculate()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# calculate the observed statistic&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;observed_indep_statistic &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; ad_data &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;specify&lt;/span&gt;(Genotype &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; Class) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;calculate&lt;/span&gt;(stat &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Chisq&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The observed &lt;code&gt;\(\chi^2\)&lt;/code&gt; statistic is 21.577. Now, we want to compare this statistic to a null distribution, generated under the assumption that these variables are not actually related, to get a sense of how likely it would be for us to see this observed statistic if there were actually no association between cognitive ability and genetics.&lt;/p&gt;
&lt;p&gt;We can &lt;code&gt;generate()&lt;/code&gt; the null distribution in one of two ways: using randomization or theory-based methods. The randomization approach permutes the response and explanatory variables, so that each person&amp;rsquo;s genetics is matched up with a random cognitive rating from the sample in order to break up any association between the two.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# generate the null distribution using randomization&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;null_distribution_simulated &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; ad_data &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;specify&lt;/span&gt;(Genotype &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; Class) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;hypothesize&lt;/span&gt;(null &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;independence&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;generate&lt;/span&gt;(reps &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5000&lt;/span&gt;, type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;permute&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;calculate&lt;/span&gt;(stat &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Chisq&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that, in the line &lt;code&gt;specify(Genotype ~ Class)&lt;/code&gt; above, we could use the equivalent syntax &lt;code&gt;specify(response = Genotype, explanatory = Class)&lt;/code&gt;. The same goes in the code below, which generates the null distribution using theory-based methods instead of randomization.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# generate the null distribution by theoretical approximation&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;null_distribution_theoretical &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; ad_data &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;specify&lt;/span&gt;(Genotype &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; Class) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;hypothesize&lt;/span&gt;(null &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;independence&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# note that we skip the generation step here!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;calculate&lt;/span&gt;(stat &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Chisq&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To get a sense for what these distributions look like, and where our observed statistic falls, we can use &lt;code&gt;visualize()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# visualize the null distribution and test statistic!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;null_distribution_simulated &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;visualize&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;shade_p_value&lt;/span&gt;(observed_indep_statistic,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                direction &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;greater&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/visualize-indep-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;We could also visualize the observed statistic against the theoretical null distribution. Note that we skip the &lt;code&gt;generate()&lt;/code&gt; and &lt;code&gt;calculate()&lt;/code&gt; steps when using the theoretical approach, and that we now need to provide &lt;code&gt;method = &amp;quot;theoretical&amp;quot;&lt;/code&gt; to &lt;code&gt;visualize()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# visualize the theoretical null distribution and test statistic!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ad_data &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;specify&lt;/span&gt;(Genotype &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; Class) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;hypothesize&lt;/span&gt;(null &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;independence&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;visualize&lt;/span&gt;(method &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;theoretical&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;shade_p_value&lt;/span&gt;(observed_indep_statistic,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                direction &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;greater&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/visualize-indep-theor-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;To visualize both the randomization-based and theoretical null distributions to get a sense of how the two relate, we can pipe the randomization-based null distribution into &lt;code&gt;visualize()&lt;/code&gt;, and further provide &lt;code&gt;method = &amp;quot;both&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# visualize both null distributions and the test statistic!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;null_distribution_simulated &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;visualize&lt;/span&gt;(method &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;both&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;shade_p_value&lt;/span&gt;(observed_indep_statistic,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                direction &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;greater&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/visualize-indep-both-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;Either way, it looks like our observed test statistic would be fairly unlikely if there were actually no association between cognition and genotype. More exactly, we can calculate the p-value:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# calculate the p value from the observed statistic and null distribution&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p_value_independence &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; null_distribution_simulated &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;get_p_value&lt;/span&gt;(obs_stat &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; observed_indep_statistic,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              direction &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;greater&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p_value_independence
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 × 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   p_value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1   0.001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Thus, if there were really no relationship between cognition and genotype, the probability that we would see a statistic as or more extreme than 21.577 is approximately 0.001.&lt;/p&gt;
&lt;p&gt;Note that, equivalently to the steps shown above, the package supplies a wrapper function, &lt;code&gt;chisq_test&lt;/code&gt;, to carry out Chi-Squared tests of independence on tidy data. The syntax goes like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;chisq_test&lt;/span&gt;(ad_data, Genotype &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; Class)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   statistic chisq_df  p_value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;    &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1      21.6        5 0.000630&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;goodness-of-fit&#34;&gt;Goodness of fit&lt;/h2&gt;
&lt;p&gt;Now, moving on to a chi-squared goodness of fit test, we&amp;rsquo;ll take a look at just the genotype data. Many papers have investigated the relationship of Apolipoprotein E to diseases. For example, &lt;a href=&#34;https://annals.org/aim/article-abstract/717641/meta-analysis-apolipoprotein-e-genotypes-risk-coronary-heart-disease&#34;&gt;Song &lt;em&gt;et al&lt;/em&gt; (2004)&lt;/a&gt; conducted a meta-analysis of numerous studies that looked at this gene and heart disease. In their paper, they describe the frequency of the different genotypes across many samples. For the cognition study, it might be interesting to see if our sample of genotypes was consistent with this literature (treating the rates, for this analysis, as known).&lt;/p&gt;
&lt;p&gt;The rates of the meta-analysis and our observed data are:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Song, Y., Stampfer, M. J., &amp;amp; Liu, S. (2004). Meta-Analysis: Apolipoprotein E &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Genotypes and Risk for Coronary Heart Disease. Annals of Internal Medicine, &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# 141(2), 137.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;meta_rates &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;E2E2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.71&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;E2E3&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;11.4&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;E2E4&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2.32&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;E3E3&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;61.0&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;E3E4&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;22.6&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;E4E4&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2.22&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;meta_rates &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; meta_rates&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;sum&lt;/span&gt;(meta_rates) &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# these add up to slightly &amp;gt; 100%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;obs_rates &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;table&lt;/span&gt;(ad_data&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;Genotype)&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;nrow&lt;/span&gt;(ad_data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;round&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;cbind&lt;/span&gt;(obs_rates, meta_rates) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;      obs_rates meta_rates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; E2E2       0.6       0.71&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; E2E3      11.1      11.37&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; E2E4       2.4       2.31&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; E3E3      50.1      60.85&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; E3E4      31.8      22.54&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; E4E4       3.9       2.21&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Suppose our null hypothesis is that &lt;code&gt;Genotype&lt;/code&gt; follows the same frequency distribution as the meta-analysis. Lets now test whether this difference in distributions is statistically significant.&lt;/p&gt;
&lt;p&gt;First, to carry out this hypothesis test, we would calculate our observed statistic.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# calculating the null distribution&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;observed_gof_statistic &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; ad_data &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;specify&lt;/span&gt;(response &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; Genotype) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;hypothesize&lt;/span&gt;(null &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;point&amp;#34;&lt;/span&gt;, p &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; meta_rates) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;calculate&lt;/span&gt;(stat &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Chisq&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The observed statistic is 23.384. Now, generating a null distribution, by just dropping in a call to &lt;code&gt;generate()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# generating a null distribution&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;null_distribution_gof &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; ad_data &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;specify&lt;/span&gt;(response &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; Genotype) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;hypothesize&lt;/span&gt;(null &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;point&amp;#34;&lt;/span&gt;, p &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; meta_rates) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;generate&lt;/span&gt;(reps &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5000&lt;/span&gt;, type &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;simulate&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;calculate&lt;/span&gt;(stat &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Chisq&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Again, to get a sense for what these distributions look like, and where our observed statistic falls, we can use &lt;code&gt;visualize()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# visualize the null distribution and test statistic!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;null_distribution_gof &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;visualize&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;shade_p_value&lt;/span&gt;(observed_gof_statistic,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                direction &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;greater&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/visualize-indep-gof-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;This statistic seems like it would be unlikely if our rates were the same as the rates from the meta-analysis! How unlikely, though? Calculating the p-value:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# calculate the p-value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p_value_gof &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; null_distribution_gof &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;get_p_value&lt;/span&gt;(observed_gof_statistic,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              direction &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;greater&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p_value_gof
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 × 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   p_value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1  0.0012&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Thus, if each genotype occurred at the same rate as the Song paper, the probability that we would see a distribution like the one we did is approximately 0.001.&lt;/p&gt;
&lt;p&gt;Again, equivalently to the steps shown above, the package supplies a wrapper function, &lt;code&gt;chisq_test&lt;/code&gt;, to carry out chi-squared goodness of fit tests on tidy data. The syntax goes like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;chisq_test&lt;/span&gt;(ad_data, response &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; Genotype, p &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; meta_rates)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   statistic chisq_df  p_value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1      23.4        5 0.000285&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;session-information&#34;&gt;Session information&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#&amp;gt; ─ Session info ─────────────────────────────────────────────────────
#&amp;gt;  setting  value
#&amp;gt;  version  R version 4.1.2 (2021-11-01)
#&amp;gt;  os       macOS Monterey 12.3
#&amp;gt;  system   aarch64, darwin20
#&amp;gt;  ui       X11
#&amp;gt;  language (EN)
#&amp;gt;  collate  en_GB.UTF-8
#&amp;gt;  ctype    en_GB.UTF-8
#&amp;gt;  tz       Europe/London
#&amp;gt;  date     2022-04-11
#&amp;gt;  pandoc   2.14.0.3 @ /Applications/RStudio.app/Contents/MacOS/pandoc/ (via rmarkdown)
#&amp;gt; 
#&amp;gt; ─ Packages ─────────────────────────────────────────────────────────
#&amp;gt;  package    * version date (UTC) lib source
#&amp;gt;  broom      * 0.7.12  2022-01-28 [1] CRAN (R 4.1.1)
#&amp;gt;  dials      * 0.1.1   2022-04-06 [1] CRAN (R 4.1.2)
#&amp;gt;  dplyr      * 1.0.8   2022-02-08 [1] CRAN (R 4.1.2)
#&amp;gt;  ggplot2    * 3.3.5   2021-06-25 [1] CRAN (R 4.1.1)
#&amp;gt;  infer      * 1.0.0   2021-08-13 [1] CRAN (R 4.1.1)
#&amp;gt;  parsnip    * 0.2.1   2022-03-17 [1] CRAN (R 4.1.1)
#&amp;gt;  purrr      * 0.3.4   2020-04-17 [1] CRAN (R 4.1.0)
#&amp;gt;  recipes    * 0.2.0   2022-02-18 [1] CRAN (R 4.1.1)
#&amp;gt;  rlang        1.0.2   2022-03-04 [1] CRAN (R 4.1.1)
#&amp;gt;  rsample    * 0.1.1   2021-11-08 [1] CRAN (R 4.1.2)
#&amp;gt;  tibble     * 3.1.6   2021-11-07 [1] CRAN (R 4.1.1)
#&amp;gt;  tidymodels * 0.2.0   2022-03-19 [1] CRAN (R 4.1.1)
#&amp;gt;  tune       * 0.2.0   2022-03-19 [1] CRAN (R 4.1.2)
#&amp;gt;  workflows  * 0.2.6   2022-03-18 [1] CRAN (R 4.1.2)
#&amp;gt;  yardstick  * 0.0.9   2021-11-22 [1] CRAN (R 4.1.1)
#&amp;gt; 
#&amp;gt;  [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library
#&amp;gt; 
#&amp;gt; ────────────────────────────────────────────────────────────────────
&lt;/code&gt;&lt;/pre&gt;</description>
  </item>
  
<item>
  <title>Statistical Inference via Data Science</title>
  <link>https://www.tidymodels.org/books/moderndive/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/books/moderndive/</guid>
  <description>&lt;p&gt;&lt;img src=&#34;cover.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;This book is intended to be a gentle introduction to the practice of analyzing data and answering questions using data the way data scientists, statisticians, data journalists, and other researchers would. Over the course of this book, you will develop your &amp;ldquo;data science toolbox,&amp;rdquo; equipping yourself with tools such as data visualization, data formatting, data wrangling, data modeling using regression, and statistical inference via hypothesis testing and confidence intervals.&lt;/p&gt;
&lt;p&gt;An &lt;strong&gt;HTML version&lt;/strong&gt; of this text can be found at &lt;a href=&#34;https://moderndive.com/&#34;&gt;&lt;code&gt;https://moderndive.com/&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The data sets and R code are available in the GitHub repository &lt;a href=&#34;https://github.com/moderndive/ModernDive_book&#34;&gt;&lt;code&gt;https://github.com/moderndive/ModernDive_book&lt;/code&gt;&lt;/a&gt; and also the accompanying &lt;code&gt;moderndive&lt;/code&gt; R package on &lt;a href=&#34;https://cran.r-project.org/package=moderndive&#34;&gt;CRAN&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The physical copies are sold by &lt;a href=&#34;https://www.amazon.com/Statistical-Inference-via-Data-Science/dp/0367409828/&#34;&gt;&lt;strong&gt;Amazon&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://www.crcpress.com/Statistical-Inference-via-Data-Science-A-ModernDive-into-R-and-the-Tidyverse/Ismay-Kim/p/book/9780367409821&#34;&gt;&lt;strong&gt;CRC Press&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
  </item>
  
<item>
  <title>Working with model coefficients</title>
  <link>https://www.tidymodels.org/learn/models/coefficients/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/learn/models/coefficients/</guid>
  <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;There are many types of statistical models with diverse kinds of structure. Some models have coefficients (a.k.a. weights) for each term in the model. Familiar examples of such models are linear or logistic regression, but more complex models (e.g. neural networks, MARS) can also have model coefficients. When we work with models that use weights or coefficients, we often want to examine the estimated coefficients.&lt;/p&gt;
&lt;p&gt;This article describes how to retrieve the estimated coefficients from models fit using tidymodels. To use the code in this article, you will need to install the following packages: glmnet and tidymodels.&lt;/p&gt;
&lt;h2 id=&#34;linear-regression&#34;&gt;Linear regression&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s start with a linear regression model:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$$\hat{y} = \hat{\beta}_0 + \hat{\beta}_1x_1 + \ldots + \hat{\beta}_px_p$$&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;\(\beta\)&lt;/code&gt; values are the coefficients and the &lt;code&gt;\(x_j\)&lt;/code&gt; are model predictors, or features.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s use the &lt;a href=&#34;https://bookdown.org/max/FES/chicago-intro.html&#34;&gt;Chicago train data&lt;/a&gt; where we predict the ridership at the Clark and Lake station (column name: &lt;code&gt;ridership&lt;/code&gt;) with the previous ridership data 14 days prior at three of the stations.&lt;/p&gt;
&lt;p&gt;The data are in the modeldata package:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(tidymodels)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;tidymodels_prefer&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;theme_set&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;theme_bw&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;data&lt;/span&gt;(Chicago)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Chicago &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; Chicago &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(ridership, Clark_Lake, Austin, Harlem)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;a-single-model&#34;&gt;A single model&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s start by fitting only a single parsnip model object. We&amp;rsquo;ll create a model specification using &lt;code&gt;linear_reg()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;note&#34;&gt;The default engine is &lt;code&gt;&amp;quot;lm&amp;quot;&lt;/code&gt; so no call to &lt;code&gt;set_engine()&lt;/code&gt; is required.&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;fit()&lt;/code&gt; function estimates the model coefficients, given a formula and data set.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lm_spec &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;linear_reg&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lm_fit &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;fit&lt;/span&gt;(lm_spec, ridership &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; ., data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; Chicago)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lm_fit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; parsnip model object&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Call:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; stats::lm(formula = ridership ~ ., data = data)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Coefficients:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; (Intercept)   Clark_Lake       Austin       Harlem  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;       1.678        0.904        0.612       -0.555&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The best way to retrieve the fitted parameters is to use the &lt;code&gt;tidy()&lt;/code&gt; method. This function, in the broom package, returns the coefficients and their associated statistics in a data frame with standardized column names:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;tidy&lt;/span&gt;(lm_fit)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 4 × 5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   term        estimate std.error statistic   p.value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 (Intercept)    1.68     0.156      10.7  1.11e- 26&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 Clark_Lake     0.904    0.0280     32.3  5.14e-210&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 Austin         0.612    0.320       1.91 5.59e-  2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4 Harlem        -0.555    0.165      -3.36 7.85e-  4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ll use this function in subsequent sections.&lt;/p&gt;
&lt;h3 id=&#34;resampled-or-tuned-models&#34;&gt;Resampled or tuned models&lt;/h3&gt;
&lt;p&gt;The tidymodels framework emphasizes the use of resampling methods to evaluate and characterize how well a model works. While time series resampling methods are appropriate for these data, we can also use the &lt;a href=&#34;https://www.tmwr.org/resampling.html#bootstrap&#34;&gt;bootstrap&lt;/a&gt; to resample the data. This is a standard resampling approach when evaluating the uncertainty in statistical estimates.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll use five bootstrap resamples of the data to simplify the plots and output (normally, we would use a larger number of resamples for more reliable estimates).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;123&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bt &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;bootstraps&lt;/span&gt;(Chicago, times &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With resampling, we fit the same model to the different simulated versions of the data set produced by resampling. The tidymodels function &lt;a href=&#34;https://www.tmwr.org/resampling.html#resampling-performance&#34;&gt;&lt;code&gt;fit_resamples()&lt;/code&gt;&lt;/a&gt; is the recommended approach for doing so.&lt;/p&gt;
&lt;div class=&#34;warning&#34;&gt;The &lt;code&gt;fit_resamples()&lt;/code&gt; function does not automatically save the model objects for each resample since these can be quite large and its main purpose is estimating performance. However, we can pass a function to &lt;code&gt;fit_resamples()&lt;/code&gt; that &lt;em&gt;can&lt;/em&gt; save the model object or any other aspect of the fit.&lt;/div&gt;
&lt;p&gt;This function takes a single argument that represents the fitted &lt;a href=&#34;https://www.tmwr.org/workflows.html&#34;&gt;workflow object&lt;/a&gt; (even if you don&amp;rsquo;t give &lt;code&gt;fit_resamples()&lt;/code&gt; a workflow).&lt;/p&gt;
&lt;p&gt;From this, we can extract the model fit. There are two &amp;ldquo;levels&amp;rdquo; of model objects that are available:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The parsnip model object, which wraps the underlying model object. We retrieve this using the &lt;code&gt;extract_fit_parsnip()&lt;/code&gt; function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The underlying model object (a.k.a. the engine fit) via the &lt;code&gt;extract_fit_engine()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We&amp;rsquo;ll use the latter option and then tidy this model object as we did in the previous section. Let&amp;rsquo;s add this to the control function so that we can re-use it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;get_lm_coefs &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(x) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  x &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# get the lm model object&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;extract_fit_engine&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# transform its format&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;tidy&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tidy_ctrl &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;control_grid&lt;/span&gt;(extract &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; get_lm_coefs)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This argument is then passed to &lt;code&gt;fit_resamples()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lm_res &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lm_spec &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;fit_resamples&lt;/span&gt;(ridership &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; ., resamples &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; bt, control &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; tidy_ctrl)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lm_res
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # Resampling results&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # Bootstrap sampling &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 5 × 5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   splits              id         .metrics         .notes           .extracts&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;list&amp;gt;              &amp;lt;chr&amp;gt;      &amp;lt;list&amp;gt;           &amp;lt;list&amp;gt;           &amp;lt;list&amp;gt;   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 &amp;lt;split [5698/2076]&amp;gt; Bootstrap1 &amp;lt;tibble [2 × 4]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt; &amp;lt;tibble&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 &amp;lt;split [5698/2098]&amp;gt; Bootstrap2 &amp;lt;tibble [2 × 4]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt; &amp;lt;tibble&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 &amp;lt;split [5698/2064]&amp;gt; Bootstrap3 &amp;lt;tibble [2 × 4]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt; &amp;lt;tibble&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4 &amp;lt;split [5698/2082]&amp;gt; Bootstrap4 &amp;lt;tibble [2 × 4]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt; &amp;lt;tibble&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5 &amp;lt;split [5698/2088]&amp;gt; Bootstrap5 &amp;lt;tibble [2 × 4]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt; &amp;lt;tibble&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that there is a &lt;code&gt;.extracts&lt;/code&gt; column in our resampling results. This object contains the output of our &lt;code&gt;get_lm_coefs()&lt;/code&gt; function for each resample. The structure of the elements of this column is a little complex. Let&amp;rsquo;s start by looking at the first element (which corresponds to the first resample):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lm_res&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;.extracts[[1]]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 1 × 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   .extracts        .config             &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;list&amp;gt;           &amp;lt;chr&amp;gt;               &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 &amp;lt;tibble [4 × 5]&amp;gt; Preprocessor1_Model1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There is &lt;em&gt;another&lt;/em&gt; column in this element called &lt;code&gt;.extracts&lt;/code&gt; that has the results of the &lt;code&gt;tidy()&lt;/code&gt; function call:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lm_res&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;.extracts[[1]]&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;.extracts[[1]]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 4 × 5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   term        estimate std.error statistic   p.value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 (Intercept)    1.40     0.157       8.90 7.23e- 19&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 Clark_Lake     0.842    0.0280     30.1  2.39e-184&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 Austin         1.46     0.320       4.54 5.70e-  6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4 Harlem        -0.637    0.163      -3.92 9.01e-  5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These nested columns can be flattened via the tidyr &lt;code&gt;unnest()&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lm_res &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(id, .extracts) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unnest&lt;/span&gt;(.extracts) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 5 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   id         .extracts        .config             &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;      &amp;lt;list&amp;gt;           &amp;lt;chr&amp;gt;               &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 Bootstrap1 &amp;lt;tibble [4 × 5]&amp;gt; Preprocessor1_Model1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 Bootstrap2 &amp;lt;tibble [4 × 5]&amp;gt; Preprocessor1_Model1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 Bootstrap3 &amp;lt;tibble [4 × 5]&amp;gt; Preprocessor1_Model1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4 Bootstrap4 &amp;lt;tibble [4 × 5]&amp;gt; Preprocessor1_Model1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5 Bootstrap5 &amp;lt;tibble [4 × 5]&amp;gt; Preprocessor1_Model1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We still have a column of nested tibbles, so we can run the same command again to get the data into a more useful format:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lm_coefs &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lm_res &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(id, .extracts) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unnest&lt;/span&gt;(.extracts) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unnest&lt;/span&gt;(.extracts)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lm_coefs &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(id, term, estimate, p.value)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 20 × 4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    id         term        estimate   p.value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 Bootstrap1 (Intercept)    1.40  7.23e- 19&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 Bootstrap1 Clark_Lake     0.842 2.39e-184&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 Bootstrap1 Austin         1.46  5.70e-  6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 Bootstrap1 Harlem        -0.637 9.01e-  5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 Bootstrap2 (Intercept)    1.69  2.87e- 28&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 Bootstrap2 Clark_Lake     0.911 1.06e-219&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 Bootstrap2 Austin         0.595 5.93e-  2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 Bootstrap2 Harlem        -0.580 3.88e-  4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 Bootstrap3 (Intercept)    1.27  3.43e- 16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 Bootstrap3 Clark_Lake     0.859 5.03e-194&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 11 Bootstrap3 Austin         1.09  6.77e-  4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 12 Bootstrap3 Harlem        -0.470 4.34e-  3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 13 Bootstrap4 (Intercept)    1.95  2.91e- 34&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 14 Bootstrap4 Clark_Lake     0.974 1.47e-233&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 15 Bootstrap4 Austin        -0.116 7.21e-  1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 16 Bootstrap4 Harlem        -0.620 2.11e-  4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 17 Bootstrap5 (Intercept)    1.87  1.98e- 33&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 18 Bootstrap5 Clark_Lake     0.901 1.16e-210&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 19 Bootstrap5 Austin         0.494 1.15e-  1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 20 Bootstrap5 Harlem        -0.512 1.73e-  3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s better! Now, let&amp;rsquo;s plot the model coefficients for each resample:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lm_coefs &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;filter&lt;/span&gt;(term &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;(Intercept)&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; term, y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; estimate, group &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; id, col &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; id)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_hline&lt;/span&gt;(yintercept &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, lty &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_line&lt;/span&gt;(alpha &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.3&lt;/span&gt;, lwd &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1.2&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;labs&lt;/span&gt;(y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Coefficient&amp;#34;&lt;/span&gt;, x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;theme&lt;/span&gt;(legend.position &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;top&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/lm-plot-1.svg&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;There seems to be a lot of uncertainty in the coefficient for the Austin station data, but less for the other two.&lt;/p&gt;
&lt;p&gt;Looking at the code for unnesting the results, you may find the double-nesting structure excessive or cumbersome. However, the extraction functionality is flexible, and a simpler structure would prevent many use cases.&lt;/p&gt;
&lt;h2 id=&#34;more-complex-a-glmnet-model&#34;&gt;More complex: a glmnet model&lt;/h2&gt;
&lt;p&gt;The glmnet model can fit the same linear regression model structure shown above. It uses regularization (a.k.a penalization) to estimate the model parameters. This has the benefit of shrinking the coefficients towards zero, important in situations where there are strong correlations between predictors or if some feature selection is required. Both of these cases are true for our Chicago train data set.&lt;/p&gt;
&lt;p&gt;There are two types of penalization that this model uses:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Lasso (a.k.a. &lt;code&gt;\(L_1\)&lt;/code&gt;) penalties can shrink the model terms so much that they are absolute zero (i.e. their effect is entirely removed from the model).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weight decay (a.k.a ridge regression or &lt;code&gt;\(L_2\)&lt;/code&gt;) uses a different type of penalty that is most useful for highly correlated predictors.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The glmnet model has two primary tuning parameters, the total amount of penalization and the mixture of the two penalty types. For example, this specification:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;glmnet_spec &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;linear_reg&lt;/span&gt;(penalty &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.1&lt;/span&gt;, mixture &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.95&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;set_engine&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;glmnet&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;has a penalty that is 95% lasso and 5% weight decay. The total amount of these two penalties is 0.1 (which is fairly high).&lt;/p&gt;
&lt;div class=&#34;note&#34;&gt;Models with regularization require that predictors are all on the same scale. The ridership at our three stations are very different, but glmnet &lt;a href=&#34;https://parsnip.tidymodels.org/reference/details_linear_reg_glmnet.html&#34;&gt;automatically centers and scales the data&lt;/a&gt;. You can use recipes to &lt;a href=&#34;https://recipes.tidymodels.org/reference/step_normalize.html&#34;&gt;center and scale your data yourself&lt;/a&gt;.&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s combine the model specification with a formula in a model &lt;code&gt;workflow()&lt;/code&gt; and then fit the model to the data:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;glmnet_wflow &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;workflow&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;add_model&lt;/span&gt;(glmnet_spec) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;add_formula&lt;/span&gt;(ridership &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; .)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;glmnet_fit &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;fit&lt;/span&gt;(glmnet_wflow, Chicago)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;glmnet_fit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ══ Workflow [trained] ════════════════════════════════════════════════&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Preprocessor: Formula&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Model: linear_reg()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Preprocessor ──────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ridership ~ .&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ── Model ─────────────────────────────────────────────────────────────&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; Call:  glmnet::glmnet(x = maybe_matrix(x), y = y, family = &amp;#34;gaussian&amp;#34;,      alpha = ~0.95) &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    Df %Dev Lambda&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1   0  0.0   6.10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2   1 12.8   5.56&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3   1 23.4   5.07&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4   1 32.4   4.62&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5   1 40.0   4.21&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 6   1 46.2   3.83&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 7   1 51.5   3.49&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 8   1 55.9   3.18&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 9   1 59.6   2.90&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10  1 62.7   2.64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 11  2 65.3   2.41&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 12  2 67.4   2.19&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 13  2 69.2   2.00&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 14  2 70.7   1.82&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 15  2 72.0   1.66&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 16  2 73.0   1.51&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 17  2 73.9   1.38&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 18  2 74.6   1.26&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 19  2 75.2   1.14&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 20  2 75.7   1.04&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 21  2 76.1   0.95&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 22  2 76.4   0.86&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 23  2 76.7   0.79&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 24  2 76.9   0.72&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 25  2 77.1   0.66&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 26  2 77.3   0.60&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 27  2 77.4   0.54&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 28  2 77.6   0.50&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 29  2 77.6   0.45&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 30  2 77.7   0.41&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 31  2 77.8   0.38&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 32  2 77.8   0.34&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 33  2 77.9   0.31&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 34  2 77.9   0.28&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 35  2 78.0   0.26&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 36  2 78.0   0.23&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 37  2 78.0   0.21&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 38  2 78.0   0.20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 39  2 78.0   0.18&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 40  2 78.0   0.16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 41  2 78.0   0.15&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 42  2 78.1   0.14&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 43  2 78.1   0.12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 44  2 78.1   0.11&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 45  2 78.1   0.10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 46  2 78.1   0.09&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; and 9 more lines.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this output, the term &lt;code&gt;lambda&lt;/code&gt; is used to represent the penalty.&lt;/p&gt;
&lt;p&gt;Note that the output shows many values of the penalty despite our specification of &lt;code&gt;penalty = 0.1&lt;/code&gt;. It turns out that this model fits a &amp;ldquo;path&amp;rdquo; of penalty values.  Even though we are interested in a value of 0.1, we can get the model coefficients for many associated values of the penalty from the same model object.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at two different approaches to obtaining the coefficients. Both will use the &lt;code&gt;tidy()&lt;/code&gt; method. One will tidy a glmnet object and the other will tidy a tidymodels object.&lt;/p&gt;
&lt;h3 id=&#34;using-glmnet-penalty-values&#34;&gt;Using glmnet penalty values&lt;/h3&gt;
&lt;p&gt;This glmnet fit contains multiple penalty values which depend on the data set; changing the data (or the mixture amount) often produces a different set of values. For this data set, there are 55 penalties available. To get the set of penalties produced for this data set, we can extract the engine fit and tidy:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;glmnet_fit &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;extract_fit_engine&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;tidy&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;rename&lt;/span&gt;(penalty &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; lambda) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;   &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# &amp;lt;- for consistent naming&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;filter&lt;/span&gt;(term &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;(Intercept)&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 99 × 5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    term        step estimate penalty dev.ratio&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 Clark_Lake     2   0.0753    5.56     0.127&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 Clark_Lake     3   0.145     5.07     0.234&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 Clark_Lake     4   0.208     4.62     0.324&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 Clark_Lake     5   0.266     4.21     0.400&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 Clark_Lake     6   0.319     3.83     0.463&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 Clark_Lake     7   0.368     3.49     0.515&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 Clark_Lake     8   0.413     3.18     0.559&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 Clark_Lake     9   0.454     2.90     0.596&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 Clark_Lake    10   0.491     2.64     0.627&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 Clark_Lake    11   0.526     2.41     0.653&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 89 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This works well but, it turns out that our penalty value (0.1) is not in the list produced by the model! The underlying package has functions that use interpolation to produce coefficients for this specific value, but the &lt;code&gt;tidy()&lt;/code&gt; method for glmnet objects does not use it.&lt;/p&gt;
&lt;h3 id=&#34;using-specific-penalty-values&#34;&gt;Using specific penalty values&lt;/h3&gt;
&lt;p&gt;If we run the &lt;code&gt;tidy()&lt;/code&gt; method on the workflow or parsnip object, a different function is used that returns the coefficients for the penalty value that we specified:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;tidy&lt;/span&gt;(glmnet_fit)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 4 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   term        estimate penalty&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 (Intercept)    1.69      0.1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 Clark_Lake     0.846     0.1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 Austin         0.271     0.1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4 Harlem         0         0.1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For any another (single) penalty, we can use an additional argument:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;tidy&lt;/span&gt;(glmnet_fit, penalty &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5.5620&lt;/span&gt;)  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# A value from above&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 4 × 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   term        estimate penalty&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 (Intercept)  12.6       5.56&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 Clark_Lake    0.0753    5.56&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 Austin        0         5.56&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4 Harlem        0         5.56&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The reason for having two &lt;code&gt;tidy()&lt;/code&gt; methods is that, with tidymodels, the focus is on using a specific penalty value.&lt;/p&gt;
&lt;h3 id=&#34;tuning-a-glmnet-model&#34;&gt;Tuning a glmnet model&lt;/h3&gt;
&lt;p&gt;If we know a priori acceptable values for penalty and mixture, we can use the &lt;code&gt;fit_resamples()&lt;/code&gt; function as we did before with linear regression. Otherwise, we can tune those parameters with the tidymodels &lt;code&gt;tune_*()&lt;/code&gt; functions.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s tune our glmnet model over both parameters with this grid:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pen_vals &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;^seq&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-3&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, length.out &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grid &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;crossing&lt;/span&gt;(penalty &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; pen_vals, mixture &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;0.1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;1.0&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is where more glmnet-related complexity comes in: we know that each resample and each value of &lt;code&gt;mixture&lt;/code&gt; will probably produce a different set of penalty values contained in the model object. &lt;em&gt;How can we look at the coefficients at the specific penalty values that we are using to tune?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The approach that we suggest is to use the special &lt;code&gt;path_values&lt;/code&gt; option for glmnet. Details are described in the &lt;a href=&#34;https://parsnip.tidymodels.org/reference/glmnet-details.html#arguments&#34;&gt;technical documentation about glmnet and tidymodels&lt;/a&gt; but in short, this parameter will assign the collection of penalty values used by each glmnet fit (regardless of the data or value of mixture).&lt;/p&gt;
&lt;p&gt;We can pass these as an engine argument and then update our previous workflow object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;glmnet_tune_spec &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;linear_reg&lt;/span&gt;(penalty &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tune&lt;/span&gt;(), mixture &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;tune&lt;/span&gt;()) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;set_engine&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;glmnet&amp;#34;&lt;/span&gt;, path_values &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; pen_vals)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;glmnet_wflow &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  glmnet_wflow &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;update_model&lt;/span&gt;(glmnet_tune_spec)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we will use an extraction function similar to when we used ordinary least squares. We add an additional argument to retain coefficients that are shrunk to zero by the lasso penalty:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;get_glmnet_coefs &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(x) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  x &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;extract_fit_engine&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;tidy&lt;/span&gt;(return_zeros &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;rename&lt;/span&gt;(penalty &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; lambda)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;parsnip_ctrl &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;control_grid&lt;/span&gt;(extract &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; get_glmnet_coefs)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;glmnet_res &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  glmnet_wflow &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;tune_grid&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resamples &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; bt,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    grid &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; grid,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    control &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; parsnip_ctrl
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;glmnet_res
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # Tuning results&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # Bootstrap sampling &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 5 × 5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   splits              id         .metrics          .notes           .extracts&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;list&amp;gt;              &amp;lt;chr&amp;gt;      &amp;lt;list&amp;gt;            &amp;lt;list&amp;gt;           &amp;lt;list&amp;gt;   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 &amp;lt;split [5698/2076]&amp;gt; Bootstrap1 &amp;lt;tibble [40 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt; &amp;lt;tibble&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 &amp;lt;split [5698/2098]&amp;gt; Bootstrap2 &amp;lt;tibble [40 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt; &amp;lt;tibble&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 &amp;lt;split [5698/2064]&amp;gt; Bootstrap3 &amp;lt;tibble [40 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt; &amp;lt;tibble&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4 &amp;lt;split [5698/2082]&amp;gt; Bootstrap4 &amp;lt;tibble [40 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt; &amp;lt;tibble&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5 &amp;lt;split [5698/2088]&amp;gt; Bootstrap5 &amp;lt;tibble [40 × 6]&amp;gt; &amp;lt;tibble [0 × 3]&amp;gt; &amp;lt;tibble&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As noted before, the elements of the main &lt;code&gt;.extracts&lt;/code&gt; column have an embedded list column with the results of &lt;code&gt;get_glmnet_coefs()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;glmnet_res&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;.extracts[[1]] &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;head&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 6 × 4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   penalty mixture .extracts         .config              &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;     &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;list&amp;gt;            &amp;lt;chr&amp;gt;                &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1       1     0.1 &amp;lt;tibble [40 × 5]&amp;gt; Preprocessor1_Model01&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2       1     0.1 &amp;lt;tibble [40 × 5]&amp;gt; Preprocessor1_Model02&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3       1     0.1 &amp;lt;tibble [40 × 5]&amp;gt; Preprocessor1_Model03&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4       1     0.1 &amp;lt;tibble [40 × 5]&amp;gt; Preprocessor1_Model04&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5       1     0.1 &amp;lt;tibble [40 × 5]&amp;gt; Preprocessor1_Model05&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 6       1     0.1 &amp;lt;tibble [40 × 5]&amp;gt; Preprocessor1_Model06&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;glmnet_res&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;.extracts[[1]]&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;.extracts[[1]] &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;head&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 6 × 5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   term         step estimate penalty dev.ratio&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;   &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 1 (Intercept)     1    0.568  1          0.769&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 2 (Intercept)     2    0.432  0.464      0.775&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 3 (Intercept)     3    0.607  0.215      0.779&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 4 (Intercept)     4    0.846  0.1        0.781&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 5 (Intercept)     5    1.06   0.0464     0.782&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 6 (Intercept)     6    1.22   0.0215     0.783&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As before, we&amp;rsquo;ll have to use a double &lt;code&gt;unnest()&lt;/code&gt;. Since the penalty value is in both the top-level and lower-level &lt;code&gt;.extracts&lt;/code&gt;, we&amp;rsquo;ll use &lt;code&gt;select()&lt;/code&gt; to get rid of the first version (but keep &lt;code&gt;mixture&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;glmnet_res &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(id, .extracts) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unnest&lt;/span&gt;(.extracts) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(id, mixture, .extracts) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# &amp;lt;- removes the first penalty column&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unnest&lt;/span&gt;(.extracts)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But wait! We know that each glmnet fit contains all of the coefficients. This means, for a specific resample and value of &lt;code&gt;mixture&lt;/code&gt;, the results are the same:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;all.equal&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# First bootstrap, first `mixture`, first `penalty`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  glmnet_res&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;.extracts[[1]]&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;.extracts[[1]],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# First bootstrap, first `mixture`, second `penalty`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  glmnet_res&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;.extracts[[1]]&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;.extracts[[2]]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; [1] TRUE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For this reason, we&amp;rsquo;ll add a &lt;code&gt;slice(1)&lt;/code&gt; when grouping by &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;mixture&lt;/code&gt;. This will get rid of the replicated results.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;glmnet_coefs &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  glmnet_res &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(id, .extracts) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unnest&lt;/span&gt;(.extracts) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(id, mixture, .extracts) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;group_by&lt;/span&gt;(id, mixture) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;          &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# ┐&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;slice&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;                       &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# │ Remove the redundant results&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;ungroup&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;                      &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# ┘&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unnest&lt;/span&gt;(.extracts)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;glmnet_coefs &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt;(id, penalty, mixture, term, estimate) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;filter&lt;/span&gt;(term &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;(Intercept)&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # A tibble: 300 × 5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    id         penalty mixture term       estimate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;    &amp;lt;chr&amp;gt;        &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;         &amp;lt;dbl&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  1 Bootstrap1 1           0.1 Clark_Lake    0.391&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  2 Bootstrap1 0.464       0.1 Clark_Lake    0.485&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  3 Bootstrap1 0.215       0.1 Clark_Lake    0.590&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  4 Bootstrap1 0.1         0.1 Clark_Lake    0.680&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  5 Bootstrap1 0.0464      0.1 Clark_Lake    0.746&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  6 Bootstrap1 0.0215      0.1 Clark_Lake    0.793&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  7 Bootstrap1 0.01        0.1 Clark_Lake    0.817&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  8 Bootstrap1 0.00464     0.1 Clark_Lake    0.828&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt;  9 Bootstrap1 0.00215     0.1 Clark_Lake    0.834&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; 10 Bootstrap1 0.001       0.1 Clark_Lake    0.837&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&amp;gt; # … with 290 more rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we have the coefficients. Let&amp;rsquo;s look at how they behave as more regularization is used:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;glmnet_coefs &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;filter&lt;/span&gt;(term &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;(Intercept)&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(mixture &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;format&lt;/span&gt;(mixture)) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; penalty, y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; estimate, col &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; mixture, groups &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; id)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_hline&lt;/span&gt;(yintercept &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, lty &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_line&lt;/span&gt;(alpha &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.5&lt;/span&gt;, lwd &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1.2&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;facet_wrap&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; term) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;scale_x_log10&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;scale_color_brewer&lt;/span&gt;(palette &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Accent&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;labs&lt;/span&gt;(y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;coefficient&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;theme&lt;/span&gt;(legend.position &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;top&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/glmnet-plot-1.svg&#34; width=&#34;816&#34; /&gt;
&lt;p&gt;Notice a couple of things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;With a pure lasso model (i.e., &lt;code&gt;mixture = 1&lt;/code&gt;), the Austin station predictor is selected out in each resample. With a mixture of both penalties, its influence increases. Also, as the penalty increases, the uncertainty in this coefficient decreases.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Harlem predictor is either quickly selected out of the model or goes from negative to positive.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;session-information&#34;&gt;Session information&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#&amp;gt; ─ Session info ─────────────────────────────────────────────────────
#&amp;gt;  setting  value
#&amp;gt;  version  R version 4.1.2 (2021-11-01)
#&amp;gt;  os       macOS Monterey 12.3.1
#&amp;gt;  system   aarch64, darwin20
#&amp;gt;  ui       X11
#&amp;gt;  language (EN)
#&amp;gt;  collate  en_US.UTF-8
#&amp;gt;  ctype    en_US.UTF-8
#&amp;gt;  tz       America/New_York
#&amp;gt;  date     2022-06-20
#&amp;gt;  pandoc   2.17.1.1 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/ (via rmarkdown)
#&amp;gt; 
#&amp;gt; ─ Packages ─────────────────────────────────────────────────────────
#&amp;gt;  package    * version date (UTC) lib source
#&amp;gt;  broom      * 0.8.0   2022-04-13 [1] CRAN (R 4.1.1)
#&amp;gt;  dials      * 1.0.0   2022-06-14 [1] CRAN (R 4.1.2)
#&amp;gt;  dplyr      * 1.0.9   2022-04-28 [1] CRAN (R 4.1.1)
#&amp;gt;  ggplot2    * 3.3.6   2022-05-03 [1] CRAN (R 4.1.1)
#&amp;gt;  glmnet     * 4.1-4   2022-04-15 [1] CRAN (R 4.1.1)
#&amp;gt;  infer      * 1.0.0   2021-08-13 [1] CRAN (R 4.1.1)
#&amp;gt;  parsnip    * 1.0.0   2022-06-16 [1] CRAN (R 4.1.2)
#&amp;gt;  purrr      * 0.3.4   2020-04-17 [1] CRAN (R 4.1.0)
#&amp;gt;  recipes    * 0.2.0   2022-02-18 [1] CRAN (R 4.1.1)
#&amp;gt;  rlang        1.0.2   2022-03-04 [1] CRAN (R 4.1.2)
#&amp;gt;  rsample    * 0.1.1   2021-11-08 [1] CRAN (R 4.1.2)
#&amp;gt;  tibble     * 3.1.7   2022-05-03 [1] CRAN (R 4.1.1)
#&amp;gt;  tidymodels * 0.2.0   2022-03-19 [1] CRAN (R 4.1.2)
#&amp;gt;  tune       * 0.2.0   2022-03-19 [1] CRAN (R 4.1.2)
#&amp;gt;  workflows  * 0.2.6   2022-03-18 [1] CRAN (R 4.1.1)
#&amp;gt;  yardstick  * 0.0.9   2021-11-22 [1] CRAN (R 4.1.1)
#&amp;gt; 
#&amp;gt;  [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library
#&amp;gt; 
#&amp;gt; ────────────────────────────────────────────────────────────────────
&lt;/code&gt;&lt;/pre&gt;</description>
  </item>
  
<item>
  <title>Multivariate analysis using partial least squares</title>
  <link>https://www.tidymodels.org/learn/models/pls/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/learn/models/pls/</guid>
  <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;To use the code in this article, you will need to install the following packages: modeldata, pls, and tidymodels.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Multivariate analysis&amp;rdquo; usually refers to multiple &lt;em&gt;outcomes&lt;/em&gt; being modeled, analyzed, and/or predicted. There are multivariate versions of many common statistical tools. For example, suppose there was a data set with columns &lt;code&gt;y1&lt;/code&gt; and &lt;code&gt;y2&lt;/code&gt; representing two outcomes to be predicted. The &lt;code&gt;lm()&lt;/code&gt; function would look something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;lm&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;cbind&lt;/span&gt;(y1, y2) &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; ., data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; dat)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This &lt;code&gt;cbind()&lt;/code&gt; call is pretty awkward and is a consequence of how the traditional formula infrastructure works. The recipes package is a lot easier to work with! This article demonstrates how to model multiple outcomes.&lt;/p&gt;
&lt;p&gt;The data that we&amp;rsquo;ll use has three outcomes. From &lt;code&gt;?modeldata::meats&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;These data are recorded on a Tecator Infratec Food and Feed Analyzer working in the wavelength range 850 - 1050 nm by the Near Infrared Transmission (NIT) principle. Each sample contains finely chopped pure meat with different moisture, fat and protein contents.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;For each meat sample the data consists of a 100 channel spectrum of absorbances and the contents of moisture (water), fat and protein. The absorbance is &lt;code&gt;-log10&lt;/code&gt; of the transmittance measured by the spectrometer. The three contents, measured in percent, are determined by analytic chemistry.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The goal is to predict the proportion of the three substances using the chemistry test. There can often be a high degree of between-variable correlations in predictors, and that is certainly the case here.&lt;/p&gt;
&lt;p&gt;To start, let&amp;rsquo;s take the two data matrices (called &lt;code&gt;endpoints&lt;/code&gt; and &lt;code&gt;absorp&lt;/code&gt;) and bind them together in a data frame:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(modeldata)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;data&lt;/span&gt;(meats)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The three &lt;em&gt;outcomes&lt;/em&gt; have fairly high correlations also.&lt;/p&gt;
&lt;h2 id=&#34;preprocessing-the-data&#34;&gt;Preprocessing the data&lt;/h2&gt;
&lt;p&gt;If the outcomes can be predicted using a linear model, partial least squares (PLS) is an ideal method. PLS models the data as a function of a set of unobserved &lt;em&gt;latent&lt;/em&gt; variables that are derived in a manner similar to principal component analysis (PCA).&lt;/p&gt;
&lt;p&gt;PLS, unlike PCA, also incorporates the outcome data when creating the PLS components. Like PCA, it tries to maximize the variance of the predictors that are explained by the components but it also tries to simultaneously maximize the correlation between those components and the outcomes. In this way, PLS &lt;em&gt;chases&lt;/em&gt; variation of the predictors and outcomes.&lt;/p&gt;
&lt;p&gt;Since we are working with variances and covariances, we need to standardize the data. The recipe will center and scale all of the variables.&lt;/p&gt;
&lt;p&gt;Many base R functions that deal with multivariate outcomes using a formula require the use of &lt;code&gt;cbind()&lt;/code&gt; on the left-hand side of the formula to work with the traditional formula methods. In tidymodels, recipes do not; the outcomes can be symbolically &amp;ldquo;added&amp;rdquo; together on the left-hand side:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;norm_rec &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;recipe&lt;/span&gt;(water &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; fat &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; protein &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; ., data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; meats) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;step_normalize&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;everything&lt;/span&gt;()) 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Before we can finalize the PLS model, the number of PLS components to retain must be determined. This can be done using performance metrics such as the root mean squared error. However, we can also calculate the proportion of variance explained by the components for the &lt;em&gt;predictors and each of the outcomes&lt;/em&gt;. This allows an informed choice to be made based on the level of evidence that the situation requires.&lt;/p&gt;
&lt;p&gt;Since the data set isn&amp;rsquo;t large, let&amp;rsquo;s use resampling to measure these proportions. With ten repeats of 10-fold cross-validation, we build the PLS model on 90% of the data and evaluate on the heldout 10%. For each of the 100 models, we extract and save the proportions.&lt;/p&gt;
&lt;p&gt;The folds can be created using the &lt;a href=&#34;https://rsample.tidymodels.org/&#34;&gt;rsample&lt;/a&gt; package and the recipe can be estimated for each resample using the &lt;a href=&#34;https://rsample.tidymodels.org/reference/prepper.html&#34;&gt;&lt;code&gt;prepper()&lt;/code&gt;&lt;/a&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;57343&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;folds &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;vfold_cv&lt;/span&gt;(meats, repeats &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;folds &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  folds &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(recipes &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;(splits, prepper, recipe &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; norm_rec))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;partial-least-squares&#34;&gt;Partial least squares&lt;/h2&gt;
&lt;p&gt;The complicated parts for moving forward are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Formatting the predictors and outcomes into the format that the pls package requires, and&lt;/li&gt;
&lt;li&gt;Estimating the proportions.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For the first part, the standardized outcomes and predictors need to be formatted into two separate matrices. Since we used &lt;code&gt;retain = TRUE&lt;/code&gt; when prepping the recipes, we can &lt;code&gt;bake()&lt;/code&gt; with &lt;code&gt;new_data = NULl&lt;/code&gt; to get the processed data back out. To save the data as a matrix, the option &lt;code&gt;composition = &amp;quot;matrix&amp;quot;&lt;/code&gt; will avoid saving the data as tibbles and use the required format.&lt;/p&gt;
&lt;p&gt;The pls package expects a simple formula to specify the model, but each side of the formula should &lt;em&gt;represent a matrix&lt;/em&gt;. In other words, we need a data set with two columns where each column is a matrix. The secret to doing this is to &amp;ldquo;protect&amp;rdquo; the two matrices using &lt;code&gt;I()&lt;/code&gt; when adding them to the data frame.&lt;/p&gt;
&lt;p&gt;The calculation for the proportion of variance explained is straightforward for the predictors; the function &lt;code&gt;pls::explvar()&lt;/code&gt; will compute that. For the outcomes, the process is more complicated. A ready-made function to compute these is not obvious but there is some code inside of the summary function to do the computation (see below).&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;get_var_explained()&lt;/code&gt; shown here will do all these computations and return a data frame with columns &lt;code&gt;components&lt;/code&gt;, &lt;code&gt;source&lt;/code&gt; (for the predictors, water, etc), and the &lt;code&gt;proportion&lt;/code&gt; of variance that is explained by the components.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;library&lt;/span&gt;(pls)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;get_var_explained &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt;(recipe, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;...&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Extract the predictors and outcomes into their own matrices&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  y_mat &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;bake&lt;/span&gt;(recipe, new_data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;, composition &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;matrix&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#00f&#34;&gt;all_outcomes&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  x_mat &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;bake&lt;/span&gt;(recipe, new_data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;, composition &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;matrix&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#00f&#34;&gt;all_predictors&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# The pls package prefers the data in a data frame where the outcome&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# and predictors are in _matrices_. To make sure this is formatted&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# properly, use the `I()` function to inhibit `data.frame()` from making&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# all the individual columns. `pls_format` should have two columns.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  pls_format &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;data.frame&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    endpoints &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;I&lt;/span&gt;(y_mat),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    measurements &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;I&lt;/span&gt;(x_mat)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Fit the model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  mod &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;plsr&lt;/span&gt;(endpoints &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt; measurements, data &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; pls_format)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Get the proportion of the predictor variance that is explained&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# by the model for different number of components. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  xve &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;explvar&lt;/span&gt;(mod)&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# To do the same for the outcome, it is more complex. This code &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# was extracted from pls:::summary.mvr. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  explained &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;drop&lt;/span&gt;(pls&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;R2&lt;/span&gt;(mod, estimate &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;train&amp;#34;&lt;/span&gt;, intercept &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FALSE&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;$&lt;/span&gt;val) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# transpose so that components are in rows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;t&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;as_tibble&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Add the predictor proportions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(predictors &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;cumsum&lt;/span&gt;(xve) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;as.vector&lt;/span&gt;(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           components &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;seq_along&lt;/span&gt;(xve)) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Put into a tidy format that is tall&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;pivot_longer&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      cols &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;components),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      names_to &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;source&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      values_to &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;proportion&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We compute this data frame for each resample and save the results in the different columns.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;folds &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  folds &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;mutate&lt;/span&gt;(var &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;(recipes, get_var_explained),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         var &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;unname&lt;/span&gt;(var))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To extract and aggregate these data, simple row binding can be used to stack the data vertically. Most of the action happens in the first 15 components so let&amp;rsquo;s filter the data and compute the &lt;em&gt;average&lt;/em&gt; proportion.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;variance_data &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;bind_rows&lt;/span&gt;(folds[[&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;var&amp;#34;&lt;/span&gt;]]) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;filter&lt;/span&gt;(components &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;15&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;group_by&lt;/span&gt;(components, source) &lt;span style=&#34;color:#666&#34;&gt;%&amp;gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;summarize&lt;/span&gt;(proportion &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;mean&lt;/span&gt;(proportion))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The plot below shows that, if the protein measurement is important, you might require 10 or so components to achieve a good representation of that outcome. Note that the predictor variance is captured extremely well using a single component. This is due to the high degree of correlation in those data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;ggplot&lt;/span&gt;(variance_data, &lt;span style=&#34;color:#00f&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; components, y &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; proportion, col &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; source)) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_line&lt;/span&gt;(alpha &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.5&lt;/span&gt;, size &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1.2&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;geom_point&lt;/span&gt;() 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;figs/plot-1.svg&#34; width=&#34;100%&#34; /&gt;
&lt;h2 id=&#34;session-information&#34;&gt;Session information&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#&amp;gt; ─ Session info ─────────────────────────────────────────────────────
#&amp;gt;  setting  value
#&amp;gt;  version  R version 4.1.2 (2021-11-01)
#&amp;gt;  os       macOS Monterey 12.3
#&amp;gt;  system   aarch64, darwin20
#&amp;gt;  ui       X11
#&amp;gt;  language (EN)
#&amp;gt;  collate  en_GB.UTF-8
#&amp;gt;  ctype    en_GB.UTF-8
#&amp;gt;  tz       Europe/London
#&amp;gt;  date     2022-04-11
#&amp;gt;  pandoc   2.14.0.3 @ /Applications/RStudio.app/Contents/MacOS/pandoc/ (via rmarkdown)
#&amp;gt; 
#&amp;gt; ─ Packages ─────────────────────────────────────────────────────────
#&amp;gt;  package    * version date (UTC) lib source
#&amp;gt;  broom      * 0.7.12  2022-01-28 [1] CRAN (R 4.1.1)
#&amp;gt;  dials      * 0.1.1   2022-04-06 [1] CRAN (R 4.1.2)
#&amp;gt;  dplyr      * 1.0.8   2022-02-08 [1] CRAN (R 4.1.2)
#&amp;gt;  ggplot2    * 3.3.5   2021-06-25 [1] CRAN (R 4.1.1)
#&amp;gt;  infer      * 1.0.0   2021-08-13 [1] CRAN (R 4.1.1)
#&amp;gt;  modeldata  * 0.1.1   2021-07-14 [1] CRAN (R 4.1.2)
#&amp;gt;  parsnip    * 0.2.1   2022-03-17 [1] CRAN (R 4.1.1)
#&amp;gt;  pls        * 2.8-0   2021-09-03 [1] CRAN (R 4.1.2)
#&amp;gt;  purrr      * 0.3.4   2020-04-17 [1] CRAN (R 4.1.0)
#&amp;gt;  recipes    * 0.2.0   2022-02-18 [1] CRAN (R 4.1.1)
#&amp;gt;  rlang        1.0.2   2022-03-04 [1] CRAN (R 4.1.1)
#&amp;gt;  rsample    * 0.1.1   2021-11-08 [1] CRAN (R 4.1.2)
#&amp;gt;  tibble     * 3.1.6   2021-11-07 [1] CRAN (R 4.1.1)
#&amp;gt;  tidymodels * 0.2.0   2022-03-19 [1] CRAN (R 4.1.1)
#&amp;gt;  tune       * 0.2.0   2022-03-19 [1] CRAN (R 4.1.2)
#&amp;gt;  workflows  * 0.2.6   2022-03-18 [1] CRAN (R 4.1.2)
#&amp;gt;  yardstick  * 0.0.9   2021-11-22 [1] CRAN (R 4.1.1)
#&amp;gt; 
#&amp;gt;  [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library
#&amp;gt; 
#&amp;gt; ────────────────────────────────────────────────────────────────────
&lt;/code&gt;&lt;/pre&gt;</description>
  </item>
  
<item>
  <title>Get Help</title>
  <link>https://www.tidymodels.org/help/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/help/</guid>
  <description>&lt;h2 id=&#34;asking-for-help&#34;&gt;Asking for help&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;re asking for R help, reporting a bug, or requesting a new feature, you&amp;rsquo;re more likely to succeed if you include a good reproducible example, which is precisely what the &lt;a href=&#34;https://reprex.tidyverse.org/&#34;&gt;reprex&lt;/a&gt; package is built for. You can learn more about reprex, along with other tips on how to help others help you in the &lt;a href=&#34;https://www.tidyverse.org/help/&#34;&gt;tidyverse.org help section&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;where-to-ask&#34;&gt;Where to ask&lt;/h2&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/allisonhorst/stats-illustrations/master/rstats-artwork/reprex.png&#34; alt=&#34;&#34; width=&#34;400&#34; height=&#34;285&#34; align=&#34;right&#34; style=&#34;padding:1em;&#34; /&gt;
&lt;p&gt;Now that you&amp;rsquo;ve made a reprex, you need to share it in an appropriate forum. Here are some options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://community.rstudio.com/c/ml/15&#34;&gt;&lt;strong&gt;community.rstudio.com&lt;/strong&gt;&lt;/a&gt;: This is a warm
and welcoming place to ask any questions you might have about
tidymodels or more generally about modeling, machine learning, and deep learning. (You can also ask questions about the tidyverse and RStudio there, too!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/tagged/tidymodels&#34;&gt;&lt;strong&gt;Stack Overflow&lt;/strong&gt;&lt;/a&gt;. You&amp;rsquo;re probably already familiar
with Stack Overflow from googling; it&amp;rsquo;s a frequent source of answers to
coding related questions. Asking a question on Stack Overflow can be
intimidating, but if you&amp;rsquo;ve taken the time to create a reprex, you&amp;rsquo;re much
more likely to get a useful answer. Make sure to &lt;a href=&#34;https://stackoverflow.com/help/tagging&#34;&gt;tag your question&lt;/a&gt; with &lt;code&gt;r&lt;/code&gt;
and &lt;code&gt;tidymodels&lt;/code&gt; so that the right people are more likely to see it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/search?q=%23rstats&amp;amp;src=typd&#34;&gt;&lt;strong&gt;Twitter&lt;/strong&gt;&lt;/a&gt;. It&amp;rsquo;s hard to share your reprex only on twitter, because 280 characters are rarely enough and screenshots don&amp;rsquo;t help others play with your code. However, twitter is a great place to share a link to your reprex that&amp;rsquo;s hosted elsewhere! The &lt;a href=&#34;https://twitter.com/search?q=%23rstats&amp;amp;src=typd&#34;&gt;#rstats twitter&lt;/a&gt; community is extremely friendly and active, and is a great crowd to be a part of. Make sure you tag your tweet with &lt;code&gt;#rstats&lt;/code&gt; and &lt;code&gt;#tidymodels&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you think you&amp;rsquo;ve found a &lt;strong&gt;bug&lt;/strong&gt;, please follow the instructions for filing an issue on
&lt;a href=&#34;https://www.tidymodels.org/contribute/&#34;&gt;contributing to tidymodels&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;See what you need to know to &lt;a href=&#34;https://www.tidymodels.org/start/&#34;&gt;get started with tidymodels&lt;/a&gt;, and learn more about &lt;a href=&#34;https://www.tidymodels.org/learn/&#34;&gt;using tidymodels for specific tasks&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each tidymodels package has its own documentation site, full of helpful information. Find &lt;a href=&#34;https://www.tidymodels.org/packages/&#34;&gt;links to all package documentation sites&lt;/a&gt; and explore them!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Search &lt;a href=&#34;https://www.tidymodels.org/find/&#34;&gt;all tidymodels functions&lt;/a&gt;, and check out &lt;a href=&#34;https://www.tidymodels.org/books/&#34;&gt;our books on these topics&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stay up to date with the latest news about tidymodels through our posts on the &lt;a href=&#34;https://www.tidyverse.org/tags/tidymodels/&#34;&gt;tidyverse blog&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
  </item>
  
<item>
  <title>How to contribute to tidymodels</title>
  <link>https://www.tidymodels.org/contribute/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/contribute/</guid>
  <description>&lt;p&gt;The ecosystem of tidymodels packages would not be possible without the contributions of the R community. No matter your current skills, it&amp;rsquo;s possible to contribute back to tidymodels. Contributions are guided by our design goals.&lt;/p&gt;
&lt;h2 id=&#34;design-goals&#34;&gt;Design goals&lt;/h2&gt;
&lt;p&gt;The goals of tidymodels packages are to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Encourage empirical validation and good statistical practice.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Smooth out heterogeneous interfaces.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Establish highly reusable infrastructure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enable a wider variety of methodologies.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Help package developers quickly build high quality model packages of their own.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These goals are guided by our &lt;a href=&#34;https://tidymodels.github.io/model-implementation-principles/&#34;&gt;principles for creating modeling packages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What are different ways &lt;em&gt;you&lt;/em&gt; can contribute?&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;answer-questions&#34;&gt;Answer questions&lt;/h2&gt;
&lt;p&gt;You can help others use and learn tidymodels by answering questions on the &lt;a href=&#34;https://community.rstudio.com/tag/tidymodels&#34;&gt;RStudio community site&lt;/a&gt;, &lt;a href=&#34;https://stackoverflow.com/questions/tagged/tidymodels?sort=newest&#34;&gt;Stack Overflow&lt;/a&gt;, and &lt;a href=&#34;https://twitter.com/search?q=%23tidymodels&amp;amp;f=live&#34;&gt;Twitter&lt;/a&gt;. Many people asking for help with tidymodels don&amp;rsquo;t know what a &lt;a href=&#34;https://www.tidyverse.org/help#reprex&#34;&gt;reprex&lt;/a&gt; is or how to craft one. Acknowledging an individual&amp;rsquo;s problem, showing them how to build a reprex, and pointing them to helpful resources are all enormously beneficial, even if you don&amp;rsquo;t immediately solve their problem.&lt;/p&gt;
&lt;p&gt;Remember that while you might have seen a problem a hundred times before, it&amp;rsquo;s new to the person asking it. Be patient, polite, and empathic.&lt;/p&gt;
&lt;h2 id=&#34;file-issues&#34;&gt;File issues&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;ve found a bug, first create a minimal &lt;a href=&#34;https://www.tidyverse.org/help#reprex&#34;&gt;reprex&lt;/a&gt;. Spend some time working to make it as minimal as possible; the more time you spend doing this, the easier it is to fix the bug. When your reprex is ready, file it on the &lt;a href=&#34;https://github.com/tidymodels/&#34;&gt;GitHub repo&lt;/a&gt; of the appropriate package.&lt;/p&gt;
&lt;p&gt;The tidymodels team often focuses on one package at a time to reduce context switching and be more efficient. We may not address each issue right away, but we will use the reprex you create to understand your problem when it is time to focus on that package.&lt;/p&gt;
&lt;h2 id=&#34;contribute-documentation&#34;&gt;Contribute documentation&lt;/h2&gt;
&lt;p&gt;Documentation is a high priority for tidymodels, and pull requests to correct or improve documentation are welcome. The most important thing to know is that tidymodels packages use &lt;a href=&#34;https://roxygen2.r-lib.org/&#34;&gt;roxygen2&lt;/a&gt;; this means that documentation is found in the R code close to the source of each function. There are some special tags, but most tidymodels packages now use markdown in the documentation. This makes it particularly easy to get started!&lt;/p&gt;
&lt;h2 id=&#34;contribute-code&#34;&gt;Contribute code&lt;/h2&gt;
&lt;p&gt;If you are a more experienced R programmer, you may have the inclination, interest, and ability to contribute directly to package development. Before you submit a pull request on a tidymodels package, always file an issue and confirm the tidymodels team agrees with your idea and is happy with your basic proposal.&lt;/p&gt;
&lt;p&gt;In tidymodels packages, we use the &lt;a href=&#34;https://style.tidyverse.org/&#34;&gt;tidyverse style guide&lt;/a&gt; which will make sure that your new code and documentation matches the existing style. This makes the review process much smoother.&lt;/p&gt;
&lt;p&gt;The tidymodels packages are explicitly built to support the creation of other modeling packages, and we would love to hear about what you build yourself! Check out our learning resources for &lt;a href=&#34;https://www.tidymodels.org/learn/develop/&#34;&gt;developing custom modeling tools&lt;/a&gt;.&lt;/p&gt;
</description>
  </item>
  
<item>
  <title>Learn tidymodels</title>
  <link>https://www.tidymodels.org/home/band_two/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/home/band_two/</guid>
  <description>&lt;p&gt;Whether you are just starting out today or have years of experience with modeling, tidymodels offers a consistent, flexible framework for your work.&lt;/p&gt;
</description>
  </item>
  
<item>
  <title>Stay up to date</title>
  <link>https://www.tidymodels.org/home/band_three/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/home/band_three/</guid>
  <description>&lt;p&gt;Hear about the latest tidymodels news at the &lt;a href=&#34;https://www.tidyverse.org/tags/tidymodels/&#34; target=&#34;_blank&#34;&gt;tidyverse blog&lt;/a&gt;.&lt;/p&gt;
</description>
  </item>
  
<item>
  <title>tidymodels</title>
  <link>https://www.tidymodels.org/home/band_one/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/home/band_one/</guid>
  <description>&lt;p&gt;The tidymodels framework is a collection of packages for modeling and machine learning using &lt;a href=&#34;https://www.tidyverse.org/&#34;&gt;tidyverse&lt;/a&gt; principles.&lt;/p&gt;
&lt;p&gt;Install tidymodels with:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-{r,&#34; data-lang=&#34;{r,&#34;&gt;install.packages(&amp;#34;tidymodels&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;</description>
  </item>
  
<item>
  <title>Tidymodels packages</title>
  <link>https://www.tidymodels.org/packages/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
  
<guid>https://www.tidymodels.org/packages/</guid>
  <description>&lt;h2 id=&#34;installation-and-use&#34;&gt;Installation and use&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Install many of the packages in the tidymodels ecosystem by running &lt;code&gt;install.packages(&amp;quot;tidymodels&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;library(tidymodels)&lt;/code&gt; to load the core packages and make them available in your current R session.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;package-section&#34;&gt;
&lt;div class=&#34;package-section-info&#34;&gt;
&lt;h2 id=&#34;core-tidymodels&#34;&gt;Core tidymodels&lt;/h2&gt;
  &lt;p&gt;The core tidymodels packages work together to enable a wide variety of modeling approaches:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;packages&#34;&gt;
  &lt;div class=&#34;package&#34;&gt;
    &lt;img class=&#34;package-image&#34; src=&#34;https://www.tidymodels.org/images/tidymodels.png&#34; alt=&#34;&#34;&gt;&lt;/img&gt;
    &lt;div class=&#34;package-info&#34;&gt;
      &lt;h3&gt;&lt;a href=&#34;https://tidymodels.tidymodels.org/&#34;&gt; tidymodels &lt;/a&gt;&lt;/h3&gt;
      &lt;p&gt;tidymodels is a meta-package that installs and load the core packages listed below that you need for modeling and machine learning.
      &lt;a href=&#34;https://tidymodels.tidymodels.org/&#34; aria-hidden=&#34;true&#34;&gt;Go to package ...&lt;/a&gt;&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&#34;package&#34;&gt;
    &lt;img class=&#34;package-image&#34; src=&#34;https://www.tidymodels.org/images/rsample.png&#34; alt=&#34;&#34;&gt;&lt;/img&gt;
    &lt;div class=&#34;package-info&#34;&gt;
      &lt;h3&gt;&lt;a href=&#34;https://rsample.tidymodels.org/&#34;&gt;rsample&lt;/a&gt;&lt;/h3&gt;
      &lt;p&gt;rsample provides infrastructure for efficient data splitting and resampling. &lt;a href=&#34;https://rsample.tidymodels.org/&#34; aria-hidden=&#34;true&#34;&gt;Go to package ...&lt;/a&gt;&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&#34;package&#34;&gt;
    &lt;img class=&#34;package-image&#34; src=&#34;https://www.tidymodels.org/images/parsnip.png&#34; alt=&#34;&#34;&gt;&lt;/img&gt;
    &lt;div class=&#34;package-info&#34;&gt;
      &lt;h3&gt;&lt;a href=&#34;https://parsnip.tidymodels.org/&#34;&gt; parsnip &lt;/a&gt;&lt;/h3&gt;
      &lt;p&gt;parsnip is a tidy, unified interface to models that can be used to try a range of models without getting bogged down in the syntactical minutiae of the underlying packages. &lt;a href=&#34;https://parsnip.tidymodels.org/&#34; aria-hidden=&#34;true&#34;&gt;Go to package ...&lt;/a&gt;&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;  
  &lt;div class=&#34;package&#34;&gt;
    &lt;img class=&#34;package-image&#34; src=&#34;https://www.tidymodels.org/images/recipes.png&#34; alt=&#34;&#34;&gt;&lt;/img&gt;
    &lt;div class=&#34;package-info&#34;&gt;
      &lt;h3&gt;&lt;a href=&#34;https://recipes.tidymodels.org/&#34;&gt; recipes &lt;/a&gt;&lt;/h3&gt;
      &lt;p&gt;recipes is a tidy interface to data pre-processing tools for feature engineering. &lt;a href=&#34;https://recipes.tidymodels.org/&#34; aria-hidden=&#34;true&#34;&gt;Go to package ...&lt;/a&gt;&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&#34;package&#34;&gt;
    &lt;img class=&#34;package-image&#34; src=&#34;https://www.tidymodels.org/images/workflows.png&#34; alt=&#34;&#34;&gt;&lt;/img&gt;
    &lt;div class=&#34;package-info&#34;&gt;
      &lt;h3&gt;&lt;a href=&#34;https://workflows.tidymodels.org/&#34;&gt; workflows &lt;/a&gt;&lt;/h3&gt;
      &lt;p&gt;workflows bundle your pre-processing, modeling, and post-processing together. &lt;a href=&#34;https://workflows.tidymodels.org/&#34; aria-hidden=&#34;true&#34;&gt;Go to package ...&lt;/a&gt;&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt; 
  &lt;div class=&#34;package&#34;&gt;
    &lt;img class=&#34;package-image&#34; src=&#34;https://www.tidymodels.org/images/tune.png&#34; alt=&#34;&#34;&gt;&lt;/img&gt;
    &lt;div class=&#34;package-info&#34;&gt;
      &lt;h3&gt;&lt;a href=&#34;https://tune.tidymodels.org/&#34;&gt; tune &lt;/a&gt;&lt;/h3&gt;
      &lt;p&gt;tune helps you optimize the hyperparameters of your model and pre-processing steps. &lt;a href=&#34;https://tune.tidymodels.org/&#34; aria-hidden=&#34;true&#34;&gt;Go to package ...&lt;/a&gt;&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;  
  &lt;div class=&#34;package&#34;&gt;
    &lt;img class=&#34;package-image&#34; src=&#34;https://www.tidymodels.org/images/yardstick.png&#34; alt=&#34;&#34;&gt;&lt;/img&gt;
    &lt;div class=&#34;package-info&#34;&gt;
      &lt;h3&gt;&lt;a href=&#34;https://yardstick.tidymodels.org/&#34;&gt; yardstick &lt;/a&gt;&lt;/h3&gt;
      &lt;p&gt;yardstick measures the effectiveness of models using performance metrics. &lt;a href=&#34;https://yardstick.tidymodels.org/&#34; aria-hidden=&#34;true&#34;&gt;Go to package ...&lt;/a&gt;&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&#34;package&#34;&gt;
    &lt;img class=&#34;package-image&#34; src=&#34;https://www.tidymodels.org/images/broom.png&#34; alt=&#34;&#34;&gt;&lt;/img&gt;
    &lt;div class=&#34;package-info&#34;&gt;
      &lt;h3&gt;&lt;a href=&#34;https://broom.tidymodels.org/&#34;&gt; broom &lt;/a&gt;&lt;/h3&gt;
      &lt;p&gt;broom converts the information in common statistical R objects into user-friendly, predictable formats. 
      &lt;a href=&#34;https://broom.tidymodels.org/&#34; aria-hidden=&#34;true&#34;&gt;Go to package ...&lt;/a&gt;&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&#34;package&#34;&gt;
    &lt;img class=&#34;package-image&#34; src=&#34;https://www.tidymodels.org/images/dials.png&#34; alt=&#34;&#34;&gt;&lt;/img&gt;
    &lt;div class=&#34;package-info&#34;&gt;
      &lt;h3&gt;&lt;a href=&#34;https://dials.tidymodels.org/&#34;&gt; dials &lt;/a&gt;&lt;/h3&gt;
      &lt;p&gt;dials creates and manages tuning parameters and parameter grids. 
      &lt;a href=&#34;https://dials.tidymodels.org/&#34; aria-hidden=&#34;true&#34;&gt;Go to package ...&lt;/a&gt;&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;  
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Learn more about the tidymodels metapackage itself at &lt;a href=&#34;https://tidymodels.tidymodels.org/&#34;&gt;https://tidymodels.tidymodels.org/&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;specialized-packages&#34;&gt;Specialized packages&lt;/h2&gt;
&lt;p&gt;The tidymodels framework also includes many other packages designed for specialized data analysis and modeling tasks. They are not loaded automatically with &lt;code&gt;library(tidymodels)&lt;/code&gt;, so you&amp;rsquo;ll need to load each one with its own call to &lt;code&gt;library()&lt;/code&gt;. These packages include:&lt;/p&gt;
&lt;h3 id=&#34;perform-statistical-analysislearnstatistics&#34;&gt;&lt;a href=&#34;https://www.tidymodels.org/learn/statistics/&#34;&gt;Perform statistical analysis&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://infer.tidymodels.org/&#34;&gt;infer&lt;/a&gt; is a high-level API for tidyverse-friendly statistical inference.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href=&#34;https://corrr.tidymodels.org/&#34;&gt;corrr&lt;/a&gt; package has tidy interfaces for working with correlation matrices.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;create-robust-modelslearnmodels&#34;&gt;&lt;a href=&#34;https://www.tidymodels.org/learn/models/&#34;&gt;Create robust models&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href=&#34;http://spatialsample.tidymodels.org/&#34;&gt;spatialsample&lt;/a&gt; package provides resampling functions and classes like rsample, but specialized for spatial data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;parsnip also has additional packages that contain more model definitions. &lt;a href=&#34;https://discrim.tidymodels.org/&#34;&gt;discrim&lt;/a&gt; contains definitions for discriminant analysis models, &lt;a href=&#34;https://poissonreg.tidymodels.org/&#34;&gt;poissonreg&lt;/a&gt; provides definitions for Poisson regression models, &lt;a href=&#34;https://plsmod.tidymodels.org/&#34;&gt;plsmod&lt;/a&gt; enables linear projection models, and &lt;a href=&#34;https://rules.tidymodels.org/&#34;&gt;rules&lt;/a&gt; does the same for rule-based classification and regression models. &lt;a href=&#34;https://baguette.tidymodels.org/&#34;&gt;baguette&lt;/a&gt; creates ensemble models via bagging, and &lt;a href=&#34;https://multilevelmod.tidymodels.org/&#34;&gt;multilevelmod&lt;/a&gt; provides support for multilevel models (otherwise known as mixed models or hierarchical models).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are several add-on packages for creating recipes. &lt;a href=&#34;https://embed.tidymodels.org/&#34;&gt;embed&lt;/a&gt; contains steps to create embeddings or projections of predictors. &lt;a href=&#34;https://textrecipes.tidymodels.org/&#34;&gt;textrecipes&lt;/a&gt; has extra steps for text processing, and &lt;a href=&#34;https://themis.tidymodels.org/&#34;&gt;themis&lt;/a&gt; can help alleviate class imbalance using sampling methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://tidypredict.tidymodels.org/&#34;&gt;tidypredict&lt;/a&gt; and &lt;a href=&#34;https://modeldb.tidymodels.org/&#34;&gt;modeldb&lt;/a&gt; can convert prediction equations to different languages (e.g. SQL) and fit some models in-database.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tune-compare-and-work-with-your-modelslearnwork&#34;&gt;&lt;a href=&#34;https://www.tidymodels.org/learn/work/&#34;&gt;Tune, compare, and work with your models&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To try out multiple different workflows (i.e. bundles of pre-processor and model) at once, &lt;a href=&#34;https://workflowsets.tidymodels.org/&#34;&gt;workflowsets&lt;/a&gt; lets you create sets of workflow objects for tuning and resampling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To integrate predictions from many models, the &lt;a href=&#34;https://stacks.tidymodels.org/&#34;&gt;stacks&lt;/a&gt; package provides tools for stacked ensemble modeling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href=&#34;https://finetune.tidymodels.org/&#34;&gt;finetune&lt;/a&gt; package extends the tune package with more approaches such as racing and simulated annealing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href=&#34;https://usemodels.tidymodels.org/&#34;&gt;usemodels&lt;/a&gt; package creates templates and automatically generates code to fit and tune models.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://probably.tidymodels.org/&#34;&gt;probably&lt;/a&gt; has tools for post-processing class probability estimates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href=&#34;https://tidyposterior.tidymodels.org/&#34;&gt;tidyposterior&lt;/a&gt; package enables users to make formal statistical comparisons between models using resampling and Bayesian methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some R objects become inconveniently large when saved to disk. The &lt;a href=&#34;https://butcher.tidymodels.org/&#34;&gt;butcher&lt;/a&gt; package can reduce the size of those objects by removing the sub-components.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To know whether the data that you are predicting are &lt;em&gt;extrapolations&lt;/em&gt; from the training set, &lt;a href=&#34;https://applicable.tidymodels.org/&#34;&gt;applicable&lt;/a&gt; can produce metrics that measure extrapolation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://shinymodels.tidymodels.org/&#34;&gt;shinymodels&lt;/a&gt; lets you explore tuning or resampling results via a Shiny app.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;develop-custom-modeling-toolslearndevelop&#34;&gt;&lt;a href=&#34;https://www.tidymodels.org/learn/develop/&#34;&gt;Develop custom modeling tools&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hardhat.tidymodels.org/&#34;&gt;hardhat&lt;/a&gt; is a &lt;em&gt;developer-focused&lt;/em&gt; package that helps beginners create high-quality R packages for modeling.&lt;/li&gt;
&lt;/ul&gt;
</description>
  </item>
  
</channel>
  </rss>
